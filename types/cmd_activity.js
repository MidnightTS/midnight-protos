"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SelectAsterMidDifficultyRsp_CmdId = exports.SelectAsterMidDifficultyReq_CmdId = exports.FinishDeliveryNotify_CmdId = exports.TakeDeliveryDailyRewardRsp_CmdId = exports.TakeDeliveryDailyRewardReq_CmdId = exports.TrialAvatarInDungeonIndexNotify_CmdId = exports.TrialAvatarFirstPassDungeonNotify_CmdId = exports.ReceivedTrialAvatarActivityRewardRsp_CmdId = exports.ReceivedTrialAvatarActivityRewardReq_CmdId = exports.EnterTrialAvatarActivityDungeonRsp_CmdId = exports.EnterTrialAvatarActivityDungeonReq_CmdId = exports.GetAuthSalesmanInfoRsp_CmdId = exports.GetAuthSalesmanInfoReq_CmdId = exports.SalesmanTakeSpecialRewardRsp_CmdId = exports.SalesmanTakeSpecialRewardReq_CmdId = exports.ActivityCondStateChangeNotify_CmdId = exports.SalesmanTakeRewardRsp_CmdId = exports.SalesmanTakeRewardReq_CmdId = exports.SalesmanDeliverItemRsp_CmdId = exports.SalesmanDeliverItemReq_CmdId = exports.ActivityBannerClearRsp_CmdId = exports.ActivityBannerClearReq_CmdId = exports.ActivityBannerNotify_CmdId = exports.ServerAnnounceRevokeNotify_CmdId = exports.ServerAnnounceNotify_CmdId = exports.LoadActivityTerrainNotify_CmdId = exports.SeaLampPopularityNotify_CmdId = exports.SeaLampCoinNotify_CmdId = exports.SeaLampFlyLampNotify_CmdId = exports.SeaLampContributeItemRsp_CmdId = exports.SeaLampContributeItemReq_CmdId = exports.SeaLampTakePhaseRewardRsp_CmdId = exports.SeaLampTakePhaseRewardReq_CmdId = exports.SeaLampTakeContributionRewardRsp_CmdId = exports.SeaLampTakeContributionRewardReq_CmdId = exports.SeaLampFlyLampRsp_CmdId = exports.SeaLampFlyLampReq_CmdId = exports.ActivityCoinInfoNotify_CmdId = exports.ActivitySelectAvatarCardRsp_CmdId = exports.ActivitySelectAvatarCardReq_CmdId = exports.ActivityUpdateWatcherNotify_CmdId = exports.ActivityTakeWatcherRewardRsp_CmdId = exports.ActivityTakeWatcherRewardReq_CmdId = exports.ActivityScheduleInfoNotify_CmdId = exports.ActivityInfoNotify_CmdId = exports.ActivityPlayOpenAnimNotify_CmdId = exports.GetActivityInfoRsp_CmdId = exports.GetActivityInfoReq_CmdId = exports.GetActivityScheduleRsp_CmdId = exports.GetActivityScheduleReq_CmdId = void 0;
exports.BlessingAcceptAllGivePicRsp_CmdId = exports.BlessingAcceptAllGivePicReq_CmdId = exports.BlessingRecvFriendPicNotify_CmdId = exports.BlessingGetAllRecvPicRecordListRsp_CmdId = exports.BlessingGetAllRecvPicRecordListReq_CmdId = exports.BlessingAcceptGivePicRsp_CmdId = exports.BlessingAcceptGivePicReq_CmdId = exports.BlessingGiveFriendPicRsp_CmdId = exports.BlessingGiveFriendPicReq_CmdId = exports.BlessingGetFriendPicListRsp_CmdId = exports.BlessingGetFriendPicListReq_CmdId = exports.BlessingRedeemRewardRsp_CmdId = exports.BlessingRedeemRewardReq_CmdId = exports.BlessingScanRsp_CmdId = exports.BlessingScanReq_CmdId = exports.TreasureMapPreTaskDoneNotify_CmdId = exports.TreasureMapGuideTaskDoneNotify_CmdId = exports.TreasureMapBonusChallengeNotify_CmdId = exports.TreasureMapMpChallengeNotify_CmdId = exports.TreasureMapRegionActiveNotify_CmdId = exports.TreasureMapCurrencyNotify_CmdId = exports.TreasureMapRegionInfoNotify_CmdId = exports.RestartEffigyChallengeRsp_CmdId = exports.RestartEffigyChallengeReq_CmdId = exports.SelectEffigyChallengeConditionRsp_CmdId = exports.SelectEffigyChallengeConditionReq_CmdId = exports.TakeEffigyRewardRsp_CmdId = exports.TakeEffigyRewardReq_CmdId = exports.TakeEffigyFirstPassRewardRsp_CmdId = exports.TakeEffigyFirstPassRewardReq_CmdId = exports.EffigyChallengeResultNotify_CmdId = exports.EffigyChallengeInfoNotify_CmdId = exports.StartEffigyChallengeRsp_CmdId = exports.StartEffigyChallengeReq_CmdId = exports.ActivitySaleChangeNotify_CmdId = exports.DragonSpineCoinChangeNotify_CmdId = exports.DragonSpineChapterFinishNotify_CmdId = exports.DragonSpineChapterProgressChangeNotify_CmdId = exports.DragonSpineChapterOpenNotify_CmdId = exports.AsterMidCampInfoNotify_CmdId = exports.FlightActivityRestartRsp_CmdId = exports.FlightActivityRestartReq_CmdId = exports.FlightActivitySettleNotify_CmdId = exports.AsterLargeInfoNotify_CmdId = exports.TakeAsterSpecialRewardRsp_CmdId = exports.TakeAsterSpecialRewardReq_CmdId = exports.AsterMiscInfoNotify_CmdId = exports.AsterMidInfoNotify_CmdId = exports.AsterLittleInfoNotify_CmdId = exports.AsterProgressInfoNotify_CmdId = void 0;
exports.MistTrialGetChallengeMissionRsp_CmdId = exports.MistTrialGetChallengeMissionReq_CmdId = exports.MistTrialSelectAvatarAndEnterDungeonRsp_CmdId = exports.MistTrialSelectAvatarAndEnterDungeonReq_CmdId = exports.ChannellerSlabSaveAssistInfoRsp_CmdId = exports.ChannellerSlabSaveAssistInfoReq_CmdId = exports.ChannellerSlabOneOffDungeonInfoNotify_CmdId = exports.ChannellerSlabOneOffDungeonInfoRsp_CmdId = exports.ChannellerSlabOneOffDungeonInfoReq_CmdId = exports.ChannellerSlabLoopDungeonSelectConditionRsp_CmdId = exports.ChannellerSlabLoopDungeonSelectConditionReq_CmdId = exports.ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId = exports.ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId = exports.ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId = exports.ChannellerSlabEnterLoopDungeonRsp_CmdId = exports.ChannellerSlabEnterLoopDungeonReq_CmdId = exports.ChannellerSlabTakeoffBuffRsp_CmdId = exports.ChannellerSlabTakeoffBuffReq_CmdId = exports.ChannellerSlabWearBuffRsp_CmdId = exports.ChannellerSlabWearBuffReq_CmdId = exports.ChannelerSlabStageOneoffDungeonNotify_CmdId = exports.ChannelerSlabStageActiveChallengeIndexNotify_CmdId = exports.ActivityTakeWatcherRewardBatchRsp_CmdId = exports.ActivityTakeWatcherRewardBatchReq_CmdId = exports.WaterSpritePhaseFinishNotify_CmdId = exports.ArenaChallengeFinishNotify_CmdId = exports.StartArenaChallengeLevelRsp_CmdId = exports.StartArenaChallengeLevelReq_CmdId = exports.FleurFairReplayMiniGameRsp_CmdId = exports.FleurFairReplayMiniGameReq_CmdId = exports.FleurFairMusicGameStartRsp_CmdId = exports.FleurFairMusicGameStartReq_CmdId = exports.FleurFairMusicGameSettleRsp_CmdId = exports.FleurFairMusicGameSettleReq_CmdId = exports.FleurFairFallSettleNotify_CmdId = exports.FleurFairBalloonSettleNotify_CmdId = exports.ExpeditionChallengeFinishedNotify_CmdId = exports.ExpeditionChallengeEnterRegionNotify_CmdId = exports.SetCurExpeditionChallengeIdRsp_CmdId = exports.SetCurExpeditionChallengeIdReq_CmdId = exports.GetExpeditionAssistInfoListRsp_CmdId = exports.GetExpeditionAssistInfoListReq_CmdId = exports.ExpeditionTakeRewardRsp_CmdId = exports.ExpeditionTakeRewardReq_CmdId = exports.ExpeditionRecallRsp_CmdId = exports.ExpeditionRecallReq_CmdId = exports.ExpeditionStartRsp_CmdId = exports.ExpeditionStartReq_CmdId = void 0;
exports.LunaRiteHintPointRsp_CmdId = exports.LunaRiteHintPointReq_CmdId = exports.LunaRiteTakeSacrificeRewardRsp_CmdId = exports.LunaRiteTakeSacrificeRewardReq_CmdId = exports.LunaRiteSacrificeRsp_CmdId = exports.LunaRiteSacrificeReq_CmdId = exports.FishingGallerySettleNotify_CmdId = exports.SumoSetNoSwitchPunishTimeNotify_CmdId = exports.ActivityDisableTransferPointInteractionNotify_CmdId = exports.SumoRestartDungeonRsp_CmdId = exports.SumoRestartDungeonReq_CmdId = exports.SumoLeaveDungeonNotify_CmdId = exports.SumoSwitchTeamRsp_CmdId = exports.SumoSwitchTeamReq_CmdId = exports.SumoEnterDungeonNotify_CmdId = exports.SumoDungeonSettleNotify_CmdId = exports.SumoSelectTeamAndEnterDungeonRsp_CmdId = exports.SumoSelectTeamAndEnterDungeonReq_CmdId = exports.SumoSaveTeamRsp_CmdId = exports.SumoSaveTeamReq_CmdId = exports.TreasureMapHostInfoNotify_CmdId = exports.EnterChessDungeonRsp_CmdId = exports.EnterChessDungeonReq_CmdId = exports.BlitzRushParkourRestartRsp_CmdId = exports.BlitzRushParkourRestartReq_CmdId = exports.BounceConjuringSettleNotify_CmdId = exports.EchoShellTakeRewardRsp_CmdId = exports.EchoShellTakeRewardReq_CmdId = exports.EchoShellUpdateNotify_CmdId = exports.SetLimitOptimizationNotify_CmdId = exports.BuoyantCombatSettleNotify_CmdId = exports.StartBuoyantCombatGalleryRsp_CmdId = exports.StartBuoyantCombatGalleryReq_CmdId = exports.SummerTimeSprintBoatRestartRsp_CmdId = exports.SummerTimeSprintBoatRestartReq_CmdId = exports.SummerTimeSprintBoatSettleNotify_CmdId = exports.SummerTimeFloatSignalUpdateNotify_CmdId = exports.SummerTimeFloatSignalPositionNotify_CmdId = exports.FindHilichurlAcceptQuestNotify_CmdId = exports.FindHilichurlFinishSecondQuestNotify_CmdId = exports.CommonPlayerTipsNotify_CmdId = exports.ActivityTakeAllScoreRewardRsp_CmdId = exports.ActivityTakeAllScoreRewardReq_CmdId = exports.ActivityTakeScoreRewardRsp_CmdId = exports.ActivityTakeScoreRewardReq_CmdId = exports.HideAndSeekSelectSkillRsp_CmdId = exports.HideAndSeekSelectSkillReq_CmdId = exports.ChannellerSlabCheckEnterLoopDungeonRsp_CmdId = exports.ChannellerSlabCheckEnterLoopDungeonReq_CmdId = exports.MistTrialDunegonFailNotify_CmdId = void 0;
exports.EnterRoguelikeDungeonNotify_CmdId = exports.GiveUpRoguelikeDungeonCardRsp_CmdId = exports.GiveUpRoguelikeDungeonCardReq_CmdId = exports.RoguelikeTakeStageFirstPassRewardRsp_CmdId = exports.RoguelikeTakeStageFirstPassRewardReq_CmdId = exports.RoguelikeGiveUpRsp_CmdId = exports.RoguelikeGiveUpReq_CmdId = exports.RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId = exports.RoguelikeSelectAvatarAndEnterDungeonReq_CmdId = exports.UpgradeRoguelikeShikigamiRsp_CmdId = exports.UpgradeRoguelikeShikigamiReq_CmdId = exports.TriggerRoguelikeCurseNotify_CmdId = exports.TriggerRoguelikeRuneRsp_CmdId = exports.TriggerRoguelikeRuneReq_CmdId = exports.EquipRoguelikeRuneRsp_CmdId = exports.EquipRoguelikeRuneReq_CmdId = exports.SelectRoguelikeDungeonCardRsp_CmdId = exports.SelectRoguelikeDungeonCardReq_CmdId = exports.RefreshRoguelikeDungeonCardRsp_CmdId = exports.RefreshRoguelikeDungeonCardReq_CmdId = exports.DoRoguelikeDungeonCardGachaRsp_CmdId = exports.DoRoguelikeDungeonCardGachaReq_CmdId = exports.MusicGameStartRsp_CmdId = exports.MusicGameStartReq_CmdId = exports.MusicGameSettleRsp_CmdId = exports.MusicGameSettleReq_CmdId = exports.PlantFlowerEditFlowerCombinationRsp_CmdId = exports.PlantFlowerEditFlowerCombinationReq_CmdId = exports.PlantFlowerGetCanGiveFriendFlowerRsp_CmdId = exports.PlantFlowerGetCanGiveFriendFlowerReq_CmdId = exports.PlantFlowerAcceptAllGiveFlowerRsp_CmdId = exports.PlantFlowerAcceptAllGiveFlowerReq_CmdId = exports.PlantFlowerAcceptGiveFlowerRsp_CmdId = exports.PlantFlowerAcceptGiveFlowerReq_CmdId = exports.PlantFlowerHaveRecvFlowerNotify_CmdId = exports.PlantFlowerGetRecvFlowerListRsp_CmdId = exports.PlantFlowerGetRecvFlowerListReq_CmdId = exports.PlantFlowerGiveFriendFlowerRsp_CmdId = exports.PlantFlowerGiveFriendFlowerReq_CmdId = exports.PlantFlowerGetFriendFlowerWishListRsp_CmdId = exports.PlantFlowerGetFriendFlowerWishListReq_CmdId = exports.PlantFlowerSetFlowerWishRsp_CmdId = exports.PlantFlowerSetFlowerWishReq_CmdId = exports.PlantFlowerTakeSeedRewardRsp_CmdId = exports.PlantFlowerTakeSeedRewardReq_CmdId = exports.PlantFlowerGetSeedInfoRsp_CmdId = exports.PlantFlowerGetSeedInfoReq_CmdId = exports.LunaRiteAreaFinishNotify_CmdId = exports.LunaRiteGroupBundleRegisterNotify_CmdId = exports.LunaRiteHintPointRemoveNotify_CmdId = void 0;
exports.WinterCampTriathlonRestartReq_CmdId = exports.WinterCampTakeBattleRewardRsp_CmdId = exports.WinterCampTakeBattleRewardReq_CmdId = exports.WinterCampTakeExploreRewardRsp_CmdId = exports.WinterCampTakeExploreRewardReq_CmdId = exports.WinterCampTriathlonSettleNotify_CmdId = exports.WinterCampEditSnowmanCombinationRsp_CmdId = exports.WinterCampEditSnowmanCombinationReq_CmdId = exports.WinterCampGetRecvItemListRsp_CmdId = exports.WinterCampGetRecvItemListReq_CmdId = exports.WinterCampGetCanGiveFriendItemRsp_CmdId = exports.WinterCampGetCanGiveFriendItemReq_CmdId = exports.WinterCampAcceptAllGiveItemRsp_CmdId = exports.WinterCampAcceptAllGiveItemReq_CmdId = exports.WinterCampAcceptGiveItemRsp_CmdId = exports.WinterCampAcceptGiveItemReq_CmdId = exports.WinterCampRecvItemNotify_CmdId = exports.WinterCampGetFriendWishListRsp_CmdId = exports.WinterCampGetFriendWishListReq_CmdId = exports.WinterCampSetWishListRsp_CmdId = exports.WinterCampSetWishListReq_CmdId = exports.WinterCampGiveFriendItemRsp_CmdId = exports.WinterCampGiveFriendItemReq_CmdId = exports.WinterCampRaceScoreNotify_CmdId = exports.WinterCampStageInfoChangeNotify_CmdId = exports.DigActivityChangeGadgetStateRsp_CmdId = exports.DigActivityChangeGadgetStateReq_CmdId = exports.DigActivityMarkPointChangeNotify_CmdId = exports.RoguelikeRefreshCardCostUpdateNotify_CmdId = exports.RoguelikeResourceBonusPropUpdateNotify_CmdId = exports.RoguelikeEffectViewRsp_CmdId = exports.RoguelikeEffectViewReq_CmdId = exports.RoguelikeEffectDataNotify_CmdId = exports.RoguelikeMistClearNotify_CmdId = exports.RoguelikeRuneRecordUpdateNotify_CmdId = exports.DisableRoguelikeTrapNotify_CmdId = exports.RogueSwitchAvatarRsp_CmdId = exports.RogueSwitchAvatarReq_CmdId = exports.RoguelikeCardGachaNotify_CmdId = exports.ClearRoguelikeCurseNotify_CmdId = exports.RogueResumeDungeonRsp_CmdId = exports.RogueResumeDungeonReq_CmdId = exports.RogueHealAvatarsRsp_CmdId = exports.RogueHealAvatarsReq_CmdId = exports.RogueDungeonPlayerCellChangeNotify_CmdId = exports.RogueCellUpdateNotify_CmdId = exports.StartRogueNormalCellChallengeRsp_CmdId = exports.StartRogueNormalCellChallengeReq_CmdId = exports.StartRogueEliteCellChallengeRsp_CmdId = exports.StartRogueEliteCellChallengeReq_CmdId = void 0;
exports.BartenderCompleteOrderRsp_CmdId = exports.BartenderCompleteOrderReq_CmdId = exports.MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId = exports.MichiaeMatsuriRemoveChallengeMarkNotify_CmdId = exports.MichiaeMatsuriRemoveChestMarkNotify_CmdId = exports.MichiaeMatsuriStartDarkChallengeRsp_CmdId = exports.MichiaeMatsuriStartDarkChallengeReq_CmdId = exports.MichiaeMatsuriStartBossChallengeRsp_CmdId = exports.MichiaeMatsuriStartBossChallengeReq_CmdId = exports.MichiaeMatsuriUnlockCrystalSkillRsp_CmdId = exports.MichiaeMatsuriUnlockCrystalSkillReq_CmdId = exports.MichiaeMatsuriInteractStatueRsp_CmdId = exports.MichiaeMatsuriInteractStatueReq_CmdId = exports.MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId = exports.UpdateSalvageBundleMarkRsp_CmdId = exports.UpdateSalvageBundleMarkReq_CmdId = exports.LanternRiteEndFireworksReformRsp_CmdId = exports.LanternRiteEndFireworksReformReq_CmdId = exports.LanternRiteDoFireworksReformRsp_CmdId = exports.LanternRiteDoFireworksReformReq_CmdId = exports.LanternRiteStartFireworksReformRsp_CmdId = exports.LanternRiteStartFireworksReformReq_CmdId = exports.SalvageEscortRestartRsp_CmdId = exports.SalvageEscortRestartReq_CmdId = exports.SalvagePreventRestartRsp_CmdId = exports.SalvagePreventRestartReq_CmdId = exports.LanternRiteTakeSkinRewardRsp_CmdId = exports.LanternRiteTakeSkinRewardReq_CmdId = exports.SalvageEscortSettleNotify_CmdId = exports.SalvagePreventSettleNotify_CmdId = exports.ViewLanternProjectionLevelTipsRsp_CmdId = exports.ViewLanternProjectionLevelTipsReq_CmdId = exports.ViewLanternProjectionTipsRsp_CmdId = exports.ViewLanternProjectionTipsReq_CmdId = exports.FinishLanternProjectionRsp_CmdId = exports.FinishLanternProjectionReq_CmdId = exports.TanukiTravelFinishGuideQuestNotify_CmdId = exports.PotionRestartDungeonRsp_CmdId = exports.PotionRestartDungeonReq_CmdId = exports.PotionSaveDungeonResultRsp_CmdId = exports.PotionSaveDungeonResultReq_CmdId = exports.PotionEnterDungeonNotify_CmdId = exports.PotionEnterDungeonRsp_CmdId = exports.PotionEnterDungeonReq_CmdId = exports.PotionResetChallengeRsp_CmdId = exports.PotionResetChallengeReq_CmdId = exports.MistTrialGetDungeonExhibitionDataRsp_CmdId = exports.MistTrialGetDungeonExhibitionDataReq_CmdId = exports.MistTrialSettleNotify_CmdId = exports.WinterCampTriathlonRestartRsp_CmdId = void 0;
exports.GachaActivityResetReq_CmdId = exports.GachaActivityTakeRewardRsp_CmdId = exports.GachaActivityTakeRewardReq_CmdId = exports.GachaActivityCreateRobotRsp_CmdId = exports.GachaActivityCreateRobotReq_CmdId = exports.GachaActivityUpdateElemNotify_CmdId = exports.GachaActivityPercentNotify_CmdId = exports.SpiceActivityGivingRecordNotify_CmdId = exports.SpiceActivityProcessFoodRsp_CmdId = exports.SpiceActivityProcessFoodReq_CmdId = exports.SpiceActivityFinishMakeSpiceRsp_CmdId = exports.SpiceActivityFinishMakeSpiceReq_CmdId = exports.PhotoActivityClientViewRsp_CmdId = exports.PhotoActivityClientViewReq_CmdId = exports.PhotoActivityFinishRsp_CmdId = exports.PhotoActivityFinishReq_CmdId = exports.IrodoriMasterGallerySettleNotify_CmdId = exports.IrodoriMasterGalleryCgEndNotify_CmdId = exports.IrodoriMasterStartGalleryRsp_CmdId = exports.IrodoriMasterStartGalleryReq_CmdId = exports.EnterIrodoriChessDungeonRsp_CmdId = exports.EnterIrodoriChessDungeonReq_CmdId = exports.IrodoriChessUnequipCardRsp_CmdId = exports.IrodoriChessUnequipCardReq_CmdId = exports.IrodoriChessEquipCardRsp_CmdId = exports.IrodoriChessEquipCardReq_CmdId = exports.IrodoriFillPoetryRsp_CmdId = exports.IrodoriFillPoetryReq_CmdId = exports.IrodoriScanEntityRsp_CmdId = exports.IrodoriScanEntityReq_CmdId = exports.IrodoriEditFlowerCombinationRsp_CmdId = exports.IrodoriEditFlowerCombinationReq_CmdId = exports.QuickOpenActivityRsp_CmdId = exports.QuickOpenActivityReq_CmdId = exports.CrystalLinkRestartDungeonRsp_CmdId = exports.CrystalLinkRestartDungeonReq_CmdId = exports.CrystalLinkDungeonInfoNotify_CmdId = exports.CrystalLinkEnterDungeonRsp_CmdId = exports.CrystalLinkEnterDungeonReq_CmdId = exports.BartenderFinishLevelRsp_CmdId = exports.BartenderFinishLevelReq_CmdId = exports.BartenderLevelProgressNotify_CmdId = exports.BartenderCancelLevelRsp_CmdId = exports.BartenderCancelLevelReq_CmdId = exports.BartenderStartLevelRsp_CmdId = exports.BartenderStartLevelReq_CmdId = exports.BartenderGetFormulaRsp_CmdId = exports.BartenderGetFormulaReq_CmdId = exports.BartenderCancelOrderRsp_CmdId = exports.BartenderCancelOrderReq_CmdId = void 0;
exports.RogueDiaryCoinAddNotify_CmdId = exports.TryEnterNextRogueDiaryDungeonRsp_CmdId = exports.TryEnterNextRogueDiaryDungeonReq_CmdId = exports.RogueDiaryReviveAvatarRsp_CmdId = exports.RogueDiaryReviveAvatarReq_CmdId = exports.RetryCurRogueDiaryDungeonRsp_CmdId = exports.RetryCurRogueDiaryDungeonReq_CmdId = exports.RogueDiaryRepairInfoNotify_CmdId = exports.TryInterruptRogueDiaryDungeonRsp_CmdId = exports.TryInterruptRogueDiaryDungeonReq_CmdId = exports.RogueFinishRepairRsp_CmdId = exports.RogueFinishRepairReq_CmdId = exports.RefreshRogueDiaryCardRsp_CmdId = exports.RefreshRogueDiaryCardReq_CmdId = exports.GetRogueDairyRepairInfoRsp_CmdId = exports.GetRogueDairyRepairInfoReq_CmdId = exports.ReserveRogueDiaryAvatarRsp_CmdId = exports.ReserveRogueDiaryAvatarReq_CmdId = exports.RogueDiaryTiredAvatarNotify_CmdId = exports.StartRogueDiaryRoomRsp_CmdId = exports.StartRogueDiaryRoomReq_CmdId = exports.RogueDiaryDungeonSettleNotify_CmdId = exports.RogueDiaryDungeonInfoNotify_CmdId = exports.ResumeRogueDiaryDungeonRsp_CmdId = exports.ResumeRogueDiaryDungeonReq_CmdId = exports.EnterRogueDiaryDungeonRsp_CmdId = exports.EnterRogueDiaryDungeonReq_CmdId = exports.ResetRogueDiaryPlayRsp_CmdId = exports.ResetRogueDiaryPlayReq_CmdId = exports.StartRogueDiaryPlayRsp_CmdId = exports.StartRogueDiaryPlayReq_CmdId = exports.LuminanceStoneChallengeSettleNotify_CmdId = exports.ActivityGetFriendGiftWishListRsp_CmdId = exports.ActivityGetFriendGiftWishListReq_CmdId = exports.ActivitySetGiftWishRsp_CmdId = exports.ActivitySetGiftWishReq_CmdId = exports.ActivityGetCanGiveFriendGiftRsp_CmdId = exports.ActivityGetCanGiveFriendGiftReq_CmdId = exports.ActivityAcceptAllGiveGiftRsp_CmdId = exports.ActivityAcceptAllGiveGiftReq_CmdId = exports.ActivityAcceptGiveGiftRsp_CmdId = exports.ActivityAcceptGiveGiftReq_CmdId = exports.ActivityHaveRecvGiftNotify_CmdId = exports.ActivityGetRecvGiftListRsp_CmdId = exports.ActivityGetRecvGiftListReq_CmdId = exports.ActivityGiveFriendGiftRsp_CmdId = exports.ActivityGiveFriendGiftReq_CmdId = exports.GachaActivityNextStageRsp_CmdId = exports.GachaActivityNextStageReq_CmdId = exports.GachaActivityResetRsp_CmdId = void 0;
exports.VintageCampStageFinishNotify_CmdId = exports.VintageCampGroupBundleRegisterNotify_CmdId = exports.VintageHuntingStartGalleryRsp_CmdId = exports.VintageHuntingStartGalleryReq_CmdId = exports.VintageDecorateBoothRsp_CmdId = exports.VintageDecorateBoothReq_CmdId = exports.VintagePresentFinishNoify_CmdId = exports.SceneGalleryVintageHuntingSettleNotify_CmdId = exports.VintageMarketDeliverItemRsp_CmdId = exports.VintageMarketDeliverItemReq_CmdId = exports.TreasureSeelieCollectOrbsNotify_CmdId = exports.MuqadasPotionCaptureWeaknessRsp_CmdId = exports.MuqadasPotionCaptureWeaknessReq_CmdId = exports.MuqadasPotionRestartDungeonRsp_CmdId = exports.MuqadasPotionRestartDungeonReq_CmdId = exports.MuqadasPotionDungeonSettleNotify_CmdId = exports.MuqadasPotionActivityEnterDungeonRsp_CmdId = exports.MuqadasPotionActivityEnterDungeonReq_CmdId = exports.InstableSprayRestartDungeonRsp_CmdId = exports.InstableSprayRestartDungeonReq_CmdId = exports.InstableSprayLevelFinishNotify_CmdId = exports.InstableSpraySwitchTeamRsp_CmdId = exports.InstableSpraySwitchTeamReq_CmdId = exports.InstableSprayEnterDungeonRsp_CmdId = exports.InstableSprayEnterDungeonReq_CmdId = exports.GravenInnocencePhotoReminderNotify_CmdId = exports.GravenInnocencePhotoFinishRsp_CmdId = exports.GravenInnocencePhotoFinishReq_CmdId = exports.GravenInnocenceEditCarveCombinationRsp_CmdId = exports.GravenInnocenceEditCarveCombinationReq_CmdId = exports.GravenInnocenceRaceRestartRsp_CmdId = exports.GravenInnocenceRaceRestartReq_CmdId = exports.GravenInnocenceRaceSettleNotify_CmdId = exports.GearActivityFinishPlayPictureRsp_CmdId = exports.GearActivityFinishPlayPictureReq_CmdId = exports.GearActivityStartPlayPictureRsp_CmdId = exports.GearActivityStartPlayPictureReq_CmdId = exports.GearActivityFinishPlayGearRsp_CmdId = exports.GearActivityFinishPlayGearReq_CmdId = exports.GearActivityStartPlayGearRsp_CmdId = exports.GearActivityStartPlayGearReq_CmdId = exports.IslandPartySettleNotify_CmdId = exports.SummerTimeV2RestartDungeonRsp_CmdId = exports.SummerTimeV2RestartDungeonReq_CmdId = exports.SummerTimeV2RestartBoatGalleryRsp_CmdId = exports.SummerTimeV2RestartBoatGalleryReq_CmdId = exports.ActivityReadPushTipsRsp_CmdId = exports.ActivityReadPushTipsReq_CmdId = exports.ActivityPushTipsInfoNotify_CmdId = exports.SummerTimeV2BoatSettleNotify_CmdId = void 0;
exports.GetActivityInfoReq = exports.GetActivityScheduleRsp = exports.ActivityScheduleInfo = exports.GetActivityScheduleReq = exports.ActivityPushTipsState = exports.RogueDiaryAvatarDisableStatus = exports.RogueEliteCellDifficultyType = exports.RogueCellState = exports.EffigyChallengeV2DungeonInfoNotify_CmdId = exports.EffigyChallengeV2ChooseSkillRsp_CmdId = exports.EffigyChallengeV2ChooseSkillReq_CmdId = exports.EffigyChallengeV2RestartDungeonRsp_CmdId = exports.EffigyChallengeV2RestartDungeonReq_CmdId = exports.EffigyChallengeV2EnterDungeonRsp_CmdId = exports.EffigyChallengeV2EnterDungeonReq_CmdId = exports.CharAmusementSettleNotify_CmdId = exports.FungusFighterRestartTraningDungeonRsp_CmdId = exports.FungusFighterRestartTraningDungeonReq_CmdId = exports.FungusFighterUseBackupFungusRsp_CmdId = exports.FungusFighterUseBackupFungusReq_CmdId = exports.FungusFighterClearTrainingRuntimeDataRsp_CmdId = exports.FungusFighterClearTrainingRuntimeDataReq_CmdId = exports.FungusFighterTrainingGallerySettleNotify_CmdId = exports.FungusFighterTrainingSelectFungusRsp_CmdId = exports.FungusFighterTrainingSelectFungusReq_CmdId = exports.FungusFighterRuntimeDataNotify_CmdId = exports.EnterFungusFighterTrainingDungeonRsp_CmdId = exports.EnterFungusFighterTrainingDungeonReq_CmdId = exports.FungusRenameRsp_CmdId = exports.FungusRenameReq_CmdId = exports.FungusCultivateRsp_CmdId = exports.FungusCultivateReq_CmdId = exports.FungusFighterPlotInfoNotify_CmdId = exports.EnterFungusFighterPlotDungeonRsp_CmdId = exports.EnterFungusFighterPlotDungeonReq_CmdId = exports.WindFieldRestartDungeonRsp_CmdId = exports.WindFieldRestartDungeonReq_CmdId = exports.VintageMarketNpcEventFinishNotify_CmdId = exports.VintageMarketDividendFinishNotify_CmdId = exports.VintageMarketStoreViewStrategyRsp_CmdId = exports.VintageMarketStoreViewStrategyReq_CmdId = exports.VintageMarketStoreChooseStrategyRsp_CmdId = exports.VintageMarketStoreChooseStrategyReq_CmdId = exports.VintageMarketStoreUnlockSlotRsp_CmdId = exports.VintageMarketStoreUnlockSlotReq_CmdId = exports.VintagePresentFinishNotify_CmdId = exports.VintageMarketFinishStorePlayRsp_CmdId = exports.VintageMarketFinishStorePlayReq_CmdId = exports.VintageMarketStartStorePlayRsp_CmdId = exports.VintageMarketStartStorePlayReq_CmdId = void 0;
exports.TrialAvatarFirstPassDungeonNotify = exports.ReceivedTrialAvatarActivityRewardRsp = exports.ReceivedTrialAvatarActivityRewardReq = exports.EnterTrialAvatarActivityDungeonRsp = exports.EnterTrialAvatarActivityDungeonReq = exports.TrialAvatarActivityDetailInfo = exports.TrialAvatarActivityRewardDetailInfo = exports.GetAuthSalesmanInfoRsp = exports.GetAuthSalesmanInfoReq = exports.SalesmanTakeSpecialRewardRsp = exports.SalesmanTakeSpecialRewardReq = exports.ActivityCondStateChangeNotify = exports.SalesmanTakeRewardRsp = exports.SalesmanTakeRewardReq = exports.SalesmanDeliverItemRsp = exports.SalesmanDeliverItemReq = exports.SalesmanActivityDetailInfo = exports.ActivityBannerClearRsp = exports.ActivityBannerClearReq = exports.ActivityBannerNotify = exports.ServerAnnounceRevokeNotify = exports.ServerAnnounceNotify = exports.LoadActivityTerrainNotify = exports.AnnounceData = exports.SeaLampPopularityNotify = exports.SeaLampCoinNotify = exports.SeaLampFlyLampNotify = exports.SeaLampActivityInfo = exports.SeaLampSectionInfo = exports.SeaLampContributeItemRsp = exports.SeaLampContributeItemReq = exports.SeaLampTakePhaseRewardRsp = exports.SeaLampTakePhaseRewardReq = exports.SeaLampTakeContributionRewardRsp = exports.SeaLampTakeContributionRewardReq = exports.SeaLampFlyLampRsp = exports.SeaLampFlyLampReq = exports.SeaLampActivityDetailInfo = exports.ActivityCoinInfoNotify = exports.ActivitySelectAvatarCardRsp = exports.ActivitySelectAvatarCardReq = exports.ActivityUpdateWatcherNotify = exports.ActivityTakeWatcherRewardRsp = exports.ActivityTakeWatcherRewardReq = exports.ActivityWatcherInfo = exports.ActivityScheduleInfoNotify = exports.ActivityInfoNotify = exports.ActivityPlayOpenAnimNotify = exports.GetActivityInfoRsp = exports.ActivityInfo = void 0;
exports.RestartEffigyChallengeRsp = exports.RestartEffigyChallengeReq = exports.SelectEffigyChallengeConditionRsp = exports.SelectEffigyChallengeConditionReq = exports.TakeEffigyRewardRsp = exports.TakeEffigyRewardReq = exports.TakeEffigyFirstPassRewardRsp = exports.TakeEffigyFirstPassRewardReq = exports.EffigyChallengeResultNotify = exports.EffigyChallengeDungeonResultInfo = exports.EffigyChallengeInfoNotify = exports.StartEffigyChallengeRsp = exports.StartEffigyChallengeReq = exports.EffigyActivityDetailInfo = exports.EffigyDailyInfo = exports.ActivitySaleChangeNotify = exports.DragonSpineCoinChangeNotify = exports.DragonSpineChapterFinishNotify = exports.DragonSpineChapterProgressChangeNotify = exports.DragonSpineChapterOpenNotify = exports.DragonSpineChapterInfo = exports.DragonSpineActivityDetailInfo = exports.AsterMidCampInfoNotify = exports.FlightActivityRestartRsp = exports.FlightActivityRestartReq = exports.FlightActivitySettleNotify = exports.FlightActivityDetailInfo = exports.FlightDailyRecord = exports.AsterLargeInfoNotify = exports.TakeAsterSpecialRewardRsp = exports.TakeAsterSpecialRewardReq = exports.AsterMiscInfoNotify = exports.AsterMidInfoNotify = exports.AsterLittleInfoNotify = exports.AsterProgressInfoNotify = exports.SelectAsterMidDifficultyRsp = exports.SelectAsterMidDifficultyReq = exports.AsterActivityDetailInfo = exports.AsterProgressDetailInfo = exports.AsterLargeDetailInfo = exports.AsterMidDetailInfo = exports.AsterMidCampInfo = exports.AsterLittleDetailInfo = exports.FinishDeliveryNotify = exports.TakeDeliveryDailyRewardRsp = exports.TakeDeliveryDailyRewardReq = exports.DeliveryActivityDetailInfo = exports.CrucibleActivityDetailInfo = exports.CrucibleBattleUidInfo = exports.TrialAvatarInDungeonIndexNotify = void 0;
exports.FleurFairMusicGameInfo = exports.FleurFairMusicRecord = exports.FleurFairFallInfo = exports.FleurFairBalloonInfo = exports.FleurFairChapterInfo = exports.WaterSpiritActivityDetailInfo = exports.ExpeditionChallengeFinishedNotify = exports.ExpeditionChallengeEnterRegionNotify = exports.SetCurExpeditionChallengeIdRsp = exports.SetCurExpeditionChallengeIdReq = exports.GetExpeditionAssistInfoListRsp = exports.GetExpeditionAssistInfoListReq = exports.ExpeditionAssistInfo = exports.ExpeditionTakeRewardRsp = exports.ExpeditionTakeRewardReq = exports.ExpeditionRecallRsp = exports.ExpeditionRecallReq = exports.ExpeditionStartRsp = exports.ExpeditionStartReq = exports.ExpeditionActivityDetailInfo = exports.ExpeditionChallengeInfo = exports.ExpeditionPathInfo = exports.BlessingAcceptAllGivePicRsp = exports.BlessingAcceptAllGivePicReq = exports.BlessingRecvFriendPicNotify = exports.BlessingGetAllRecvPicRecordListRsp = exports.BlessingGetAllRecvPicRecordListReq = exports.BlessingAcceptGivePicRsp = exports.BlessingAcceptGivePicReq = exports.BlessingGiveFriendPicRsp = exports.BlessingGiveFriendPicReq = exports.BlessingGetFriendPicListRsp = exports.BlessingGetFriendPicListReq = exports.BlessingRecvPicRecord = exports.BlessingFriendPicData = exports.BlessingRedeemRewardRsp = exports.BlessingRedeemRewardReq = exports.BlessingScanRsp = exports.BlessingScanReq = exports.BlessingActivityDetailInfo = exports.TreasureMapPreTaskDoneNotify = exports.TreasureMapGuideTaskDoneNotify = exports.TreasureMapBonusChallengeNotify = exports.TreasureMapMpChallengeNotify = exports.TreasureMapRegionActiveNotify = exports.TreasureMapCurrencyNotify = exports.TreasureMapRegionInfoNotify = exports.TreasureMapActivityDetailInfo = exports.TreasureMapBonusChallengeInfo = exports.TreasureMapRegionInfo = void 0;
exports.ChannellerSlabOneOffDungeonInfoRsp = exports.ChannellerSlabOneOffDungeonInfoReq = exports.ChannellerSlabLoopDungeonResultInfo = exports.ChannellerSlabLoopDungeonSelectConditionRsp = exports.ChannellerSlabLoopDungeonSelectConditionReq = exports.ChannellerSlabLoopDungeonChallengeInfoNotify = exports.ChannellerSlabLoopDungeonTakeScoreRewardRsp = exports.ChannellerSlabLoopDungeonTakeScoreRewardReq = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardReq = exports.ChannellerSlabEnterLoopDungeonRsp = exports.ChannellerSlabEnterLoopDungeonReq = exports.ChannellerSlabTakeoffBuffRsp = exports.ChannellerSlabTakeoffBuffReq = exports.ChannellerSlabWearBuffRsp = exports.ChannellerSlabWearBuffReq = exports.ChannelerSlabStageOneoffDungeonNotify = exports.ChannelerSlabStageActiveChallengeIndexNotify = exports.ChannelerSlabActivityDetailInfo = exports.ChannellerSlabLoopDungeonStageInfo = exports.ChannellerSlabLoopDungeonInfo = exports.ChannellerSlabBuffInfo = exports.ChannellerSlabAssistInfo = exports.ChannellerSlabBuffSchemeInfo = exports.ChannelerSlabChallengeStage = exports.ChannelerSlabOneoffDungeon = exports.ChannelerSlabChallenge = exports.ChannelerSlabCamp = exports.ActivityTakeWatcherRewardBatchRsp = exports.ActivityTakeWatcherRewardBatchReq = exports.WaterSpritePhaseFinishNotify = exports.ArenaChallengeFinishNotify = exports.ArenaChallengeChildChallengeInfo = exports.StartArenaChallengeLevelRsp = exports.StartArenaChallengeLevelReq = exports.ArenaChallengeActivityDetailInfo = exports.ArenaChallengeMonsterLevel = exports.FleurFairReplayMiniGameRsp = exports.FleurFairReplayMiniGameReq = exports.FleurFairMusicGameStartRsp = exports.FleurFairMusicGameStartReq = exports.FleurFairMusicGameSettleRsp = exports.FleurFairMusicGameSettleReq = exports.FleurFairFallSettleNotify = exports.FleurFairBalloonSettleNotify = exports.FleurFairFallSettleInfo = exports.FleurFairBalloonSettleInfo = exports.FleurFairActivityDetailInfo = exports.FleurFairDungeonSectionInfo = exports.FleurFairMinigameInfo = void 0;
exports.BounceConjuringSettleNotify = exports.BounceConjuringActivityDetailInfo = exports.BounceConjuringChapterInfo = exports.EchoShellTakeRewardRsp = exports.EchoShellTakeRewardReq = exports.EchoShellUpdateNotify = exports.EchoShellDetailInfo = exports.SummerTimeDungeonInfo = exports.SetLimitOptimizationNotify = exports.BuoyantCombatSettleNotify = exports.BuoyantCombatSettleInfo = exports.StartBuoyantCombatGalleryRsp = exports.StartBuoyantCombatGalleryReq = exports.BuoyantCombatDetailInfo = exports.BuoyantCombatDailyInfo = exports.SummerTimeSprintBoatRestartRsp = exports.SummerTimeSprintBoatRestartReq = exports.SummerTimeSprintBoatSettleNotify = exports.SummerTimeFloatSignalUpdateNotify = exports.SummerTimeFloatSignalPositionNotify = exports.SummerTimeStageInfo = exports.SummerTimeDetailInfo = exports.SummerTimeSprintBoatInfo = exports.SummerTimeSprintBoatRecord = exports.FindHilichurlAcceptQuestNotify = exports.FindHilichurlFinishSecondQuestNotify = exports.CommonPlayerTipsNotify = exports.FindHilichurlDetailInfo = exports.FindHilichurlDayContentInfo = exports.ActivityTakeAllScoreRewardRsp = exports.ActivityTakeAllScoreRewardReq = exports.ActivityTakeScoreRewardRsp = exports.ActivityTakeScoreRewardReq = exports.HideAndSeekSelectSkillRsp = exports.HideAndSeekSelectSkillReq = exports.HideAndSeekActivityDetailInfo = exports.HideAndSeekMapInfo = exports.ChannellerSlabCheckEnterLoopDungeonRsp = exports.ChannellerSlabCheckEnterLoopDungeonReq = exports.MistTrialDunegonFailNotify = exports.MistTrialGetChallengeMissionRsp = exports.MistTrialGetChallengeMissionReq = exports.MistTrialMissionInfo = exports.MistTrialSelectAvatarAndEnterDungeonRsp = exports.MistTrialSelectAvatarAndEnterDungeonReq = exports.MistTrialActivityDetailInfo = exports.MistTrialLevelData = exports.ChannellerSlabSaveAssistInfoRsp = exports.ChannellerSlabSaveAssistInfoReq = exports.ChannellerSlabOneOffDungeonInfoNotify = void 0;
exports.PlantFlowerSetFlowerWishRsp = exports.PlantFlowerSetFlowerWishReq = exports.PlantFlowerTakeSeedRewardRsp = exports.PlantFlowerTakeSeedRewardReq = exports.PlantFlowerGetSeedInfoRsp = exports.PlantFlowerGetSeedInfoReq = exports.PlantFlowerActivityDetailInfo = exports.LunaRiteAreaFinishNotify = exports.LunaRiteGroupBundleRegisterNotify = exports.LunaRiteHintPointRemoveNotify = exports.LunaRiteHintPointRsp = exports.LunaRiteHintPointReq = exports.LunaRiteTakeSacrificeRewardRsp = exports.LunaRiteTakeSacrificeRewardReq = exports.LunaRiteSacrificeRsp = exports.LunaRiteSacrificeReq = exports.LunaRiteDetailInfo = exports.LunaRiteAreaInfo = exports.LunaRiteHintPoint = exports.FishingGallerySettleNotify = exports.MoonfinTrialActivityDetailInfo = exports.MoonfinTrialLevelInfo = exports.SumoSetNoSwitchPunishTimeNotify = exports.ActivityDisableTransferPointInteractionNotify = exports.SumoRestartDungeonRsp = exports.SumoRestartDungeonReq = exports.SumoLeaveDungeonNotify = exports.SumoSwitchTeamRsp = exports.SumoSwitchTeamReq = exports.SumoEnterDungeonNotify = exports.SumoDungeonTeam = exports.SumoDungeonAvatar = exports.SumoDungeonSettleNotify = exports.SumoSelectTeamAndEnterDungeonRsp = exports.SumoSelectTeamAndEnterDungeonReq = exports.SumoSaveTeamRsp = exports.SumoSaveTeamReq = exports.SumoStageData = exports.SumoTeamData = exports.SumoAvatarInfo = exports.SumoActivityDetailInfo = exports.TreasureMapHostInfoNotify = exports.EnterChessDungeonRsp = exports.EnterChessDungeonReq = exports.ChessActivityDetailInfo = exports.BlitzRushParkourRestartRsp = exports.BlitzRushParkourRestartReq = exports.BlitzRushActivityDetailInfo = exports.ParkourLevelInfo = exports.BlitzRushStage = void 0;
exports.RoguelikeTakeStageFirstPassRewardRsp = exports.RoguelikeTakeStageFirstPassRewardReq = exports.RoguelikeGiveUpRsp = exports.RoguelikeGiveUpReq = exports.RoguelikeSelectAvatarAndEnterDungeonRsp = exports.RoguelikeSelectAvatarAndEnterDungeonReq = exports.UpgradeRoguelikeShikigamiRsp = exports.UpgradeRoguelikeShikigamiReq = exports.TriggerRoguelikeCurseNotify = exports.TriggerRoguelikeRuneRsp = exports.TriggerRoguelikeRuneReq = exports.EquipRoguelikeRuneRsp = exports.EquipRoguelikeRuneReq = exports.SelectRoguelikeDungeonCardRsp = exports.SelectRoguelikeDungeonCardReq = exports.RefreshRoguelikeDungeonCardRsp = exports.RefreshRoguelikeDungeonCardReq = exports.DoRoguelikeDungeonCardGachaRsp = exports.DoRoguelikeDungeonCardGachaReq = exports.RoguelikeDungeonActivityDetailInfo = exports.RogueStageInfo = exports.RoguelikeRuneRecord = exports.RogueEffectRecord = exports.RoguelikeShikigamiRecord = exports.RogueShowAvatarTeamInfo = exports.RogueAvatarInfo = exports.MusicGameStartRsp = exports.MusicGameStartReq = exports.MusicGameSettleRsp = exports.MusicGameSettleReq = exports.MusicGameActivityDetailInfo = exports.MusicGameRecord = exports.PlantFlowerEditFlowerCombinationRsp = exports.PlantFlowerEditFlowerCombinationReq = exports.PlantFlowerGetCanGiveFriendFlowerRsp = exports.PlantFlowerGetCanGiveFriendFlowerReq = exports.PlantFlowerAcceptAllGiveFlowerRsp = exports.PlantFlowerAcceptAllGiveFlowerReq = exports.PlantFlowerAcceptGiveFlowerRsp = exports.PlantFlowerAcceptFlowerResultInfo = exports.PlantFlowerAcceptGiveFlowerReq = exports.PlantFlowerHaveRecvFlowerNotify = exports.PlantFlowerGetRecvFlowerListRsp = exports.PlantFlowerRecvFlowerData = exports.PlantFlowerGetRecvFlowerListReq = exports.PlantFlowerGiveFriendFlowerRsp = exports.PlantFlowerGiveFriendFlowerReq = exports.PlantFlowerGetFriendFlowerWishListRsp = exports.PlantFlowerFriendFlowerWishData = exports.PlantFlowerGetFriendFlowerWishListReq = void 0;
exports.WinterCampAcceptGiveItemReq = exports.WinterCampAcceptItemResultInfo = exports.WinterCampRecvItemNotify = exports.WinterCampGetFriendWishListRsp = exports.WinterCampGetFriendWishListReq = exports.WinterCampFriendWishData = exports.WinterCampSetWishListRsp = exports.WinterCampSetWishListReq = exports.WinterCampGiveFriendItemRsp = exports.WinterCampGiveFriendItemReq = exports.WinterCampRaceScoreNotify = exports.WinterCampStageInfoChangeNotify = exports.WinterCampActivityDetailInfo = exports.WinterCampRaceStageInfo = exports.WinterCampStageInfo = exports.HachiStageInfo = exports.HachiActivityDetailInfo = exports.DigActivityChangeGadgetStateRsp = exports.DigActivityChangeGadgetStateReq = exports.DigActivityMarkPointChangeNotify = exports.DigActivityDetailInfo = exports.DigMarkPoint = exports.RoguelikeRefreshCardCostUpdateNotify = exports.RoguelikeDungeonSettleInfo = exports.RoguelikeSettleCoinInfo = exports.RoguelikeResourceBonusPropUpdateNotify = exports.RoguelikeEffectViewRsp = exports.RoguelikeEffectViewReq = exports.RoguelikeEffectDataNotify = exports.RoguelikeMistClearNotify = exports.RoguelikeRuneRecordUpdateNotify = exports.DisableRoguelikeTrapNotify = exports.RogueSwitchAvatarRsp = exports.RogueSwitchAvatarReq = exports.RoguelikeCardGachaNotify = exports.ClearRoguelikeCurseNotify = exports.RogueResumeDungeonRsp = exports.RogueResumeDungeonReq = exports.RogueHealAvatarsRsp = exports.RogueHealAvatarsReq = exports.RogueDungeonPlayerCellChangeNotify = exports.RogueCellUpdateNotify = exports.StartRogueNormalCellChallengeRsp = exports.StartRogueNormalCellChallengeReq = exports.StartRogueEliteCellChallengeRsp = exports.StartRogueEliteCellChallengeReq = exports.EnterRoguelikeDungeonNotify = exports.RogueCellInfo = exports.GiveUpRoguelikeDungeonCardRsp = exports.GiveUpRoguelikeDungeonCardReq = void 0;
exports.FinishLanternProjectionRsp = exports.FinishLanternProjectionReq = exports.LanternRiteActivityDetailInfo = exports.LanternRiteFireworksInfo = exports.LanternRiteFireworksStageInfo = exports.LanternRiteFireworksChallengeInfo = exports.SalvageStageInfo = exports.SalvageChallengeInfo = exports.SalvageScoreChallengeInfo = exports.SalvageBundleChallengeInfo = exports.LanternProjectionInfo = exports.LanternProjectionLevelInfo = exports.TanukiTravelFinishGuideQuestNotify = exports.TanukiTravelActivityDetailInfo = exports.TanukiTravelLevelData = exports.PotionDungeonResultInfo = exports.PotionRestartDungeonRsp = exports.PotionRestartDungeonReq = exports.PotionSaveDungeonResultRsp = exports.PotionSaveDungeonResultReq = exports.PotionEnterDungeonNotify = exports.PotionDungeonAvatar = exports.PotionEnterDungeonRsp = exports.PotionEnterDungeonReq = exports.PotionAvatarInfo = exports.PotionResetChallengeRsp = exports.PotionResetChallengeReq = exports.PotionActivityDetailInfo = exports.PotionStageData = exports.PotionLevelData = exports.MistTrialGetDungeonExhibitionDataRsp = exports.MistTrialGetDungeonExhibitionDataReq = exports.MistTrialSettleNotify = exports.WinterCampTriathlonRestartRsp = exports.WinterCampTriathlonRestartReq = exports.WinterCampTakeBattleRewardRsp = exports.WinterCampTakeBattleRewardReq = exports.WinterCampTakeExploreRewardRsp = exports.WinterCampTakeExploreRewardReq = exports.WinterCampTriathlonSettleNotify = exports.WinterCampEditSnowmanCombinationRsp = exports.WinterCampEditSnowmanCombinationReq = exports.WinterCampGetRecvItemListRsp = exports.WinterCampGetRecvItemListReq = exports.WinterCampRecvItemData = exports.WinterCampGetCanGiveFriendItemRsp = exports.WinterCampGetCanGiveFriendItemReq = exports.WinterCampAcceptAllGiveItemRsp = exports.WinterCampAcceptAllGiveItemReq = exports.WinterCampAcceptGiveItemRsp = void 0;
exports.BartenderStartLevelReq = exports.BartenderGetFormulaRsp = exports.BartenderGetFormulaReq = exports.BartenderCancelOrderRsp = exports.BartenderCancelOrderReq = exports.BartenderCompleteOrderRsp = exports.BartenderCompleteOrderReq = exports.BartenderActivityDetailInfo = exports.BartenderLevelInfo = exports.BartenderTaskInfo = exports.MichiaeMatsuriGainCrystalExpUpdateNotify = exports.MichiaeMatsuriRemoveChallengeMarkNotify = exports.MichiaeMatsuriRemoveChestMarkNotify = exports.MichiaeMatsuriStartDarkChallengeRsp = exports.MichiaeMatsuriStartDarkChallengeReq = exports.MichiaeMatsuriStartBossChallengeRsp = exports.MichiaeMatsuriStartBossChallengeReq = exports.MichiaeMatsuriUnlockCrystalSkillRsp = exports.MichiaeMatsuriUnlockCrystalSkillReq = exports.MichiaeMatsuriInteractStatueRsp = exports.MichiaeMatsuriInteractStatueReq = exports.MichiaeMatsuriDarkPressureLevelUpdateNotify = exports.MichiaeMatsuriActivityDetailInfo = exports.MichiaeMatsuriChallengePositionInfo = exports.MichiaeMatsuriChestPositionInfo = exports.MichiaeMatsuriStage = exports.UpdateSalvageBundleMarkRsp = exports.UpdateSalvageBundleMarkReq = exports.LanternRiteEndFireworksReformRsp = exports.LanternRiteEndFireworksReformReq = exports.LanternRiteDoFireworksReformRsp = exports.LanternRiteDoFireworksReformReq = exports.LanternRiteStartFireworksReformRsp = exports.LanternRiteFireworksReformSkillInfo = exports.LanternRiteFireworksReformFactorInfo = exports.LanternRiteStartFireworksReformReq = exports.SalvageEscortRestartRsp = exports.SalvageEscortRestartReq = exports.SalvagePreventRestartRsp = exports.SalvagePreventRestartReq = exports.LanternRiteTakeSkinRewardRsp = exports.LanternRiteTakeSkinRewardReq = exports.SalvageEscortSettleNotify = exports.SalvageEscortSettleInfo = exports.SalvagePreventSettleNotify = exports.SalvagePreventSettleInfo = exports.ViewLanternProjectionLevelTipsRsp = exports.ViewLanternProjectionLevelTipsReq = exports.ViewLanternProjectionTipsRsp = exports.ViewLanternProjectionTipsReq = void 0;
exports.PhotoActivityFinishRsp = exports.PhotoActivityFinishReq = exports.PhotoActivityDetailInfo = exports.PhotoPosData = exports.IrodoriMasterGallerySettleNotify = exports.IrodoriMasterGalleryCgEndNotify = exports.IrodoriMasterStartGalleryRsp = exports.IrodoriMasterStartGalleryReq = exports.EnterIrodoriChessDungeonRsp = exports.EnterIrodoriChessDungeonReq = exports.IrodoriChessUnequipCardRsp = exports.IrodoriChessUnequipCardReq = exports.IrodoriChessEquipCardRsp = exports.IrodoriChessEquipCardReq = exports.IrodoriFillPoetryRsp = exports.IrodoriFillPoetryReq = exports.IrodoriScanEntityRsp = exports.IrodoriScanEntityReq = exports.IrodoriEditFlowerCombinationRsp = exports.IrodoriEditFlowerCombinationReq = exports.IrodoriActivityDetailInfo = exports.IrodoriMasterLevelInfo = exports.IrodoriMasterLevelDetailInfo = exports.IrodoriPoetryData = exports.IrodoriPoetryThemeData = exports.IrodoriFlowerData = exports.IrodoriChessData = exports.IrodoriChessLevelData = exports.IrodoriChessMapData = exports.QuickOpenActivityRsp = exports.QuickOpenActivityReq = exports.CrystalLinkRestartDungeonRsp = exports.CrystalLinkRestartDungeonReq = exports.CrystalLinkDungeonInfoNotify = exports.CrystalLinkDungeonAvatarInfo = exports.CrystalLinkEnterDungeonRsp = exports.CrystalLinkEnterDungeonReq = exports.CrystalLinkBuffInfo = exports.CrystalLinkAvatarInfo = exports.CrystalLinkTeamInfo = exports.CrystalLinkLevelInfo = exports.CrystalLinkActivityDetailInfo = exports.UgcActivityDetailInfo = exports.OfficialCustomDungeon = exports.BartenderFinishLevelRsp = exports.BartenderFinishLevelReq = exports.BartenderLevelProgressNotify = exports.BartenderCancelLevelRsp = exports.BartenderCancelLevelReq = exports.BartenderStartLevelRsp = void 0;
exports.StartRogueDiaryPlayRsp = exports.StartRogueDiaryPlayReq = exports.RogueDiaryRoomInfo = exports.RogueDiaryAvatar = exports.RogueDiaryActivityDetailInfo = exports.RogueDiaryProgress = exports.RogueDiaryStageInfo = exports.RogueDiaryDungeonRecord = exports.LuminanceStoneChallengeSettleNotify = exports.LuminanceStoneChallengeSettleInfo = exports.LuminanceStoneChallengeActivityDetailInfo = exports.ActivityGetFriendGiftWishListRsp = exports.ActivityGetFriendGiftWishListReq = exports.ActivityFriendGiftWishData = exports.ActivitySetGiftWishRsp = exports.ActivitySetGiftWishReq = exports.ActivityGetCanGiveFriendGiftRsp = exports.ActivityGetCanGiveFriendGiftReq = exports.ActivityAcceptAllGiveGiftRsp = exports.ActivityAcceptAllGiveGiftReq = exports.ActivityAcceptGiveGiftRsp = exports.ActivityAcceptGiveGiftReq = exports.ActivityAcceptGiftResultInfo = exports.ActivityHaveRecvGiftNotify = exports.ActivityGetRecvGiftListRsp = exports.ActivityGetRecvGiftListReq = exports.ActivityRecvGiftData = exports.ActivityGiveFriendGiftRsp = exports.ActivityGiveFriendGiftReq = exports.GachaActivityNextStageRsp = exports.GachaActivityNextStageReq = exports.GachaActivityResetRsp = exports.GachaActivityResetReq = exports.GachaActivityTakeRewardRsp = exports.GachaActivityTakeRewardReq = exports.GachaActivityCreateRobotRsp = exports.GachaActivityCreateRobotReq = exports.GachaActivityUpdateElemNotify = exports.GachaActivityPercentNotify = exports.GachaActivityDetailInfo = exports.GachaStageData = exports.SpiceActivityGivingRecordNotify = exports.SpiceActivityProcessFoodRsp = exports.SpiceActivityProcessFoodReq = exports.SpiceActivityFinishMakeSpiceRsp = exports.SpiceActivityFinishMakeSpiceReq = exports.SpiceActivityDetailInfo = exports.SpiceStageData = exports.PhotoActivityClientViewRsp = exports.PhotoActivityClientViewReq = void 0;
exports.GearColumnInfo = exports.GearActivityStartPlayGearRsp = exports.GearActivityStartPlayGearReq = exports.GearActivityDetailInfo = exports.JigsawPictureData = exports.GearLevelData = exports.IslandPartySettleNotify = exports.IslandPartyDetailInfo = exports.IslandPartyStageData = exports.SummerTimeV2RestartDungeonRsp = exports.SummerTimeV2RestartDungeonReq = exports.SummerTimeV2RestartBoatGalleryRsp = exports.SummerTimeV2RestartBoatGalleryReq = exports.ActivityReadPushTipsRsp = exports.ActivityReadPushTipsReq = exports.ActivityPushTipsInfoNotify = exports.ActivityPushTipsData = exports.SummerTimeV2BoatSettleNotify = exports.SummerTimeV2BoatStageInfo = exports.SummerTimeV2DungeonStageInfo = exports.SummerTimeV2DetailInfo = exports.RogueDiaryCoinAddNotify = exports.TryEnterNextRogueDiaryDungeonRsp = exports.TryEnterNextRogueDiaryDungeonReq = exports.RogueDiaryReviveAvatarRsp = exports.RogueDiaryReviveAvatarReq = exports.RetryCurRogueDiaryDungeonRsp = exports.RetryCurRogueDiaryDungeonReq = exports.RogueDiaryRepairInfoNotify = exports.TryInterruptRogueDiaryDungeonRsp = exports.TryInterruptRogueDiaryDungeonReq = exports.RogueFinishRepairRsp = exports.RogueFinishRepairReq = exports.RefreshRogueDiaryCardRsp = exports.RefreshRogueDiaryCardReq = exports.GetRogueDairyRepairInfoRsp = exports.GetRogueDairyRepairInfoReq = exports.ReserveRogueDiaryAvatarRsp = exports.ReserveRogueDiaryAvatarReq = exports.RogueDiaryTiredAvatarNotify = exports.StartRogueDiaryRoomRsp = exports.StartRogueDiaryRoomReq = exports.RogueDiaryDungeonSettleNotify = exports.RogueDiaryDungeonInfoNotify = exports.ResumeRogueDiaryDungeonRsp = exports.ResumeRogueDiaryDungeonReq = exports.EnterRogueDiaryDungeonRsp = exports.EnterRogueDiaryDungeonReq = exports.ResetRogueDiaryPlayRsp = exports.ResetRogueDiaryPlayReq = void 0;
exports.VintageHuntingStageData = exports.RockBoardExploreDetailInfo = exports.RockBoardExploreStageData = exports.TreasureSeelieCollectOrbsNotify = exports.TreasureSeelieActivityDetailInfo = exports.TreasureSeelieRegionData = exports.MuqadasPotionCaptureWeaknessRsp = exports.MuqadasPotionCaptureWeaknessReq = exports.MuqadasPotionRestartDungeonRsp = exports.MuqadasPotionRestartDungeonReq = exports.MuqadasPotionDungeonSettleNotify = exports.MuqadasPotionActivityEnterDungeonRsp = exports.MuqadasPotionActivityEnterDungeonReq = exports.MuqadasPotionActivityDetailInfo = exports.MuqadasPotionLevelData = exports.InstableSprayRestartDungeonRsp = exports.InstableSprayRestartDungeonReq = exports.InstableSprayLevelFinishNotify = exports.InstableSpraySwitchTeamRsp = exports.InstableSpraySwitchTeamReq = exports.InstableSprayEnterDungeonRsp = exports.InstableSprayEnterDungeonReq = exports.InstableSprayAvatarInfo = exports.InstableSprayDetailInfo = exports.InstableSprayStageInfo = exports.InstableSprayTeamInfo = exports.GravenInnocencePhotoReminderNotify = exports.GravenInnocencePhotoFinishRsp = exports.GravenInnocencePhotoFinishReq = exports.GravenInnocenceEditCarveCombinationRsp = exports.GravenInnocenceEditCarveCombinationReq = exports.GravenInnocenceRaceRestartRsp = exports.GravenInnocenceRaceRestartReq = exports.GravenInnocenceRaceSettleNotify = exports.GravenInnocenceDetailInfo = exports.GravenInnocenceCarveInfo = exports.GravenInnocenceCarveStageInfo = exports.GravenInnocenceRaceInfo = exports.GravenInnocenceRaceLevelInfo = exports.GravenInnocenceCampInfo = exports.GravenInnocenceCampStageInfo = exports.GravenInnocencePhotoInfo = exports.GravenInnocencePhotoObjectInfo = exports.GravenInnocencePhotoStageInfo = exports.GearActivityFinishPlayPictureRsp = exports.GearActivityFinishPlayPictureReq = exports.GearActivityStartPlayPictureRsp = exports.GearActivityStartPlayPictureReq = exports.GearActivityFinishPlayGearRsp = exports.GearActivityFinishPlayGearReq = void 0;
exports.EnterFungusFighterPlotDungeonReq = exports.FungusFighterDetailInfo = exports.FungusTrainingProgressDetail = exports.FungusTrainingPoolPreviewDetail = exports.FungusTrainingMonsterPreviewDetail = exports.FungusFighterMonsterDetail = exports.FungusTrainingDungeonDetail = exports.FungusPlotStageDetail = exports.FungusDetail = exports.WindFieldRestartDungeonRsp = exports.WindFieldRestartDungeonReq = exports.WindFieldStageInfo = exports.WindFieldDetailInfo = exports.VintageMarketNpcEventFinishNotify = exports.VintageMarketDividendFinishNotify = exports.VintageMarketStoreViewStrategyRsp = exports.VintageMarketStoreViewStrategyReq = exports.VintageMarketStoreChooseStrategyRsp = exports.VintageMarketStoreChooseStrategyReq = exports.VintageMarketStoreUnlockSlotRsp = exports.VintageMarketStoreUnlockSlotReq = exports.VintagePresentFinishNotify = exports.VintageMarketFinishStorePlayRsp = exports.VintageMarketFinishStorePlayReq = exports.VintageMarketStartStorePlayRsp = exports.VintageMarketStartStorePlayReq = exports.VintageCampStageFinishNotify = exports.VintageCampGroupBundleRegisterNotify = exports.VintageHuntingStartGalleryRsp = exports.VintageHuntingStartGalleryReq = exports.VintageDecorateBoothRsp = exports.VintageDecorateBoothReq = exports.VintagePresentFinishNoify = exports.SceneGalleryVintageHuntingSettleNotify = exports.VintageHuntingThirdStageSettleInfo = exports.VintageHuntingSecondStageSettleInfo = exports.VintageHuntingFirstStageSettleInfo = exports.VintageMarketDeliverItemRsp = exports.VintageMarketDeliverItemReq = exports.VintageActivityDetailInfo = exports.VintageMarketInfo = exports.VintageMarketStoreOpInfo = exports.VintageMarketStoreInfo = exports.VintageMarketDealInfo = exports.VintageMarketTraderInfo = exports.VintageCampChallengeStageData = exports.VintageCampChallengeLevelData = exports.VintageBoothUsedItemData = exports.VintagePresentStageData = exports.VintagePresentLevelData = void 0;
exports.EffigyChallengeV2DungeonInfoNotify = exports.EffigyChallengeV2ChooseSkillRsp = exports.EffigyChallengeV2ChooseSkillReq = exports.EffigyChallengeV2RestartDungeonRsp = exports.EffigyChallengeV2RestartDungeonReq = exports.EffigyChallengeV2EnterDungeonRsp = exports.EffigyChallengeV2EnterDungeonReq = exports.EffigyChallengeV2DetailInfo = exports.EffigyChallengeV2LevelData = exports.CharAmusementSettleNotify = exports.CharAmusementDetailInfo = exports.CharAmusementStageData = exports.FungusFighterRestartTraningDungeonRsp = exports.FungusFighterRestartTraningDungeonReq = exports.FungusFighterUseBackupFungusRsp = exports.FungusFighterUseBackupFungusReq = exports.FungusFighterClearTrainingRuntimeDataRsp = exports.FungusFighterClearTrainingRuntimeDataReq = exports.FungusFighterTrainingGallerySettleNotify = exports.FungusFighterTrainingSelectFungusRsp = exports.FungusFighterTrainingSelectFungusReq = exports.FungusFighterRuntimeDataNotify = exports.EnterFungusFighterTrainingDungeonRsp = exports.EnterFungusFighterTrainingDungeonReq = exports.FungusRenameRsp = exports.FungusRenameReq = exports.FungusCultivateRsp = exports.FungusCultivateReq = exports.FungusFighterPlotInfoNotify = exports.EnterFungusFighterPlotDungeonRsp = void 0;
// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_activity.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
const runtime_1 = require("@protobuf-ts/runtime");
const runtime_2 = require("@protobuf-ts/runtime");
const runtime_3 = require("@protobuf-ts/runtime");
const runtime_4 = require("@protobuf-ts/runtime");
const runtime_5 = require("@protobuf-ts/runtime");
const define_1 = require("./define");
const cmd_gallery_1 = require("./cmd_gallery");
const cmd_gallery_2 = require("./cmd_gallery");
const cmd_gallery_3 = require("./cmd_gallery");
const define_2 = require("./define");
const cmd_gallery_4 = require("./cmd_gallery");
const cmd_gallery_5 = require("./cmd_gallery");
const cmd_multistage_play_1 = require("./cmd_multistage_play");
const cmd_gallery_6 = require("./cmd_gallery");
const cmd_gallery_7 = require("./cmd_gallery");
const define_3 = require("./define");
const cmd_ugc_1 = require("./cmd_ugc");
const define_4 = require("./define");
const define_5 = require("./define");
const define_6 = require("./define");
const cmd_gallery_8 = require("./cmd_gallery");
const cmd_gallery_9 = require("./cmd_gallery");
const cmd_gallery_10 = require("./cmd_gallery");
const cmd_gallery_11 = require("./cmd_gallery");
const cmd_gallery_12 = require("./cmd_gallery");
const define_7 = require("./define");
const define_8 = require("./define");
const define_9 = require("./define");
const define_10 = require("./define");
const define_11 = require("./define");
const define_12 = require("./define");
const define_13 = require("./define");
/**
 * @generated from protobuf enum com.midnights.game.GetActivityScheduleReq.CmdId
 */
var GetActivityScheduleReq_CmdId;
(function (GetActivityScheduleReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityScheduleReq_CmdId[GetActivityScheduleReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2136;
     */
    GetActivityScheduleReq_CmdId[GetActivityScheduleReq_CmdId["CMD_ID"] = 2136] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityScheduleReq_CmdId[GetActivityScheduleReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityScheduleReq_CmdId[GetActivityScheduleReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityScheduleReq_CmdId[GetActivityScheduleReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetActivityScheduleReq_CmdId = exports.GetActivityScheduleReq_CmdId || (exports.GetActivityScheduleReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetActivityScheduleRsp.CmdId
 */
var GetActivityScheduleRsp_CmdId;
(function (GetActivityScheduleRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityScheduleRsp_CmdId[GetActivityScheduleRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2107;
     */
    GetActivityScheduleRsp_CmdId[GetActivityScheduleRsp_CmdId["CMD_ID"] = 2107] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityScheduleRsp_CmdId[GetActivityScheduleRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityScheduleRsp_CmdId[GetActivityScheduleRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetActivityScheduleRsp_CmdId = exports.GetActivityScheduleRsp_CmdId || (exports.GetActivityScheduleRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetActivityInfoReq.CmdId
 */
var GetActivityInfoReq_CmdId;
(function (GetActivityInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityInfoReq_CmdId[GetActivityInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2095;
     */
    GetActivityInfoReq_CmdId[GetActivityInfoReq_CmdId["CMD_ID"] = 2095] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityInfoReq_CmdId[GetActivityInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityInfoReq_CmdId[GetActivityInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityInfoReq_CmdId[GetActivityInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetActivityInfoReq_CmdId = exports.GetActivityInfoReq_CmdId || (exports.GetActivityInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetActivityInfoRsp.CmdId
 */
var GetActivityInfoRsp_CmdId;
(function (GetActivityInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityInfoRsp_CmdId[GetActivityInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2041;
     */
    GetActivityInfoRsp_CmdId[GetActivityInfoRsp_CmdId["CMD_ID"] = 2041] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetActivityInfoRsp_CmdId[GetActivityInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetActivityInfoRsp_CmdId[GetActivityInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetActivityInfoRsp_CmdId = exports.GetActivityInfoRsp_CmdId || (exports.GetActivityInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityPlayOpenAnimNotify.CmdId
 */
var ActivityPlayOpenAnimNotify_CmdId;
(function (ActivityPlayOpenAnimNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityPlayOpenAnimNotify_CmdId[ActivityPlayOpenAnimNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2157;
     */
    ActivityPlayOpenAnimNotify_CmdId[ActivityPlayOpenAnimNotify_CmdId["CMD_ID"] = 2157] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityPlayOpenAnimNotify_CmdId[ActivityPlayOpenAnimNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityPlayOpenAnimNotify_CmdId[ActivityPlayOpenAnimNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityPlayOpenAnimNotify_CmdId[ActivityPlayOpenAnimNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityPlayOpenAnimNotify_CmdId = exports.ActivityPlayOpenAnimNotify_CmdId || (exports.ActivityPlayOpenAnimNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityInfoNotify.CmdId
 */
var ActivityInfoNotify_CmdId;
(function (ActivityInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityInfoNotify_CmdId[ActivityInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2060;
     */
    ActivityInfoNotify_CmdId[ActivityInfoNotify_CmdId["CMD_ID"] = 2060] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityInfoNotify_CmdId[ActivityInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityInfoNotify_CmdId[ActivityInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityInfoNotify_CmdId[ActivityInfoNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityInfoNotify_CmdId = exports.ActivityInfoNotify_CmdId || (exports.ActivityInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityScheduleInfoNotify.CmdId
 */
var ActivityScheduleInfoNotify_CmdId;
(function (ActivityScheduleInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityScheduleInfoNotify_CmdId[ActivityScheduleInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2073;
     */
    ActivityScheduleInfoNotify_CmdId[ActivityScheduleInfoNotify_CmdId["CMD_ID"] = 2073] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityScheduleInfoNotify_CmdId[ActivityScheduleInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityScheduleInfoNotify_CmdId[ActivityScheduleInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityScheduleInfoNotify_CmdId[ActivityScheduleInfoNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityScheduleInfoNotify_CmdId = exports.ActivityScheduleInfoNotify_CmdId || (exports.ActivityScheduleInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardReq.CmdId
 */
var ActivityTakeWatcherRewardReq_CmdId;
(function (ActivityTakeWatcherRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardReq_CmdId[ActivityTakeWatcherRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2038;
     */
    ActivityTakeWatcherRewardReq_CmdId[ActivityTakeWatcherRewardReq_CmdId["CMD_ID"] = 2038] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardReq_CmdId[ActivityTakeWatcherRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardReq_CmdId[ActivityTakeWatcherRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardReq_CmdId[ActivityTakeWatcherRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityTakeWatcherRewardReq_CmdId = exports.ActivityTakeWatcherRewardReq_CmdId || (exports.ActivityTakeWatcherRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardRsp.CmdId
 */
var ActivityTakeWatcherRewardRsp_CmdId;
(function (ActivityTakeWatcherRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardRsp_CmdId[ActivityTakeWatcherRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2034;
     */
    ActivityTakeWatcherRewardRsp_CmdId[ActivityTakeWatcherRewardRsp_CmdId["CMD_ID"] = 2034] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardRsp_CmdId[ActivityTakeWatcherRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardRsp_CmdId[ActivityTakeWatcherRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityTakeWatcherRewardRsp_CmdId = exports.ActivityTakeWatcherRewardRsp_CmdId || (exports.ActivityTakeWatcherRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityUpdateWatcherNotify.CmdId
 */
var ActivityUpdateWatcherNotify_CmdId;
(function (ActivityUpdateWatcherNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityUpdateWatcherNotify_CmdId[ActivityUpdateWatcherNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2156;
     */
    ActivityUpdateWatcherNotify_CmdId[ActivityUpdateWatcherNotify_CmdId["CMD_ID"] = 2156] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityUpdateWatcherNotify_CmdId[ActivityUpdateWatcherNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityUpdateWatcherNotify_CmdId[ActivityUpdateWatcherNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityUpdateWatcherNotify_CmdId[ActivityUpdateWatcherNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityUpdateWatcherNotify_CmdId = exports.ActivityUpdateWatcherNotify_CmdId || (exports.ActivityUpdateWatcherNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivitySelectAvatarCardReq.CmdId
 */
var ActivitySelectAvatarCardReq_CmdId;
(function (ActivitySelectAvatarCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySelectAvatarCardReq_CmdId[ActivitySelectAvatarCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2028;
     */
    ActivitySelectAvatarCardReq_CmdId[ActivitySelectAvatarCardReq_CmdId["CMD_ID"] = 2028] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySelectAvatarCardReq_CmdId[ActivitySelectAvatarCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySelectAvatarCardReq_CmdId[ActivitySelectAvatarCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySelectAvatarCardReq_CmdId[ActivitySelectAvatarCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivitySelectAvatarCardReq_CmdId = exports.ActivitySelectAvatarCardReq_CmdId || (exports.ActivitySelectAvatarCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivitySelectAvatarCardRsp.CmdId
 */
var ActivitySelectAvatarCardRsp_CmdId;
(function (ActivitySelectAvatarCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySelectAvatarCardRsp_CmdId[ActivitySelectAvatarCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2189;
     */
    ActivitySelectAvatarCardRsp_CmdId[ActivitySelectAvatarCardRsp_CmdId["CMD_ID"] = 2189] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySelectAvatarCardRsp_CmdId[ActivitySelectAvatarCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySelectAvatarCardRsp_CmdId[ActivitySelectAvatarCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivitySelectAvatarCardRsp_CmdId = exports.ActivitySelectAvatarCardRsp_CmdId || (exports.ActivitySelectAvatarCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityCoinInfoNotify.CmdId
 */
var ActivityCoinInfoNotify_CmdId;
(function (ActivityCoinInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityCoinInfoNotify_CmdId[ActivityCoinInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2008;
     */
    ActivityCoinInfoNotify_CmdId[ActivityCoinInfoNotify_CmdId["CMD_ID"] = 2008] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityCoinInfoNotify_CmdId[ActivityCoinInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityCoinInfoNotify_CmdId[ActivityCoinInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityCoinInfoNotify_CmdId = exports.ActivityCoinInfoNotify_CmdId || (exports.ActivityCoinInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampReq.CmdId
 */
var SeaLampFlyLampReq_CmdId;
(function (SeaLampFlyLampReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampReq_CmdId[SeaLampFlyLampReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2199;
     */
    SeaLampFlyLampReq_CmdId[SeaLampFlyLampReq_CmdId["CMD_ID"] = 2199] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampReq_CmdId[SeaLampFlyLampReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampFlyLampReq_CmdId[SeaLampFlyLampReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampFlyLampReq_CmdId[SeaLampFlyLampReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SeaLampFlyLampReq_CmdId = exports.SeaLampFlyLampReq_CmdId || (exports.SeaLampFlyLampReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampRsp.CmdId
 */
var SeaLampFlyLampRsp_CmdId;
(function (SeaLampFlyLampRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampRsp_CmdId[SeaLampFlyLampRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2192;
     */
    SeaLampFlyLampRsp_CmdId[SeaLampFlyLampRsp_CmdId["CMD_ID"] = 2192] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampRsp_CmdId[SeaLampFlyLampRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampFlyLampRsp_CmdId[SeaLampFlyLampRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampFlyLampRsp_CmdId = exports.SeaLampFlyLampRsp_CmdId || (exports.SeaLampFlyLampRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakeContributionRewardReq.CmdId
 */
var SeaLampTakeContributionRewardReq_CmdId;
(function (SeaLampTakeContributionRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakeContributionRewardReq_CmdId[SeaLampTakeContributionRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2019;
     */
    SeaLampTakeContributionRewardReq_CmdId[SeaLampTakeContributionRewardReq_CmdId["CMD_ID"] = 2019] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakeContributionRewardReq_CmdId[SeaLampTakeContributionRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakeContributionRewardReq_CmdId[SeaLampTakeContributionRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakeContributionRewardReq_CmdId[SeaLampTakeContributionRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SeaLampTakeContributionRewardReq_CmdId = exports.SeaLampTakeContributionRewardReq_CmdId || (exports.SeaLampTakeContributionRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakeContributionRewardRsp.CmdId
 */
var SeaLampTakeContributionRewardRsp_CmdId;
(function (SeaLampTakeContributionRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakeContributionRewardRsp_CmdId[SeaLampTakeContributionRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2177;
     */
    SeaLampTakeContributionRewardRsp_CmdId[SeaLampTakeContributionRewardRsp_CmdId["CMD_ID"] = 2177] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakeContributionRewardRsp_CmdId[SeaLampTakeContributionRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakeContributionRewardRsp_CmdId[SeaLampTakeContributionRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampTakeContributionRewardRsp_CmdId = exports.SeaLampTakeContributionRewardRsp_CmdId || (exports.SeaLampTakeContributionRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakePhaseRewardReq.CmdId
 */
var SeaLampTakePhaseRewardReq_CmdId;
(function (SeaLampTakePhaseRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakePhaseRewardReq_CmdId[SeaLampTakePhaseRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2176;
     */
    SeaLampTakePhaseRewardReq_CmdId[SeaLampTakePhaseRewardReq_CmdId["CMD_ID"] = 2176] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakePhaseRewardReq_CmdId[SeaLampTakePhaseRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakePhaseRewardReq_CmdId[SeaLampTakePhaseRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakePhaseRewardReq_CmdId[SeaLampTakePhaseRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SeaLampTakePhaseRewardReq_CmdId = exports.SeaLampTakePhaseRewardReq_CmdId || (exports.SeaLampTakePhaseRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampTakePhaseRewardRsp.CmdId
 */
var SeaLampTakePhaseRewardRsp_CmdId;
(function (SeaLampTakePhaseRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakePhaseRewardRsp_CmdId[SeaLampTakePhaseRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2190;
     */
    SeaLampTakePhaseRewardRsp_CmdId[SeaLampTakePhaseRewardRsp_CmdId["CMD_ID"] = 2190] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampTakePhaseRewardRsp_CmdId[SeaLampTakePhaseRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampTakePhaseRewardRsp_CmdId[SeaLampTakePhaseRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampTakePhaseRewardRsp_CmdId = exports.SeaLampTakePhaseRewardRsp_CmdId || (exports.SeaLampTakePhaseRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampContributeItemReq.CmdId
 */
var SeaLampContributeItemReq_CmdId;
(function (SeaLampContributeItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampContributeItemReq_CmdId[SeaLampContributeItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2123;
     */
    SeaLampContributeItemReq_CmdId[SeaLampContributeItemReq_CmdId["CMD_ID"] = 2123] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampContributeItemReq_CmdId[SeaLampContributeItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampContributeItemReq_CmdId[SeaLampContributeItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampContributeItemReq_CmdId[SeaLampContributeItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SeaLampContributeItemReq_CmdId = exports.SeaLampContributeItemReq_CmdId || (exports.SeaLampContributeItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampContributeItemRsp.CmdId
 */
var SeaLampContributeItemRsp_CmdId;
(function (SeaLampContributeItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampContributeItemRsp_CmdId[SeaLampContributeItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2139;
     */
    SeaLampContributeItemRsp_CmdId[SeaLampContributeItemRsp_CmdId["CMD_ID"] = 2139] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampContributeItemRsp_CmdId[SeaLampContributeItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampContributeItemRsp_CmdId[SeaLampContributeItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampContributeItemRsp_CmdId = exports.SeaLampContributeItemRsp_CmdId || (exports.SeaLampContributeItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampFlyLampNotify.CmdId
 */
var SeaLampFlyLampNotify_CmdId;
(function (SeaLampFlyLampNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampNotify_CmdId[SeaLampFlyLampNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2105;
     */
    SeaLampFlyLampNotify_CmdId[SeaLampFlyLampNotify_CmdId["CMD_ID"] = 2105] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampFlyLampNotify_CmdId[SeaLampFlyLampNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampFlyLampNotify_CmdId[SeaLampFlyLampNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampFlyLampNotify_CmdId = exports.SeaLampFlyLampNotify_CmdId || (exports.SeaLampFlyLampNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampCoinNotify.CmdId
 */
var SeaLampCoinNotify_CmdId;
(function (SeaLampCoinNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampCoinNotify_CmdId[SeaLampCoinNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2114;
     */
    SeaLampCoinNotify_CmdId[SeaLampCoinNotify_CmdId["CMD_ID"] = 2114] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampCoinNotify_CmdId[SeaLampCoinNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampCoinNotify_CmdId[SeaLampCoinNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampCoinNotify_CmdId = exports.SeaLampCoinNotify_CmdId || (exports.SeaLampCoinNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SeaLampPopularityNotify.CmdId
 */
var SeaLampPopularityNotify_CmdId;
(function (SeaLampPopularityNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampPopularityNotify_CmdId[SeaLampPopularityNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2032;
     */
    SeaLampPopularityNotify_CmdId[SeaLampPopularityNotify_CmdId["CMD_ID"] = 2032] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SeaLampPopularityNotify_CmdId[SeaLampPopularityNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SeaLampPopularityNotify_CmdId[SeaLampPopularityNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SeaLampPopularityNotify_CmdId = exports.SeaLampPopularityNotify_CmdId || (exports.SeaLampPopularityNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LoadActivityTerrainNotify.CmdId
 */
var LoadActivityTerrainNotify_CmdId;
(function (LoadActivityTerrainNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LoadActivityTerrainNotify_CmdId[LoadActivityTerrainNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2029;
     */
    LoadActivityTerrainNotify_CmdId[LoadActivityTerrainNotify_CmdId["CMD_ID"] = 2029] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LoadActivityTerrainNotify_CmdId[LoadActivityTerrainNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LoadActivityTerrainNotify_CmdId[LoadActivityTerrainNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LoadActivityTerrainNotify_CmdId[LoadActivityTerrainNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LoadActivityTerrainNotify_CmdId = exports.LoadActivityTerrainNotify_CmdId || (exports.LoadActivityTerrainNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ServerAnnounceNotify.CmdId
 */
var ServerAnnounceNotify_CmdId;
(function (ServerAnnounceNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ServerAnnounceNotify_CmdId[ServerAnnounceNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2197;
     */
    ServerAnnounceNotify_CmdId[ServerAnnounceNotify_CmdId["CMD_ID"] = 2197] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ServerAnnounceNotify_CmdId[ServerAnnounceNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ServerAnnounceNotify_CmdId[ServerAnnounceNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ServerAnnounceNotify_CmdId = exports.ServerAnnounceNotify_CmdId || (exports.ServerAnnounceNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ServerAnnounceRevokeNotify.CmdId
 */
var ServerAnnounceRevokeNotify_CmdId;
(function (ServerAnnounceRevokeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ServerAnnounceRevokeNotify_CmdId[ServerAnnounceRevokeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2092;
     */
    ServerAnnounceRevokeNotify_CmdId[ServerAnnounceRevokeNotify_CmdId["CMD_ID"] = 2092] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ServerAnnounceRevokeNotify_CmdId[ServerAnnounceRevokeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ServerAnnounceRevokeNotify_CmdId[ServerAnnounceRevokeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ServerAnnounceRevokeNotify_CmdId = exports.ServerAnnounceRevokeNotify_CmdId || (exports.ServerAnnounceRevokeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerNotify.CmdId
 */
var ActivityBannerNotify_CmdId;
(function (ActivityBannerNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerNotify_CmdId[ActivityBannerNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2155;
     */
    ActivityBannerNotify_CmdId[ActivityBannerNotify_CmdId["CMD_ID"] = 2155] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerNotify_CmdId[ActivityBannerNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityBannerNotify_CmdId[ActivityBannerNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityBannerNotify_CmdId = exports.ActivityBannerNotify_CmdId || (exports.ActivityBannerNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerClearReq.CmdId
 */
var ActivityBannerClearReq_CmdId;
(function (ActivityBannerClearReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerClearReq_CmdId[ActivityBannerClearReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2009;
     */
    ActivityBannerClearReq_CmdId[ActivityBannerClearReq_CmdId["CMD_ID"] = 2009] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerClearReq_CmdId[ActivityBannerClearReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityBannerClearReq_CmdId[ActivityBannerClearReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityBannerClearReq_CmdId[ActivityBannerClearReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityBannerClearReq_CmdId = exports.ActivityBannerClearReq_CmdId || (exports.ActivityBannerClearReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityBannerClearRsp.CmdId
 */
var ActivityBannerClearRsp_CmdId;
(function (ActivityBannerClearRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerClearRsp_CmdId[ActivityBannerClearRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2163;
     */
    ActivityBannerClearRsp_CmdId[ActivityBannerClearRsp_CmdId["CMD_ID"] = 2163] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityBannerClearRsp_CmdId[ActivityBannerClearRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityBannerClearRsp_CmdId[ActivityBannerClearRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityBannerClearRsp_CmdId = exports.ActivityBannerClearRsp_CmdId || (exports.ActivityBannerClearRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanDeliverItemReq.CmdId
 */
var SalesmanDeliverItemReq_CmdId;
(function (SalesmanDeliverItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanDeliverItemReq_CmdId[SalesmanDeliverItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2138;
     */
    SalesmanDeliverItemReq_CmdId[SalesmanDeliverItemReq_CmdId["CMD_ID"] = 2138] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanDeliverItemReq_CmdId[SalesmanDeliverItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanDeliverItemReq_CmdId[SalesmanDeliverItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanDeliverItemReq_CmdId[SalesmanDeliverItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SalesmanDeliverItemReq_CmdId = exports.SalesmanDeliverItemReq_CmdId || (exports.SalesmanDeliverItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanDeliverItemRsp.CmdId
 */
var SalesmanDeliverItemRsp_CmdId;
(function (SalesmanDeliverItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanDeliverItemRsp_CmdId[SalesmanDeliverItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2104;
     */
    SalesmanDeliverItemRsp_CmdId[SalesmanDeliverItemRsp_CmdId["CMD_ID"] = 2104] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanDeliverItemRsp_CmdId[SalesmanDeliverItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanDeliverItemRsp_CmdId[SalesmanDeliverItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalesmanDeliverItemRsp_CmdId = exports.SalesmanDeliverItemRsp_CmdId || (exports.SalesmanDeliverItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeRewardReq.CmdId
 */
var SalesmanTakeRewardReq_CmdId;
(function (SalesmanTakeRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeRewardReq_CmdId[SalesmanTakeRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2191;
     */
    SalesmanTakeRewardReq_CmdId[SalesmanTakeRewardReq_CmdId["CMD_ID"] = 2191] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeRewardReq_CmdId[SalesmanTakeRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeRewardReq_CmdId[SalesmanTakeRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeRewardReq_CmdId[SalesmanTakeRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SalesmanTakeRewardReq_CmdId = exports.SalesmanTakeRewardReq_CmdId || (exports.SalesmanTakeRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeRewardRsp.CmdId
 */
var SalesmanTakeRewardRsp_CmdId;
(function (SalesmanTakeRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeRewardRsp_CmdId[SalesmanTakeRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2110;
     */
    SalesmanTakeRewardRsp_CmdId[SalesmanTakeRewardRsp_CmdId["CMD_ID"] = 2110] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeRewardRsp_CmdId[SalesmanTakeRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeRewardRsp_CmdId[SalesmanTakeRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalesmanTakeRewardRsp_CmdId = exports.SalesmanTakeRewardRsp_CmdId || (exports.SalesmanTakeRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityCondStateChangeNotify.CmdId
 */
var ActivityCondStateChangeNotify_CmdId;
(function (ActivityCondStateChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityCondStateChangeNotify_CmdId[ActivityCondStateChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2140;
     */
    ActivityCondStateChangeNotify_CmdId[ActivityCondStateChangeNotify_CmdId["CMD_ID"] = 2140] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityCondStateChangeNotify_CmdId[ActivityCondStateChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityCondStateChangeNotify_CmdId[ActivityCondStateChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityCondStateChangeNotify_CmdId = exports.ActivityCondStateChangeNotify_CmdId || (exports.ActivityCondStateChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeSpecialRewardReq.CmdId
 */
var SalesmanTakeSpecialRewardReq_CmdId;
(function (SalesmanTakeSpecialRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeSpecialRewardReq_CmdId[SalesmanTakeSpecialRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2145;
     */
    SalesmanTakeSpecialRewardReq_CmdId[SalesmanTakeSpecialRewardReq_CmdId["CMD_ID"] = 2145] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeSpecialRewardReq_CmdId[SalesmanTakeSpecialRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeSpecialRewardReq_CmdId[SalesmanTakeSpecialRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeSpecialRewardReq_CmdId[SalesmanTakeSpecialRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SalesmanTakeSpecialRewardReq_CmdId = exports.SalesmanTakeSpecialRewardReq_CmdId || (exports.SalesmanTakeSpecialRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalesmanTakeSpecialRewardRsp.CmdId
 */
var SalesmanTakeSpecialRewardRsp_CmdId;
(function (SalesmanTakeSpecialRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeSpecialRewardRsp_CmdId[SalesmanTakeSpecialRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2124;
     */
    SalesmanTakeSpecialRewardRsp_CmdId[SalesmanTakeSpecialRewardRsp_CmdId["CMD_ID"] = 2124] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalesmanTakeSpecialRewardRsp_CmdId[SalesmanTakeSpecialRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalesmanTakeSpecialRewardRsp_CmdId[SalesmanTakeSpecialRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalesmanTakeSpecialRewardRsp_CmdId = exports.SalesmanTakeSpecialRewardRsp_CmdId || (exports.SalesmanTakeSpecialRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetAuthSalesmanInfoReq.CmdId
 */
var GetAuthSalesmanInfoReq_CmdId;
(function (GetAuthSalesmanInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetAuthSalesmanInfoReq_CmdId[GetAuthSalesmanInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2070;
     */
    GetAuthSalesmanInfoReq_CmdId[GetAuthSalesmanInfoReq_CmdId["CMD_ID"] = 2070] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetAuthSalesmanInfoReq_CmdId[GetAuthSalesmanInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetAuthSalesmanInfoReq_CmdId[GetAuthSalesmanInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetAuthSalesmanInfoReq_CmdId[GetAuthSalesmanInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetAuthSalesmanInfoReq_CmdId = exports.GetAuthSalesmanInfoReq_CmdId || (exports.GetAuthSalesmanInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetAuthSalesmanInfoRsp.CmdId
 */
var GetAuthSalesmanInfoRsp_CmdId;
(function (GetAuthSalesmanInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetAuthSalesmanInfoRsp_CmdId[GetAuthSalesmanInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2004;
     */
    GetAuthSalesmanInfoRsp_CmdId[GetAuthSalesmanInfoRsp_CmdId["CMD_ID"] = 2004] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetAuthSalesmanInfoRsp_CmdId[GetAuthSalesmanInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetAuthSalesmanInfoRsp_CmdId[GetAuthSalesmanInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetAuthSalesmanInfoRsp_CmdId = exports.GetAuthSalesmanInfoRsp_CmdId || (exports.GetAuthSalesmanInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterTrialAvatarActivityDungeonReq.CmdId
 */
var EnterTrialAvatarActivityDungeonReq_CmdId;
(function (EnterTrialAvatarActivityDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterTrialAvatarActivityDungeonReq_CmdId[EnterTrialAvatarActivityDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2118;
     */
    EnterTrialAvatarActivityDungeonReq_CmdId[EnterTrialAvatarActivityDungeonReq_CmdId["CMD_ID"] = 2118] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterTrialAvatarActivityDungeonReq_CmdId[EnterTrialAvatarActivityDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterTrialAvatarActivityDungeonReq_CmdId[EnterTrialAvatarActivityDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterTrialAvatarActivityDungeonReq_CmdId[EnterTrialAvatarActivityDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterTrialAvatarActivityDungeonReq_CmdId = exports.EnterTrialAvatarActivityDungeonReq_CmdId || (exports.EnterTrialAvatarActivityDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterTrialAvatarActivityDungeonRsp.CmdId
 */
var EnterTrialAvatarActivityDungeonRsp_CmdId;
(function (EnterTrialAvatarActivityDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterTrialAvatarActivityDungeonRsp_CmdId[EnterTrialAvatarActivityDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2183;
     */
    EnterTrialAvatarActivityDungeonRsp_CmdId[EnterTrialAvatarActivityDungeonRsp_CmdId["CMD_ID"] = 2183] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterTrialAvatarActivityDungeonRsp_CmdId[EnterTrialAvatarActivityDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterTrialAvatarActivityDungeonRsp_CmdId[EnterTrialAvatarActivityDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterTrialAvatarActivityDungeonRsp_CmdId = exports.EnterTrialAvatarActivityDungeonRsp_CmdId || (exports.EnterTrialAvatarActivityDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ReceivedTrialAvatarActivityRewardReq.CmdId
 */
var ReceivedTrialAvatarActivityRewardReq_CmdId;
(function (ReceivedTrialAvatarActivityRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReceivedTrialAvatarActivityRewardReq_CmdId[ReceivedTrialAvatarActivityRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2130;
     */
    ReceivedTrialAvatarActivityRewardReq_CmdId[ReceivedTrialAvatarActivityRewardReq_CmdId["CMD_ID"] = 2130] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReceivedTrialAvatarActivityRewardReq_CmdId[ReceivedTrialAvatarActivityRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReceivedTrialAvatarActivityRewardReq_CmdId[ReceivedTrialAvatarActivityRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReceivedTrialAvatarActivityRewardReq_CmdId[ReceivedTrialAvatarActivityRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ReceivedTrialAvatarActivityRewardReq_CmdId = exports.ReceivedTrialAvatarActivityRewardReq_CmdId || (exports.ReceivedTrialAvatarActivityRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ReceivedTrialAvatarActivityRewardRsp.CmdId
 */
var ReceivedTrialAvatarActivityRewardRsp_CmdId;
(function (ReceivedTrialAvatarActivityRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReceivedTrialAvatarActivityRewardRsp_CmdId[ReceivedTrialAvatarActivityRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2076;
     */
    ReceivedTrialAvatarActivityRewardRsp_CmdId[ReceivedTrialAvatarActivityRewardRsp_CmdId["CMD_ID"] = 2076] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReceivedTrialAvatarActivityRewardRsp_CmdId[ReceivedTrialAvatarActivityRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReceivedTrialAvatarActivityRewardRsp_CmdId[ReceivedTrialAvatarActivityRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ReceivedTrialAvatarActivityRewardRsp_CmdId = exports.ReceivedTrialAvatarActivityRewardRsp_CmdId || (exports.ReceivedTrialAvatarActivityRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TrialAvatarFirstPassDungeonNotify.CmdId
 */
var TrialAvatarFirstPassDungeonNotify_CmdId;
(function (TrialAvatarFirstPassDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TrialAvatarFirstPassDungeonNotify_CmdId[TrialAvatarFirstPassDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2013;
     */
    TrialAvatarFirstPassDungeonNotify_CmdId[TrialAvatarFirstPassDungeonNotify_CmdId["CMD_ID"] = 2013] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TrialAvatarFirstPassDungeonNotify_CmdId[TrialAvatarFirstPassDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TrialAvatarFirstPassDungeonNotify_CmdId[TrialAvatarFirstPassDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TrialAvatarFirstPassDungeonNotify_CmdId = exports.TrialAvatarFirstPassDungeonNotify_CmdId || (exports.TrialAvatarFirstPassDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TrialAvatarInDungeonIndexNotify.CmdId
 */
var TrialAvatarInDungeonIndexNotify_CmdId;
(function (TrialAvatarInDungeonIndexNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TrialAvatarInDungeonIndexNotify_CmdId[TrialAvatarInDungeonIndexNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2186;
     */
    TrialAvatarInDungeonIndexNotify_CmdId[TrialAvatarInDungeonIndexNotify_CmdId["CMD_ID"] = 2186] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TrialAvatarInDungeonIndexNotify_CmdId[TrialAvatarInDungeonIndexNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TrialAvatarInDungeonIndexNotify_CmdId[TrialAvatarInDungeonIndexNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TrialAvatarInDungeonIndexNotify_CmdId = exports.TrialAvatarInDungeonIndexNotify_CmdId || (exports.TrialAvatarInDungeonIndexNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeDeliveryDailyRewardReq.CmdId
 */
var TakeDeliveryDailyRewardReq_CmdId;
(function (TakeDeliveryDailyRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeDeliveryDailyRewardReq_CmdId[TakeDeliveryDailyRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2121;
     */
    TakeDeliveryDailyRewardReq_CmdId[TakeDeliveryDailyRewardReq_CmdId["CMD_ID"] = 2121] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeDeliveryDailyRewardReq_CmdId[TakeDeliveryDailyRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeDeliveryDailyRewardReq_CmdId[TakeDeliveryDailyRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeDeliveryDailyRewardReq_CmdId[TakeDeliveryDailyRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TakeDeliveryDailyRewardReq_CmdId = exports.TakeDeliveryDailyRewardReq_CmdId || (exports.TakeDeliveryDailyRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeDeliveryDailyRewardRsp.CmdId
 */
var TakeDeliveryDailyRewardRsp_CmdId;
(function (TakeDeliveryDailyRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeDeliveryDailyRewardRsp_CmdId[TakeDeliveryDailyRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2162;
     */
    TakeDeliveryDailyRewardRsp_CmdId[TakeDeliveryDailyRewardRsp_CmdId["CMD_ID"] = 2162] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeDeliveryDailyRewardRsp_CmdId[TakeDeliveryDailyRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeDeliveryDailyRewardRsp_CmdId[TakeDeliveryDailyRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TakeDeliveryDailyRewardRsp_CmdId = exports.TakeDeliveryDailyRewardRsp_CmdId || (exports.TakeDeliveryDailyRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FinishDeliveryNotify.CmdId
 */
var FinishDeliveryNotify_CmdId;
(function (FinishDeliveryNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishDeliveryNotify_CmdId[FinishDeliveryNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2089;
     */
    FinishDeliveryNotify_CmdId[FinishDeliveryNotify_CmdId["CMD_ID"] = 2089] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishDeliveryNotify_CmdId[FinishDeliveryNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FinishDeliveryNotify_CmdId[FinishDeliveryNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FinishDeliveryNotify_CmdId = exports.FinishDeliveryNotify_CmdId || (exports.FinishDeliveryNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectAsterMidDifficultyReq.CmdId
 */
var SelectAsterMidDifficultyReq_CmdId;
(function (SelectAsterMidDifficultyReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectAsterMidDifficultyReq_CmdId[SelectAsterMidDifficultyReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2134;
     */
    SelectAsterMidDifficultyReq_CmdId[SelectAsterMidDifficultyReq_CmdId["CMD_ID"] = 2134] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectAsterMidDifficultyReq_CmdId[SelectAsterMidDifficultyReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectAsterMidDifficultyReq_CmdId[SelectAsterMidDifficultyReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectAsterMidDifficultyReq_CmdId[SelectAsterMidDifficultyReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SelectAsterMidDifficultyReq_CmdId = exports.SelectAsterMidDifficultyReq_CmdId || (exports.SelectAsterMidDifficultyReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectAsterMidDifficultyRsp.CmdId
 */
var SelectAsterMidDifficultyRsp_CmdId;
(function (SelectAsterMidDifficultyRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectAsterMidDifficultyRsp_CmdId[SelectAsterMidDifficultyRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2180;
     */
    SelectAsterMidDifficultyRsp_CmdId[SelectAsterMidDifficultyRsp_CmdId["CMD_ID"] = 2180] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectAsterMidDifficultyRsp_CmdId[SelectAsterMidDifficultyRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectAsterMidDifficultyRsp_CmdId[SelectAsterMidDifficultyRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SelectAsterMidDifficultyRsp_CmdId = exports.SelectAsterMidDifficultyRsp_CmdId || (exports.SelectAsterMidDifficultyRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterProgressInfoNotify.CmdId
 */
var AsterProgressInfoNotify_CmdId;
(function (AsterProgressInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterProgressInfoNotify_CmdId[AsterProgressInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2016;
     */
    AsterProgressInfoNotify_CmdId[AsterProgressInfoNotify_CmdId["CMD_ID"] = 2016] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterProgressInfoNotify_CmdId[AsterProgressInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterProgressInfoNotify_CmdId[AsterProgressInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterProgressInfoNotify_CmdId = exports.AsterProgressInfoNotify_CmdId || (exports.AsterProgressInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterLittleInfoNotify.CmdId
 */
var AsterLittleInfoNotify_CmdId;
(function (AsterLittleInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterLittleInfoNotify_CmdId[AsterLittleInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2068;
     */
    AsterLittleInfoNotify_CmdId[AsterLittleInfoNotify_CmdId["CMD_ID"] = 2068] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterLittleInfoNotify_CmdId[AsterLittleInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterLittleInfoNotify_CmdId[AsterLittleInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterLittleInfoNotify_CmdId = exports.AsterLittleInfoNotify_CmdId || (exports.AsterLittleInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterMidInfoNotify.CmdId
 */
var AsterMidInfoNotify_CmdId;
(function (AsterMidInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMidInfoNotify_CmdId[AsterMidInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2031;
     */
    AsterMidInfoNotify_CmdId[AsterMidInfoNotify_CmdId["CMD_ID"] = 2031] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMidInfoNotify_CmdId[AsterMidInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterMidInfoNotify_CmdId[AsterMidInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterMidInfoNotify_CmdId = exports.AsterMidInfoNotify_CmdId || (exports.AsterMidInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterMiscInfoNotify.CmdId
 */
var AsterMiscInfoNotify_CmdId;
(function (AsterMiscInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMiscInfoNotify_CmdId[AsterMiscInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2036;
     */
    AsterMiscInfoNotify_CmdId[AsterMiscInfoNotify_CmdId["CMD_ID"] = 2036] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMiscInfoNotify_CmdId[AsterMiscInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterMiscInfoNotify_CmdId[AsterMiscInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterMiscInfoNotify_CmdId = exports.AsterMiscInfoNotify_CmdId || (exports.AsterMiscInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeAsterSpecialRewardReq.CmdId
 */
var TakeAsterSpecialRewardReq_CmdId;
(function (TakeAsterSpecialRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeAsterSpecialRewardReq_CmdId[TakeAsterSpecialRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2097;
     */
    TakeAsterSpecialRewardReq_CmdId[TakeAsterSpecialRewardReq_CmdId["CMD_ID"] = 2097] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeAsterSpecialRewardReq_CmdId[TakeAsterSpecialRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeAsterSpecialRewardReq_CmdId[TakeAsterSpecialRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeAsterSpecialRewardReq_CmdId[TakeAsterSpecialRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TakeAsterSpecialRewardReq_CmdId = exports.TakeAsterSpecialRewardReq_CmdId || (exports.TakeAsterSpecialRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeAsterSpecialRewardRsp.CmdId
 */
var TakeAsterSpecialRewardRsp_CmdId;
(function (TakeAsterSpecialRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeAsterSpecialRewardRsp_CmdId[TakeAsterSpecialRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2193;
     */
    TakeAsterSpecialRewardRsp_CmdId[TakeAsterSpecialRewardRsp_CmdId["CMD_ID"] = 2193] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeAsterSpecialRewardRsp_CmdId[TakeAsterSpecialRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeAsterSpecialRewardRsp_CmdId[TakeAsterSpecialRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TakeAsterSpecialRewardRsp_CmdId = exports.TakeAsterSpecialRewardRsp_CmdId || (exports.TakeAsterSpecialRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterLargeInfoNotify.CmdId
 */
var AsterLargeInfoNotify_CmdId;
(function (AsterLargeInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterLargeInfoNotify_CmdId[AsterLargeInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2146;
     */
    AsterLargeInfoNotify_CmdId[AsterLargeInfoNotify_CmdId["CMD_ID"] = 2146] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterLargeInfoNotify_CmdId[AsterLargeInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterLargeInfoNotify_CmdId[AsterLargeInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterLargeInfoNotify_CmdId = exports.AsterLargeInfoNotify_CmdId || (exports.AsterLargeInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FlightActivitySettleNotify.CmdId
 */
var FlightActivitySettleNotify_CmdId;
(function (FlightActivitySettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivitySettleNotify_CmdId[FlightActivitySettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2195;
     */
    FlightActivitySettleNotify_CmdId[FlightActivitySettleNotify_CmdId["CMD_ID"] = 2195] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivitySettleNotify_CmdId[FlightActivitySettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FlightActivitySettleNotify_CmdId[FlightActivitySettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FlightActivitySettleNotify_CmdId = exports.FlightActivitySettleNotify_CmdId || (exports.FlightActivitySettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FlightActivityRestartReq.CmdId
 */
var FlightActivityRestartReq_CmdId;
(function (FlightActivityRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivityRestartReq_CmdId[FlightActivityRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2037;
     */
    FlightActivityRestartReq_CmdId[FlightActivityRestartReq_CmdId["CMD_ID"] = 2037] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivityRestartReq_CmdId[FlightActivityRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FlightActivityRestartReq_CmdId[FlightActivityRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FlightActivityRestartReq_CmdId[FlightActivityRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FlightActivityRestartReq_CmdId = exports.FlightActivityRestartReq_CmdId || (exports.FlightActivityRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FlightActivityRestartRsp.CmdId
 */
var FlightActivityRestartRsp_CmdId;
(function (FlightActivityRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivityRestartRsp_CmdId[FlightActivityRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2165;
     */
    FlightActivityRestartRsp_CmdId[FlightActivityRestartRsp_CmdId["CMD_ID"] = 2165] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FlightActivityRestartRsp_CmdId[FlightActivityRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FlightActivityRestartRsp_CmdId[FlightActivityRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FlightActivityRestartRsp_CmdId = exports.FlightActivityRestartRsp_CmdId || (exports.FlightActivityRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.AsterMidCampInfoNotify.CmdId
 */
var AsterMidCampInfoNotify_CmdId;
(function (AsterMidCampInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMidCampInfoNotify_CmdId[AsterMidCampInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2133;
     */
    AsterMidCampInfoNotify_CmdId[AsterMidCampInfoNotify_CmdId["CMD_ID"] = 2133] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    AsterMidCampInfoNotify_CmdId[AsterMidCampInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    AsterMidCampInfoNotify_CmdId[AsterMidCampInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(AsterMidCampInfoNotify_CmdId = exports.AsterMidCampInfoNotify_CmdId || (exports.AsterMidCampInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterOpenNotify.CmdId
 */
var DragonSpineChapterOpenNotify_CmdId;
(function (DragonSpineChapterOpenNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterOpenNotify_CmdId[DragonSpineChapterOpenNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2022;
     */
    DragonSpineChapterOpenNotify_CmdId[DragonSpineChapterOpenNotify_CmdId["CMD_ID"] = 2022] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterOpenNotify_CmdId[DragonSpineChapterOpenNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DragonSpineChapterOpenNotify_CmdId[DragonSpineChapterOpenNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DragonSpineChapterOpenNotify_CmdId = exports.DragonSpineChapterOpenNotify_CmdId || (exports.DragonSpineChapterOpenNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterProgressChangeNotify.CmdId
 */
var DragonSpineChapterProgressChangeNotify_CmdId;
(function (DragonSpineChapterProgressChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterProgressChangeNotify_CmdId[DragonSpineChapterProgressChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2065;
     */
    DragonSpineChapterProgressChangeNotify_CmdId[DragonSpineChapterProgressChangeNotify_CmdId["CMD_ID"] = 2065] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterProgressChangeNotify_CmdId[DragonSpineChapterProgressChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DragonSpineChapterProgressChangeNotify_CmdId[DragonSpineChapterProgressChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DragonSpineChapterProgressChangeNotify_CmdId = exports.DragonSpineChapterProgressChangeNotify_CmdId || (exports.DragonSpineChapterProgressChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineChapterFinishNotify.CmdId
 */
var DragonSpineChapterFinishNotify_CmdId;
(function (DragonSpineChapterFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterFinishNotify_CmdId[DragonSpineChapterFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2069;
     */
    DragonSpineChapterFinishNotify_CmdId[DragonSpineChapterFinishNotify_CmdId["CMD_ID"] = 2069] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineChapterFinishNotify_CmdId[DragonSpineChapterFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DragonSpineChapterFinishNotify_CmdId[DragonSpineChapterFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DragonSpineChapterFinishNotify_CmdId = exports.DragonSpineChapterFinishNotify_CmdId || (exports.DragonSpineChapterFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DragonSpineCoinChangeNotify.CmdId
 */
var DragonSpineCoinChangeNotify_CmdId;
(function (DragonSpineCoinChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineCoinChangeNotify_CmdId[DragonSpineCoinChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2088;
     */
    DragonSpineCoinChangeNotify_CmdId[DragonSpineCoinChangeNotify_CmdId["CMD_ID"] = 2088] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DragonSpineCoinChangeNotify_CmdId[DragonSpineCoinChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DragonSpineCoinChangeNotify_CmdId[DragonSpineCoinChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DragonSpineCoinChangeNotify_CmdId = exports.DragonSpineCoinChangeNotify_CmdId || (exports.DragonSpineCoinChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivitySaleChangeNotify.CmdId
 */
var ActivitySaleChangeNotify_CmdId;
(function (ActivitySaleChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySaleChangeNotify_CmdId[ActivitySaleChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2071;
     */
    ActivitySaleChangeNotify_CmdId[ActivitySaleChangeNotify_CmdId["CMD_ID"] = 2071] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySaleChangeNotify_CmdId[ActivitySaleChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySaleChangeNotify_CmdId[ActivitySaleChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivitySaleChangeNotify_CmdId = exports.ActivitySaleChangeNotify_CmdId || (exports.ActivitySaleChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartEffigyChallengeReq.CmdId
 */
var StartEffigyChallengeReq_CmdId;
(function (StartEffigyChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartEffigyChallengeReq_CmdId[StartEffigyChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2169;
     */
    StartEffigyChallengeReq_CmdId[StartEffigyChallengeReq_CmdId["CMD_ID"] = 2169] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartEffigyChallengeReq_CmdId[StartEffigyChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartEffigyChallengeReq_CmdId[StartEffigyChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartEffigyChallengeReq_CmdId[StartEffigyChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartEffigyChallengeReq_CmdId = exports.StartEffigyChallengeReq_CmdId || (exports.StartEffigyChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartEffigyChallengeRsp.CmdId
 */
var StartEffigyChallengeRsp_CmdId;
(function (StartEffigyChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartEffigyChallengeRsp_CmdId[StartEffigyChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2173;
     */
    StartEffigyChallengeRsp_CmdId[StartEffigyChallengeRsp_CmdId["CMD_ID"] = 2173] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartEffigyChallengeRsp_CmdId[StartEffigyChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartEffigyChallengeRsp_CmdId[StartEffigyChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartEffigyChallengeRsp_CmdId = exports.StartEffigyChallengeRsp_CmdId || (exports.StartEffigyChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeInfoNotify.CmdId
 */
var EffigyChallengeInfoNotify_CmdId;
(function (EffigyChallengeInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeInfoNotify_CmdId[EffigyChallengeInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2090;
     */
    EffigyChallengeInfoNotify_CmdId[EffigyChallengeInfoNotify_CmdId["CMD_ID"] = 2090] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeInfoNotify_CmdId[EffigyChallengeInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeInfoNotify_CmdId[EffigyChallengeInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeInfoNotify_CmdId = exports.EffigyChallengeInfoNotify_CmdId || (exports.EffigyChallengeInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeResultNotify.CmdId
 */
var EffigyChallengeResultNotify_CmdId;
(function (EffigyChallengeResultNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeResultNotify_CmdId[EffigyChallengeResultNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2046;
     */
    EffigyChallengeResultNotify_CmdId[EffigyChallengeResultNotify_CmdId["CMD_ID"] = 2046] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeResultNotify_CmdId[EffigyChallengeResultNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeResultNotify_CmdId[EffigyChallengeResultNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeResultNotify_CmdId = exports.EffigyChallengeResultNotify_CmdId || (exports.EffigyChallengeResultNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyFirstPassRewardReq.CmdId
 */
var TakeEffigyFirstPassRewardReq_CmdId;
(function (TakeEffigyFirstPassRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyFirstPassRewardReq_CmdId[TakeEffigyFirstPassRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2196;
     */
    TakeEffigyFirstPassRewardReq_CmdId[TakeEffigyFirstPassRewardReq_CmdId["CMD_ID"] = 2196] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyFirstPassRewardReq_CmdId[TakeEffigyFirstPassRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyFirstPassRewardReq_CmdId[TakeEffigyFirstPassRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyFirstPassRewardReq_CmdId[TakeEffigyFirstPassRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TakeEffigyFirstPassRewardReq_CmdId = exports.TakeEffigyFirstPassRewardReq_CmdId || (exports.TakeEffigyFirstPassRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyFirstPassRewardRsp.CmdId
 */
var TakeEffigyFirstPassRewardRsp_CmdId;
(function (TakeEffigyFirstPassRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyFirstPassRewardRsp_CmdId[TakeEffigyFirstPassRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2061;
     */
    TakeEffigyFirstPassRewardRsp_CmdId[TakeEffigyFirstPassRewardRsp_CmdId["CMD_ID"] = 2061] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyFirstPassRewardRsp_CmdId[TakeEffigyFirstPassRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyFirstPassRewardRsp_CmdId[TakeEffigyFirstPassRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TakeEffigyFirstPassRewardRsp_CmdId = exports.TakeEffigyFirstPassRewardRsp_CmdId || (exports.TakeEffigyFirstPassRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyRewardReq.CmdId
 */
var TakeEffigyRewardReq_CmdId;
(function (TakeEffigyRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyRewardReq_CmdId[TakeEffigyRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2040;
     */
    TakeEffigyRewardReq_CmdId[TakeEffigyRewardReq_CmdId["CMD_ID"] = 2040] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyRewardReq_CmdId[TakeEffigyRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyRewardReq_CmdId[TakeEffigyRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyRewardReq_CmdId[TakeEffigyRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TakeEffigyRewardReq_CmdId = exports.TakeEffigyRewardReq_CmdId || (exports.TakeEffigyRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TakeEffigyRewardRsp.CmdId
 */
var TakeEffigyRewardRsp_CmdId;
(function (TakeEffigyRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyRewardRsp_CmdId[TakeEffigyRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2007;
     */
    TakeEffigyRewardRsp_CmdId[TakeEffigyRewardRsp_CmdId["CMD_ID"] = 2007] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TakeEffigyRewardRsp_CmdId[TakeEffigyRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TakeEffigyRewardRsp_CmdId[TakeEffigyRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TakeEffigyRewardRsp_CmdId = exports.TakeEffigyRewardRsp_CmdId || (exports.TakeEffigyRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectEffigyChallengeConditionReq.CmdId
 */
var SelectEffigyChallengeConditionReq_CmdId;
(function (SelectEffigyChallengeConditionReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectEffigyChallengeConditionReq_CmdId[SelectEffigyChallengeConditionReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2064;
     */
    SelectEffigyChallengeConditionReq_CmdId[SelectEffigyChallengeConditionReq_CmdId["CMD_ID"] = 2064] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectEffigyChallengeConditionReq_CmdId[SelectEffigyChallengeConditionReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectEffigyChallengeConditionReq_CmdId[SelectEffigyChallengeConditionReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectEffigyChallengeConditionReq_CmdId[SelectEffigyChallengeConditionReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SelectEffigyChallengeConditionReq_CmdId = exports.SelectEffigyChallengeConditionReq_CmdId || (exports.SelectEffigyChallengeConditionReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectEffigyChallengeConditionRsp.CmdId
 */
var SelectEffigyChallengeConditionRsp_CmdId;
(function (SelectEffigyChallengeConditionRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectEffigyChallengeConditionRsp_CmdId[SelectEffigyChallengeConditionRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2039;
     */
    SelectEffigyChallengeConditionRsp_CmdId[SelectEffigyChallengeConditionRsp_CmdId["CMD_ID"] = 2039] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectEffigyChallengeConditionRsp_CmdId[SelectEffigyChallengeConditionRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectEffigyChallengeConditionRsp_CmdId[SelectEffigyChallengeConditionRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SelectEffigyChallengeConditionRsp_CmdId = exports.SelectEffigyChallengeConditionRsp_CmdId || (exports.SelectEffigyChallengeConditionRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RestartEffigyChallengeReq.CmdId
 */
var RestartEffigyChallengeReq_CmdId;
(function (RestartEffigyChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RestartEffigyChallengeReq_CmdId[RestartEffigyChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2148;
     */
    RestartEffigyChallengeReq_CmdId[RestartEffigyChallengeReq_CmdId["CMD_ID"] = 2148] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RestartEffigyChallengeReq_CmdId[RestartEffigyChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RestartEffigyChallengeReq_CmdId[RestartEffigyChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RestartEffigyChallengeReq_CmdId[RestartEffigyChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RestartEffigyChallengeReq_CmdId = exports.RestartEffigyChallengeReq_CmdId || (exports.RestartEffigyChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RestartEffigyChallengeRsp.CmdId
 */
var RestartEffigyChallengeRsp_CmdId;
(function (RestartEffigyChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RestartEffigyChallengeRsp_CmdId[RestartEffigyChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2042;
     */
    RestartEffigyChallengeRsp_CmdId[RestartEffigyChallengeRsp_CmdId["CMD_ID"] = 2042] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RestartEffigyChallengeRsp_CmdId[RestartEffigyChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RestartEffigyChallengeRsp_CmdId[RestartEffigyChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RestartEffigyChallengeRsp_CmdId = exports.RestartEffigyChallengeRsp_CmdId || (exports.RestartEffigyChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapRegionInfoNotify.CmdId
 */
var TreasureMapRegionInfoNotify_CmdId;
(function (TreasureMapRegionInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapRegionInfoNotify_CmdId[TreasureMapRegionInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2185;
     */
    TreasureMapRegionInfoNotify_CmdId[TreasureMapRegionInfoNotify_CmdId["CMD_ID"] = 2185] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapRegionInfoNotify_CmdId[TreasureMapRegionInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapRegionInfoNotify_CmdId[TreasureMapRegionInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapRegionInfoNotify_CmdId = exports.TreasureMapRegionInfoNotify_CmdId || (exports.TreasureMapRegionInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapCurrencyNotify.CmdId
 */
var TreasureMapCurrencyNotify_CmdId;
(function (TreasureMapCurrencyNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapCurrencyNotify_CmdId[TreasureMapCurrencyNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2171;
     */
    TreasureMapCurrencyNotify_CmdId[TreasureMapCurrencyNotify_CmdId["CMD_ID"] = 2171] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapCurrencyNotify_CmdId[TreasureMapCurrencyNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapCurrencyNotify_CmdId[TreasureMapCurrencyNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapCurrencyNotify_CmdId = exports.TreasureMapCurrencyNotify_CmdId || (exports.TreasureMapCurrencyNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapRegionActiveNotify.CmdId
 */
var TreasureMapRegionActiveNotify_CmdId;
(function (TreasureMapRegionActiveNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapRegionActiveNotify_CmdId[TreasureMapRegionActiveNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2122;
     */
    TreasureMapRegionActiveNotify_CmdId[TreasureMapRegionActiveNotify_CmdId["CMD_ID"] = 2122] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapRegionActiveNotify_CmdId[TreasureMapRegionActiveNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapRegionActiveNotify_CmdId[TreasureMapRegionActiveNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapRegionActiveNotify_CmdId = exports.TreasureMapRegionActiveNotify_CmdId || (exports.TreasureMapRegionActiveNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapMpChallengeNotify.CmdId
 */
var TreasureMapMpChallengeNotify_CmdId;
(function (TreasureMapMpChallengeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapMpChallengeNotify_CmdId[TreasureMapMpChallengeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2048;
     */
    TreasureMapMpChallengeNotify_CmdId[TreasureMapMpChallengeNotify_CmdId["CMD_ID"] = 2048] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapMpChallengeNotify_CmdId[TreasureMapMpChallengeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapMpChallengeNotify_CmdId[TreasureMapMpChallengeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapMpChallengeNotify_CmdId = exports.TreasureMapMpChallengeNotify_CmdId || (exports.TreasureMapMpChallengeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapBonusChallengeNotify.CmdId
 */
var TreasureMapBonusChallengeNotify_CmdId;
(function (TreasureMapBonusChallengeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapBonusChallengeNotify_CmdId[TreasureMapBonusChallengeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2115;
     */
    TreasureMapBonusChallengeNotify_CmdId[TreasureMapBonusChallengeNotify_CmdId["CMD_ID"] = 2115] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapBonusChallengeNotify_CmdId[TreasureMapBonusChallengeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapBonusChallengeNotify_CmdId[TreasureMapBonusChallengeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapBonusChallengeNotify_CmdId = exports.TreasureMapBonusChallengeNotify_CmdId || (exports.TreasureMapBonusChallengeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapGuideTaskDoneNotify.CmdId
 */
var TreasureMapGuideTaskDoneNotify_CmdId;
(function (TreasureMapGuideTaskDoneNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapGuideTaskDoneNotify_CmdId[TreasureMapGuideTaskDoneNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2119;
     */
    TreasureMapGuideTaskDoneNotify_CmdId[TreasureMapGuideTaskDoneNotify_CmdId["CMD_ID"] = 2119] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapGuideTaskDoneNotify_CmdId[TreasureMapGuideTaskDoneNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapGuideTaskDoneNotify_CmdId[TreasureMapGuideTaskDoneNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapGuideTaskDoneNotify_CmdId = exports.TreasureMapGuideTaskDoneNotify_CmdId || (exports.TreasureMapGuideTaskDoneNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapPreTaskDoneNotify.CmdId
 */
var TreasureMapPreTaskDoneNotify_CmdId;
(function (TreasureMapPreTaskDoneNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapPreTaskDoneNotify_CmdId[TreasureMapPreTaskDoneNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2152;
     */
    TreasureMapPreTaskDoneNotify_CmdId[TreasureMapPreTaskDoneNotify_CmdId["CMD_ID"] = 2152] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapPreTaskDoneNotify_CmdId[TreasureMapPreTaskDoneNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapPreTaskDoneNotify_CmdId[TreasureMapPreTaskDoneNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapPreTaskDoneNotify_CmdId = exports.TreasureMapPreTaskDoneNotify_CmdId || (exports.TreasureMapPreTaskDoneNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingScanReq.CmdId
 */
var BlessingScanReq_CmdId;
(function (BlessingScanReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingScanReq_CmdId[BlessingScanReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2081;
     */
    BlessingScanReq_CmdId[BlessingScanReq_CmdId["CMD_ID"] = 2081] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingScanReq_CmdId[BlessingScanReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingScanReq_CmdId[BlessingScanReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingScanReq_CmdId[BlessingScanReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingScanReq_CmdId = exports.BlessingScanReq_CmdId || (exports.BlessingScanReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingScanRsp.CmdId
 */
var BlessingScanRsp_CmdId;
(function (BlessingScanRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingScanRsp_CmdId[BlessingScanRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2093;
     */
    BlessingScanRsp_CmdId[BlessingScanRsp_CmdId["CMD_ID"] = 2093] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingScanRsp_CmdId[BlessingScanRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingScanRsp_CmdId[BlessingScanRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingScanRsp_CmdId = exports.BlessingScanRsp_CmdId || (exports.BlessingScanRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingRedeemRewardReq.CmdId
 */
var BlessingRedeemRewardReq_CmdId;
(function (BlessingRedeemRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRedeemRewardReq_CmdId[BlessingRedeemRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2137;
     */
    BlessingRedeemRewardReq_CmdId[BlessingRedeemRewardReq_CmdId["CMD_ID"] = 2137] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRedeemRewardReq_CmdId[BlessingRedeemRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingRedeemRewardReq_CmdId[BlessingRedeemRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingRedeemRewardReq_CmdId[BlessingRedeemRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingRedeemRewardReq_CmdId = exports.BlessingRedeemRewardReq_CmdId || (exports.BlessingRedeemRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingRedeemRewardRsp.CmdId
 */
var BlessingRedeemRewardRsp_CmdId;
(function (BlessingRedeemRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRedeemRewardRsp_CmdId[BlessingRedeemRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2098;
     */
    BlessingRedeemRewardRsp_CmdId[BlessingRedeemRewardRsp_CmdId["CMD_ID"] = 2098] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRedeemRewardRsp_CmdId[BlessingRedeemRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingRedeemRewardRsp_CmdId[BlessingRedeemRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingRedeemRewardRsp_CmdId = exports.BlessingRedeemRewardRsp_CmdId || (exports.BlessingRedeemRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetFriendPicListReq.CmdId
 */
var BlessingGetFriendPicListReq_CmdId;
(function (BlessingGetFriendPicListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetFriendPicListReq_CmdId[BlessingGetFriendPicListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2043;
     */
    BlessingGetFriendPicListReq_CmdId[BlessingGetFriendPicListReq_CmdId["CMD_ID"] = 2043] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetFriendPicListReq_CmdId[BlessingGetFriendPicListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetFriendPicListReq_CmdId[BlessingGetFriendPicListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetFriendPicListReq_CmdId[BlessingGetFriendPicListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingGetFriendPicListReq_CmdId = exports.BlessingGetFriendPicListReq_CmdId || (exports.BlessingGetFriendPicListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetFriendPicListRsp.CmdId
 */
var BlessingGetFriendPicListRsp_CmdId;
(function (BlessingGetFriendPicListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetFriendPicListRsp_CmdId[BlessingGetFriendPicListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2056;
     */
    BlessingGetFriendPicListRsp_CmdId[BlessingGetFriendPicListRsp_CmdId["CMD_ID"] = 2056] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetFriendPicListRsp_CmdId[BlessingGetFriendPicListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetFriendPicListRsp_CmdId[BlessingGetFriendPicListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingGetFriendPicListRsp_CmdId = exports.BlessingGetFriendPicListRsp_CmdId || (exports.BlessingGetFriendPicListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGiveFriendPicReq.CmdId
 */
var BlessingGiveFriendPicReq_CmdId;
(function (BlessingGiveFriendPicReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGiveFriendPicReq_CmdId[BlessingGiveFriendPicReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2062;
     */
    BlessingGiveFriendPicReq_CmdId[BlessingGiveFriendPicReq_CmdId["CMD_ID"] = 2062] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGiveFriendPicReq_CmdId[BlessingGiveFriendPicReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGiveFriendPicReq_CmdId[BlessingGiveFriendPicReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGiveFriendPicReq_CmdId[BlessingGiveFriendPicReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingGiveFriendPicReq_CmdId = exports.BlessingGiveFriendPicReq_CmdId || (exports.BlessingGiveFriendPicReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGiveFriendPicRsp.CmdId
 */
var BlessingGiveFriendPicRsp_CmdId;
(function (BlessingGiveFriendPicRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGiveFriendPicRsp_CmdId[BlessingGiveFriendPicRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2053;
     */
    BlessingGiveFriendPicRsp_CmdId[BlessingGiveFriendPicRsp_CmdId["CMD_ID"] = 2053] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGiveFriendPicRsp_CmdId[BlessingGiveFriendPicRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGiveFriendPicRsp_CmdId[BlessingGiveFriendPicRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingGiveFriendPicRsp_CmdId = exports.BlessingGiveFriendPicRsp_CmdId || (exports.BlessingGiveFriendPicRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptGivePicReq.CmdId
 */
var BlessingAcceptGivePicReq_CmdId;
(function (BlessingAcceptGivePicReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptGivePicReq_CmdId[BlessingAcceptGivePicReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2006;
     */
    BlessingAcceptGivePicReq_CmdId[BlessingAcceptGivePicReq_CmdId["CMD_ID"] = 2006] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptGivePicReq_CmdId[BlessingAcceptGivePicReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptGivePicReq_CmdId[BlessingAcceptGivePicReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptGivePicReq_CmdId[BlessingAcceptGivePicReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingAcceptGivePicReq_CmdId = exports.BlessingAcceptGivePicReq_CmdId || (exports.BlessingAcceptGivePicReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptGivePicRsp.CmdId
 */
var BlessingAcceptGivePicRsp_CmdId;
(function (BlessingAcceptGivePicRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptGivePicRsp_CmdId[BlessingAcceptGivePicRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2055;
     */
    BlessingAcceptGivePicRsp_CmdId[BlessingAcceptGivePicRsp_CmdId["CMD_ID"] = 2055] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptGivePicRsp_CmdId[BlessingAcceptGivePicRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptGivePicRsp_CmdId[BlessingAcceptGivePicRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingAcceptGivePicRsp_CmdId = exports.BlessingAcceptGivePicRsp_CmdId || (exports.BlessingAcceptGivePicRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetAllRecvPicRecordListReq.CmdId
 */
var BlessingGetAllRecvPicRecordListReq_CmdId;
(function (BlessingGetAllRecvPicRecordListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetAllRecvPicRecordListReq_CmdId[BlessingGetAllRecvPicRecordListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2096;
     */
    BlessingGetAllRecvPicRecordListReq_CmdId[BlessingGetAllRecvPicRecordListReq_CmdId["CMD_ID"] = 2096] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetAllRecvPicRecordListReq_CmdId[BlessingGetAllRecvPicRecordListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetAllRecvPicRecordListReq_CmdId[BlessingGetAllRecvPicRecordListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetAllRecvPicRecordListReq_CmdId[BlessingGetAllRecvPicRecordListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingGetAllRecvPicRecordListReq_CmdId = exports.BlessingGetAllRecvPicRecordListReq_CmdId || (exports.BlessingGetAllRecvPicRecordListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingGetAllRecvPicRecordListRsp.CmdId
 */
var BlessingGetAllRecvPicRecordListRsp_CmdId;
(function (BlessingGetAllRecvPicRecordListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetAllRecvPicRecordListRsp_CmdId[BlessingGetAllRecvPicRecordListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2083;
     */
    BlessingGetAllRecvPicRecordListRsp_CmdId[BlessingGetAllRecvPicRecordListRsp_CmdId["CMD_ID"] = 2083] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingGetAllRecvPicRecordListRsp_CmdId[BlessingGetAllRecvPicRecordListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingGetAllRecvPicRecordListRsp_CmdId[BlessingGetAllRecvPicRecordListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingGetAllRecvPicRecordListRsp_CmdId = exports.BlessingGetAllRecvPicRecordListRsp_CmdId || (exports.BlessingGetAllRecvPicRecordListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingRecvFriendPicNotify.CmdId
 */
var BlessingRecvFriendPicNotify_CmdId;
(function (BlessingRecvFriendPicNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRecvFriendPicNotify_CmdId[BlessingRecvFriendPicNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2178;
     */
    BlessingRecvFriendPicNotify_CmdId[BlessingRecvFriendPicNotify_CmdId["CMD_ID"] = 2178] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingRecvFriendPicNotify_CmdId[BlessingRecvFriendPicNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingRecvFriendPicNotify_CmdId[BlessingRecvFriendPicNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingRecvFriendPicNotify_CmdId = exports.BlessingRecvFriendPicNotify_CmdId || (exports.BlessingRecvFriendPicNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptAllGivePicReq.CmdId
 */
var BlessingAcceptAllGivePicReq_CmdId;
(function (BlessingAcceptAllGivePicReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptAllGivePicReq_CmdId[BlessingAcceptAllGivePicReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2045;
     */
    BlessingAcceptAllGivePicReq_CmdId[BlessingAcceptAllGivePicReq_CmdId["CMD_ID"] = 2045] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptAllGivePicReq_CmdId[BlessingAcceptAllGivePicReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptAllGivePicReq_CmdId[BlessingAcceptAllGivePicReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptAllGivePicReq_CmdId[BlessingAcceptAllGivePicReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlessingAcceptAllGivePicReq_CmdId = exports.BlessingAcceptAllGivePicReq_CmdId || (exports.BlessingAcceptAllGivePicReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlessingAcceptAllGivePicRsp.CmdId
 */
var BlessingAcceptAllGivePicRsp_CmdId;
(function (BlessingAcceptAllGivePicRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptAllGivePicRsp_CmdId[BlessingAcceptAllGivePicRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2044;
     */
    BlessingAcceptAllGivePicRsp_CmdId[BlessingAcceptAllGivePicRsp_CmdId["CMD_ID"] = 2044] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlessingAcceptAllGivePicRsp_CmdId[BlessingAcceptAllGivePicRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlessingAcceptAllGivePicRsp_CmdId[BlessingAcceptAllGivePicRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlessingAcceptAllGivePicRsp_CmdId = exports.BlessingAcceptAllGivePicRsp_CmdId || (exports.BlessingAcceptAllGivePicRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionStartReq.CmdId
 */
var ExpeditionStartReq_CmdId;
(function (ExpeditionStartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionStartReq_CmdId[ExpeditionStartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2087;
     */
    ExpeditionStartReq_CmdId[ExpeditionStartReq_CmdId["CMD_ID"] = 2087] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionStartReq_CmdId[ExpeditionStartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionStartReq_CmdId[ExpeditionStartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionStartReq_CmdId[ExpeditionStartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ExpeditionStartReq_CmdId = exports.ExpeditionStartReq_CmdId || (exports.ExpeditionStartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionStartRsp.CmdId
 */
var ExpeditionStartRsp_CmdId;
(function (ExpeditionStartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionStartRsp_CmdId[ExpeditionStartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2135;
     */
    ExpeditionStartRsp_CmdId[ExpeditionStartRsp_CmdId["CMD_ID"] = 2135] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionStartRsp_CmdId[ExpeditionStartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionStartRsp_CmdId[ExpeditionStartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ExpeditionStartRsp_CmdId = exports.ExpeditionStartRsp_CmdId || (exports.ExpeditionStartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionRecallReq.CmdId
 */
var ExpeditionRecallReq_CmdId;
(function (ExpeditionRecallReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionRecallReq_CmdId[ExpeditionRecallReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2131;
     */
    ExpeditionRecallReq_CmdId[ExpeditionRecallReq_CmdId["CMD_ID"] = 2131] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionRecallReq_CmdId[ExpeditionRecallReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionRecallReq_CmdId[ExpeditionRecallReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionRecallReq_CmdId[ExpeditionRecallReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ExpeditionRecallReq_CmdId = exports.ExpeditionRecallReq_CmdId || (exports.ExpeditionRecallReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionRecallRsp.CmdId
 */
var ExpeditionRecallRsp_CmdId;
(function (ExpeditionRecallRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionRecallRsp_CmdId[ExpeditionRecallRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2129;
     */
    ExpeditionRecallRsp_CmdId[ExpeditionRecallRsp_CmdId["CMD_ID"] = 2129] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionRecallRsp_CmdId[ExpeditionRecallRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionRecallRsp_CmdId[ExpeditionRecallRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ExpeditionRecallRsp_CmdId = exports.ExpeditionRecallRsp_CmdId || (exports.ExpeditionRecallRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionTakeRewardReq.CmdId
 */
var ExpeditionTakeRewardReq_CmdId;
(function (ExpeditionTakeRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionTakeRewardReq_CmdId[ExpeditionTakeRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2149;
     */
    ExpeditionTakeRewardReq_CmdId[ExpeditionTakeRewardReq_CmdId["CMD_ID"] = 2149] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionTakeRewardReq_CmdId[ExpeditionTakeRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionTakeRewardReq_CmdId[ExpeditionTakeRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionTakeRewardReq_CmdId[ExpeditionTakeRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ExpeditionTakeRewardReq_CmdId = exports.ExpeditionTakeRewardReq_CmdId || (exports.ExpeditionTakeRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionTakeRewardRsp.CmdId
 */
var ExpeditionTakeRewardRsp_CmdId;
(function (ExpeditionTakeRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionTakeRewardRsp_CmdId[ExpeditionTakeRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2080;
     */
    ExpeditionTakeRewardRsp_CmdId[ExpeditionTakeRewardRsp_CmdId["CMD_ID"] = 2080] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionTakeRewardRsp_CmdId[ExpeditionTakeRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionTakeRewardRsp_CmdId[ExpeditionTakeRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ExpeditionTakeRewardRsp_CmdId = exports.ExpeditionTakeRewardRsp_CmdId || (exports.ExpeditionTakeRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetExpeditionAssistInfoListReq.CmdId
 */
var GetExpeditionAssistInfoListReq_CmdId;
(function (GetExpeditionAssistInfoListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetExpeditionAssistInfoListReq_CmdId[GetExpeditionAssistInfoListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2150;
     */
    GetExpeditionAssistInfoListReq_CmdId[GetExpeditionAssistInfoListReq_CmdId["CMD_ID"] = 2150] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetExpeditionAssistInfoListReq_CmdId[GetExpeditionAssistInfoListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetExpeditionAssistInfoListReq_CmdId[GetExpeditionAssistInfoListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetExpeditionAssistInfoListReq_CmdId[GetExpeditionAssistInfoListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetExpeditionAssistInfoListReq_CmdId = exports.GetExpeditionAssistInfoListReq_CmdId || (exports.GetExpeditionAssistInfoListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetExpeditionAssistInfoListRsp.CmdId
 */
var GetExpeditionAssistInfoListRsp_CmdId;
(function (GetExpeditionAssistInfoListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetExpeditionAssistInfoListRsp_CmdId[GetExpeditionAssistInfoListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2035;
     */
    GetExpeditionAssistInfoListRsp_CmdId[GetExpeditionAssistInfoListRsp_CmdId["CMD_ID"] = 2035] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetExpeditionAssistInfoListRsp_CmdId[GetExpeditionAssistInfoListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetExpeditionAssistInfoListRsp_CmdId[GetExpeditionAssistInfoListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetExpeditionAssistInfoListRsp_CmdId = exports.GetExpeditionAssistInfoListRsp_CmdId || (exports.GetExpeditionAssistInfoListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SetCurExpeditionChallengeIdReq.CmdId
 */
var SetCurExpeditionChallengeIdReq_CmdId;
(function (SetCurExpeditionChallengeIdReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetCurExpeditionChallengeIdReq_CmdId[SetCurExpeditionChallengeIdReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2021;
     */
    SetCurExpeditionChallengeIdReq_CmdId[SetCurExpeditionChallengeIdReq_CmdId["CMD_ID"] = 2021] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetCurExpeditionChallengeIdReq_CmdId[SetCurExpeditionChallengeIdReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SetCurExpeditionChallengeIdReq_CmdId[SetCurExpeditionChallengeIdReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SetCurExpeditionChallengeIdReq_CmdId[SetCurExpeditionChallengeIdReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SetCurExpeditionChallengeIdReq_CmdId = exports.SetCurExpeditionChallengeIdReq_CmdId || (exports.SetCurExpeditionChallengeIdReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SetCurExpeditionChallengeIdRsp.CmdId
 */
var SetCurExpeditionChallengeIdRsp_CmdId;
(function (SetCurExpeditionChallengeIdRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetCurExpeditionChallengeIdRsp_CmdId[SetCurExpeditionChallengeIdRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2049;
     */
    SetCurExpeditionChallengeIdRsp_CmdId[SetCurExpeditionChallengeIdRsp_CmdId["CMD_ID"] = 2049] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetCurExpeditionChallengeIdRsp_CmdId[SetCurExpeditionChallengeIdRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SetCurExpeditionChallengeIdRsp_CmdId[SetCurExpeditionChallengeIdRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SetCurExpeditionChallengeIdRsp_CmdId = exports.SetCurExpeditionChallengeIdRsp_CmdId || (exports.SetCurExpeditionChallengeIdRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionChallengeEnterRegionNotify.CmdId
 */
var ExpeditionChallengeEnterRegionNotify_CmdId;
(function (ExpeditionChallengeEnterRegionNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionChallengeEnterRegionNotify_CmdId[ExpeditionChallengeEnterRegionNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2154;
     */
    ExpeditionChallengeEnterRegionNotify_CmdId[ExpeditionChallengeEnterRegionNotify_CmdId["CMD_ID"] = 2154] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionChallengeEnterRegionNotify_CmdId[ExpeditionChallengeEnterRegionNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionChallengeEnterRegionNotify_CmdId[ExpeditionChallengeEnterRegionNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ExpeditionChallengeEnterRegionNotify_CmdId = exports.ExpeditionChallengeEnterRegionNotify_CmdId || (exports.ExpeditionChallengeEnterRegionNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ExpeditionChallengeFinishedNotify.CmdId
 */
var ExpeditionChallengeFinishedNotify_CmdId;
(function (ExpeditionChallengeFinishedNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionChallengeFinishedNotify_CmdId[ExpeditionChallengeFinishedNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2091;
     */
    ExpeditionChallengeFinishedNotify_CmdId[ExpeditionChallengeFinishedNotify_CmdId["CMD_ID"] = 2091] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ExpeditionChallengeFinishedNotify_CmdId[ExpeditionChallengeFinishedNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ExpeditionChallengeFinishedNotify_CmdId[ExpeditionChallengeFinishedNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ExpeditionChallengeFinishedNotify_CmdId = exports.ExpeditionChallengeFinishedNotify_CmdId || (exports.ExpeditionChallengeFinishedNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairBalloonSettleNotify.CmdId
 */
var FleurFairBalloonSettleNotify_CmdId;
(function (FleurFairBalloonSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairBalloonSettleNotify_CmdId[FleurFairBalloonSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2099;
     */
    FleurFairBalloonSettleNotify_CmdId[FleurFairBalloonSettleNotify_CmdId["CMD_ID"] = 2099] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairBalloonSettleNotify_CmdId[FleurFairBalloonSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairBalloonSettleNotify_CmdId[FleurFairBalloonSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FleurFairBalloonSettleNotify_CmdId = exports.FleurFairBalloonSettleNotify_CmdId || (exports.FleurFairBalloonSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairFallSettleNotify.CmdId
 */
var FleurFairFallSettleNotify_CmdId;
(function (FleurFairFallSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairFallSettleNotify_CmdId[FleurFairFallSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2017;
     */
    FleurFairFallSettleNotify_CmdId[FleurFairFallSettleNotify_CmdId["CMD_ID"] = 2017] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairFallSettleNotify_CmdId[FleurFairFallSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairFallSettleNotify_CmdId[FleurFairFallSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FleurFairFallSettleNotify_CmdId = exports.FleurFairFallSettleNotify_CmdId || (exports.FleurFairFallSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameSettleReq.CmdId
 */
var FleurFairMusicGameSettleReq_CmdId;
(function (FleurFairMusicGameSettleReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameSettleReq_CmdId[FleurFairMusicGameSettleReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2194;
     */
    FleurFairMusicGameSettleReq_CmdId[FleurFairMusicGameSettleReq_CmdId["CMD_ID"] = 2194] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameSettleReq_CmdId[FleurFairMusicGameSettleReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameSettleReq_CmdId[FleurFairMusicGameSettleReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameSettleReq_CmdId[FleurFairMusicGameSettleReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FleurFairMusicGameSettleReq_CmdId = exports.FleurFairMusicGameSettleReq_CmdId || (exports.FleurFairMusicGameSettleReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameSettleRsp.CmdId
 */
var FleurFairMusicGameSettleRsp_CmdId;
(function (FleurFairMusicGameSettleRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameSettleRsp_CmdId[FleurFairMusicGameSettleRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2113;
     */
    FleurFairMusicGameSettleRsp_CmdId[FleurFairMusicGameSettleRsp_CmdId["CMD_ID"] = 2113] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameSettleRsp_CmdId[FleurFairMusicGameSettleRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameSettleRsp_CmdId[FleurFairMusicGameSettleRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FleurFairMusicGameSettleRsp_CmdId = exports.FleurFairMusicGameSettleRsp_CmdId || (exports.FleurFairMusicGameSettleRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameStartReq.CmdId
 */
var FleurFairMusicGameStartReq_CmdId;
(function (FleurFairMusicGameStartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameStartReq_CmdId[FleurFairMusicGameStartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2167;
     */
    FleurFairMusicGameStartReq_CmdId[FleurFairMusicGameStartReq_CmdId["CMD_ID"] = 2167] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameStartReq_CmdId[FleurFairMusicGameStartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameStartReq_CmdId[FleurFairMusicGameStartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameStartReq_CmdId[FleurFairMusicGameStartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FleurFairMusicGameStartReq_CmdId = exports.FleurFairMusicGameStartReq_CmdId || (exports.FleurFairMusicGameStartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairMusicGameStartRsp.CmdId
 */
var FleurFairMusicGameStartRsp_CmdId;
(function (FleurFairMusicGameStartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameStartRsp_CmdId[FleurFairMusicGameStartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2079;
     */
    FleurFairMusicGameStartRsp_CmdId[FleurFairMusicGameStartRsp_CmdId["CMD_ID"] = 2079] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairMusicGameStartRsp_CmdId[FleurFairMusicGameStartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairMusicGameStartRsp_CmdId[FleurFairMusicGameStartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FleurFairMusicGameStartRsp_CmdId = exports.FleurFairMusicGameStartRsp_CmdId || (exports.FleurFairMusicGameStartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairReplayMiniGameReq.CmdId
 */
var FleurFairReplayMiniGameReq_CmdId;
(function (FleurFairReplayMiniGameReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairReplayMiniGameReq_CmdId[FleurFairReplayMiniGameReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2181;
     */
    FleurFairReplayMiniGameReq_CmdId[FleurFairReplayMiniGameReq_CmdId["CMD_ID"] = 2181] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairReplayMiniGameReq_CmdId[FleurFairReplayMiniGameReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairReplayMiniGameReq_CmdId[FleurFairReplayMiniGameReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairReplayMiniGameReq_CmdId[FleurFairReplayMiniGameReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FleurFairReplayMiniGameReq_CmdId = exports.FleurFairReplayMiniGameReq_CmdId || (exports.FleurFairReplayMiniGameReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FleurFairReplayMiniGameRsp.CmdId
 */
var FleurFairReplayMiniGameRsp_CmdId;
(function (FleurFairReplayMiniGameRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairReplayMiniGameRsp_CmdId[FleurFairReplayMiniGameRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2052;
     */
    FleurFairReplayMiniGameRsp_CmdId[FleurFairReplayMiniGameRsp_CmdId["CMD_ID"] = 2052] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FleurFairReplayMiniGameRsp_CmdId[FleurFairReplayMiniGameRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FleurFairReplayMiniGameRsp_CmdId[FleurFairReplayMiniGameRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FleurFairReplayMiniGameRsp_CmdId = exports.FleurFairReplayMiniGameRsp_CmdId || (exports.FleurFairReplayMiniGameRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartArenaChallengeLevelReq.CmdId
 */
var StartArenaChallengeLevelReq_CmdId;
(function (StartArenaChallengeLevelReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartArenaChallengeLevelReq_CmdId[StartArenaChallengeLevelReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2127;
     */
    StartArenaChallengeLevelReq_CmdId[StartArenaChallengeLevelReq_CmdId["CMD_ID"] = 2127] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartArenaChallengeLevelReq_CmdId[StartArenaChallengeLevelReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartArenaChallengeLevelReq_CmdId[StartArenaChallengeLevelReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartArenaChallengeLevelReq_CmdId[StartArenaChallengeLevelReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartArenaChallengeLevelReq_CmdId = exports.StartArenaChallengeLevelReq_CmdId || (exports.StartArenaChallengeLevelReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartArenaChallengeLevelRsp.CmdId
 */
var StartArenaChallengeLevelRsp_CmdId;
(function (StartArenaChallengeLevelRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartArenaChallengeLevelRsp_CmdId[StartArenaChallengeLevelRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2125;
     */
    StartArenaChallengeLevelRsp_CmdId[StartArenaChallengeLevelRsp_CmdId["CMD_ID"] = 2125] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartArenaChallengeLevelRsp_CmdId[StartArenaChallengeLevelRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartArenaChallengeLevelRsp_CmdId[StartArenaChallengeLevelRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartArenaChallengeLevelRsp_CmdId = exports.StartArenaChallengeLevelRsp_CmdId || (exports.StartArenaChallengeLevelRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ArenaChallengeFinishNotify.CmdId
 */
var ArenaChallengeFinishNotify_CmdId;
(function (ArenaChallengeFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ArenaChallengeFinishNotify_CmdId[ArenaChallengeFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2030;
     */
    ArenaChallengeFinishNotify_CmdId[ArenaChallengeFinishNotify_CmdId["CMD_ID"] = 2030] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ArenaChallengeFinishNotify_CmdId[ArenaChallengeFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ArenaChallengeFinishNotify_CmdId[ArenaChallengeFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ArenaChallengeFinishNotify_CmdId = exports.ArenaChallengeFinishNotify_CmdId || (exports.ArenaChallengeFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WaterSpritePhaseFinishNotify.CmdId
 */
var WaterSpritePhaseFinishNotify_CmdId;
(function (WaterSpritePhaseFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WaterSpritePhaseFinishNotify_CmdId[WaterSpritePhaseFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2025;
     */
    WaterSpritePhaseFinishNotify_CmdId[WaterSpritePhaseFinishNotify_CmdId["CMD_ID"] = 2025] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WaterSpritePhaseFinishNotify_CmdId[WaterSpritePhaseFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WaterSpritePhaseFinishNotify_CmdId[WaterSpritePhaseFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WaterSpritePhaseFinishNotify_CmdId = exports.WaterSpritePhaseFinishNotify_CmdId || (exports.WaterSpritePhaseFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardBatchReq.CmdId
 */
var ActivityTakeWatcherRewardBatchReq_CmdId;
(function (ActivityTakeWatcherRewardBatchReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardBatchReq_CmdId[ActivityTakeWatcherRewardBatchReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2159;
     */
    ActivityTakeWatcherRewardBatchReq_CmdId[ActivityTakeWatcherRewardBatchReq_CmdId["CMD_ID"] = 2159] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardBatchReq_CmdId[ActivityTakeWatcherRewardBatchReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardBatchReq_CmdId[ActivityTakeWatcherRewardBatchReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardBatchReq_CmdId[ActivityTakeWatcherRewardBatchReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityTakeWatcherRewardBatchReq_CmdId = exports.ActivityTakeWatcherRewardBatchReq_CmdId || (exports.ActivityTakeWatcherRewardBatchReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeWatcherRewardBatchRsp.CmdId
 */
var ActivityTakeWatcherRewardBatchRsp_CmdId;
(function (ActivityTakeWatcherRewardBatchRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardBatchRsp_CmdId[ActivityTakeWatcherRewardBatchRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 2109;
     */
    ActivityTakeWatcherRewardBatchRsp_CmdId[ActivityTakeWatcherRewardBatchRsp_CmdId["CMD_ID"] = 2109] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeWatcherRewardBatchRsp_CmdId[ActivityTakeWatcherRewardBatchRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeWatcherRewardBatchRsp_CmdId[ActivityTakeWatcherRewardBatchRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityTakeWatcherRewardBatchRsp_CmdId = exports.ActivityTakeWatcherRewardBatchRsp_CmdId || (exports.ActivityTakeWatcherRewardBatchRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify.CmdId
 */
var ChannelerSlabStageActiveChallengeIndexNotify_CmdId;
(function (ChannelerSlabStageActiveChallengeIndexNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannelerSlabStageActiveChallengeIndexNotify_CmdId[ChannelerSlabStageActiveChallengeIndexNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8734;
     */
    ChannelerSlabStageActiveChallengeIndexNotify_CmdId[ChannelerSlabStageActiveChallengeIndexNotify_CmdId["CMD_ID"] = 8734] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannelerSlabStageActiveChallengeIndexNotify_CmdId[ChannelerSlabStageActiveChallengeIndexNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannelerSlabStageActiveChallengeIndexNotify_CmdId[ChannelerSlabStageActiveChallengeIndexNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannelerSlabStageActiveChallengeIndexNotify_CmdId = exports.ChannelerSlabStageActiveChallengeIndexNotify_CmdId || (exports.ChannelerSlabStageActiveChallengeIndexNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannelerSlabStageOneoffDungeonNotify.CmdId
 */
var ChannelerSlabStageOneoffDungeonNotify_CmdId;
(function (ChannelerSlabStageOneoffDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannelerSlabStageOneoffDungeonNotify_CmdId[ChannelerSlabStageOneoffDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8203;
     */
    ChannelerSlabStageOneoffDungeonNotify_CmdId[ChannelerSlabStageOneoffDungeonNotify_CmdId["CMD_ID"] = 8203] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannelerSlabStageOneoffDungeonNotify_CmdId[ChannelerSlabStageOneoffDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannelerSlabStageOneoffDungeonNotify_CmdId[ChannelerSlabStageOneoffDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannelerSlabStageOneoffDungeonNotify_CmdId = exports.ChannelerSlabStageOneoffDungeonNotify_CmdId || (exports.ChannelerSlabStageOneoffDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabWearBuffReq.CmdId
 */
var ChannellerSlabWearBuffReq_CmdId;
(function (ChannellerSlabWearBuffReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabWearBuffReq_CmdId[ChannellerSlabWearBuffReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8107;
     */
    ChannellerSlabWearBuffReq_CmdId[ChannellerSlabWearBuffReq_CmdId["CMD_ID"] = 8107] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabWearBuffReq_CmdId[ChannellerSlabWearBuffReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabWearBuffReq_CmdId[ChannellerSlabWearBuffReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabWearBuffReq_CmdId[ChannellerSlabWearBuffReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabWearBuffReq_CmdId = exports.ChannellerSlabWearBuffReq_CmdId || (exports.ChannellerSlabWearBuffReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabWearBuffRsp.CmdId
 */
var ChannellerSlabWearBuffRsp_CmdId;
(function (ChannellerSlabWearBuffRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabWearBuffRsp_CmdId[ChannellerSlabWearBuffRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8600;
     */
    ChannellerSlabWearBuffRsp_CmdId[ChannellerSlabWearBuffRsp_CmdId["CMD_ID"] = 8600] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabWearBuffRsp_CmdId[ChannellerSlabWearBuffRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabWearBuffRsp_CmdId[ChannellerSlabWearBuffRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabWearBuffRsp_CmdId = exports.ChannellerSlabWearBuffRsp_CmdId || (exports.ChannellerSlabWearBuffRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabTakeoffBuffReq.CmdId
 */
var ChannellerSlabTakeoffBuffReq_CmdId;
(function (ChannellerSlabTakeoffBuffReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabTakeoffBuffReq_CmdId[ChannellerSlabTakeoffBuffReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8516;
     */
    ChannellerSlabTakeoffBuffReq_CmdId[ChannellerSlabTakeoffBuffReq_CmdId["CMD_ID"] = 8516] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabTakeoffBuffReq_CmdId[ChannellerSlabTakeoffBuffReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabTakeoffBuffReq_CmdId[ChannellerSlabTakeoffBuffReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabTakeoffBuffReq_CmdId[ChannellerSlabTakeoffBuffReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabTakeoffBuffReq_CmdId = exports.ChannellerSlabTakeoffBuffReq_CmdId || (exports.ChannellerSlabTakeoffBuffReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabTakeoffBuffRsp.CmdId
 */
var ChannellerSlabTakeoffBuffRsp_CmdId;
(function (ChannellerSlabTakeoffBuffRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabTakeoffBuffRsp_CmdId[ChannellerSlabTakeoffBuffRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8237;
     */
    ChannellerSlabTakeoffBuffRsp_CmdId[ChannellerSlabTakeoffBuffRsp_CmdId["CMD_ID"] = 8237] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabTakeoffBuffRsp_CmdId[ChannellerSlabTakeoffBuffRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabTakeoffBuffRsp_CmdId[ChannellerSlabTakeoffBuffRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabTakeoffBuffRsp_CmdId = exports.ChannellerSlabTakeoffBuffRsp_CmdId || (exports.ChannellerSlabTakeoffBuffRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabEnterLoopDungeonReq.CmdId
 */
var ChannellerSlabEnterLoopDungeonReq_CmdId;
(function (ChannellerSlabEnterLoopDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabEnterLoopDungeonReq_CmdId[ChannellerSlabEnterLoopDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8869;
     */
    ChannellerSlabEnterLoopDungeonReq_CmdId[ChannellerSlabEnterLoopDungeonReq_CmdId["CMD_ID"] = 8869] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabEnterLoopDungeonReq_CmdId[ChannellerSlabEnterLoopDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabEnterLoopDungeonReq_CmdId[ChannellerSlabEnterLoopDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabEnterLoopDungeonReq_CmdId[ChannellerSlabEnterLoopDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabEnterLoopDungeonReq_CmdId = exports.ChannellerSlabEnterLoopDungeonReq_CmdId || (exports.ChannellerSlabEnterLoopDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabEnterLoopDungeonRsp.CmdId
 */
var ChannellerSlabEnterLoopDungeonRsp_CmdId;
(function (ChannellerSlabEnterLoopDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabEnterLoopDungeonRsp_CmdId[ChannellerSlabEnterLoopDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8081;
     */
    ChannellerSlabEnterLoopDungeonRsp_CmdId[ChannellerSlabEnterLoopDungeonRsp_CmdId["CMD_ID"] = 8081] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabEnterLoopDungeonRsp_CmdId[ChannellerSlabEnterLoopDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabEnterLoopDungeonRsp_CmdId[ChannellerSlabEnterLoopDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabEnterLoopDungeonRsp_CmdId = exports.ChannellerSlabEnterLoopDungeonRsp_CmdId || (exports.ChannellerSlabEnterLoopDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq.CmdId
 */
var ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId;
(function (ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8589;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId["CMD_ID"] = 8589] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId || (exports.ChannellerSlabLoopDungeonTakeFirstPassRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp.CmdId
 */
var ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId;
(function (ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8539;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId["CMD_ID"] = 8539] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId = exports.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId || (exports.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq.CmdId
 */
var ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId;
(function (ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8684;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId["CMD_ID"] = 8684] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId = exports.ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId || (exports.ChannellerSlabLoopDungeonTakeScoreRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp.CmdId
 */
var ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId;
(function (ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8433;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId["CMD_ID"] = 8433] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId[ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId = exports.ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId || (exports.ChannellerSlabLoopDungeonTakeScoreRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify.CmdId
 */
var ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId;
(function (ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId[ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8224;
     */
    ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId[ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId["CMD_ID"] = 8224] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId[ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId[ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId = exports.ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId || (exports.ChannellerSlabLoopDungeonChallengeInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq.CmdId
 */
var ChannellerSlabLoopDungeonSelectConditionReq_CmdId;
(function (ChannellerSlabLoopDungeonSelectConditionReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonSelectConditionReq_CmdId[ChannellerSlabLoopDungeonSelectConditionReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8503;
     */
    ChannellerSlabLoopDungeonSelectConditionReq_CmdId[ChannellerSlabLoopDungeonSelectConditionReq_CmdId["CMD_ID"] = 8503] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonSelectConditionReq_CmdId[ChannellerSlabLoopDungeonSelectConditionReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonSelectConditionReq_CmdId[ChannellerSlabLoopDungeonSelectConditionReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonSelectConditionReq_CmdId[ChannellerSlabLoopDungeonSelectConditionReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabLoopDungeonSelectConditionReq_CmdId = exports.ChannellerSlabLoopDungeonSelectConditionReq_CmdId || (exports.ChannellerSlabLoopDungeonSelectConditionReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp.CmdId
 */
var ChannellerSlabLoopDungeonSelectConditionRsp_CmdId;
(function (ChannellerSlabLoopDungeonSelectConditionRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonSelectConditionRsp_CmdId[ChannellerSlabLoopDungeonSelectConditionRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8509;
     */
    ChannellerSlabLoopDungeonSelectConditionRsp_CmdId[ChannellerSlabLoopDungeonSelectConditionRsp_CmdId["CMD_ID"] = 8509] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabLoopDungeonSelectConditionRsp_CmdId[ChannellerSlabLoopDungeonSelectConditionRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabLoopDungeonSelectConditionRsp_CmdId[ChannellerSlabLoopDungeonSelectConditionRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabLoopDungeonSelectConditionRsp_CmdId = exports.ChannellerSlabLoopDungeonSelectConditionRsp_CmdId || (exports.ChannellerSlabLoopDungeonSelectConditionRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoReq.CmdId
 */
var ChannellerSlabOneOffDungeonInfoReq_CmdId;
(function (ChannellerSlabOneOffDungeonInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoReq_CmdId[ChannellerSlabOneOffDungeonInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8409;
     */
    ChannellerSlabOneOffDungeonInfoReq_CmdId[ChannellerSlabOneOffDungeonInfoReq_CmdId["CMD_ID"] = 8409] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoReq_CmdId[ChannellerSlabOneOffDungeonInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabOneOffDungeonInfoReq_CmdId[ChannellerSlabOneOffDungeonInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabOneOffDungeonInfoReq_CmdId[ChannellerSlabOneOffDungeonInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabOneOffDungeonInfoReq_CmdId = exports.ChannellerSlabOneOffDungeonInfoReq_CmdId || (exports.ChannellerSlabOneOffDungeonInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp.CmdId
 */
var ChannellerSlabOneOffDungeonInfoRsp_CmdId;
(function (ChannellerSlabOneOffDungeonInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoRsp_CmdId[ChannellerSlabOneOffDungeonInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8268;
     */
    ChannellerSlabOneOffDungeonInfoRsp_CmdId[ChannellerSlabOneOffDungeonInfoRsp_CmdId["CMD_ID"] = 8268] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoRsp_CmdId[ChannellerSlabOneOffDungeonInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabOneOffDungeonInfoRsp_CmdId[ChannellerSlabOneOffDungeonInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabOneOffDungeonInfoRsp_CmdId = exports.ChannellerSlabOneOffDungeonInfoRsp_CmdId || (exports.ChannellerSlabOneOffDungeonInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify.CmdId
 */
var ChannellerSlabOneOffDungeonInfoNotify_CmdId;
(function (ChannellerSlabOneOffDungeonInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoNotify_CmdId[ChannellerSlabOneOffDungeonInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8729;
     */
    ChannellerSlabOneOffDungeonInfoNotify_CmdId[ChannellerSlabOneOffDungeonInfoNotify_CmdId["CMD_ID"] = 8729] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabOneOffDungeonInfoNotify_CmdId[ChannellerSlabOneOffDungeonInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabOneOffDungeonInfoNotify_CmdId[ChannellerSlabOneOffDungeonInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabOneOffDungeonInfoNotify_CmdId = exports.ChannellerSlabOneOffDungeonInfoNotify_CmdId || (exports.ChannellerSlabOneOffDungeonInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabSaveAssistInfoReq.CmdId
 */
var ChannellerSlabSaveAssistInfoReq_CmdId;
(function (ChannellerSlabSaveAssistInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabSaveAssistInfoReq_CmdId[ChannellerSlabSaveAssistInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8416;
     */
    ChannellerSlabSaveAssistInfoReq_CmdId[ChannellerSlabSaveAssistInfoReq_CmdId["CMD_ID"] = 8416] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabSaveAssistInfoReq_CmdId[ChannellerSlabSaveAssistInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabSaveAssistInfoReq_CmdId[ChannellerSlabSaveAssistInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabSaveAssistInfoReq_CmdId[ChannellerSlabSaveAssistInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabSaveAssistInfoReq_CmdId = exports.ChannellerSlabSaveAssistInfoReq_CmdId || (exports.ChannellerSlabSaveAssistInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabSaveAssistInfoRsp.CmdId
 */
var ChannellerSlabSaveAssistInfoRsp_CmdId;
(function (ChannellerSlabSaveAssistInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabSaveAssistInfoRsp_CmdId[ChannellerSlabSaveAssistInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8932;
     */
    ChannellerSlabSaveAssistInfoRsp_CmdId[ChannellerSlabSaveAssistInfoRsp_CmdId["CMD_ID"] = 8932] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabSaveAssistInfoRsp_CmdId[ChannellerSlabSaveAssistInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabSaveAssistInfoRsp_CmdId[ChannellerSlabSaveAssistInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabSaveAssistInfoRsp_CmdId = exports.ChannellerSlabSaveAssistInfoRsp_CmdId || (exports.ChannellerSlabSaveAssistInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq.CmdId
 */
var MistTrialSelectAvatarAndEnterDungeonReq_CmdId;
(function (MistTrialSelectAvatarAndEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSelectAvatarAndEnterDungeonReq_CmdId[MistTrialSelectAvatarAndEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8666;
     */
    MistTrialSelectAvatarAndEnterDungeonReq_CmdId[MistTrialSelectAvatarAndEnterDungeonReq_CmdId["CMD_ID"] = 8666] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSelectAvatarAndEnterDungeonReq_CmdId[MistTrialSelectAvatarAndEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialSelectAvatarAndEnterDungeonReq_CmdId[MistTrialSelectAvatarAndEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialSelectAvatarAndEnterDungeonReq_CmdId[MistTrialSelectAvatarAndEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MistTrialSelectAvatarAndEnterDungeonReq_CmdId = exports.MistTrialSelectAvatarAndEnterDungeonReq_CmdId || (exports.MistTrialSelectAvatarAndEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp.CmdId
 */
var MistTrialSelectAvatarAndEnterDungeonRsp_CmdId;
(function (MistTrialSelectAvatarAndEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSelectAvatarAndEnterDungeonRsp_CmdId[MistTrialSelectAvatarAndEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8239;
     */
    MistTrialSelectAvatarAndEnterDungeonRsp_CmdId[MistTrialSelectAvatarAndEnterDungeonRsp_CmdId["CMD_ID"] = 8239] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSelectAvatarAndEnterDungeonRsp_CmdId[MistTrialSelectAvatarAndEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialSelectAvatarAndEnterDungeonRsp_CmdId[MistTrialSelectAvatarAndEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MistTrialSelectAvatarAndEnterDungeonRsp_CmdId = exports.MistTrialSelectAvatarAndEnterDungeonRsp_CmdId || (exports.MistTrialSelectAvatarAndEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetChallengeMissionReq.CmdId
 */
var MistTrialGetChallengeMissionReq_CmdId;
(function (MistTrialGetChallengeMissionReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetChallengeMissionReq_CmdId[MistTrialGetChallengeMissionReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8893;
     */
    MistTrialGetChallengeMissionReq_CmdId[MistTrialGetChallengeMissionReq_CmdId["CMD_ID"] = 8893] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetChallengeMissionReq_CmdId[MistTrialGetChallengeMissionReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetChallengeMissionReq_CmdId[MistTrialGetChallengeMissionReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetChallengeMissionReq_CmdId[MistTrialGetChallengeMissionReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MistTrialGetChallengeMissionReq_CmdId = exports.MistTrialGetChallengeMissionReq_CmdId || (exports.MistTrialGetChallengeMissionReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetChallengeMissionRsp.CmdId
 */
var MistTrialGetChallengeMissionRsp_CmdId;
(function (MistTrialGetChallengeMissionRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetChallengeMissionRsp_CmdId[MistTrialGetChallengeMissionRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8508;
     */
    MistTrialGetChallengeMissionRsp_CmdId[MistTrialGetChallengeMissionRsp_CmdId["CMD_ID"] = 8508] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetChallengeMissionRsp_CmdId[MistTrialGetChallengeMissionRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetChallengeMissionRsp_CmdId[MistTrialGetChallengeMissionRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MistTrialGetChallengeMissionRsp_CmdId = exports.MistTrialGetChallengeMissionRsp_CmdId || (exports.MistTrialGetChallengeMissionRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialDunegonFailNotify.CmdId
 */
var MistTrialDunegonFailNotify_CmdId;
(function (MistTrialDunegonFailNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialDunegonFailNotify_CmdId[MistTrialDunegonFailNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8135;
     */
    MistTrialDunegonFailNotify_CmdId[MistTrialDunegonFailNotify_CmdId["CMD_ID"] = 8135] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialDunegonFailNotify_CmdId[MistTrialDunegonFailNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialDunegonFailNotify_CmdId[MistTrialDunegonFailNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MistTrialDunegonFailNotify_CmdId = exports.MistTrialDunegonFailNotify_CmdId || (exports.MistTrialDunegonFailNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq.CmdId
 */
var ChannellerSlabCheckEnterLoopDungeonReq_CmdId;
(function (ChannellerSlabCheckEnterLoopDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabCheckEnterLoopDungeonReq_CmdId[ChannellerSlabCheckEnterLoopDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8745;
     */
    ChannellerSlabCheckEnterLoopDungeonReq_CmdId[ChannellerSlabCheckEnterLoopDungeonReq_CmdId["CMD_ID"] = 8745] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabCheckEnterLoopDungeonReq_CmdId[ChannellerSlabCheckEnterLoopDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabCheckEnterLoopDungeonReq_CmdId[ChannellerSlabCheckEnterLoopDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabCheckEnterLoopDungeonReq_CmdId[ChannellerSlabCheckEnterLoopDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ChannellerSlabCheckEnterLoopDungeonReq_CmdId = exports.ChannellerSlabCheckEnterLoopDungeonReq_CmdId || (exports.ChannellerSlabCheckEnterLoopDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp.CmdId
 */
var ChannellerSlabCheckEnterLoopDungeonRsp_CmdId;
(function (ChannellerSlabCheckEnterLoopDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabCheckEnterLoopDungeonRsp_CmdId[ChannellerSlabCheckEnterLoopDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8452;
     */
    ChannellerSlabCheckEnterLoopDungeonRsp_CmdId[ChannellerSlabCheckEnterLoopDungeonRsp_CmdId["CMD_ID"] = 8452] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ChannellerSlabCheckEnterLoopDungeonRsp_CmdId[ChannellerSlabCheckEnterLoopDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ChannellerSlabCheckEnterLoopDungeonRsp_CmdId[ChannellerSlabCheckEnterLoopDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ChannellerSlabCheckEnterLoopDungeonRsp_CmdId = exports.ChannellerSlabCheckEnterLoopDungeonRsp_CmdId || (exports.ChannellerSlabCheckEnterLoopDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.HideAndSeekSelectSkillReq.CmdId
 */
var HideAndSeekSelectSkillReq_CmdId;
(function (HideAndSeekSelectSkillReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    HideAndSeekSelectSkillReq_CmdId[HideAndSeekSelectSkillReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8183;
     */
    HideAndSeekSelectSkillReq_CmdId[HideAndSeekSelectSkillReq_CmdId["CMD_ID"] = 8183] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    HideAndSeekSelectSkillReq_CmdId[HideAndSeekSelectSkillReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    HideAndSeekSelectSkillReq_CmdId[HideAndSeekSelectSkillReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    HideAndSeekSelectSkillReq_CmdId[HideAndSeekSelectSkillReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(HideAndSeekSelectSkillReq_CmdId = exports.HideAndSeekSelectSkillReq_CmdId || (exports.HideAndSeekSelectSkillReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.HideAndSeekSelectSkillRsp.CmdId
 */
var HideAndSeekSelectSkillRsp_CmdId;
(function (HideAndSeekSelectSkillRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    HideAndSeekSelectSkillRsp_CmdId[HideAndSeekSelectSkillRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8088;
     */
    HideAndSeekSelectSkillRsp_CmdId[HideAndSeekSelectSkillRsp_CmdId["CMD_ID"] = 8088] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    HideAndSeekSelectSkillRsp_CmdId[HideAndSeekSelectSkillRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    HideAndSeekSelectSkillRsp_CmdId[HideAndSeekSelectSkillRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(HideAndSeekSelectSkillRsp_CmdId = exports.HideAndSeekSelectSkillRsp_CmdId || (exports.HideAndSeekSelectSkillRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeScoreRewardReq.CmdId
 */
var ActivityTakeScoreRewardReq_CmdId;
(function (ActivityTakeScoreRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeScoreRewardReq_CmdId[ActivityTakeScoreRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8971;
     */
    ActivityTakeScoreRewardReq_CmdId[ActivityTakeScoreRewardReq_CmdId["CMD_ID"] = 8971] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeScoreRewardReq_CmdId[ActivityTakeScoreRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeScoreRewardReq_CmdId[ActivityTakeScoreRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeScoreRewardReq_CmdId[ActivityTakeScoreRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityTakeScoreRewardReq_CmdId = exports.ActivityTakeScoreRewardReq_CmdId || (exports.ActivityTakeScoreRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeScoreRewardRsp.CmdId
 */
var ActivityTakeScoreRewardRsp_CmdId;
(function (ActivityTakeScoreRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeScoreRewardRsp_CmdId[ActivityTakeScoreRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8583;
     */
    ActivityTakeScoreRewardRsp_CmdId[ActivityTakeScoreRewardRsp_CmdId["CMD_ID"] = 8583] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeScoreRewardRsp_CmdId[ActivityTakeScoreRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeScoreRewardRsp_CmdId[ActivityTakeScoreRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityTakeScoreRewardRsp_CmdId = exports.ActivityTakeScoreRewardRsp_CmdId || (exports.ActivityTakeScoreRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeAllScoreRewardReq.CmdId
 */
var ActivityTakeAllScoreRewardReq_CmdId;
(function (ActivityTakeAllScoreRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeAllScoreRewardReq_CmdId[ActivityTakeAllScoreRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8372;
     */
    ActivityTakeAllScoreRewardReq_CmdId[ActivityTakeAllScoreRewardReq_CmdId["CMD_ID"] = 8372] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeAllScoreRewardReq_CmdId[ActivityTakeAllScoreRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeAllScoreRewardReq_CmdId[ActivityTakeAllScoreRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeAllScoreRewardReq_CmdId[ActivityTakeAllScoreRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityTakeAllScoreRewardReq_CmdId = exports.ActivityTakeAllScoreRewardReq_CmdId || (exports.ActivityTakeAllScoreRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityTakeAllScoreRewardRsp.CmdId
 */
var ActivityTakeAllScoreRewardRsp_CmdId;
(function (ActivityTakeAllScoreRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeAllScoreRewardRsp_CmdId[ActivityTakeAllScoreRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8043;
     */
    ActivityTakeAllScoreRewardRsp_CmdId[ActivityTakeAllScoreRewardRsp_CmdId["CMD_ID"] = 8043] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityTakeAllScoreRewardRsp_CmdId[ActivityTakeAllScoreRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityTakeAllScoreRewardRsp_CmdId[ActivityTakeAllScoreRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityTakeAllScoreRewardRsp_CmdId = exports.ActivityTakeAllScoreRewardRsp_CmdId || (exports.ActivityTakeAllScoreRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CommonPlayerTipsNotify.CmdId
 */
var CommonPlayerTipsNotify_CmdId;
(function (CommonPlayerTipsNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CommonPlayerTipsNotify_CmdId[CommonPlayerTipsNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8466;
     */
    CommonPlayerTipsNotify_CmdId[CommonPlayerTipsNotify_CmdId["CMD_ID"] = 8466] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CommonPlayerTipsNotify_CmdId[CommonPlayerTipsNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CommonPlayerTipsNotify_CmdId[CommonPlayerTipsNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(CommonPlayerTipsNotify_CmdId = exports.CommonPlayerTipsNotify_CmdId || (exports.CommonPlayerTipsNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FindHilichurlFinishSecondQuestNotify.CmdId
 */
var FindHilichurlFinishSecondQuestNotify_CmdId;
(function (FindHilichurlFinishSecondQuestNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FindHilichurlFinishSecondQuestNotify_CmdId[FindHilichurlFinishSecondQuestNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8901;
     */
    FindHilichurlFinishSecondQuestNotify_CmdId[FindHilichurlFinishSecondQuestNotify_CmdId["CMD_ID"] = 8901] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FindHilichurlFinishSecondQuestNotify_CmdId[FindHilichurlFinishSecondQuestNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FindHilichurlFinishSecondQuestNotify_CmdId[FindHilichurlFinishSecondQuestNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FindHilichurlFinishSecondQuestNotify_CmdId = exports.FindHilichurlFinishSecondQuestNotify_CmdId || (exports.FindHilichurlFinishSecondQuestNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FindHilichurlAcceptQuestNotify.CmdId
 */
var FindHilichurlAcceptQuestNotify_CmdId;
(function (FindHilichurlAcceptQuestNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FindHilichurlAcceptQuestNotify_CmdId[FindHilichurlAcceptQuestNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8659;
     */
    FindHilichurlAcceptQuestNotify_CmdId[FindHilichurlAcceptQuestNotify_CmdId["CMD_ID"] = 8659] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FindHilichurlAcceptQuestNotify_CmdId[FindHilichurlAcceptQuestNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FindHilichurlAcceptQuestNotify_CmdId[FindHilichurlAcceptQuestNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FindHilichurlAcceptQuestNotify_CmdId = exports.FindHilichurlAcceptQuestNotify_CmdId || (exports.FindHilichurlAcceptQuestNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeFloatSignalPositionNotify.CmdId
 */
var SummerTimeFloatSignalPositionNotify_CmdId;
(function (SummerTimeFloatSignalPositionNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeFloatSignalPositionNotify_CmdId[SummerTimeFloatSignalPositionNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8077;
     */
    SummerTimeFloatSignalPositionNotify_CmdId[SummerTimeFloatSignalPositionNotify_CmdId["CMD_ID"] = 8077] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeFloatSignalPositionNotify_CmdId[SummerTimeFloatSignalPositionNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeFloatSignalPositionNotify_CmdId[SummerTimeFloatSignalPositionNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeFloatSignalPositionNotify_CmdId = exports.SummerTimeFloatSignalPositionNotify_CmdId || (exports.SummerTimeFloatSignalPositionNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeFloatSignalUpdateNotify.CmdId
 */
var SummerTimeFloatSignalUpdateNotify_CmdId;
(function (SummerTimeFloatSignalUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeFloatSignalUpdateNotify_CmdId[SummerTimeFloatSignalUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8781;
     */
    SummerTimeFloatSignalUpdateNotify_CmdId[SummerTimeFloatSignalUpdateNotify_CmdId["CMD_ID"] = 8781] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeFloatSignalUpdateNotify_CmdId[SummerTimeFloatSignalUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeFloatSignalUpdateNotify_CmdId[SummerTimeFloatSignalUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeFloatSignalUpdateNotify_CmdId = exports.SummerTimeFloatSignalUpdateNotify_CmdId || (exports.SummerTimeFloatSignalUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatSettleNotify.CmdId
 */
var SummerTimeSprintBoatSettleNotify_CmdId;
(function (SummerTimeSprintBoatSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatSettleNotify_CmdId[SummerTimeSprintBoatSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8651;
     */
    SummerTimeSprintBoatSettleNotify_CmdId[SummerTimeSprintBoatSettleNotify_CmdId["CMD_ID"] = 8651] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatSettleNotify_CmdId[SummerTimeSprintBoatSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeSprintBoatSettleNotify_CmdId[SummerTimeSprintBoatSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeSprintBoatSettleNotify_CmdId = exports.SummerTimeSprintBoatSettleNotify_CmdId || (exports.SummerTimeSprintBoatSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatRestartReq.CmdId
 */
var SummerTimeSprintBoatRestartReq_CmdId;
(function (SummerTimeSprintBoatRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatRestartReq_CmdId[SummerTimeSprintBoatRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8410;
     */
    SummerTimeSprintBoatRestartReq_CmdId[SummerTimeSprintBoatRestartReq_CmdId["CMD_ID"] = 8410] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatRestartReq_CmdId[SummerTimeSprintBoatRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeSprintBoatRestartReq_CmdId[SummerTimeSprintBoatRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeSprintBoatRestartReq_CmdId[SummerTimeSprintBoatRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SummerTimeSprintBoatRestartReq_CmdId = exports.SummerTimeSprintBoatRestartReq_CmdId || (exports.SummerTimeSprintBoatRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeSprintBoatRestartRsp.CmdId
 */
var SummerTimeSprintBoatRestartRsp_CmdId;
(function (SummerTimeSprintBoatRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatRestartRsp_CmdId[SummerTimeSprintBoatRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8356;
     */
    SummerTimeSprintBoatRestartRsp_CmdId[SummerTimeSprintBoatRestartRsp_CmdId["CMD_ID"] = 8356] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeSprintBoatRestartRsp_CmdId[SummerTimeSprintBoatRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeSprintBoatRestartRsp_CmdId[SummerTimeSprintBoatRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeSprintBoatRestartRsp_CmdId = exports.SummerTimeSprintBoatRestartRsp_CmdId || (exports.SummerTimeSprintBoatRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartBuoyantCombatGalleryReq.CmdId
 */
var StartBuoyantCombatGalleryReq_CmdId;
(function (StartBuoyantCombatGalleryReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartBuoyantCombatGalleryReq_CmdId[StartBuoyantCombatGalleryReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8732;
     */
    StartBuoyantCombatGalleryReq_CmdId[StartBuoyantCombatGalleryReq_CmdId["CMD_ID"] = 8732] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartBuoyantCombatGalleryReq_CmdId[StartBuoyantCombatGalleryReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartBuoyantCombatGalleryReq_CmdId[StartBuoyantCombatGalleryReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartBuoyantCombatGalleryReq_CmdId[StartBuoyantCombatGalleryReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartBuoyantCombatGalleryReq_CmdId = exports.StartBuoyantCombatGalleryReq_CmdId || (exports.StartBuoyantCombatGalleryReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartBuoyantCombatGalleryRsp.CmdId
 */
var StartBuoyantCombatGalleryRsp_CmdId;
(function (StartBuoyantCombatGalleryRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartBuoyantCombatGalleryRsp_CmdId[StartBuoyantCombatGalleryRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8680;
     */
    StartBuoyantCombatGalleryRsp_CmdId[StartBuoyantCombatGalleryRsp_CmdId["CMD_ID"] = 8680] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartBuoyantCombatGalleryRsp_CmdId[StartBuoyantCombatGalleryRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartBuoyantCombatGalleryRsp_CmdId[StartBuoyantCombatGalleryRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartBuoyantCombatGalleryRsp_CmdId = exports.StartBuoyantCombatGalleryRsp_CmdId || (exports.StartBuoyantCombatGalleryRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BuoyantCombatSettleNotify.CmdId
 */
var BuoyantCombatSettleNotify_CmdId;
(function (BuoyantCombatSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BuoyantCombatSettleNotify_CmdId[BuoyantCombatSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8305;
     */
    BuoyantCombatSettleNotify_CmdId[BuoyantCombatSettleNotify_CmdId["CMD_ID"] = 8305] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BuoyantCombatSettleNotify_CmdId[BuoyantCombatSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BuoyantCombatSettleNotify_CmdId[BuoyantCombatSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BuoyantCombatSettleNotify_CmdId = exports.BuoyantCombatSettleNotify_CmdId || (exports.BuoyantCombatSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SetLimitOptimizationNotify.CmdId
 */
var SetLimitOptimizationNotify_CmdId;
(function (SetLimitOptimizationNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetLimitOptimizationNotify_CmdId[SetLimitOptimizationNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8851;
     */
    SetLimitOptimizationNotify_CmdId[SetLimitOptimizationNotify_CmdId["CMD_ID"] = 8851] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SetLimitOptimizationNotify_CmdId[SetLimitOptimizationNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SetLimitOptimizationNotify_CmdId[SetLimitOptimizationNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SetLimitOptimizationNotify_CmdId = exports.SetLimitOptimizationNotify_CmdId || (exports.SetLimitOptimizationNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EchoShellUpdateNotify.CmdId
 */
var EchoShellUpdateNotify_CmdId;
(function (EchoShellUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellUpdateNotify_CmdId[EchoShellUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8150;
     */
    EchoShellUpdateNotify_CmdId[EchoShellUpdateNotify_CmdId["CMD_ID"] = 8150] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellUpdateNotify_CmdId[EchoShellUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EchoShellUpdateNotify_CmdId[EchoShellUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EchoShellUpdateNotify_CmdId = exports.EchoShellUpdateNotify_CmdId || (exports.EchoShellUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EchoShellTakeRewardReq.CmdId
 */
var EchoShellTakeRewardReq_CmdId;
(function (EchoShellTakeRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellTakeRewardReq_CmdId[EchoShellTakeRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8114;
     */
    EchoShellTakeRewardReq_CmdId[EchoShellTakeRewardReq_CmdId["CMD_ID"] = 8114] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellTakeRewardReq_CmdId[EchoShellTakeRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EchoShellTakeRewardReq_CmdId[EchoShellTakeRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EchoShellTakeRewardReq_CmdId[EchoShellTakeRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EchoShellTakeRewardReq_CmdId = exports.EchoShellTakeRewardReq_CmdId || (exports.EchoShellTakeRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EchoShellTakeRewardRsp.CmdId
 */
var EchoShellTakeRewardRsp_CmdId;
(function (EchoShellTakeRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellTakeRewardRsp_CmdId[EchoShellTakeRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8797;
     */
    EchoShellTakeRewardRsp_CmdId[EchoShellTakeRewardRsp_CmdId["CMD_ID"] = 8797] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EchoShellTakeRewardRsp_CmdId[EchoShellTakeRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EchoShellTakeRewardRsp_CmdId[EchoShellTakeRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EchoShellTakeRewardRsp_CmdId = exports.EchoShellTakeRewardRsp_CmdId || (exports.EchoShellTakeRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BounceConjuringSettleNotify.CmdId
 */
var BounceConjuringSettleNotify_CmdId;
(function (BounceConjuringSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BounceConjuringSettleNotify_CmdId[BounceConjuringSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8084;
     */
    BounceConjuringSettleNotify_CmdId[BounceConjuringSettleNotify_CmdId["CMD_ID"] = 8084] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BounceConjuringSettleNotify_CmdId[BounceConjuringSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BounceConjuringSettleNotify_CmdId[BounceConjuringSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BounceConjuringSettleNotify_CmdId = exports.BounceConjuringSettleNotify_CmdId || (exports.BounceConjuringSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlitzRushParkourRestartReq.CmdId
 */
var BlitzRushParkourRestartReq_CmdId;
(function (BlitzRushParkourRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlitzRushParkourRestartReq_CmdId[BlitzRushParkourRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8653;
     */
    BlitzRushParkourRestartReq_CmdId[BlitzRushParkourRestartReq_CmdId["CMD_ID"] = 8653] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlitzRushParkourRestartReq_CmdId[BlitzRushParkourRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlitzRushParkourRestartReq_CmdId[BlitzRushParkourRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlitzRushParkourRestartReq_CmdId[BlitzRushParkourRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BlitzRushParkourRestartReq_CmdId = exports.BlitzRushParkourRestartReq_CmdId || (exports.BlitzRushParkourRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BlitzRushParkourRestartRsp.CmdId
 */
var BlitzRushParkourRestartRsp_CmdId;
(function (BlitzRushParkourRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlitzRushParkourRestartRsp_CmdId[BlitzRushParkourRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8944;
     */
    BlitzRushParkourRestartRsp_CmdId[BlitzRushParkourRestartRsp_CmdId["CMD_ID"] = 8944] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BlitzRushParkourRestartRsp_CmdId[BlitzRushParkourRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BlitzRushParkourRestartRsp_CmdId[BlitzRushParkourRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BlitzRushParkourRestartRsp_CmdId = exports.BlitzRushParkourRestartRsp_CmdId || (exports.BlitzRushParkourRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterChessDungeonReq.CmdId
 */
var EnterChessDungeonReq_CmdId;
(function (EnterChessDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterChessDungeonReq_CmdId[EnterChessDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8191;
     */
    EnterChessDungeonReq_CmdId[EnterChessDungeonReq_CmdId["CMD_ID"] = 8191] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterChessDungeonReq_CmdId[EnterChessDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterChessDungeonReq_CmdId[EnterChessDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterChessDungeonReq_CmdId[EnterChessDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterChessDungeonReq_CmdId = exports.EnterChessDungeonReq_CmdId || (exports.EnterChessDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterChessDungeonRsp.CmdId
 */
var EnterChessDungeonRsp_CmdId;
(function (EnterChessDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterChessDungeonRsp_CmdId[EnterChessDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8592;
     */
    EnterChessDungeonRsp_CmdId[EnterChessDungeonRsp_CmdId["CMD_ID"] = 8592] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterChessDungeonRsp_CmdId[EnterChessDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterChessDungeonRsp_CmdId[EnterChessDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterChessDungeonRsp_CmdId = exports.EnterChessDungeonRsp_CmdId || (exports.EnterChessDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureMapHostInfoNotify.CmdId
 */
var TreasureMapHostInfoNotify_CmdId;
(function (TreasureMapHostInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapHostInfoNotify_CmdId[TreasureMapHostInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8681;
     */
    TreasureMapHostInfoNotify_CmdId[TreasureMapHostInfoNotify_CmdId["CMD_ID"] = 8681] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureMapHostInfoNotify_CmdId[TreasureMapHostInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureMapHostInfoNotify_CmdId[TreasureMapHostInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureMapHostInfoNotify_CmdId = exports.TreasureMapHostInfoNotify_CmdId || (exports.TreasureMapHostInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSaveTeamReq.CmdId
 */
var SumoSaveTeamReq_CmdId;
(function (SumoSaveTeamReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSaveTeamReq_CmdId[SumoSaveTeamReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8313;
     */
    SumoSaveTeamReq_CmdId[SumoSaveTeamReq_CmdId["CMD_ID"] = 8313] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSaveTeamReq_CmdId[SumoSaveTeamReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSaveTeamReq_CmdId[SumoSaveTeamReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSaveTeamReq_CmdId[SumoSaveTeamReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SumoSaveTeamReq_CmdId = exports.SumoSaveTeamReq_CmdId || (exports.SumoSaveTeamReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSaveTeamRsp.CmdId
 */
var SumoSaveTeamRsp_CmdId;
(function (SumoSaveTeamRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSaveTeamRsp_CmdId[SumoSaveTeamRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8319;
     */
    SumoSaveTeamRsp_CmdId[SumoSaveTeamRsp_CmdId["CMD_ID"] = 8319] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSaveTeamRsp_CmdId[SumoSaveTeamRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSaveTeamRsp_CmdId[SumoSaveTeamRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoSaveTeamRsp_CmdId = exports.SumoSaveTeamRsp_CmdId || (exports.SumoSaveTeamRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSelectTeamAndEnterDungeonReq.CmdId
 */
var SumoSelectTeamAndEnterDungeonReq_CmdId;
(function (SumoSelectTeamAndEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSelectTeamAndEnterDungeonReq_CmdId[SumoSelectTeamAndEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8215;
     */
    SumoSelectTeamAndEnterDungeonReq_CmdId[SumoSelectTeamAndEnterDungeonReq_CmdId["CMD_ID"] = 8215] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSelectTeamAndEnterDungeonReq_CmdId[SumoSelectTeamAndEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSelectTeamAndEnterDungeonReq_CmdId[SumoSelectTeamAndEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSelectTeamAndEnterDungeonReq_CmdId[SumoSelectTeamAndEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SumoSelectTeamAndEnterDungeonReq_CmdId = exports.SumoSelectTeamAndEnterDungeonReq_CmdId || (exports.SumoSelectTeamAndEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSelectTeamAndEnterDungeonRsp.CmdId
 */
var SumoSelectTeamAndEnterDungeonRsp_CmdId;
(function (SumoSelectTeamAndEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSelectTeamAndEnterDungeonRsp_CmdId[SumoSelectTeamAndEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8193;
     */
    SumoSelectTeamAndEnterDungeonRsp_CmdId[SumoSelectTeamAndEnterDungeonRsp_CmdId["CMD_ID"] = 8193] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSelectTeamAndEnterDungeonRsp_CmdId[SumoSelectTeamAndEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSelectTeamAndEnterDungeonRsp_CmdId[SumoSelectTeamAndEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoSelectTeamAndEnterDungeonRsp_CmdId = exports.SumoSelectTeamAndEnterDungeonRsp_CmdId || (exports.SumoSelectTeamAndEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoDungeonSettleNotify.CmdId
 */
var SumoDungeonSettleNotify_CmdId;
(function (SumoDungeonSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoDungeonSettleNotify_CmdId[SumoDungeonSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8291;
     */
    SumoDungeonSettleNotify_CmdId[SumoDungeonSettleNotify_CmdId["CMD_ID"] = 8291] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoDungeonSettleNotify_CmdId[SumoDungeonSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoDungeonSettleNotify_CmdId[SumoDungeonSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoDungeonSettleNotify_CmdId = exports.SumoDungeonSettleNotify_CmdId || (exports.SumoDungeonSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoEnterDungeonNotify.CmdId
 */
var SumoEnterDungeonNotify_CmdId;
(function (SumoEnterDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoEnterDungeonNotify_CmdId[SumoEnterDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8013;
     */
    SumoEnterDungeonNotify_CmdId[SumoEnterDungeonNotify_CmdId["CMD_ID"] = 8013] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoEnterDungeonNotify_CmdId[SumoEnterDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoEnterDungeonNotify_CmdId[SumoEnterDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoEnterDungeonNotify_CmdId = exports.SumoEnterDungeonNotify_CmdId || (exports.SumoEnterDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSwitchTeamReq.CmdId
 */
var SumoSwitchTeamReq_CmdId;
(function (SumoSwitchTeamReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSwitchTeamReq_CmdId[SumoSwitchTeamReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8351;
     */
    SumoSwitchTeamReq_CmdId[SumoSwitchTeamReq_CmdId["CMD_ID"] = 8351] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSwitchTeamReq_CmdId[SumoSwitchTeamReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSwitchTeamReq_CmdId[SumoSwitchTeamReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSwitchTeamReq_CmdId[SumoSwitchTeamReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SumoSwitchTeamReq_CmdId = exports.SumoSwitchTeamReq_CmdId || (exports.SumoSwitchTeamReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSwitchTeamRsp.CmdId
 */
var SumoSwitchTeamRsp_CmdId;
(function (SumoSwitchTeamRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSwitchTeamRsp_CmdId[SumoSwitchTeamRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8525;
     */
    SumoSwitchTeamRsp_CmdId[SumoSwitchTeamRsp_CmdId["CMD_ID"] = 8525] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSwitchTeamRsp_CmdId[SumoSwitchTeamRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSwitchTeamRsp_CmdId[SumoSwitchTeamRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoSwitchTeamRsp_CmdId = exports.SumoSwitchTeamRsp_CmdId || (exports.SumoSwitchTeamRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoLeaveDungeonNotify.CmdId
 */
var SumoLeaveDungeonNotify_CmdId;
(function (SumoLeaveDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoLeaveDungeonNotify_CmdId[SumoLeaveDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8640;
     */
    SumoLeaveDungeonNotify_CmdId[SumoLeaveDungeonNotify_CmdId["CMD_ID"] = 8640] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoLeaveDungeonNotify_CmdId[SumoLeaveDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoLeaveDungeonNotify_CmdId[SumoLeaveDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoLeaveDungeonNotify_CmdId = exports.SumoLeaveDungeonNotify_CmdId || (exports.SumoLeaveDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoRestartDungeonReq.CmdId
 */
var SumoRestartDungeonReq_CmdId;
(function (SumoRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoRestartDungeonReq_CmdId[SumoRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8612;
     */
    SumoRestartDungeonReq_CmdId[SumoRestartDungeonReq_CmdId["CMD_ID"] = 8612] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoRestartDungeonReq_CmdId[SumoRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoRestartDungeonReq_CmdId[SumoRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoRestartDungeonReq_CmdId[SumoRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SumoRestartDungeonReq_CmdId = exports.SumoRestartDungeonReq_CmdId || (exports.SumoRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoRestartDungeonRsp.CmdId
 */
var SumoRestartDungeonRsp_CmdId;
(function (SumoRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoRestartDungeonRsp_CmdId[SumoRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8214;
     */
    SumoRestartDungeonRsp_CmdId[SumoRestartDungeonRsp_CmdId["CMD_ID"] = 8214] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoRestartDungeonRsp_CmdId[SumoRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoRestartDungeonRsp_CmdId[SumoRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoRestartDungeonRsp_CmdId = exports.SumoRestartDungeonRsp_CmdId || (exports.SumoRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityDisableTransferPointInteractionNotify.CmdId
 */
var ActivityDisableTransferPointInteractionNotify_CmdId;
(function (ActivityDisableTransferPointInteractionNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityDisableTransferPointInteractionNotify_CmdId[ActivityDisableTransferPointInteractionNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8982;
     */
    ActivityDisableTransferPointInteractionNotify_CmdId[ActivityDisableTransferPointInteractionNotify_CmdId["CMD_ID"] = 8982] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityDisableTransferPointInteractionNotify_CmdId[ActivityDisableTransferPointInteractionNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityDisableTransferPointInteractionNotify_CmdId[ActivityDisableTransferPointInteractionNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityDisableTransferPointInteractionNotify_CmdId = exports.ActivityDisableTransferPointInteractionNotify_CmdId || (exports.ActivityDisableTransferPointInteractionNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SumoSetNoSwitchPunishTimeNotify.CmdId
 */
var SumoSetNoSwitchPunishTimeNotify_CmdId;
(function (SumoSetNoSwitchPunishTimeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSetNoSwitchPunishTimeNotify_CmdId[SumoSetNoSwitchPunishTimeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8935;
     */
    SumoSetNoSwitchPunishTimeNotify_CmdId[SumoSetNoSwitchPunishTimeNotify_CmdId["CMD_ID"] = 8935] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SumoSetNoSwitchPunishTimeNotify_CmdId[SumoSetNoSwitchPunishTimeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SumoSetNoSwitchPunishTimeNotify_CmdId[SumoSetNoSwitchPunishTimeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SumoSetNoSwitchPunishTimeNotify_CmdId = exports.SumoSetNoSwitchPunishTimeNotify_CmdId || (exports.SumoSetNoSwitchPunishTimeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FishingGallerySettleNotify.CmdId
 */
var FishingGallerySettleNotify_CmdId;
(function (FishingGallerySettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FishingGallerySettleNotify_CmdId[FishingGallerySettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8780;
     */
    FishingGallerySettleNotify_CmdId[FishingGallerySettleNotify_CmdId["CMD_ID"] = 8780] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FishingGallerySettleNotify_CmdId[FishingGallerySettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FishingGallerySettleNotify_CmdId[FishingGallerySettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FishingGallerySettleNotify_CmdId = exports.FishingGallerySettleNotify_CmdId || (exports.FishingGallerySettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteSacrificeReq.CmdId
 */
var LunaRiteSacrificeReq_CmdId;
(function (LunaRiteSacrificeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteSacrificeReq_CmdId[LunaRiteSacrificeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8805;
     */
    LunaRiteSacrificeReq_CmdId[LunaRiteSacrificeReq_CmdId["CMD_ID"] = 8805] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteSacrificeReq_CmdId[LunaRiteSacrificeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteSacrificeReq_CmdId[LunaRiteSacrificeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteSacrificeReq_CmdId[LunaRiteSacrificeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteSacrificeReq_CmdId = exports.LunaRiteSacrificeReq_CmdId || (exports.LunaRiteSacrificeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteSacrificeRsp.CmdId
 */
var LunaRiteSacrificeRsp_CmdId;
(function (LunaRiteSacrificeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteSacrificeRsp_CmdId[LunaRiteSacrificeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8080;
     */
    LunaRiteSacrificeRsp_CmdId[LunaRiteSacrificeRsp_CmdId["CMD_ID"] = 8080] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteSacrificeRsp_CmdId[LunaRiteSacrificeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteSacrificeRsp_CmdId[LunaRiteSacrificeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LunaRiteSacrificeRsp_CmdId = exports.LunaRiteSacrificeRsp_CmdId || (exports.LunaRiteSacrificeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteTakeSacrificeRewardReq.CmdId
 */
var LunaRiteTakeSacrificeRewardReq_CmdId;
(function (LunaRiteTakeSacrificeRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteTakeSacrificeRewardReq_CmdId[LunaRiteTakeSacrificeRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8045;
     */
    LunaRiteTakeSacrificeRewardReq_CmdId[LunaRiteTakeSacrificeRewardReq_CmdId["CMD_ID"] = 8045] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteTakeSacrificeRewardReq_CmdId[LunaRiteTakeSacrificeRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteTakeSacrificeRewardReq_CmdId[LunaRiteTakeSacrificeRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteTakeSacrificeRewardReq_CmdId[LunaRiteTakeSacrificeRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteTakeSacrificeRewardReq_CmdId = exports.LunaRiteTakeSacrificeRewardReq_CmdId || (exports.LunaRiteTakeSacrificeRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteTakeSacrificeRewardRsp.CmdId
 */
var LunaRiteTakeSacrificeRewardRsp_CmdId;
(function (LunaRiteTakeSacrificeRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteTakeSacrificeRewardRsp_CmdId[LunaRiteTakeSacrificeRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8397;
     */
    LunaRiteTakeSacrificeRewardRsp_CmdId[LunaRiteTakeSacrificeRewardRsp_CmdId["CMD_ID"] = 8397] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteTakeSacrificeRewardRsp_CmdId[LunaRiteTakeSacrificeRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteTakeSacrificeRewardRsp_CmdId[LunaRiteTakeSacrificeRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LunaRiteTakeSacrificeRewardRsp_CmdId = exports.LunaRiteTakeSacrificeRewardRsp_CmdId || (exports.LunaRiteTakeSacrificeRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointReq.CmdId
 */
var LunaRiteHintPointReq_CmdId;
(function (LunaRiteHintPointReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointReq_CmdId[LunaRiteHintPointReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8195;
     */
    LunaRiteHintPointReq_CmdId[LunaRiteHintPointReq_CmdId["CMD_ID"] = 8195] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointReq_CmdId[LunaRiteHintPointReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointReq_CmdId[LunaRiteHintPointReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointReq_CmdId[LunaRiteHintPointReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteHintPointReq_CmdId = exports.LunaRiteHintPointReq_CmdId || (exports.LunaRiteHintPointReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointRsp.CmdId
 */
var LunaRiteHintPointRsp_CmdId;
(function (LunaRiteHintPointRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointRsp_CmdId[LunaRiteHintPointRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8765;
     */
    LunaRiteHintPointRsp_CmdId[LunaRiteHintPointRsp_CmdId["CMD_ID"] = 8765] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointRsp_CmdId[LunaRiteHintPointRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointRsp_CmdId[LunaRiteHintPointRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointRsp_CmdId[LunaRiteHintPointRsp_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteHintPointRsp_CmdId = exports.LunaRiteHintPointRsp_CmdId || (exports.LunaRiteHintPointRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteHintPointRemoveNotify.CmdId
 */
var LunaRiteHintPointRemoveNotify_CmdId;
(function (LunaRiteHintPointRemoveNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointRemoveNotify_CmdId[LunaRiteHintPointRemoveNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8787;
     */
    LunaRiteHintPointRemoveNotify_CmdId[LunaRiteHintPointRemoveNotify_CmdId["CMD_ID"] = 8787] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteHintPointRemoveNotify_CmdId[LunaRiteHintPointRemoveNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointRemoveNotify_CmdId[LunaRiteHintPointRemoveNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteHintPointRemoveNotify_CmdId[LunaRiteHintPointRemoveNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteHintPointRemoveNotify_CmdId = exports.LunaRiteHintPointRemoveNotify_CmdId || (exports.LunaRiteHintPointRemoveNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteGroupBundleRegisterNotify.CmdId
 */
var LunaRiteGroupBundleRegisterNotify_CmdId;
(function (LunaRiteGroupBundleRegisterNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteGroupBundleRegisterNotify_CmdId[LunaRiteGroupBundleRegisterNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8465;
     */
    LunaRiteGroupBundleRegisterNotify_CmdId[LunaRiteGroupBundleRegisterNotify_CmdId["CMD_ID"] = 8465] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteGroupBundleRegisterNotify_CmdId[LunaRiteGroupBundleRegisterNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteGroupBundleRegisterNotify_CmdId[LunaRiteGroupBundleRegisterNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteGroupBundleRegisterNotify_CmdId[LunaRiteGroupBundleRegisterNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteGroupBundleRegisterNotify_CmdId = exports.LunaRiteGroupBundleRegisterNotify_CmdId || (exports.LunaRiteGroupBundleRegisterNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LunaRiteAreaFinishNotify.CmdId
 */
var LunaRiteAreaFinishNotify_CmdId;
(function (LunaRiteAreaFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteAreaFinishNotify_CmdId[LunaRiteAreaFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8213;
     */
    LunaRiteAreaFinishNotify_CmdId[LunaRiteAreaFinishNotify_CmdId["CMD_ID"] = 8213] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LunaRiteAreaFinishNotify_CmdId[LunaRiteAreaFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteAreaFinishNotify_CmdId[LunaRiteAreaFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LunaRiteAreaFinishNotify_CmdId[LunaRiteAreaFinishNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LunaRiteAreaFinishNotify_CmdId = exports.LunaRiteAreaFinishNotify_CmdId || (exports.LunaRiteAreaFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetSeedInfoReq.CmdId
 */
var PlantFlowerGetSeedInfoReq_CmdId;
(function (PlantFlowerGetSeedInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetSeedInfoReq_CmdId[PlantFlowerGetSeedInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8560;
     */
    PlantFlowerGetSeedInfoReq_CmdId[PlantFlowerGetSeedInfoReq_CmdId["CMD_ID"] = 8560] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetSeedInfoReq_CmdId[PlantFlowerGetSeedInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetSeedInfoReq_CmdId[PlantFlowerGetSeedInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetSeedInfoReq_CmdId[PlantFlowerGetSeedInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerGetSeedInfoReq_CmdId = exports.PlantFlowerGetSeedInfoReq_CmdId || (exports.PlantFlowerGetSeedInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetSeedInfoRsp.CmdId
 */
var PlantFlowerGetSeedInfoRsp_CmdId;
(function (PlantFlowerGetSeedInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetSeedInfoRsp_CmdId[PlantFlowerGetSeedInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8764;
     */
    PlantFlowerGetSeedInfoRsp_CmdId[PlantFlowerGetSeedInfoRsp_CmdId["CMD_ID"] = 8764] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetSeedInfoRsp_CmdId[PlantFlowerGetSeedInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetSeedInfoRsp_CmdId[PlantFlowerGetSeedInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerGetSeedInfoRsp_CmdId = exports.PlantFlowerGetSeedInfoRsp_CmdId || (exports.PlantFlowerGetSeedInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerTakeSeedRewardReq.CmdId
 */
var PlantFlowerTakeSeedRewardReq_CmdId;
(function (PlantFlowerTakeSeedRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerTakeSeedRewardReq_CmdId[PlantFlowerTakeSeedRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8968;
     */
    PlantFlowerTakeSeedRewardReq_CmdId[PlantFlowerTakeSeedRewardReq_CmdId["CMD_ID"] = 8968] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerTakeSeedRewardReq_CmdId[PlantFlowerTakeSeedRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerTakeSeedRewardReq_CmdId[PlantFlowerTakeSeedRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerTakeSeedRewardReq_CmdId[PlantFlowerTakeSeedRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerTakeSeedRewardReq_CmdId = exports.PlantFlowerTakeSeedRewardReq_CmdId || (exports.PlantFlowerTakeSeedRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerTakeSeedRewardRsp.CmdId
 */
var PlantFlowerTakeSeedRewardRsp_CmdId;
(function (PlantFlowerTakeSeedRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerTakeSeedRewardRsp_CmdId[PlantFlowerTakeSeedRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8860;
     */
    PlantFlowerTakeSeedRewardRsp_CmdId[PlantFlowerTakeSeedRewardRsp_CmdId["CMD_ID"] = 8860] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerTakeSeedRewardRsp_CmdId[PlantFlowerTakeSeedRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerTakeSeedRewardRsp_CmdId[PlantFlowerTakeSeedRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerTakeSeedRewardRsp_CmdId = exports.PlantFlowerTakeSeedRewardRsp_CmdId || (exports.PlantFlowerTakeSeedRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerSetFlowerWishReq.CmdId
 */
var PlantFlowerSetFlowerWishReq_CmdId;
(function (PlantFlowerSetFlowerWishReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerSetFlowerWishReq_CmdId[PlantFlowerSetFlowerWishReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8547;
     */
    PlantFlowerSetFlowerWishReq_CmdId[PlantFlowerSetFlowerWishReq_CmdId["CMD_ID"] = 8547] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerSetFlowerWishReq_CmdId[PlantFlowerSetFlowerWishReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerSetFlowerWishReq_CmdId[PlantFlowerSetFlowerWishReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerSetFlowerWishReq_CmdId[PlantFlowerSetFlowerWishReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerSetFlowerWishReq_CmdId = exports.PlantFlowerSetFlowerWishReq_CmdId || (exports.PlantFlowerSetFlowerWishReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerSetFlowerWishRsp.CmdId
 */
var PlantFlowerSetFlowerWishRsp_CmdId;
(function (PlantFlowerSetFlowerWishRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerSetFlowerWishRsp_CmdId[PlantFlowerSetFlowerWishRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8910;
     */
    PlantFlowerSetFlowerWishRsp_CmdId[PlantFlowerSetFlowerWishRsp_CmdId["CMD_ID"] = 8910] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerSetFlowerWishRsp_CmdId[PlantFlowerSetFlowerWishRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerSetFlowerWishRsp_CmdId[PlantFlowerSetFlowerWishRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerSetFlowerWishRsp_CmdId = exports.PlantFlowerSetFlowerWishRsp_CmdId || (exports.PlantFlowerSetFlowerWishRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetFriendFlowerWishListReq.CmdId
 */
var PlantFlowerGetFriendFlowerWishListReq_CmdId;
(function (PlantFlowerGetFriendFlowerWishListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetFriendFlowerWishListReq_CmdId[PlantFlowerGetFriendFlowerWishListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8126;
     */
    PlantFlowerGetFriendFlowerWishListReq_CmdId[PlantFlowerGetFriendFlowerWishListReq_CmdId["CMD_ID"] = 8126] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetFriendFlowerWishListReq_CmdId[PlantFlowerGetFriendFlowerWishListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetFriendFlowerWishListReq_CmdId[PlantFlowerGetFriendFlowerWishListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetFriendFlowerWishListReq_CmdId[PlantFlowerGetFriendFlowerWishListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerGetFriendFlowerWishListReq_CmdId = exports.PlantFlowerGetFriendFlowerWishListReq_CmdId || (exports.PlantFlowerGetFriendFlowerWishListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp.CmdId
 */
var PlantFlowerGetFriendFlowerWishListRsp_CmdId;
(function (PlantFlowerGetFriendFlowerWishListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetFriendFlowerWishListRsp_CmdId[PlantFlowerGetFriendFlowerWishListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8511;
     */
    PlantFlowerGetFriendFlowerWishListRsp_CmdId[PlantFlowerGetFriendFlowerWishListRsp_CmdId["CMD_ID"] = 8511] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetFriendFlowerWishListRsp_CmdId[PlantFlowerGetFriendFlowerWishListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetFriendFlowerWishListRsp_CmdId[PlantFlowerGetFriendFlowerWishListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerGetFriendFlowerWishListRsp_CmdId = exports.PlantFlowerGetFriendFlowerWishListRsp_CmdId || (exports.PlantFlowerGetFriendFlowerWishListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGiveFriendFlowerReq.CmdId
 */
var PlantFlowerGiveFriendFlowerReq_CmdId;
(function (PlantFlowerGiveFriendFlowerReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGiveFriendFlowerReq_CmdId[PlantFlowerGiveFriendFlowerReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8846;
     */
    PlantFlowerGiveFriendFlowerReq_CmdId[PlantFlowerGiveFriendFlowerReq_CmdId["CMD_ID"] = 8846] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGiveFriendFlowerReq_CmdId[PlantFlowerGiveFriendFlowerReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGiveFriendFlowerReq_CmdId[PlantFlowerGiveFriendFlowerReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGiveFriendFlowerReq_CmdId[PlantFlowerGiveFriendFlowerReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerGiveFriendFlowerReq_CmdId = exports.PlantFlowerGiveFriendFlowerReq_CmdId || (exports.PlantFlowerGiveFriendFlowerReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGiveFriendFlowerRsp.CmdId
 */
var PlantFlowerGiveFriendFlowerRsp_CmdId;
(function (PlantFlowerGiveFriendFlowerRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGiveFriendFlowerRsp_CmdId[PlantFlowerGiveFriendFlowerRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8386;
     */
    PlantFlowerGiveFriendFlowerRsp_CmdId[PlantFlowerGiveFriendFlowerRsp_CmdId["CMD_ID"] = 8386] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGiveFriendFlowerRsp_CmdId[PlantFlowerGiveFriendFlowerRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGiveFriendFlowerRsp_CmdId[PlantFlowerGiveFriendFlowerRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerGiveFriendFlowerRsp_CmdId = exports.PlantFlowerGiveFriendFlowerRsp_CmdId || (exports.PlantFlowerGiveFriendFlowerRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetRecvFlowerListReq.CmdId
 */
var PlantFlowerGetRecvFlowerListReq_CmdId;
(function (PlantFlowerGetRecvFlowerListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetRecvFlowerListReq_CmdId[PlantFlowerGetRecvFlowerListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8270;
     */
    PlantFlowerGetRecvFlowerListReq_CmdId[PlantFlowerGetRecvFlowerListReq_CmdId["CMD_ID"] = 8270] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetRecvFlowerListReq_CmdId[PlantFlowerGetRecvFlowerListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetRecvFlowerListReq_CmdId[PlantFlowerGetRecvFlowerListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetRecvFlowerListReq_CmdId[PlantFlowerGetRecvFlowerListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerGetRecvFlowerListReq_CmdId = exports.PlantFlowerGetRecvFlowerListReq_CmdId || (exports.PlantFlowerGetRecvFlowerListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetRecvFlowerListRsp.CmdId
 */
var PlantFlowerGetRecvFlowerListRsp_CmdId;
(function (PlantFlowerGetRecvFlowerListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetRecvFlowerListRsp_CmdId[PlantFlowerGetRecvFlowerListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8374;
     */
    PlantFlowerGetRecvFlowerListRsp_CmdId[PlantFlowerGetRecvFlowerListRsp_CmdId["CMD_ID"] = 8374] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetRecvFlowerListRsp_CmdId[PlantFlowerGetRecvFlowerListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetRecvFlowerListRsp_CmdId[PlantFlowerGetRecvFlowerListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerGetRecvFlowerListRsp_CmdId = exports.PlantFlowerGetRecvFlowerListRsp_CmdId || (exports.PlantFlowerGetRecvFlowerListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerHaveRecvFlowerNotify.CmdId
 */
var PlantFlowerHaveRecvFlowerNotify_CmdId;
(function (PlantFlowerHaveRecvFlowerNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerHaveRecvFlowerNotify_CmdId[PlantFlowerHaveRecvFlowerNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8078;
     */
    PlantFlowerHaveRecvFlowerNotify_CmdId[PlantFlowerHaveRecvFlowerNotify_CmdId["CMD_ID"] = 8078] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerHaveRecvFlowerNotify_CmdId[PlantFlowerHaveRecvFlowerNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerHaveRecvFlowerNotify_CmdId[PlantFlowerHaveRecvFlowerNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerHaveRecvFlowerNotify_CmdId = exports.PlantFlowerHaveRecvFlowerNotify_CmdId || (exports.PlantFlowerHaveRecvFlowerNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptGiveFlowerReq.CmdId
 */
var PlantFlowerAcceptGiveFlowerReq_CmdId;
(function (PlantFlowerAcceptGiveFlowerReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptGiveFlowerReq_CmdId[PlantFlowerAcceptGiveFlowerReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8383;
     */
    PlantFlowerAcceptGiveFlowerReq_CmdId[PlantFlowerAcceptGiveFlowerReq_CmdId["CMD_ID"] = 8383] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptGiveFlowerReq_CmdId[PlantFlowerAcceptGiveFlowerReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptGiveFlowerReq_CmdId[PlantFlowerAcceptGiveFlowerReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptGiveFlowerReq_CmdId[PlantFlowerAcceptGiveFlowerReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerAcceptGiveFlowerReq_CmdId = exports.PlantFlowerAcceptGiveFlowerReq_CmdId || (exports.PlantFlowerAcceptGiveFlowerReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptGiveFlowerRsp.CmdId
 */
var PlantFlowerAcceptGiveFlowerRsp_CmdId;
(function (PlantFlowerAcceptGiveFlowerRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptGiveFlowerRsp_CmdId[PlantFlowerAcceptGiveFlowerRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8567;
     */
    PlantFlowerAcceptGiveFlowerRsp_CmdId[PlantFlowerAcceptGiveFlowerRsp_CmdId["CMD_ID"] = 8567] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptGiveFlowerRsp_CmdId[PlantFlowerAcceptGiveFlowerRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptGiveFlowerRsp_CmdId[PlantFlowerAcceptGiveFlowerRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerAcceptGiveFlowerRsp_CmdId = exports.PlantFlowerAcceptGiveFlowerRsp_CmdId || (exports.PlantFlowerAcceptGiveFlowerRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq.CmdId
 */
var PlantFlowerAcceptAllGiveFlowerReq_CmdId;
(function (PlantFlowerAcceptAllGiveFlowerReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptAllGiveFlowerReq_CmdId[PlantFlowerAcceptAllGiveFlowerReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8808;
     */
    PlantFlowerAcceptAllGiveFlowerReq_CmdId[PlantFlowerAcceptAllGiveFlowerReq_CmdId["CMD_ID"] = 8808] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptAllGiveFlowerReq_CmdId[PlantFlowerAcceptAllGiveFlowerReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptAllGiveFlowerReq_CmdId[PlantFlowerAcceptAllGiveFlowerReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptAllGiveFlowerReq_CmdId[PlantFlowerAcceptAllGiveFlowerReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerAcceptAllGiveFlowerReq_CmdId = exports.PlantFlowerAcceptAllGiveFlowerReq_CmdId || (exports.PlantFlowerAcceptAllGiveFlowerReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp.CmdId
 */
var PlantFlowerAcceptAllGiveFlowerRsp_CmdId;
(function (PlantFlowerAcceptAllGiveFlowerRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptAllGiveFlowerRsp_CmdId[PlantFlowerAcceptAllGiveFlowerRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8888;
     */
    PlantFlowerAcceptAllGiveFlowerRsp_CmdId[PlantFlowerAcceptAllGiveFlowerRsp_CmdId["CMD_ID"] = 8888] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerAcceptAllGiveFlowerRsp_CmdId[PlantFlowerAcceptAllGiveFlowerRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerAcceptAllGiveFlowerRsp_CmdId[PlantFlowerAcceptAllGiveFlowerRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerAcceptAllGiveFlowerRsp_CmdId = exports.PlantFlowerAcceptAllGiveFlowerRsp_CmdId || (exports.PlantFlowerAcceptAllGiveFlowerRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq.CmdId
 */
var PlantFlowerGetCanGiveFriendFlowerReq_CmdId;
(function (PlantFlowerGetCanGiveFriendFlowerReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetCanGiveFriendFlowerReq_CmdId[PlantFlowerGetCanGiveFriendFlowerReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8716;
     */
    PlantFlowerGetCanGiveFriendFlowerReq_CmdId[PlantFlowerGetCanGiveFriendFlowerReq_CmdId["CMD_ID"] = 8716] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetCanGiveFriendFlowerReq_CmdId[PlantFlowerGetCanGiveFriendFlowerReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetCanGiveFriendFlowerReq_CmdId[PlantFlowerGetCanGiveFriendFlowerReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetCanGiveFriendFlowerReq_CmdId[PlantFlowerGetCanGiveFriendFlowerReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerGetCanGiveFriendFlowerReq_CmdId = exports.PlantFlowerGetCanGiveFriendFlowerReq_CmdId || (exports.PlantFlowerGetCanGiveFriendFlowerReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp.CmdId
 */
var PlantFlowerGetCanGiveFriendFlowerRsp_CmdId;
(function (PlantFlowerGetCanGiveFriendFlowerRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetCanGiveFriendFlowerRsp_CmdId[PlantFlowerGetCanGiveFriendFlowerRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8766;
     */
    PlantFlowerGetCanGiveFriendFlowerRsp_CmdId[PlantFlowerGetCanGiveFriendFlowerRsp_CmdId["CMD_ID"] = 8766] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerGetCanGiveFriendFlowerRsp_CmdId[PlantFlowerGetCanGiveFriendFlowerRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerGetCanGiveFriendFlowerRsp_CmdId[PlantFlowerGetCanGiveFriendFlowerRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerGetCanGiveFriendFlowerRsp_CmdId = exports.PlantFlowerGetCanGiveFriendFlowerRsp_CmdId || (exports.PlantFlowerGetCanGiveFriendFlowerRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerEditFlowerCombinationReq.CmdId
 */
var PlantFlowerEditFlowerCombinationReq_CmdId;
(function (PlantFlowerEditFlowerCombinationReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerEditFlowerCombinationReq_CmdId[PlantFlowerEditFlowerCombinationReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8843;
     */
    PlantFlowerEditFlowerCombinationReq_CmdId[PlantFlowerEditFlowerCombinationReq_CmdId["CMD_ID"] = 8843] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerEditFlowerCombinationReq_CmdId[PlantFlowerEditFlowerCombinationReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerEditFlowerCombinationReq_CmdId[PlantFlowerEditFlowerCombinationReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerEditFlowerCombinationReq_CmdId[PlantFlowerEditFlowerCombinationReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PlantFlowerEditFlowerCombinationReq_CmdId = exports.PlantFlowerEditFlowerCombinationReq_CmdId || (exports.PlantFlowerEditFlowerCombinationReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PlantFlowerEditFlowerCombinationRsp.CmdId
 */
var PlantFlowerEditFlowerCombinationRsp_CmdId;
(function (PlantFlowerEditFlowerCombinationRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerEditFlowerCombinationRsp_CmdId[PlantFlowerEditFlowerCombinationRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8788;
     */
    PlantFlowerEditFlowerCombinationRsp_CmdId[PlantFlowerEditFlowerCombinationRsp_CmdId["CMD_ID"] = 8788] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PlantFlowerEditFlowerCombinationRsp_CmdId[PlantFlowerEditFlowerCombinationRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PlantFlowerEditFlowerCombinationRsp_CmdId[PlantFlowerEditFlowerCombinationRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PlantFlowerEditFlowerCombinationRsp_CmdId = exports.PlantFlowerEditFlowerCombinationRsp_CmdId || (exports.PlantFlowerEditFlowerCombinationRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MusicGameSettleReq.CmdId
 */
var MusicGameSettleReq_CmdId;
(function (MusicGameSettleReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameSettleReq_CmdId[MusicGameSettleReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8892;
     */
    MusicGameSettleReq_CmdId[MusicGameSettleReq_CmdId["CMD_ID"] = 8892] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameSettleReq_CmdId[MusicGameSettleReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameSettleReq_CmdId[MusicGameSettleReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameSettleReq_CmdId[MusicGameSettleReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MusicGameSettleReq_CmdId = exports.MusicGameSettleReq_CmdId || (exports.MusicGameSettleReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MusicGameSettleRsp.CmdId
 */
var MusicGameSettleRsp_CmdId;
(function (MusicGameSettleRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameSettleRsp_CmdId[MusicGameSettleRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8673;
     */
    MusicGameSettleRsp_CmdId[MusicGameSettleRsp_CmdId["CMD_ID"] = 8673] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameSettleRsp_CmdId[MusicGameSettleRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameSettleRsp_CmdId[MusicGameSettleRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MusicGameSettleRsp_CmdId = exports.MusicGameSettleRsp_CmdId || (exports.MusicGameSettleRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MusicGameStartReq.CmdId
 */
var MusicGameStartReq_CmdId;
(function (MusicGameStartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameStartReq_CmdId[MusicGameStartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8406;
     */
    MusicGameStartReq_CmdId[MusicGameStartReq_CmdId["CMD_ID"] = 8406] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameStartReq_CmdId[MusicGameStartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameStartReq_CmdId[MusicGameStartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameStartReq_CmdId[MusicGameStartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MusicGameStartReq_CmdId = exports.MusicGameStartReq_CmdId || (exports.MusicGameStartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MusicGameStartRsp.CmdId
 */
var MusicGameStartRsp_CmdId;
(function (MusicGameStartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameStartRsp_CmdId[MusicGameStartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8326;
     */
    MusicGameStartRsp_CmdId[MusicGameStartRsp_CmdId["CMD_ID"] = 8326] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MusicGameStartRsp_CmdId[MusicGameStartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MusicGameStartRsp_CmdId[MusicGameStartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MusicGameStartRsp_CmdId = exports.MusicGameStartRsp_CmdId || (exports.MusicGameStartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DoRoguelikeDungeonCardGachaReq.CmdId
 */
var DoRoguelikeDungeonCardGachaReq_CmdId;
(function (DoRoguelikeDungeonCardGachaReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoRoguelikeDungeonCardGachaReq_CmdId[DoRoguelikeDungeonCardGachaReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8148;
     */
    DoRoguelikeDungeonCardGachaReq_CmdId[DoRoguelikeDungeonCardGachaReq_CmdId["CMD_ID"] = 8148] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoRoguelikeDungeonCardGachaReq_CmdId[DoRoguelikeDungeonCardGachaReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoRoguelikeDungeonCardGachaReq_CmdId[DoRoguelikeDungeonCardGachaReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoRoguelikeDungeonCardGachaReq_CmdId[DoRoguelikeDungeonCardGachaReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(DoRoguelikeDungeonCardGachaReq_CmdId = exports.DoRoguelikeDungeonCardGachaReq_CmdId || (exports.DoRoguelikeDungeonCardGachaReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DoRoguelikeDungeonCardGachaRsp.CmdId
 */
var DoRoguelikeDungeonCardGachaRsp_CmdId;
(function (DoRoguelikeDungeonCardGachaRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoRoguelikeDungeonCardGachaRsp_CmdId[DoRoguelikeDungeonCardGachaRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8472;
     */
    DoRoguelikeDungeonCardGachaRsp_CmdId[DoRoguelikeDungeonCardGachaRsp_CmdId["CMD_ID"] = 8472] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DoRoguelikeDungeonCardGachaRsp_CmdId[DoRoguelikeDungeonCardGachaRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DoRoguelikeDungeonCardGachaRsp_CmdId[DoRoguelikeDungeonCardGachaRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DoRoguelikeDungeonCardGachaRsp_CmdId = exports.DoRoguelikeDungeonCardGachaRsp_CmdId || (exports.DoRoguelikeDungeonCardGachaRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RefreshRoguelikeDungeonCardReq.CmdId
 */
var RefreshRoguelikeDungeonCardReq_CmdId;
(function (RefreshRoguelikeDungeonCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRoguelikeDungeonCardReq_CmdId[RefreshRoguelikeDungeonCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8279;
     */
    RefreshRoguelikeDungeonCardReq_CmdId[RefreshRoguelikeDungeonCardReq_CmdId["CMD_ID"] = 8279] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRoguelikeDungeonCardReq_CmdId[RefreshRoguelikeDungeonCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRoguelikeDungeonCardReq_CmdId[RefreshRoguelikeDungeonCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRoguelikeDungeonCardReq_CmdId[RefreshRoguelikeDungeonCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RefreshRoguelikeDungeonCardReq_CmdId = exports.RefreshRoguelikeDungeonCardReq_CmdId || (exports.RefreshRoguelikeDungeonCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RefreshRoguelikeDungeonCardRsp.CmdId
 */
var RefreshRoguelikeDungeonCardRsp_CmdId;
(function (RefreshRoguelikeDungeonCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRoguelikeDungeonCardRsp_CmdId[RefreshRoguelikeDungeonCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8349;
     */
    RefreshRoguelikeDungeonCardRsp_CmdId[RefreshRoguelikeDungeonCardRsp_CmdId["CMD_ID"] = 8349] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRoguelikeDungeonCardRsp_CmdId[RefreshRoguelikeDungeonCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRoguelikeDungeonCardRsp_CmdId[RefreshRoguelikeDungeonCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RefreshRoguelikeDungeonCardRsp_CmdId = exports.RefreshRoguelikeDungeonCardRsp_CmdId || (exports.RefreshRoguelikeDungeonCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectRoguelikeDungeonCardReq.CmdId
 */
var SelectRoguelikeDungeonCardReq_CmdId;
(function (SelectRoguelikeDungeonCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectRoguelikeDungeonCardReq_CmdId[SelectRoguelikeDungeonCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8085;
     */
    SelectRoguelikeDungeonCardReq_CmdId[SelectRoguelikeDungeonCardReq_CmdId["CMD_ID"] = 8085] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectRoguelikeDungeonCardReq_CmdId[SelectRoguelikeDungeonCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectRoguelikeDungeonCardReq_CmdId[SelectRoguelikeDungeonCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectRoguelikeDungeonCardReq_CmdId[SelectRoguelikeDungeonCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SelectRoguelikeDungeonCardReq_CmdId = exports.SelectRoguelikeDungeonCardReq_CmdId || (exports.SelectRoguelikeDungeonCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SelectRoguelikeDungeonCardRsp.CmdId
 */
var SelectRoguelikeDungeonCardRsp_CmdId;
(function (SelectRoguelikeDungeonCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectRoguelikeDungeonCardRsp_CmdId[SelectRoguelikeDungeonCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8138;
     */
    SelectRoguelikeDungeonCardRsp_CmdId[SelectRoguelikeDungeonCardRsp_CmdId["CMD_ID"] = 8138] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SelectRoguelikeDungeonCardRsp_CmdId[SelectRoguelikeDungeonCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SelectRoguelikeDungeonCardRsp_CmdId[SelectRoguelikeDungeonCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SelectRoguelikeDungeonCardRsp_CmdId = exports.SelectRoguelikeDungeonCardRsp_CmdId || (exports.SelectRoguelikeDungeonCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EquipRoguelikeRuneReq.CmdId
 */
var EquipRoguelikeRuneReq_CmdId;
(function (EquipRoguelikeRuneReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EquipRoguelikeRuneReq_CmdId[EquipRoguelikeRuneReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8306;
     */
    EquipRoguelikeRuneReq_CmdId[EquipRoguelikeRuneReq_CmdId["CMD_ID"] = 8306] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EquipRoguelikeRuneReq_CmdId[EquipRoguelikeRuneReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EquipRoguelikeRuneReq_CmdId[EquipRoguelikeRuneReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EquipRoguelikeRuneReq_CmdId[EquipRoguelikeRuneReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EquipRoguelikeRuneReq_CmdId = exports.EquipRoguelikeRuneReq_CmdId || (exports.EquipRoguelikeRuneReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EquipRoguelikeRuneRsp.CmdId
 */
var EquipRoguelikeRuneRsp_CmdId;
(function (EquipRoguelikeRuneRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EquipRoguelikeRuneRsp_CmdId[EquipRoguelikeRuneRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8705;
     */
    EquipRoguelikeRuneRsp_CmdId[EquipRoguelikeRuneRsp_CmdId["CMD_ID"] = 8705] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EquipRoguelikeRuneRsp_CmdId[EquipRoguelikeRuneRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EquipRoguelikeRuneRsp_CmdId[EquipRoguelikeRuneRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EquipRoguelikeRuneRsp_CmdId = exports.EquipRoguelikeRuneRsp_CmdId || (exports.EquipRoguelikeRuneRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeRuneReq.CmdId
 */
var TriggerRoguelikeRuneReq_CmdId;
(function (TriggerRoguelikeRuneReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeRuneReq_CmdId[TriggerRoguelikeRuneReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8463;
     */
    TriggerRoguelikeRuneReq_CmdId[TriggerRoguelikeRuneReq_CmdId["CMD_ID"] = 8463] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeRuneReq_CmdId[TriggerRoguelikeRuneReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TriggerRoguelikeRuneReq_CmdId[TriggerRoguelikeRuneReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TriggerRoguelikeRuneReq_CmdId[TriggerRoguelikeRuneReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TriggerRoguelikeRuneReq_CmdId = exports.TriggerRoguelikeRuneReq_CmdId || (exports.TriggerRoguelikeRuneReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeRuneRsp.CmdId
 */
var TriggerRoguelikeRuneRsp_CmdId;
(function (TriggerRoguelikeRuneRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeRuneRsp_CmdId[TriggerRoguelikeRuneRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8065;
     */
    TriggerRoguelikeRuneRsp_CmdId[TriggerRoguelikeRuneRsp_CmdId["CMD_ID"] = 8065] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeRuneRsp_CmdId[TriggerRoguelikeRuneRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TriggerRoguelikeRuneRsp_CmdId[TriggerRoguelikeRuneRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TriggerRoguelikeRuneRsp_CmdId = exports.TriggerRoguelikeRuneRsp_CmdId || (exports.TriggerRoguelikeRuneRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TriggerRoguelikeCurseNotify.CmdId
 */
var TriggerRoguelikeCurseNotify_CmdId;
(function (TriggerRoguelikeCurseNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeCurseNotify_CmdId[TriggerRoguelikeCurseNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8412;
     */
    TriggerRoguelikeCurseNotify_CmdId[TriggerRoguelikeCurseNotify_CmdId["CMD_ID"] = 8412] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TriggerRoguelikeCurseNotify_CmdId[TriggerRoguelikeCurseNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TriggerRoguelikeCurseNotify_CmdId[TriggerRoguelikeCurseNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TriggerRoguelikeCurseNotify_CmdId = exports.TriggerRoguelikeCurseNotify_CmdId || (exports.TriggerRoguelikeCurseNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.UpgradeRoguelikeShikigamiReq.CmdId
 */
var UpgradeRoguelikeShikigamiReq_CmdId;
(function (UpgradeRoguelikeShikigamiReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpgradeRoguelikeShikigamiReq_CmdId[UpgradeRoguelikeShikigamiReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8151;
     */
    UpgradeRoguelikeShikigamiReq_CmdId[UpgradeRoguelikeShikigamiReq_CmdId["CMD_ID"] = 8151] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpgradeRoguelikeShikigamiReq_CmdId[UpgradeRoguelikeShikigamiReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpgradeRoguelikeShikigamiReq_CmdId[UpgradeRoguelikeShikigamiReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpgradeRoguelikeShikigamiReq_CmdId[UpgradeRoguelikeShikigamiReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(UpgradeRoguelikeShikigamiReq_CmdId = exports.UpgradeRoguelikeShikigamiReq_CmdId || (exports.UpgradeRoguelikeShikigamiReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.UpgradeRoguelikeShikigamiRsp.CmdId
 */
var UpgradeRoguelikeShikigamiRsp_CmdId;
(function (UpgradeRoguelikeShikigamiRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpgradeRoguelikeShikigamiRsp_CmdId[UpgradeRoguelikeShikigamiRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8966;
     */
    UpgradeRoguelikeShikigamiRsp_CmdId[UpgradeRoguelikeShikigamiRsp_CmdId["CMD_ID"] = 8966] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpgradeRoguelikeShikigamiRsp_CmdId[UpgradeRoguelikeShikigamiRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpgradeRoguelikeShikigamiRsp_CmdId[UpgradeRoguelikeShikigamiRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(UpgradeRoguelikeShikigamiRsp_CmdId = exports.UpgradeRoguelikeShikigamiRsp_CmdId || (exports.UpgradeRoguelikeShikigamiRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq.CmdId
 */
var RoguelikeSelectAvatarAndEnterDungeonReq_CmdId;
(function (RoguelikeSelectAvatarAndEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeSelectAvatarAndEnterDungeonReq_CmdId[RoguelikeSelectAvatarAndEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8457;
     */
    RoguelikeSelectAvatarAndEnterDungeonReq_CmdId[RoguelikeSelectAvatarAndEnterDungeonReq_CmdId["CMD_ID"] = 8457] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeSelectAvatarAndEnterDungeonReq_CmdId[RoguelikeSelectAvatarAndEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeSelectAvatarAndEnterDungeonReq_CmdId[RoguelikeSelectAvatarAndEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeSelectAvatarAndEnterDungeonReq_CmdId[RoguelikeSelectAvatarAndEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RoguelikeSelectAvatarAndEnterDungeonReq_CmdId = exports.RoguelikeSelectAvatarAndEnterDungeonReq_CmdId || (exports.RoguelikeSelectAvatarAndEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp.CmdId
 */
var RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId;
(function (RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId[RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8538;
     */
    RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId[RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId["CMD_ID"] = 8538] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId[RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId[RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId = exports.RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId || (exports.RoguelikeSelectAvatarAndEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeGiveUpReq.CmdId
 */
var RoguelikeGiveUpReq_CmdId;
(function (RoguelikeGiveUpReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeGiveUpReq_CmdId[RoguelikeGiveUpReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8660;
     */
    RoguelikeGiveUpReq_CmdId[RoguelikeGiveUpReq_CmdId["CMD_ID"] = 8660] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeGiveUpReq_CmdId[RoguelikeGiveUpReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeGiveUpReq_CmdId[RoguelikeGiveUpReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeGiveUpReq_CmdId[RoguelikeGiveUpReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RoguelikeGiveUpReq_CmdId = exports.RoguelikeGiveUpReq_CmdId || (exports.RoguelikeGiveUpReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeGiveUpRsp.CmdId
 */
var RoguelikeGiveUpRsp_CmdId;
(function (RoguelikeGiveUpRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeGiveUpRsp_CmdId[RoguelikeGiveUpRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8139;
     */
    RoguelikeGiveUpRsp_CmdId[RoguelikeGiveUpRsp_CmdId["CMD_ID"] = 8139] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeGiveUpRsp_CmdId[RoguelikeGiveUpRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeGiveUpRsp_CmdId[RoguelikeGiveUpRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeGiveUpRsp_CmdId = exports.RoguelikeGiveUpRsp_CmdId || (exports.RoguelikeGiveUpRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeTakeStageFirstPassRewardReq.CmdId
 */
var RoguelikeTakeStageFirstPassRewardReq_CmdId;
(function (RoguelikeTakeStageFirstPassRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeTakeStageFirstPassRewardReq_CmdId[RoguelikeTakeStageFirstPassRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8421;
     */
    RoguelikeTakeStageFirstPassRewardReq_CmdId[RoguelikeTakeStageFirstPassRewardReq_CmdId["CMD_ID"] = 8421] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeTakeStageFirstPassRewardReq_CmdId[RoguelikeTakeStageFirstPassRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeTakeStageFirstPassRewardReq_CmdId[RoguelikeTakeStageFirstPassRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeTakeStageFirstPassRewardReq_CmdId[RoguelikeTakeStageFirstPassRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RoguelikeTakeStageFirstPassRewardReq_CmdId = exports.RoguelikeTakeStageFirstPassRewardReq_CmdId || (exports.RoguelikeTakeStageFirstPassRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp.CmdId
 */
var RoguelikeTakeStageFirstPassRewardRsp_CmdId;
(function (RoguelikeTakeStageFirstPassRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeTakeStageFirstPassRewardRsp_CmdId[RoguelikeTakeStageFirstPassRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8552;
     */
    RoguelikeTakeStageFirstPassRewardRsp_CmdId[RoguelikeTakeStageFirstPassRewardRsp_CmdId["CMD_ID"] = 8552] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeTakeStageFirstPassRewardRsp_CmdId[RoguelikeTakeStageFirstPassRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeTakeStageFirstPassRewardRsp_CmdId[RoguelikeTakeStageFirstPassRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeTakeStageFirstPassRewardRsp_CmdId = exports.RoguelikeTakeStageFirstPassRewardRsp_CmdId || (exports.RoguelikeTakeStageFirstPassRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GiveUpRoguelikeDungeonCardReq.CmdId
 */
var GiveUpRoguelikeDungeonCardReq_CmdId;
(function (GiveUpRoguelikeDungeonCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GiveUpRoguelikeDungeonCardReq_CmdId[GiveUpRoguelikeDungeonCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8353;
     */
    GiveUpRoguelikeDungeonCardReq_CmdId[GiveUpRoguelikeDungeonCardReq_CmdId["CMD_ID"] = 8353] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GiveUpRoguelikeDungeonCardReq_CmdId[GiveUpRoguelikeDungeonCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GiveUpRoguelikeDungeonCardReq_CmdId[GiveUpRoguelikeDungeonCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GiveUpRoguelikeDungeonCardReq_CmdId[GiveUpRoguelikeDungeonCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GiveUpRoguelikeDungeonCardReq_CmdId = exports.GiveUpRoguelikeDungeonCardReq_CmdId || (exports.GiveUpRoguelikeDungeonCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GiveUpRoguelikeDungeonCardRsp.CmdId
 */
var GiveUpRoguelikeDungeonCardRsp_CmdId;
(function (GiveUpRoguelikeDungeonCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GiveUpRoguelikeDungeonCardRsp_CmdId[GiveUpRoguelikeDungeonCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8497;
     */
    GiveUpRoguelikeDungeonCardRsp_CmdId[GiveUpRoguelikeDungeonCardRsp_CmdId["CMD_ID"] = 8497] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GiveUpRoguelikeDungeonCardRsp_CmdId[GiveUpRoguelikeDungeonCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GiveUpRoguelikeDungeonCardRsp_CmdId[GiveUpRoguelikeDungeonCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GiveUpRoguelikeDungeonCardRsp_CmdId = exports.GiveUpRoguelikeDungeonCardRsp_CmdId || (exports.GiveUpRoguelikeDungeonCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterRoguelikeDungeonNotify.CmdId
 */
var EnterRoguelikeDungeonNotify_CmdId;
(function (EnterRoguelikeDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRoguelikeDungeonNotify_CmdId[EnterRoguelikeDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8652;
     */
    EnterRoguelikeDungeonNotify_CmdId[EnterRoguelikeDungeonNotify_CmdId["CMD_ID"] = 8652] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRoguelikeDungeonNotify_CmdId[EnterRoguelikeDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterRoguelikeDungeonNotify_CmdId[EnterRoguelikeDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterRoguelikeDungeonNotify_CmdId = exports.EnterRoguelikeDungeonNotify_CmdId || (exports.EnterRoguelikeDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueEliteCellChallengeReq.CmdId
 */
var StartRogueEliteCellChallengeReq_CmdId;
(function (StartRogueEliteCellChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueEliteCellChallengeReq_CmdId[StartRogueEliteCellChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8242;
     */
    StartRogueEliteCellChallengeReq_CmdId[StartRogueEliteCellChallengeReq_CmdId["CMD_ID"] = 8242] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueEliteCellChallengeReq_CmdId[StartRogueEliteCellChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueEliteCellChallengeReq_CmdId[StartRogueEliteCellChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueEliteCellChallengeReq_CmdId[StartRogueEliteCellChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartRogueEliteCellChallengeReq_CmdId = exports.StartRogueEliteCellChallengeReq_CmdId || (exports.StartRogueEliteCellChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueEliteCellChallengeRsp.CmdId
 */
var StartRogueEliteCellChallengeRsp_CmdId;
(function (StartRogueEliteCellChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueEliteCellChallengeRsp_CmdId[StartRogueEliteCellChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8958;
     */
    StartRogueEliteCellChallengeRsp_CmdId[StartRogueEliteCellChallengeRsp_CmdId["CMD_ID"] = 8958] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueEliteCellChallengeRsp_CmdId[StartRogueEliteCellChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueEliteCellChallengeRsp_CmdId[StartRogueEliteCellChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartRogueEliteCellChallengeRsp_CmdId = exports.StartRogueEliteCellChallengeRsp_CmdId || (exports.StartRogueEliteCellChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueNormalCellChallengeReq.CmdId
 */
var StartRogueNormalCellChallengeReq_CmdId;
(function (StartRogueNormalCellChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueNormalCellChallengeReq_CmdId[StartRogueNormalCellChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8205;
     */
    StartRogueNormalCellChallengeReq_CmdId[StartRogueNormalCellChallengeReq_CmdId["CMD_ID"] = 8205] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueNormalCellChallengeReq_CmdId[StartRogueNormalCellChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueNormalCellChallengeReq_CmdId[StartRogueNormalCellChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueNormalCellChallengeReq_CmdId[StartRogueNormalCellChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartRogueNormalCellChallengeReq_CmdId = exports.StartRogueNormalCellChallengeReq_CmdId || (exports.StartRogueNormalCellChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueNormalCellChallengeRsp.CmdId
 */
var StartRogueNormalCellChallengeRsp_CmdId;
(function (StartRogueNormalCellChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueNormalCellChallengeRsp_CmdId[StartRogueNormalCellChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8036;
     */
    StartRogueNormalCellChallengeRsp_CmdId[StartRogueNormalCellChallengeRsp_CmdId["CMD_ID"] = 8036] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueNormalCellChallengeRsp_CmdId[StartRogueNormalCellChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueNormalCellChallengeRsp_CmdId[StartRogueNormalCellChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartRogueNormalCellChallengeRsp_CmdId = exports.StartRogueNormalCellChallengeRsp_CmdId || (exports.StartRogueNormalCellChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueCellUpdateNotify.CmdId
 */
var RogueCellUpdateNotify_CmdId;
(function (RogueCellUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueCellUpdateNotify_CmdId[RogueCellUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8642;
     */
    RogueCellUpdateNotify_CmdId[RogueCellUpdateNotify_CmdId["CMD_ID"] = 8642] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueCellUpdateNotify_CmdId[RogueCellUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueCellUpdateNotify_CmdId[RogueCellUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueCellUpdateNotify_CmdId = exports.RogueCellUpdateNotify_CmdId || (exports.RogueCellUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDungeonPlayerCellChangeNotify.CmdId
 */
var RogueDungeonPlayerCellChangeNotify_CmdId;
(function (RogueDungeonPlayerCellChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDungeonPlayerCellChangeNotify_CmdId[RogueDungeonPlayerCellChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8347;
     */
    RogueDungeonPlayerCellChangeNotify_CmdId[RogueDungeonPlayerCellChangeNotify_CmdId["CMD_ID"] = 8347] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDungeonPlayerCellChangeNotify_CmdId[RogueDungeonPlayerCellChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDungeonPlayerCellChangeNotify_CmdId[RogueDungeonPlayerCellChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueDungeonPlayerCellChangeNotify_CmdId = exports.RogueDungeonPlayerCellChangeNotify_CmdId || (exports.RogueDungeonPlayerCellChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueHealAvatarsReq.CmdId
 */
var RogueHealAvatarsReq_CmdId;
(function (RogueHealAvatarsReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueHealAvatarsReq_CmdId[RogueHealAvatarsReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8947;
     */
    RogueHealAvatarsReq_CmdId[RogueHealAvatarsReq_CmdId["CMD_ID"] = 8947] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueHealAvatarsReq_CmdId[RogueHealAvatarsReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueHealAvatarsReq_CmdId[RogueHealAvatarsReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueHealAvatarsReq_CmdId[RogueHealAvatarsReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueHealAvatarsReq_CmdId = exports.RogueHealAvatarsReq_CmdId || (exports.RogueHealAvatarsReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueHealAvatarsRsp.CmdId
 */
var RogueHealAvatarsRsp_CmdId;
(function (RogueHealAvatarsRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueHealAvatarsRsp_CmdId[RogueHealAvatarsRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8949;
     */
    RogueHealAvatarsRsp_CmdId[RogueHealAvatarsRsp_CmdId["CMD_ID"] = 8949] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueHealAvatarsRsp_CmdId[RogueHealAvatarsRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueHealAvatarsRsp_CmdId[RogueHealAvatarsRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueHealAvatarsRsp_CmdId = exports.RogueHealAvatarsRsp_CmdId || (exports.RogueHealAvatarsRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueResumeDungeonReq.CmdId
 */
var RogueResumeDungeonReq_CmdId;
(function (RogueResumeDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueResumeDungeonReq_CmdId[RogueResumeDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8795;
     */
    RogueResumeDungeonReq_CmdId[RogueResumeDungeonReq_CmdId["CMD_ID"] = 8795] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueResumeDungeonReq_CmdId[RogueResumeDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueResumeDungeonReq_CmdId[RogueResumeDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueResumeDungeonReq_CmdId[RogueResumeDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueResumeDungeonReq_CmdId = exports.RogueResumeDungeonReq_CmdId || (exports.RogueResumeDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueResumeDungeonRsp.CmdId
 */
var RogueResumeDungeonRsp_CmdId;
(function (RogueResumeDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueResumeDungeonRsp_CmdId[RogueResumeDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8647;
     */
    RogueResumeDungeonRsp_CmdId[RogueResumeDungeonRsp_CmdId["CMD_ID"] = 8647] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueResumeDungeonRsp_CmdId[RogueResumeDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueResumeDungeonRsp_CmdId[RogueResumeDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueResumeDungeonRsp_CmdId = exports.RogueResumeDungeonRsp_CmdId || (exports.RogueResumeDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ClearRoguelikeCurseNotify.CmdId
 */
var ClearRoguelikeCurseNotify_CmdId;
(function (ClearRoguelikeCurseNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ClearRoguelikeCurseNotify_CmdId[ClearRoguelikeCurseNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8207;
     */
    ClearRoguelikeCurseNotify_CmdId[ClearRoguelikeCurseNotify_CmdId["CMD_ID"] = 8207] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ClearRoguelikeCurseNotify_CmdId[ClearRoguelikeCurseNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ClearRoguelikeCurseNotify_CmdId[ClearRoguelikeCurseNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ClearRoguelikeCurseNotify_CmdId = exports.ClearRoguelikeCurseNotify_CmdId || (exports.ClearRoguelikeCurseNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeCardGachaNotify.CmdId
 */
var RoguelikeCardGachaNotify_CmdId;
(function (RoguelikeCardGachaNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeCardGachaNotify_CmdId[RoguelikeCardGachaNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8925;
     */
    RoguelikeCardGachaNotify_CmdId[RoguelikeCardGachaNotify_CmdId["CMD_ID"] = 8925] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeCardGachaNotify_CmdId[RoguelikeCardGachaNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeCardGachaNotify_CmdId[RoguelikeCardGachaNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeCardGachaNotify_CmdId = exports.RoguelikeCardGachaNotify_CmdId || (exports.RoguelikeCardGachaNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueSwitchAvatarReq.CmdId
 */
var RogueSwitchAvatarReq_CmdId;
(function (RogueSwitchAvatarReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueSwitchAvatarReq_CmdId[RogueSwitchAvatarReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8201;
     */
    RogueSwitchAvatarReq_CmdId[RogueSwitchAvatarReq_CmdId["CMD_ID"] = 8201] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueSwitchAvatarReq_CmdId[RogueSwitchAvatarReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueSwitchAvatarReq_CmdId[RogueSwitchAvatarReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueSwitchAvatarReq_CmdId[RogueSwitchAvatarReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueSwitchAvatarReq_CmdId = exports.RogueSwitchAvatarReq_CmdId || (exports.RogueSwitchAvatarReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueSwitchAvatarRsp.CmdId
 */
var RogueSwitchAvatarRsp_CmdId;
(function (RogueSwitchAvatarRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueSwitchAvatarRsp_CmdId[RogueSwitchAvatarRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8915;
     */
    RogueSwitchAvatarRsp_CmdId[RogueSwitchAvatarRsp_CmdId["CMD_ID"] = 8915] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueSwitchAvatarRsp_CmdId[RogueSwitchAvatarRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueSwitchAvatarRsp_CmdId[RogueSwitchAvatarRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueSwitchAvatarRsp_CmdId = exports.RogueSwitchAvatarRsp_CmdId || (exports.RogueSwitchAvatarRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DisableRoguelikeTrapNotify.CmdId
 */
var DisableRoguelikeTrapNotify_CmdId;
(function (DisableRoguelikeTrapNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DisableRoguelikeTrapNotify_CmdId[DisableRoguelikeTrapNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8259;
     */
    DisableRoguelikeTrapNotify_CmdId[DisableRoguelikeTrapNotify_CmdId["CMD_ID"] = 8259] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DisableRoguelikeTrapNotify_CmdId[DisableRoguelikeTrapNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DisableRoguelikeTrapNotify_CmdId[DisableRoguelikeTrapNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DisableRoguelikeTrapNotify_CmdId = exports.DisableRoguelikeTrapNotify_CmdId || (exports.DisableRoguelikeTrapNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeRuneRecordUpdateNotify.CmdId
 */
var RoguelikeRuneRecordUpdateNotify_CmdId;
(function (RoguelikeRuneRecordUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeRuneRecordUpdateNotify_CmdId[RoguelikeRuneRecordUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8973;
     */
    RoguelikeRuneRecordUpdateNotify_CmdId[RoguelikeRuneRecordUpdateNotify_CmdId["CMD_ID"] = 8973] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeRuneRecordUpdateNotify_CmdId[RoguelikeRuneRecordUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeRuneRecordUpdateNotify_CmdId[RoguelikeRuneRecordUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeRuneRecordUpdateNotify_CmdId = exports.RoguelikeRuneRecordUpdateNotify_CmdId || (exports.RoguelikeRuneRecordUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeMistClearNotify.CmdId
 */
var RoguelikeMistClearNotify_CmdId;
(function (RoguelikeMistClearNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeMistClearNotify_CmdId[RoguelikeMistClearNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8324;
     */
    RoguelikeMistClearNotify_CmdId[RoguelikeMistClearNotify_CmdId["CMD_ID"] = 8324] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeMistClearNotify_CmdId[RoguelikeMistClearNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeMistClearNotify_CmdId[RoguelikeMistClearNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeMistClearNotify_CmdId = exports.RoguelikeMistClearNotify_CmdId || (exports.RoguelikeMistClearNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectDataNotify.CmdId
 */
var RoguelikeEffectDataNotify_CmdId;
(function (RoguelikeEffectDataNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectDataNotify_CmdId[RoguelikeEffectDataNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8222;
     */
    RoguelikeEffectDataNotify_CmdId[RoguelikeEffectDataNotify_CmdId["CMD_ID"] = 8222] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectDataNotify_CmdId[RoguelikeEffectDataNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeEffectDataNotify_CmdId[RoguelikeEffectDataNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeEffectDataNotify_CmdId = exports.RoguelikeEffectDataNotify_CmdId || (exports.RoguelikeEffectDataNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectViewReq.CmdId
 */
var RoguelikeEffectViewReq_CmdId;
(function (RoguelikeEffectViewReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectViewReq_CmdId[RoguelikeEffectViewReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8528;
     */
    RoguelikeEffectViewReq_CmdId[RoguelikeEffectViewReq_CmdId["CMD_ID"] = 8528] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectViewReq_CmdId[RoguelikeEffectViewReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeEffectViewReq_CmdId[RoguelikeEffectViewReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeEffectViewReq_CmdId[RoguelikeEffectViewReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RoguelikeEffectViewReq_CmdId = exports.RoguelikeEffectViewReq_CmdId || (exports.RoguelikeEffectViewReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeEffectViewRsp.CmdId
 */
var RoguelikeEffectViewRsp_CmdId;
(function (RoguelikeEffectViewRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectViewRsp_CmdId[RoguelikeEffectViewRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8639;
     */
    RoguelikeEffectViewRsp_CmdId[RoguelikeEffectViewRsp_CmdId["CMD_ID"] = 8639] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeEffectViewRsp_CmdId[RoguelikeEffectViewRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeEffectViewRsp_CmdId[RoguelikeEffectViewRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeEffectViewRsp_CmdId[RoguelikeEffectViewRsp_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RoguelikeEffectViewRsp_CmdId = exports.RoguelikeEffectViewRsp_CmdId || (exports.RoguelikeEffectViewRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeResourceBonusPropUpdateNotify.CmdId
 */
var RoguelikeResourceBonusPropUpdateNotify_CmdId;
(function (RoguelikeResourceBonusPropUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeResourceBonusPropUpdateNotify_CmdId[RoguelikeResourceBonusPropUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8555;
     */
    RoguelikeResourceBonusPropUpdateNotify_CmdId[RoguelikeResourceBonusPropUpdateNotify_CmdId["CMD_ID"] = 8555] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeResourceBonusPropUpdateNotify_CmdId[RoguelikeResourceBonusPropUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeResourceBonusPropUpdateNotify_CmdId[RoguelikeResourceBonusPropUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeResourceBonusPropUpdateNotify_CmdId = exports.RoguelikeResourceBonusPropUpdateNotify_CmdId || (exports.RoguelikeResourceBonusPropUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RoguelikeRefreshCardCostUpdateNotify.CmdId
 */
var RoguelikeRefreshCardCostUpdateNotify_CmdId;
(function (RoguelikeRefreshCardCostUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeRefreshCardCostUpdateNotify_CmdId[RoguelikeRefreshCardCostUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8927;
     */
    RoguelikeRefreshCardCostUpdateNotify_CmdId[RoguelikeRefreshCardCostUpdateNotify_CmdId["CMD_ID"] = 8927] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RoguelikeRefreshCardCostUpdateNotify_CmdId[RoguelikeRefreshCardCostUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RoguelikeRefreshCardCostUpdateNotify_CmdId[RoguelikeRefreshCardCostUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RoguelikeRefreshCardCostUpdateNotify_CmdId = exports.RoguelikeRefreshCardCostUpdateNotify_CmdId || (exports.RoguelikeRefreshCardCostUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DigActivityMarkPointChangeNotify.CmdId
 */
var DigActivityMarkPointChangeNotify_CmdId;
(function (DigActivityMarkPointChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityMarkPointChangeNotify_CmdId[DigActivityMarkPointChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8109;
     */
    DigActivityMarkPointChangeNotify_CmdId[DigActivityMarkPointChangeNotify_CmdId["CMD_ID"] = 8109] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityMarkPointChangeNotify_CmdId[DigActivityMarkPointChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DigActivityMarkPointChangeNotify_CmdId[DigActivityMarkPointChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DigActivityMarkPointChangeNotify_CmdId = exports.DigActivityMarkPointChangeNotify_CmdId || (exports.DigActivityMarkPointChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DigActivityChangeGadgetStateReq.CmdId
 */
var DigActivityChangeGadgetStateReq_CmdId;
(function (DigActivityChangeGadgetStateReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityChangeGadgetStateReq_CmdId[DigActivityChangeGadgetStateReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8464;
     */
    DigActivityChangeGadgetStateReq_CmdId[DigActivityChangeGadgetStateReq_CmdId["CMD_ID"] = 8464] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityChangeGadgetStateReq_CmdId[DigActivityChangeGadgetStateReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DigActivityChangeGadgetStateReq_CmdId[DigActivityChangeGadgetStateReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DigActivityChangeGadgetStateReq_CmdId[DigActivityChangeGadgetStateReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(DigActivityChangeGadgetStateReq_CmdId = exports.DigActivityChangeGadgetStateReq_CmdId || (exports.DigActivityChangeGadgetStateReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.DigActivityChangeGadgetStateRsp.CmdId
 */
var DigActivityChangeGadgetStateRsp_CmdId;
(function (DigActivityChangeGadgetStateRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityChangeGadgetStateRsp_CmdId[DigActivityChangeGadgetStateRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8430;
     */
    DigActivityChangeGadgetStateRsp_CmdId[DigActivityChangeGadgetStateRsp_CmdId["CMD_ID"] = 8430] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    DigActivityChangeGadgetStateRsp_CmdId[DigActivityChangeGadgetStateRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    DigActivityChangeGadgetStateRsp_CmdId[DigActivityChangeGadgetStateRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(DigActivityChangeGadgetStateRsp_CmdId = exports.DigActivityChangeGadgetStateRsp_CmdId || (exports.DigActivityChangeGadgetStateRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampStageInfoChangeNotify.CmdId
 */
var WinterCampStageInfoChangeNotify_CmdId;
(function (WinterCampStageInfoChangeNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampStageInfoChangeNotify_CmdId[WinterCampStageInfoChangeNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8154;
     */
    WinterCampStageInfoChangeNotify_CmdId[WinterCampStageInfoChangeNotify_CmdId["CMD_ID"] = 8154] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampStageInfoChangeNotify_CmdId[WinterCampStageInfoChangeNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampStageInfoChangeNotify_CmdId[WinterCampStageInfoChangeNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampStageInfoChangeNotify_CmdId = exports.WinterCampStageInfoChangeNotify_CmdId || (exports.WinterCampStageInfoChangeNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampRaceScoreNotify.CmdId
 */
var WinterCampRaceScoreNotify_CmdId;
(function (WinterCampRaceScoreNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampRaceScoreNotify_CmdId[WinterCampRaceScoreNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8149;
     */
    WinterCampRaceScoreNotify_CmdId[WinterCampRaceScoreNotify_CmdId["CMD_ID"] = 8149] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampRaceScoreNotify_CmdId[WinterCampRaceScoreNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampRaceScoreNotify_CmdId[WinterCampRaceScoreNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampRaceScoreNotify_CmdId = exports.WinterCampRaceScoreNotify_CmdId || (exports.WinterCampRaceScoreNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGiveFriendItemReq.CmdId
 */
var WinterCampGiveFriendItemReq_CmdId;
(function (WinterCampGiveFriendItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGiveFriendItemReq_CmdId[WinterCampGiveFriendItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8572;
     */
    WinterCampGiveFriendItemReq_CmdId[WinterCampGiveFriendItemReq_CmdId["CMD_ID"] = 8572] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGiveFriendItemReq_CmdId[WinterCampGiveFriendItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGiveFriendItemReq_CmdId[WinterCampGiveFriendItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGiveFriendItemReq_CmdId[WinterCampGiveFriendItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampGiveFriendItemReq_CmdId = exports.WinterCampGiveFriendItemReq_CmdId || (exports.WinterCampGiveFriendItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGiveFriendItemRsp.CmdId
 */
var WinterCampGiveFriendItemRsp_CmdId;
(function (WinterCampGiveFriendItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGiveFriendItemRsp_CmdId[WinterCampGiveFriendItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8264;
     */
    WinterCampGiveFriendItemRsp_CmdId[WinterCampGiveFriendItemRsp_CmdId["CMD_ID"] = 8264] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGiveFriendItemRsp_CmdId[WinterCampGiveFriendItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGiveFriendItemRsp_CmdId[WinterCampGiveFriendItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampGiveFriendItemRsp_CmdId = exports.WinterCampGiveFriendItemRsp_CmdId || (exports.WinterCampGiveFriendItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampSetWishListReq.CmdId
 */
var WinterCampSetWishListReq_CmdId;
(function (WinterCampSetWishListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampSetWishListReq_CmdId[WinterCampSetWishListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8753;
     */
    WinterCampSetWishListReq_CmdId[WinterCampSetWishListReq_CmdId["CMD_ID"] = 8753] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampSetWishListReq_CmdId[WinterCampSetWishListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampSetWishListReq_CmdId[WinterCampSetWishListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampSetWishListReq_CmdId[WinterCampSetWishListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampSetWishListReq_CmdId = exports.WinterCampSetWishListReq_CmdId || (exports.WinterCampSetWishListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampSetWishListRsp.CmdId
 */
var WinterCampSetWishListRsp_CmdId;
(function (WinterCampSetWishListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampSetWishListRsp_CmdId[WinterCampSetWishListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8281;
     */
    WinterCampSetWishListRsp_CmdId[WinterCampSetWishListRsp_CmdId["CMD_ID"] = 8281] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampSetWishListRsp_CmdId[WinterCampSetWishListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampSetWishListRsp_CmdId[WinterCampSetWishListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampSetWishListRsp_CmdId = exports.WinterCampSetWishListRsp_CmdId || (exports.WinterCampSetWishListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetFriendWishListReq.CmdId
 */
var WinterCampGetFriendWishListReq_CmdId;
(function (WinterCampGetFriendWishListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetFriendWishListReq_CmdId[WinterCampGetFriendWishListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8946;
     */
    WinterCampGetFriendWishListReq_CmdId[WinterCampGetFriendWishListReq_CmdId["CMD_ID"] = 8946] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetFriendWishListReq_CmdId[WinterCampGetFriendWishListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetFriendWishListReq_CmdId[WinterCampGetFriendWishListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetFriendWishListReq_CmdId[WinterCampGetFriendWishListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampGetFriendWishListReq_CmdId = exports.WinterCampGetFriendWishListReq_CmdId || (exports.WinterCampGetFriendWishListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetFriendWishListRsp.CmdId
 */
var WinterCampGetFriendWishListRsp_CmdId;
(function (WinterCampGetFriendWishListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetFriendWishListRsp_CmdId[WinterCampGetFriendWishListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8937;
     */
    WinterCampGetFriendWishListRsp_CmdId[WinterCampGetFriendWishListRsp_CmdId["CMD_ID"] = 8937] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetFriendWishListRsp_CmdId[WinterCampGetFriendWishListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetFriendWishListRsp_CmdId[WinterCampGetFriendWishListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampGetFriendWishListRsp_CmdId = exports.WinterCampGetFriendWishListRsp_CmdId || (exports.WinterCampGetFriendWishListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampRecvItemNotify.CmdId
 */
var WinterCampRecvItemNotify_CmdId;
(function (WinterCampRecvItemNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampRecvItemNotify_CmdId[WinterCampRecvItemNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8580;
     */
    WinterCampRecvItemNotify_CmdId[WinterCampRecvItemNotify_CmdId["CMD_ID"] = 8580] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampRecvItemNotify_CmdId[WinterCampRecvItemNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampRecvItemNotify_CmdId[WinterCampRecvItemNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampRecvItemNotify_CmdId = exports.WinterCampRecvItemNotify_CmdId || (exports.WinterCampRecvItemNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptGiveItemReq.CmdId
 */
var WinterCampAcceptGiveItemReq_CmdId;
(function (WinterCampAcceptGiveItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptGiveItemReq_CmdId[WinterCampAcceptGiveItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8387;
     */
    WinterCampAcceptGiveItemReq_CmdId[WinterCampAcceptGiveItemReq_CmdId["CMD_ID"] = 8387] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptGiveItemReq_CmdId[WinterCampAcceptGiveItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptGiveItemReq_CmdId[WinterCampAcceptGiveItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptGiveItemReq_CmdId[WinterCampAcceptGiveItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampAcceptGiveItemReq_CmdId = exports.WinterCampAcceptGiveItemReq_CmdId || (exports.WinterCampAcceptGiveItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptGiveItemRsp.CmdId
 */
var WinterCampAcceptGiveItemRsp_CmdId;
(function (WinterCampAcceptGiveItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptGiveItemRsp_CmdId[WinterCampAcceptGiveItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8185;
     */
    WinterCampAcceptGiveItemRsp_CmdId[WinterCampAcceptGiveItemRsp_CmdId["CMD_ID"] = 8185] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptGiveItemRsp_CmdId[WinterCampAcceptGiveItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptGiveItemRsp_CmdId[WinterCampAcceptGiveItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampAcceptGiveItemRsp_CmdId = exports.WinterCampAcceptGiveItemRsp_CmdId || (exports.WinterCampAcceptGiveItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptAllGiveItemReq.CmdId
 */
var WinterCampAcceptAllGiveItemReq_CmdId;
(function (WinterCampAcceptAllGiveItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptAllGiveItemReq_CmdId[WinterCampAcceptAllGiveItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 9000;
     */
    WinterCampAcceptAllGiveItemReq_CmdId[WinterCampAcceptAllGiveItemReq_CmdId["CMD_ID"] = 9000] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptAllGiveItemReq_CmdId[WinterCampAcceptAllGiveItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptAllGiveItemReq_CmdId[WinterCampAcceptAllGiveItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptAllGiveItemReq_CmdId[WinterCampAcceptAllGiveItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampAcceptAllGiveItemReq_CmdId = exports.WinterCampAcceptAllGiveItemReq_CmdId || (exports.WinterCampAcceptAllGiveItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampAcceptAllGiveItemRsp.CmdId
 */
var WinterCampAcceptAllGiveItemRsp_CmdId;
(function (WinterCampAcceptAllGiveItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptAllGiveItemRsp_CmdId[WinterCampAcceptAllGiveItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8626;
     */
    WinterCampAcceptAllGiveItemRsp_CmdId[WinterCampAcceptAllGiveItemRsp_CmdId["CMD_ID"] = 8626] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampAcceptAllGiveItemRsp_CmdId[WinterCampAcceptAllGiveItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampAcceptAllGiveItemRsp_CmdId[WinterCampAcceptAllGiveItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampAcceptAllGiveItemRsp_CmdId = exports.WinterCampAcceptAllGiveItemRsp_CmdId || (exports.WinterCampAcceptAllGiveItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetCanGiveFriendItemReq.CmdId
 */
var WinterCampGetCanGiveFriendItemReq_CmdId;
(function (WinterCampGetCanGiveFriendItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetCanGiveFriendItemReq_CmdId[WinterCampGetCanGiveFriendItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8964;
     */
    WinterCampGetCanGiveFriendItemReq_CmdId[WinterCampGetCanGiveFriendItemReq_CmdId["CMD_ID"] = 8964] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetCanGiveFriendItemReq_CmdId[WinterCampGetCanGiveFriendItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetCanGiveFriendItemReq_CmdId[WinterCampGetCanGiveFriendItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetCanGiveFriendItemReq_CmdId[WinterCampGetCanGiveFriendItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampGetCanGiveFriendItemReq_CmdId = exports.WinterCampGetCanGiveFriendItemReq_CmdId || (exports.WinterCampGetCanGiveFriendItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetCanGiveFriendItemRsp.CmdId
 */
var WinterCampGetCanGiveFriendItemRsp_CmdId;
(function (WinterCampGetCanGiveFriendItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetCanGiveFriendItemRsp_CmdId[WinterCampGetCanGiveFriendItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8357;
     */
    WinterCampGetCanGiveFriendItemRsp_CmdId[WinterCampGetCanGiveFriendItemRsp_CmdId["CMD_ID"] = 8357] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetCanGiveFriendItemRsp_CmdId[WinterCampGetCanGiveFriendItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetCanGiveFriendItemRsp_CmdId[WinterCampGetCanGiveFriendItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampGetCanGiveFriendItemRsp_CmdId = exports.WinterCampGetCanGiveFriendItemRsp_CmdId || (exports.WinterCampGetCanGiveFriendItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetRecvItemListReq.CmdId
 */
var WinterCampGetRecvItemListReq_CmdId;
(function (WinterCampGetRecvItemListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetRecvItemListReq_CmdId[WinterCampGetRecvItemListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8143;
     */
    WinterCampGetRecvItemListReq_CmdId[WinterCampGetRecvItemListReq_CmdId["CMD_ID"] = 8143] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetRecvItemListReq_CmdId[WinterCampGetRecvItemListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetRecvItemListReq_CmdId[WinterCampGetRecvItemListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetRecvItemListReq_CmdId[WinterCampGetRecvItemListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampGetRecvItemListReq_CmdId = exports.WinterCampGetRecvItemListReq_CmdId || (exports.WinterCampGetRecvItemListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampGetRecvItemListRsp.CmdId
 */
var WinterCampGetRecvItemListRsp_CmdId;
(function (WinterCampGetRecvItemListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetRecvItemListRsp_CmdId[WinterCampGetRecvItemListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8423;
     */
    WinterCampGetRecvItemListRsp_CmdId[WinterCampGetRecvItemListRsp_CmdId["CMD_ID"] = 8423] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampGetRecvItemListRsp_CmdId[WinterCampGetRecvItemListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampGetRecvItemListRsp_CmdId[WinterCampGetRecvItemListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampGetRecvItemListRsp_CmdId = exports.WinterCampGetRecvItemListRsp_CmdId || (exports.WinterCampGetRecvItemListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampEditSnowmanCombinationReq.CmdId
 */
var WinterCampEditSnowmanCombinationReq_CmdId;
(function (WinterCampEditSnowmanCombinationReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampEditSnowmanCombinationReq_CmdId[WinterCampEditSnowmanCombinationReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8144;
     */
    WinterCampEditSnowmanCombinationReq_CmdId[WinterCampEditSnowmanCombinationReq_CmdId["CMD_ID"] = 8144] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampEditSnowmanCombinationReq_CmdId[WinterCampEditSnowmanCombinationReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampEditSnowmanCombinationReq_CmdId[WinterCampEditSnowmanCombinationReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampEditSnowmanCombinationReq_CmdId[WinterCampEditSnowmanCombinationReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampEditSnowmanCombinationReq_CmdId = exports.WinterCampEditSnowmanCombinationReq_CmdId || (exports.WinterCampEditSnowmanCombinationReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampEditSnowmanCombinationRsp.CmdId
 */
var WinterCampEditSnowmanCombinationRsp_CmdId;
(function (WinterCampEditSnowmanCombinationRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampEditSnowmanCombinationRsp_CmdId[WinterCampEditSnowmanCombinationRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8142;
     */
    WinterCampEditSnowmanCombinationRsp_CmdId[WinterCampEditSnowmanCombinationRsp_CmdId["CMD_ID"] = 8142] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampEditSnowmanCombinationRsp_CmdId[WinterCampEditSnowmanCombinationRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampEditSnowmanCombinationRsp_CmdId[WinterCampEditSnowmanCombinationRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampEditSnowmanCombinationRsp_CmdId = exports.WinterCampEditSnowmanCombinationRsp_CmdId || (exports.WinterCampEditSnowmanCombinationRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonSettleNotify.CmdId
 */
var WinterCampTriathlonSettleNotify_CmdId;
(function (WinterCampTriathlonSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonSettleNotify_CmdId[WinterCampTriathlonSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8342;
     */
    WinterCampTriathlonSettleNotify_CmdId[WinterCampTriathlonSettleNotify_CmdId["CMD_ID"] = 8342] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonSettleNotify_CmdId[WinterCampTriathlonSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTriathlonSettleNotify_CmdId[WinterCampTriathlonSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampTriathlonSettleNotify_CmdId = exports.WinterCampTriathlonSettleNotify_CmdId || (exports.WinterCampTriathlonSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeExploreRewardReq.CmdId
 */
var WinterCampTakeExploreRewardReq_CmdId;
(function (WinterCampTakeExploreRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeExploreRewardReq_CmdId[WinterCampTakeExploreRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8607;
     */
    WinterCampTakeExploreRewardReq_CmdId[WinterCampTakeExploreRewardReq_CmdId["CMD_ID"] = 8607] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeExploreRewardReq_CmdId[WinterCampTakeExploreRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeExploreRewardReq_CmdId[WinterCampTakeExploreRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeExploreRewardReq_CmdId[WinterCampTakeExploreRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampTakeExploreRewardReq_CmdId = exports.WinterCampTakeExploreRewardReq_CmdId || (exports.WinterCampTakeExploreRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeExploreRewardRsp.CmdId
 */
var WinterCampTakeExploreRewardRsp_CmdId;
(function (WinterCampTakeExploreRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeExploreRewardRsp_CmdId[WinterCampTakeExploreRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8978;
     */
    WinterCampTakeExploreRewardRsp_CmdId[WinterCampTakeExploreRewardRsp_CmdId["CMD_ID"] = 8978] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeExploreRewardRsp_CmdId[WinterCampTakeExploreRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeExploreRewardRsp_CmdId[WinterCampTakeExploreRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampTakeExploreRewardRsp_CmdId = exports.WinterCampTakeExploreRewardRsp_CmdId || (exports.WinterCampTakeExploreRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeBattleRewardReq.CmdId
 */
var WinterCampTakeBattleRewardReq_CmdId;
(function (WinterCampTakeBattleRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeBattleRewardReq_CmdId[WinterCampTakeBattleRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8401;
     */
    WinterCampTakeBattleRewardReq_CmdId[WinterCampTakeBattleRewardReq_CmdId["CMD_ID"] = 8401] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeBattleRewardReq_CmdId[WinterCampTakeBattleRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeBattleRewardReq_CmdId[WinterCampTakeBattleRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeBattleRewardReq_CmdId[WinterCampTakeBattleRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampTakeBattleRewardReq_CmdId = exports.WinterCampTakeBattleRewardReq_CmdId || (exports.WinterCampTakeBattleRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTakeBattleRewardRsp.CmdId
 */
var WinterCampTakeBattleRewardRsp_CmdId;
(function (WinterCampTakeBattleRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeBattleRewardRsp_CmdId[WinterCampTakeBattleRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8153;
     */
    WinterCampTakeBattleRewardRsp_CmdId[WinterCampTakeBattleRewardRsp_CmdId["CMD_ID"] = 8153] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTakeBattleRewardRsp_CmdId[WinterCampTakeBattleRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTakeBattleRewardRsp_CmdId[WinterCampTakeBattleRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampTakeBattleRewardRsp_CmdId = exports.WinterCampTakeBattleRewardRsp_CmdId || (exports.WinterCampTakeBattleRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonRestartReq.CmdId
 */
var WinterCampTriathlonRestartReq_CmdId;
(function (WinterCampTriathlonRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonRestartReq_CmdId[WinterCampTriathlonRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8844;
     */
    WinterCampTriathlonRestartReq_CmdId[WinterCampTriathlonRestartReq_CmdId["CMD_ID"] = 8844] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonRestartReq_CmdId[WinterCampTriathlonRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTriathlonRestartReq_CmdId[WinterCampTriathlonRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTriathlonRestartReq_CmdId[WinterCampTriathlonRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WinterCampTriathlonRestartReq_CmdId = exports.WinterCampTriathlonRestartReq_CmdId || (exports.WinterCampTriathlonRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WinterCampTriathlonRestartRsp.CmdId
 */
var WinterCampTriathlonRestartRsp_CmdId;
(function (WinterCampTriathlonRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonRestartRsp_CmdId[WinterCampTriathlonRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8569;
     */
    WinterCampTriathlonRestartRsp_CmdId[WinterCampTriathlonRestartRsp_CmdId["CMD_ID"] = 8569] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WinterCampTriathlonRestartRsp_CmdId[WinterCampTriathlonRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WinterCampTriathlonRestartRsp_CmdId[WinterCampTriathlonRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WinterCampTriathlonRestartRsp_CmdId = exports.WinterCampTriathlonRestartRsp_CmdId || (exports.WinterCampTriathlonRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialSettleNotify.CmdId
 */
var MistTrialSettleNotify_CmdId;
(function (MistTrialSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSettleNotify_CmdId[MistTrialSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8373;
     */
    MistTrialSettleNotify_CmdId[MistTrialSettleNotify_CmdId["CMD_ID"] = 8373] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialSettleNotify_CmdId[MistTrialSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialSettleNotify_CmdId[MistTrialSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialSettleNotify_CmdId[MistTrialSettleNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MistTrialSettleNotify_CmdId = exports.MistTrialSettleNotify_CmdId || (exports.MistTrialSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetDungeonExhibitionDataReq.CmdId
 */
var MistTrialGetDungeonExhibitionDataReq_CmdId;
(function (MistTrialGetDungeonExhibitionDataReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetDungeonExhibitionDataReq_CmdId[MistTrialGetDungeonExhibitionDataReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8740;
     */
    MistTrialGetDungeonExhibitionDataReq_CmdId[MistTrialGetDungeonExhibitionDataReq_CmdId["CMD_ID"] = 8740] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetDungeonExhibitionDataReq_CmdId[MistTrialGetDungeonExhibitionDataReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetDungeonExhibitionDataReq_CmdId[MistTrialGetDungeonExhibitionDataReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetDungeonExhibitionDataReq_CmdId[MistTrialGetDungeonExhibitionDataReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MistTrialGetDungeonExhibitionDataReq_CmdId = exports.MistTrialGetDungeonExhibitionDataReq_CmdId || (exports.MistTrialGetDungeonExhibitionDataReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MistTrialGetDungeonExhibitionDataRsp.CmdId
 */
var MistTrialGetDungeonExhibitionDataRsp_CmdId;
(function (MistTrialGetDungeonExhibitionDataRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetDungeonExhibitionDataRsp_CmdId[MistTrialGetDungeonExhibitionDataRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8066;
     */
    MistTrialGetDungeonExhibitionDataRsp_CmdId[MistTrialGetDungeonExhibitionDataRsp_CmdId["CMD_ID"] = 8066] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MistTrialGetDungeonExhibitionDataRsp_CmdId[MistTrialGetDungeonExhibitionDataRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MistTrialGetDungeonExhibitionDataRsp_CmdId[MistTrialGetDungeonExhibitionDataRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MistTrialGetDungeonExhibitionDataRsp_CmdId = exports.MistTrialGetDungeonExhibitionDataRsp_CmdId || (exports.MistTrialGetDungeonExhibitionDataRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionResetChallengeReq.CmdId
 */
var PotionResetChallengeReq_CmdId;
(function (PotionResetChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionResetChallengeReq_CmdId[PotionResetChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8377;
     */
    PotionResetChallengeReq_CmdId[PotionResetChallengeReq_CmdId["CMD_ID"] = 8377] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionResetChallengeReq_CmdId[PotionResetChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionResetChallengeReq_CmdId[PotionResetChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionResetChallengeReq_CmdId[PotionResetChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PotionResetChallengeReq_CmdId = exports.PotionResetChallengeReq_CmdId || (exports.PotionResetChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionResetChallengeRsp.CmdId
 */
var PotionResetChallengeRsp_CmdId;
(function (PotionResetChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionResetChallengeRsp_CmdId[PotionResetChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8067;
     */
    PotionResetChallengeRsp_CmdId[PotionResetChallengeRsp_CmdId["CMD_ID"] = 8067] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionResetChallengeRsp_CmdId[PotionResetChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionResetChallengeRsp_CmdId[PotionResetChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PotionResetChallengeRsp_CmdId = exports.PotionResetChallengeRsp_CmdId || (exports.PotionResetChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonReq.CmdId
 */
var PotionEnterDungeonReq_CmdId;
(function (PotionEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonReq_CmdId[PotionEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8261;
     */
    PotionEnterDungeonReq_CmdId[PotionEnterDungeonReq_CmdId["CMD_ID"] = 8261] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonReq_CmdId[PotionEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionEnterDungeonReq_CmdId[PotionEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionEnterDungeonReq_CmdId[PotionEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PotionEnterDungeonReq_CmdId = exports.PotionEnterDungeonReq_CmdId || (exports.PotionEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonRsp.CmdId
 */
var PotionEnterDungeonRsp_CmdId;
(function (PotionEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonRsp_CmdId[PotionEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8482;
     */
    PotionEnterDungeonRsp_CmdId[PotionEnterDungeonRsp_CmdId["CMD_ID"] = 8482] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonRsp_CmdId[PotionEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionEnterDungeonRsp_CmdId[PotionEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PotionEnterDungeonRsp_CmdId = exports.PotionEnterDungeonRsp_CmdId || (exports.PotionEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionEnterDungeonNotify.CmdId
 */
var PotionEnterDungeonNotify_CmdId;
(function (PotionEnterDungeonNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonNotify_CmdId[PotionEnterDungeonNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8531;
     */
    PotionEnterDungeonNotify_CmdId[PotionEnterDungeonNotify_CmdId["CMD_ID"] = 8531] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionEnterDungeonNotify_CmdId[PotionEnterDungeonNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionEnterDungeonNotify_CmdId[PotionEnterDungeonNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PotionEnterDungeonNotify_CmdId = exports.PotionEnterDungeonNotify_CmdId || (exports.PotionEnterDungeonNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionSaveDungeonResultReq.CmdId
 */
var PotionSaveDungeonResultReq_CmdId;
(function (PotionSaveDungeonResultReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionSaveDungeonResultReq_CmdId[PotionSaveDungeonResultReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8192;
     */
    PotionSaveDungeonResultReq_CmdId[PotionSaveDungeonResultReq_CmdId["CMD_ID"] = 8192] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionSaveDungeonResultReq_CmdId[PotionSaveDungeonResultReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionSaveDungeonResultReq_CmdId[PotionSaveDungeonResultReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionSaveDungeonResultReq_CmdId[PotionSaveDungeonResultReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PotionSaveDungeonResultReq_CmdId = exports.PotionSaveDungeonResultReq_CmdId || (exports.PotionSaveDungeonResultReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionSaveDungeonResultRsp.CmdId
 */
var PotionSaveDungeonResultRsp_CmdId;
(function (PotionSaveDungeonResultRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionSaveDungeonResultRsp_CmdId[PotionSaveDungeonResultRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8688;
     */
    PotionSaveDungeonResultRsp_CmdId[PotionSaveDungeonResultRsp_CmdId["CMD_ID"] = 8688] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionSaveDungeonResultRsp_CmdId[PotionSaveDungeonResultRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionSaveDungeonResultRsp_CmdId[PotionSaveDungeonResultRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PotionSaveDungeonResultRsp_CmdId = exports.PotionSaveDungeonResultRsp_CmdId || (exports.PotionSaveDungeonResultRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionRestartDungeonReq.CmdId
 */
var PotionRestartDungeonReq_CmdId;
(function (PotionRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionRestartDungeonReq_CmdId[PotionRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8273;
     */
    PotionRestartDungeonReq_CmdId[PotionRestartDungeonReq_CmdId["CMD_ID"] = 8273] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionRestartDungeonReq_CmdId[PotionRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionRestartDungeonReq_CmdId[PotionRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionRestartDungeonReq_CmdId[PotionRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PotionRestartDungeonReq_CmdId = exports.PotionRestartDungeonReq_CmdId || (exports.PotionRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PotionRestartDungeonRsp.CmdId
 */
var PotionRestartDungeonRsp_CmdId;
(function (PotionRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionRestartDungeonRsp_CmdId[PotionRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8062;
     */
    PotionRestartDungeonRsp_CmdId[PotionRestartDungeonRsp_CmdId["CMD_ID"] = 8062] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PotionRestartDungeonRsp_CmdId[PotionRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PotionRestartDungeonRsp_CmdId[PotionRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PotionRestartDungeonRsp_CmdId = exports.PotionRestartDungeonRsp_CmdId || (exports.PotionRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TanukiTravelFinishGuideQuestNotify.CmdId
 */
var TanukiTravelFinishGuideQuestNotify_CmdId;
(function (TanukiTravelFinishGuideQuestNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TanukiTravelFinishGuideQuestNotify_CmdId[TanukiTravelFinishGuideQuestNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8924;
     */
    TanukiTravelFinishGuideQuestNotify_CmdId[TanukiTravelFinishGuideQuestNotify_CmdId["CMD_ID"] = 8924] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TanukiTravelFinishGuideQuestNotify_CmdId[TanukiTravelFinishGuideQuestNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TanukiTravelFinishGuideQuestNotify_CmdId[TanukiTravelFinishGuideQuestNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TanukiTravelFinishGuideQuestNotify_CmdId = exports.TanukiTravelFinishGuideQuestNotify_CmdId || (exports.TanukiTravelFinishGuideQuestNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FinishLanternProjectionReq.CmdId
 */
var FinishLanternProjectionReq_CmdId;
(function (FinishLanternProjectionReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishLanternProjectionReq_CmdId[FinishLanternProjectionReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8704;
     */
    FinishLanternProjectionReq_CmdId[FinishLanternProjectionReq_CmdId["CMD_ID"] = 8704] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishLanternProjectionReq_CmdId[FinishLanternProjectionReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FinishLanternProjectionReq_CmdId[FinishLanternProjectionReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FinishLanternProjectionReq_CmdId[FinishLanternProjectionReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FinishLanternProjectionReq_CmdId = exports.FinishLanternProjectionReq_CmdId || (exports.FinishLanternProjectionReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FinishLanternProjectionRsp.CmdId
 */
var FinishLanternProjectionRsp_CmdId;
(function (FinishLanternProjectionRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishLanternProjectionRsp_CmdId[FinishLanternProjectionRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8713;
     */
    FinishLanternProjectionRsp_CmdId[FinishLanternProjectionRsp_CmdId["CMD_ID"] = 8713] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FinishLanternProjectionRsp_CmdId[FinishLanternProjectionRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FinishLanternProjectionRsp_CmdId[FinishLanternProjectionRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FinishLanternProjectionRsp_CmdId = exports.FinishLanternProjectionRsp_CmdId || (exports.FinishLanternProjectionRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionTipsReq.CmdId
 */
var ViewLanternProjectionTipsReq_CmdId;
(function (ViewLanternProjectionTipsReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionTipsReq_CmdId[ViewLanternProjectionTipsReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8218;
     */
    ViewLanternProjectionTipsReq_CmdId[ViewLanternProjectionTipsReq_CmdId["CMD_ID"] = 8218] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionTipsReq_CmdId[ViewLanternProjectionTipsReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionTipsReq_CmdId[ViewLanternProjectionTipsReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionTipsReq_CmdId[ViewLanternProjectionTipsReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ViewLanternProjectionTipsReq_CmdId = exports.ViewLanternProjectionTipsReq_CmdId || (exports.ViewLanternProjectionTipsReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionTipsRsp.CmdId
 */
var ViewLanternProjectionTipsRsp_CmdId;
(function (ViewLanternProjectionTipsRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionTipsRsp_CmdId[ViewLanternProjectionTipsRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8590;
     */
    ViewLanternProjectionTipsRsp_CmdId[ViewLanternProjectionTipsRsp_CmdId["CMD_ID"] = 8590] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionTipsRsp_CmdId[ViewLanternProjectionTipsRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionTipsRsp_CmdId[ViewLanternProjectionTipsRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ViewLanternProjectionTipsRsp_CmdId = exports.ViewLanternProjectionTipsRsp_CmdId || (exports.ViewLanternProjectionTipsRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionLevelTipsReq.CmdId
 */
var ViewLanternProjectionLevelTipsReq_CmdId;
(function (ViewLanternProjectionLevelTipsReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionLevelTipsReq_CmdId[ViewLanternProjectionLevelTipsReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8758;
     */
    ViewLanternProjectionLevelTipsReq_CmdId[ViewLanternProjectionLevelTipsReq_CmdId["CMD_ID"] = 8758] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionLevelTipsReq_CmdId[ViewLanternProjectionLevelTipsReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionLevelTipsReq_CmdId[ViewLanternProjectionLevelTipsReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionLevelTipsReq_CmdId[ViewLanternProjectionLevelTipsReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ViewLanternProjectionLevelTipsReq_CmdId = exports.ViewLanternProjectionLevelTipsReq_CmdId || (exports.ViewLanternProjectionLevelTipsReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ViewLanternProjectionLevelTipsRsp.CmdId
 */
var ViewLanternProjectionLevelTipsRsp_CmdId;
(function (ViewLanternProjectionLevelTipsRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionLevelTipsRsp_CmdId[ViewLanternProjectionLevelTipsRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8411;
     */
    ViewLanternProjectionLevelTipsRsp_CmdId[ViewLanternProjectionLevelTipsRsp_CmdId["CMD_ID"] = 8411] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ViewLanternProjectionLevelTipsRsp_CmdId[ViewLanternProjectionLevelTipsRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ViewLanternProjectionLevelTipsRsp_CmdId[ViewLanternProjectionLevelTipsRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ViewLanternProjectionLevelTipsRsp_CmdId = exports.ViewLanternProjectionLevelTipsRsp_CmdId || (exports.ViewLanternProjectionLevelTipsRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventSettleNotify.CmdId
 */
var SalvagePreventSettleNotify_CmdId;
(function (SalvagePreventSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventSettleNotify_CmdId[SalvagePreventSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8231;
     */
    SalvagePreventSettleNotify_CmdId[SalvagePreventSettleNotify_CmdId["CMD_ID"] = 8231] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventSettleNotify_CmdId[SalvagePreventSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvagePreventSettleNotify_CmdId[SalvagePreventSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalvagePreventSettleNotify_CmdId = exports.SalvagePreventSettleNotify_CmdId || (exports.SalvagePreventSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortSettleNotify.CmdId
 */
var SalvageEscortSettleNotify_CmdId;
(function (SalvageEscortSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortSettleNotify_CmdId[SalvageEscortSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8499;
     */
    SalvageEscortSettleNotify_CmdId[SalvageEscortSettleNotify_CmdId["CMD_ID"] = 8499] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortSettleNotify_CmdId[SalvageEscortSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvageEscortSettleNotify_CmdId[SalvageEscortSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalvageEscortSettleNotify_CmdId = exports.SalvageEscortSettleNotify_CmdId || (exports.SalvageEscortSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteTakeSkinRewardReq.CmdId
 */
var LanternRiteTakeSkinRewardReq_CmdId;
(function (LanternRiteTakeSkinRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteTakeSkinRewardReq_CmdId[LanternRiteTakeSkinRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8826;
     */
    LanternRiteTakeSkinRewardReq_CmdId[LanternRiteTakeSkinRewardReq_CmdId["CMD_ID"] = 8826] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteTakeSkinRewardReq_CmdId[LanternRiteTakeSkinRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteTakeSkinRewardReq_CmdId[LanternRiteTakeSkinRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteTakeSkinRewardReq_CmdId[LanternRiteTakeSkinRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LanternRiteTakeSkinRewardReq_CmdId = exports.LanternRiteTakeSkinRewardReq_CmdId || (exports.LanternRiteTakeSkinRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteTakeSkinRewardRsp.CmdId
 */
var LanternRiteTakeSkinRewardRsp_CmdId;
(function (LanternRiteTakeSkinRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteTakeSkinRewardRsp_CmdId[LanternRiteTakeSkinRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8777;
     */
    LanternRiteTakeSkinRewardRsp_CmdId[LanternRiteTakeSkinRewardRsp_CmdId["CMD_ID"] = 8777] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteTakeSkinRewardRsp_CmdId[LanternRiteTakeSkinRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteTakeSkinRewardRsp_CmdId[LanternRiteTakeSkinRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LanternRiteTakeSkinRewardRsp_CmdId = exports.LanternRiteTakeSkinRewardRsp_CmdId || (exports.LanternRiteTakeSkinRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventRestartReq.CmdId
 */
var SalvagePreventRestartReq_CmdId;
(function (SalvagePreventRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventRestartReq_CmdId[SalvagePreventRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8367;
     */
    SalvagePreventRestartReq_CmdId[SalvagePreventRestartReq_CmdId["CMD_ID"] = 8367] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventRestartReq_CmdId[SalvagePreventRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvagePreventRestartReq_CmdId[SalvagePreventRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvagePreventRestartReq_CmdId[SalvagePreventRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SalvagePreventRestartReq_CmdId = exports.SalvagePreventRestartReq_CmdId || (exports.SalvagePreventRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventRestartRsp.CmdId
 */
var SalvagePreventRestartRsp_CmdId;
(function (SalvagePreventRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventRestartRsp_CmdId[SalvagePreventRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8938;
     */
    SalvagePreventRestartRsp_CmdId[SalvagePreventRestartRsp_CmdId["CMD_ID"] = 8938] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvagePreventRestartRsp_CmdId[SalvagePreventRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvagePreventRestartRsp_CmdId[SalvagePreventRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalvagePreventRestartRsp_CmdId = exports.SalvagePreventRestartRsp_CmdId || (exports.SalvagePreventRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortRestartReq.CmdId
 */
var SalvageEscortRestartReq_CmdId;
(function (SalvageEscortRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortRestartReq_CmdId[SalvageEscortRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8396;
     */
    SalvageEscortRestartReq_CmdId[SalvageEscortRestartReq_CmdId["CMD_ID"] = 8396] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortRestartReq_CmdId[SalvageEscortRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvageEscortRestartReq_CmdId[SalvageEscortRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvageEscortRestartReq_CmdId[SalvageEscortRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SalvageEscortRestartReq_CmdId = exports.SalvageEscortRestartReq_CmdId || (exports.SalvageEscortRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortRestartRsp.CmdId
 */
var SalvageEscortRestartRsp_CmdId;
(function (SalvageEscortRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortRestartRsp_CmdId[SalvageEscortRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8959;
     */
    SalvageEscortRestartRsp_CmdId[SalvageEscortRestartRsp_CmdId["CMD_ID"] = 8959] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SalvageEscortRestartRsp_CmdId[SalvageEscortRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SalvageEscortRestartRsp_CmdId[SalvageEscortRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SalvageEscortRestartRsp_CmdId = exports.SalvageEscortRestartRsp_CmdId || (exports.SalvageEscortRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteStartFireworksReformReq.CmdId
 */
var LanternRiteStartFireworksReformReq_CmdId;
(function (LanternRiteStartFireworksReformReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteStartFireworksReformReq_CmdId[LanternRiteStartFireworksReformReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8518;
     */
    LanternRiteStartFireworksReformReq_CmdId[LanternRiteStartFireworksReformReq_CmdId["CMD_ID"] = 8518] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteStartFireworksReformReq_CmdId[LanternRiteStartFireworksReformReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteStartFireworksReformReq_CmdId[LanternRiteStartFireworksReformReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteStartFireworksReformReq_CmdId[LanternRiteStartFireworksReformReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LanternRiteStartFireworksReformReq_CmdId = exports.LanternRiteStartFireworksReformReq_CmdId || (exports.LanternRiteStartFireworksReformReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteStartFireworksReformRsp.CmdId
 */
var LanternRiteStartFireworksReformRsp_CmdId;
(function (LanternRiteStartFireworksReformRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteStartFireworksReformRsp_CmdId[LanternRiteStartFireworksReformRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8862;
     */
    LanternRiteStartFireworksReformRsp_CmdId[LanternRiteStartFireworksReformRsp_CmdId["CMD_ID"] = 8862] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteStartFireworksReformRsp_CmdId[LanternRiteStartFireworksReformRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteStartFireworksReformRsp_CmdId[LanternRiteStartFireworksReformRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LanternRiteStartFireworksReformRsp_CmdId = exports.LanternRiteStartFireworksReformRsp_CmdId || (exports.LanternRiteStartFireworksReformRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteDoFireworksReformReq.CmdId
 */
var LanternRiteDoFireworksReformReq_CmdId;
(function (LanternRiteDoFireworksReformReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteDoFireworksReformReq_CmdId[LanternRiteDoFireworksReformReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8226;
     */
    LanternRiteDoFireworksReformReq_CmdId[LanternRiteDoFireworksReformReq_CmdId["CMD_ID"] = 8226] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteDoFireworksReformReq_CmdId[LanternRiteDoFireworksReformReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteDoFireworksReformReq_CmdId[LanternRiteDoFireworksReformReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteDoFireworksReformReq_CmdId[LanternRiteDoFireworksReformReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LanternRiteDoFireworksReformReq_CmdId = exports.LanternRiteDoFireworksReformReq_CmdId || (exports.LanternRiteDoFireworksReformReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteDoFireworksReformRsp.CmdId
 */
var LanternRiteDoFireworksReformRsp_CmdId;
(function (LanternRiteDoFireworksReformRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteDoFireworksReformRsp_CmdId[LanternRiteDoFireworksReformRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8657;
     */
    LanternRiteDoFireworksReformRsp_CmdId[LanternRiteDoFireworksReformRsp_CmdId["CMD_ID"] = 8657] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteDoFireworksReformRsp_CmdId[LanternRiteDoFireworksReformRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteDoFireworksReformRsp_CmdId[LanternRiteDoFireworksReformRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LanternRiteDoFireworksReformRsp_CmdId = exports.LanternRiteDoFireworksReformRsp_CmdId || (exports.LanternRiteDoFireworksReformRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteEndFireworksReformReq.CmdId
 */
var LanternRiteEndFireworksReformReq_CmdId;
(function (LanternRiteEndFireworksReformReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteEndFireworksReformReq_CmdId[LanternRiteEndFireworksReformReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8277;
     */
    LanternRiteEndFireworksReformReq_CmdId[LanternRiteEndFireworksReformReq_CmdId["CMD_ID"] = 8277] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteEndFireworksReformReq_CmdId[LanternRiteEndFireworksReformReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteEndFireworksReformReq_CmdId[LanternRiteEndFireworksReformReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteEndFireworksReformReq_CmdId[LanternRiteEndFireworksReformReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(LanternRiteEndFireworksReformReq_CmdId = exports.LanternRiteEndFireworksReformReq_CmdId || (exports.LanternRiteEndFireworksReformReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LanternRiteEndFireworksReformRsp.CmdId
 */
var LanternRiteEndFireworksReformRsp_CmdId;
(function (LanternRiteEndFireworksReformRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteEndFireworksReformRsp_CmdId[LanternRiteEndFireworksReformRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8933;
     */
    LanternRiteEndFireworksReformRsp_CmdId[LanternRiteEndFireworksReformRsp_CmdId["CMD_ID"] = 8933] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LanternRiteEndFireworksReformRsp_CmdId[LanternRiteEndFireworksReformRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LanternRiteEndFireworksReformRsp_CmdId[LanternRiteEndFireworksReformRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LanternRiteEndFireworksReformRsp_CmdId = exports.LanternRiteEndFireworksReformRsp_CmdId || (exports.LanternRiteEndFireworksReformRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.UpdateSalvageBundleMarkReq.CmdId
 */
var UpdateSalvageBundleMarkReq_CmdId;
(function (UpdateSalvageBundleMarkReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpdateSalvageBundleMarkReq_CmdId[UpdateSalvageBundleMarkReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8967;
     */
    UpdateSalvageBundleMarkReq_CmdId[UpdateSalvageBundleMarkReq_CmdId["CMD_ID"] = 8967] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpdateSalvageBundleMarkReq_CmdId[UpdateSalvageBundleMarkReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpdateSalvageBundleMarkReq_CmdId[UpdateSalvageBundleMarkReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpdateSalvageBundleMarkReq_CmdId[UpdateSalvageBundleMarkReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(UpdateSalvageBundleMarkReq_CmdId = exports.UpdateSalvageBundleMarkReq_CmdId || (exports.UpdateSalvageBundleMarkReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.UpdateSalvageBundleMarkRsp.CmdId
 */
var UpdateSalvageBundleMarkRsp_CmdId;
(function (UpdateSalvageBundleMarkRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpdateSalvageBundleMarkRsp_CmdId[UpdateSalvageBundleMarkRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8459;
     */
    UpdateSalvageBundleMarkRsp_CmdId[UpdateSalvageBundleMarkRsp_CmdId["CMD_ID"] = 8459] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    UpdateSalvageBundleMarkRsp_CmdId[UpdateSalvageBundleMarkRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    UpdateSalvageBundleMarkRsp_CmdId[UpdateSalvageBundleMarkRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(UpdateSalvageBundleMarkRsp_CmdId = exports.UpdateSalvageBundleMarkRsp_CmdId || (exports.UpdateSalvageBundleMarkRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify.CmdId
 */
var MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId;
(function (MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId[MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8825;
     */
    MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId[MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId["CMD_ID"] = 8825] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId[MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId[MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId = exports.MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId || (exports.MichiaeMatsuriDarkPressureLevelUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriInteractStatueReq.CmdId
 */
var MichiaeMatsuriInteractStatueReq_CmdId;
(function (MichiaeMatsuriInteractStatueReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriInteractStatueReq_CmdId[MichiaeMatsuriInteractStatueReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8718;
     */
    MichiaeMatsuriInteractStatueReq_CmdId[MichiaeMatsuriInteractStatueReq_CmdId["CMD_ID"] = 8718] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriInteractStatueReq_CmdId[MichiaeMatsuriInteractStatueReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriInteractStatueReq_CmdId[MichiaeMatsuriInteractStatueReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriInteractStatueReq_CmdId[MichiaeMatsuriInteractStatueReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MichiaeMatsuriInteractStatueReq_CmdId = exports.MichiaeMatsuriInteractStatueReq_CmdId || (exports.MichiaeMatsuriInteractStatueReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriInteractStatueRsp.CmdId
 */
var MichiaeMatsuriInteractStatueRsp_CmdId;
(function (MichiaeMatsuriInteractStatueRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriInteractStatueRsp_CmdId[MichiaeMatsuriInteractStatueRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8449;
     */
    MichiaeMatsuriInteractStatueRsp_CmdId[MichiaeMatsuriInteractStatueRsp_CmdId["CMD_ID"] = 8449] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriInteractStatueRsp_CmdId[MichiaeMatsuriInteractStatueRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriInteractStatueRsp_CmdId[MichiaeMatsuriInteractStatueRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriInteractStatueRsp_CmdId = exports.MichiaeMatsuriInteractStatueRsp_CmdId || (exports.MichiaeMatsuriInteractStatueRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq.CmdId
 */
var MichiaeMatsuriUnlockCrystalSkillReq_CmdId;
(function (MichiaeMatsuriUnlockCrystalSkillReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriUnlockCrystalSkillReq_CmdId[MichiaeMatsuriUnlockCrystalSkillReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8345;
     */
    MichiaeMatsuriUnlockCrystalSkillReq_CmdId[MichiaeMatsuriUnlockCrystalSkillReq_CmdId["CMD_ID"] = 8345] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriUnlockCrystalSkillReq_CmdId[MichiaeMatsuriUnlockCrystalSkillReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriUnlockCrystalSkillReq_CmdId[MichiaeMatsuriUnlockCrystalSkillReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriUnlockCrystalSkillReq_CmdId[MichiaeMatsuriUnlockCrystalSkillReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MichiaeMatsuriUnlockCrystalSkillReq_CmdId = exports.MichiaeMatsuriUnlockCrystalSkillReq_CmdId || (exports.MichiaeMatsuriUnlockCrystalSkillReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp.CmdId
 */
var MichiaeMatsuriUnlockCrystalSkillRsp_CmdId;
(function (MichiaeMatsuriUnlockCrystalSkillRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriUnlockCrystalSkillRsp_CmdId[MichiaeMatsuriUnlockCrystalSkillRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8588;
     */
    MichiaeMatsuriUnlockCrystalSkillRsp_CmdId[MichiaeMatsuriUnlockCrystalSkillRsp_CmdId["CMD_ID"] = 8588] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriUnlockCrystalSkillRsp_CmdId[MichiaeMatsuriUnlockCrystalSkillRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriUnlockCrystalSkillRsp_CmdId[MichiaeMatsuriUnlockCrystalSkillRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriUnlockCrystalSkillRsp_CmdId = exports.MichiaeMatsuriUnlockCrystalSkillRsp_CmdId || (exports.MichiaeMatsuriUnlockCrystalSkillRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartBossChallengeReq.CmdId
 */
var MichiaeMatsuriStartBossChallengeReq_CmdId;
(function (MichiaeMatsuriStartBossChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartBossChallengeReq_CmdId[MichiaeMatsuriStartBossChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8703;
     */
    MichiaeMatsuriStartBossChallengeReq_CmdId[MichiaeMatsuriStartBossChallengeReq_CmdId["CMD_ID"] = 8703] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartBossChallengeReq_CmdId[MichiaeMatsuriStartBossChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartBossChallengeReq_CmdId[MichiaeMatsuriStartBossChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartBossChallengeReq_CmdId[MichiaeMatsuriStartBossChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MichiaeMatsuriStartBossChallengeReq_CmdId = exports.MichiaeMatsuriStartBossChallengeReq_CmdId || (exports.MichiaeMatsuriStartBossChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartBossChallengeRsp.CmdId
 */
var MichiaeMatsuriStartBossChallengeRsp_CmdId;
(function (MichiaeMatsuriStartBossChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartBossChallengeRsp_CmdId[MichiaeMatsuriStartBossChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8426;
     */
    MichiaeMatsuriStartBossChallengeRsp_CmdId[MichiaeMatsuriStartBossChallengeRsp_CmdId["CMD_ID"] = 8426] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartBossChallengeRsp_CmdId[MichiaeMatsuriStartBossChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartBossChallengeRsp_CmdId[MichiaeMatsuriStartBossChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriStartBossChallengeRsp_CmdId = exports.MichiaeMatsuriStartBossChallengeRsp_CmdId || (exports.MichiaeMatsuriStartBossChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartDarkChallengeReq.CmdId
 */
var MichiaeMatsuriStartDarkChallengeReq_CmdId;
(function (MichiaeMatsuriStartDarkChallengeReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartDarkChallengeReq_CmdId[MichiaeMatsuriStartDarkChallengeReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8054;
     */
    MichiaeMatsuriStartDarkChallengeReq_CmdId[MichiaeMatsuriStartDarkChallengeReq_CmdId["CMD_ID"] = 8054] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartDarkChallengeReq_CmdId[MichiaeMatsuriStartDarkChallengeReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartDarkChallengeReq_CmdId[MichiaeMatsuriStartDarkChallengeReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartDarkChallengeReq_CmdId[MichiaeMatsuriStartDarkChallengeReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MichiaeMatsuriStartDarkChallengeReq_CmdId = exports.MichiaeMatsuriStartDarkChallengeReq_CmdId || (exports.MichiaeMatsuriStartDarkChallengeReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp.CmdId
 */
var MichiaeMatsuriStartDarkChallengeRsp_CmdId;
(function (MichiaeMatsuriStartDarkChallengeRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartDarkChallengeRsp_CmdId[MichiaeMatsuriStartDarkChallengeRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8791;
     */
    MichiaeMatsuriStartDarkChallengeRsp_CmdId[MichiaeMatsuriStartDarkChallengeRsp_CmdId["CMD_ID"] = 8791] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriStartDarkChallengeRsp_CmdId[MichiaeMatsuriStartDarkChallengeRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriStartDarkChallengeRsp_CmdId[MichiaeMatsuriStartDarkChallengeRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriStartDarkChallengeRsp_CmdId = exports.MichiaeMatsuriStartDarkChallengeRsp_CmdId || (exports.MichiaeMatsuriStartDarkChallengeRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify.CmdId
 */
var MichiaeMatsuriRemoveChestMarkNotify_CmdId;
(function (MichiaeMatsuriRemoveChestMarkNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriRemoveChestMarkNotify_CmdId[MichiaeMatsuriRemoveChestMarkNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8726;
     */
    MichiaeMatsuriRemoveChestMarkNotify_CmdId[MichiaeMatsuriRemoveChestMarkNotify_CmdId["CMD_ID"] = 8726] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriRemoveChestMarkNotify_CmdId[MichiaeMatsuriRemoveChestMarkNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriRemoveChestMarkNotify_CmdId[MichiaeMatsuriRemoveChestMarkNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriRemoveChestMarkNotify_CmdId = exports.MichiaeMatsuriRemoveChestMarkNotify_CmdId || (exports.MichiaeMatsuriRemoveChestMarkNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify.CmdId
 */
var MichiaeMatsuriRemoveChallengeMarkNotify_CmdId;
(function (MichiaeMatsuriRemoveChallengeMarkNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriRemoveChallengeMarkNotify_CmdId[MichiaeMatsuriRemoveChallengeMarkNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8072;
     */
    MichiaeMatsuriRemoveChallengeMarkNotify_CmdId[MichiaeMatsuriRemoveChallengeMarkNotify_CmdId["CMD_ID"] = 8072] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriRemoveChallengeMarkNotify_CmdId[MichiaeMatsuriRemoveChallengeMarkNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriRemoveChallengeMarkNotify_CmdId[MichiaeMatsuriRemoveChallengeMarkNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriRemoveChallengeMarkNotify_CmdId = exports.MichiaeMatsuriRemoveChallengeMarkNotify_CmdId || (exports.MichiaeMatsuriRemoveChallengeMarkNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify.CmdId
 */
var MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId;
(function (MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId[MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8523;
     */
    MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId[MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId["CMD_ID"] = 8523] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId[MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId[MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId = exports.MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId || (exports.MichiaeMatsuriGainCrystalExpUpdateNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCompleteOrderReq.CmdId
 */
var BartenderCompleteOrderReq_CmdId;
(function (BartenderCompleteOrderReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCompleteOrderReq_CmdId[BartenderCompleteOrderReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8414;
     */
    BartenderCompleteOrderReq_CmdId[BartenderCompleteOrderReq_CmdId["CMD_ID"] = 8414] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCompleteOrderReq_CmdId[BartenderCompleteOrderReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCompleteOrderReq_CmdId[BartenderCompleteOrderReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCompleteOrderReq_CmdId[BartenderCompleteOrderReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderCompleteOrderReq_CmdId = exports.BartenderCompleteOrderReq_CmdId || (exports.BartenderCompleteOrderReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCompleteOrderRsp.CmdId
 */
var BartenderCompleteOrderRsp_CmdId;
(function (BartenderCompleteOrderRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCompleteOrderRsp_CmdId[BartenderCompleteOrderRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8125;
     */
    BartenderCompleteOrderRsp_CmdId[BartenderCompleteOrderRsp_CmdId["CMD_ID"] = 8125] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCompleteOrderRsp_CmdId[BartenderCompleteOrderRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCompleteOrderRsp_CmdId[BartenderCompleteOrderRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderCompleteOrderRsp_CmdId = exports.BartenderCompleteOrderRsp_CmdId || (exports.BartenderCompleteOrderRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelOrderReq.CmdId
 */
var BartenderCancelOrderReq_CmdId;
(function (BartenderCancelOrderReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelOrderReq_CmdId[BartenderCancelOrderReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8442;
     */
    BartenderCancelOrderReq_CmdId[BartenderCancelOrderReq_CmdId["CMD_ID"] = 8442] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelOrderReq_CmdId[BartenderCancelOrderReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelOrderReq_CmdId[BartenderCancelOrderReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelOrderReq_CmdId[BartenderCancelOrderReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderCancelOrderReq_CmdId = exports.BartenderCancelOrderReq_CmdId || (exports.BartenderCancelOrderReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelOrderRsp.CmdId
 */
var BartenderCancelOrderRsp_CmdId;
(function (BartenderCancelOrderRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelOrderRsp_CmdId[BartenderCancelOrderRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8837;
     */
    BartenderCancelOrderRsp_CmdId[BartenderCancelOrderRsp_CmdId["CMD_ID"] = 8837] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelOrderRsp_CmdId[BartenderCancelOrderRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelOrderRsp_CmdId[BartenderCancelOrderRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderCancelOrderRsp_CmdId = exports.BartenderCancelOrderRsp_CmdId || (exports.BartenderCancelOrderRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderGetFormulaReq.CmdId
 */
var BartenderGetFormulaReq_CmdId;
(function (BartenderGetFormulaReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderGetFormulaReq_CmdId[BartenderGetFormulaReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8462;
     */
    BartenderGetFormulaReq_CmdId[BartenderGetFormulaReq_CmdId["CMD_ID"] = 8462] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderGetFormulaReq_CmdId[BartenderGetFormulaReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderGetFormulaReq_CmdId[BartenderGetFormulaReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderGetFormulaReq_CmdId[BartenderGetFormulaReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderGetFormulaReq_CmdId = exports.BartenderGetFormulaReq_CmdId || (exports.BartenderGetFormulaReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderGetFormulaRsp.CmdId
 */
var BartenderGetFormulaRsp_CmdId;
(function (BartenderGetFormulaRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderGetFormulaRsp_CmdId[BartenderGetFormulaRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8842;
     */
    BartenderGetFormulaRsp_CmdId[BartenderGetFormulaRsp_CmdId["CMD_ID"] = 8842] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderGetFormulaRsp_CmdId[BartenderGetFormulaRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderGetFormulaRsp_CmdId[BartenderGetFormulaRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderGetFormulaRsp_CmdId = exports.BartenderGetFormulaRsp_CmdId || (exports.BartenderGetFormulaRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderStartLevelReq.CmdId
 */
var BartenderStartLevelReq_CmdId;
(function (BartenderStartLevelReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderStartLevelReq_CmdId[BartenderStartLevelReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8507;
     */
    BartenderStartLevelReq_CmdId[BartenderStartLevelReq_CmdId["CMD_ID"] = 8507] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderStartLevelReq_CmdId[BartenderStartLevelReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderStartLevelReq_CmdId[BartenderStartLevelReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderStartLevelReq_CmdId[BartenderStartLevelReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderStartLevelReq_CmdId = exports.BartenderStartLevelReq_CmdId || (exports.BartenderStartLevelReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderStartLevelRsp.CmdId
 */
var BartenderStartLevelRsp_CmdId;
(function (BartenderStartLevelRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderStartLevelRsp_CmdId[BartenderStartLevelRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8402;
     */
    BartenderStartLevelRsp_CmdId[BartenderStartLevelRsp_CmdId["CMD_ID"] = 8402] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderStartLevelRsp_CmdId[BartenderStartLevelRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderStartLevelRsp_CmdId[BartenderStartLevelRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderStartLevelRsp_CmdId = exports.BartenderStartLevelRsp_CmdId || (exports.BartenderStartLevelRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelLevelReq.CmdId
 */
var BartenderCancelLevelReq_CmdId;
(function (BartenderCancelLevelReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelLevelReq_CmdId[BartenderCancelLevelReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8771;
     */
    BartenderCancelLevelReq_CmdId[BartenderCancelLevelReq_CmdId["CMD_ID"] = 8771] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelLevelReq_CmdId[BartenderCancelLevelReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelLevelReq_CmdId[BartenderCancelLevelReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelLevelReq_CmdId[BartenderCancelLevelReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderCancelLevelReq_CmdId = exports.BartenderCancelLevelReq_CmdId || (exports.BartenderCancelLevelReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderCancelLevelRsp.CmdId
 */
var BartenderCancelLevelRsp_CmdId;
(function (BartenderCancelLevelRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelLevelRsp_CmdId[BartenderCancelLevelRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8686;
     */
    BartenderCancelLevelRsp_CmdId[BartenderCancelLevelRsp_CmdId["CMD_ID"] = 8686] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderCancelLevelRsp_CmdId[BartenderCancelLevelRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderCancelLevelRsp_CmdId[BartenderCancelLevelRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderCancelLevelRsp_CmdId = exports.BartenderCancelLevelRsp_CmdId || (exports.BartenderCancelLevelRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderLevelProgressNotify.CmdId
 */
var BartenderLevelProgressNotify_CmdId;
(function (BartenderLevelProgressNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderLevelProgressNotify_CmdId[BartenderLevelProgressNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8756;
     */
    BartenderLevelProgressNotify_CmdId[BartenderLevelProgressNotify_CmdId["CMD_ID"] = 8756] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderLevelProgressNotify_CmdId[BartenderLevelProgressNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderLevelProgressNotify_CmdId[BartenderLevelProgressNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderLevelProgressNotify_CmdId[BartenderLevelProgressNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderLevelProgressNotify_CmdId = exports.BartenderLevelProgressNotify_CmdId || (exports.BartenderLevelProgressNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderFinishLevelReq.CmdId
 */
var BartenderFinishLevelReq_CmdId;
(function (BartenderFinishLevelReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderFinishLevelReq_CmdId[BartenderFinishLevelReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8227;
     */
    BartenderFinishLevelReq_CmdId[BartenderFinishLevelReq_CmdId["CMD_ID"] = 8227] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderFinishLevelReq_CmdId[BartenderFinishLevelReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderFinishLevelReq_CmdId[BartenderFinishLevelReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderFinishLevelReq_CmdId[BartenderFinishLevelReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(BartenderFinishLevelReq_CmdId = exports.BartenderFinishLevelReq_CmdId || (exports.BartenderFinishLevelReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.BartenderFinishLevelRsp.CmdId
 */
var BartenderFinishLevelRsp_CmdId;
(function (BartenderFinishLevelRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderFinishLevelRsp_CmdId[BartenderFinishLevelRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8093;
     */
    BartenderFinishLevelRsp_CmdId[BartenderFinishLevelRsp_CmdId["CMD_ID"] = 8093] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    BartenderFinishLevelRsp_CmdId[BartenderFinishLevelRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    BartenderFinishLevelRsp_CmdId[BartenderFinishLevelRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(BartenderFinishLevelRsp_CmdId = exports.BartenderFinishLevelRsp_CmdId || (exports.BartenderFinishLevelRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkEnterDungeonReq.CmdId
 */
var CrystalLinkEnterDungeonReq_CmdId;
(function (CrystalLinkEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkEnterDungeonReq_CmdId[CrystalLinkEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8325;
     */
    CrystalLinkEnterDungeonReq_CmdId[CrystalLinkEnterDungeonReq_CmdId["CMD_ID"] = 8325] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkEnterDungeonReq_CmdId[CrystalLinkEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkEnterDungeonReq_CmdId[CrystalLinkEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkEnterDungeonReq_CmdId[CrystalLinkEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(CrystalLinkEnterDungeonReq_CmdId = exports.CrystalLinkEnterDungeonReq_CmdId || (exports.CrystalLinkEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkEnterDungeonRsp.CmdId
 */
var CrystalLinkEnterDungeonRsp_CmdId;
(function (CrystalLinkEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkEnterDungeonRsp_CmdId[CrystalLinkEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8147;
     */
    CrystalLinkEnterDungeonRsp_CmdId[CrystalLinkEnterDungeonRsp_CmdId["CMD_ID"] = 8147] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkEnterDungeonRsp_CmdId[CrystalLinkEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkEnterDungeonRsp_CmdId[CrystalLinkEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(CrystalLinkEnterDungeonRsp_CmdId = exports.CrystalLinkEnterDungeonRsp_CmdId || (exports.CrystalLinkEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkDungeonInfoNotify.CmdId
 */
var CrystalLinkDungeonInfoNotify_CmdId;
(function (CrystalLinkDungeonInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkDungeonInfoNotify_CmdId[CrystalLinkDungeonInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8858;
     */
    CrystalLinkDungeonInfoNotify_CmdId[CrystalLinkDungeonInfoNotify_CmdId["CMD_ID"] = 8858] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkDungeonInfoNotify_CmdId[CrystalLinkDungeonInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkDungeonInfoNotify_CmdId[CrystalLinkDungeonInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(CrystalLinkDungeonInfoNotify_CmdId = exports.CrystalLinkDungeonInfoNotify_CmdId || (exports.CrystalLinkDungeonInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkRestartDungeonReq.CmdId
 */
var CrystalLinkRestartDungeonReq_CmdId;
(function (CrystalLinkRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkRestartDungeonReq_CmdId[CrystalLinkRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8022;
     */
    CrystalLinkRestartDungeonReq_CmdId[CrystalLinkRestartDungeonReq_CmdId["CMD_ID"] = 8022] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkRestartDungeonReq_CmdId[CrystalLinkRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkRestartDungeonReq_CmdId[CrystalLinkRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkRestartDungeonReq_CmdId[CrystalLinkRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(CrystalLinkRestartDungeonReq_CmdId = exports.CrystalLinkRestartDungeonReq_CmdId || (exports.CrystalLinkRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CrystalLinkRestartDungeonRsp.CmdId
 */
var CrystalLinkRestartDungeonRsp_CmdId;
(function (CrystalLinkRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkRestartDungeonRsp_CmdId[CrystalLinkRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8119;
     */
    CrystalLinkRestartDungeonRsp_CmdId[CrystalLinkRestartDungeonRsp_CmdId["CMD_ID"] = 8119] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CrystalLinkRestartDungeonRsp_CmdId[CrystalLinkRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CrystalLinkRestartDungeonRsp_CmdId[CrystalLinkRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(CrystalLinkRestartDungeonRsp_CmdId = exports.CrystalLinkRestartDungeonRsp_CmdId || (exports.CrystalLinkRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.QuickOpenActivityReq.CmdId
 */
var QuickOpenActivityReq_CmdId;
(function (QuickOpenActivityReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    QuickOpenActivityReq_CmdId[QuickOpenActivityReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8178;
     */
    QuickOpenActivityReq_CmdId[QuickOpenActivityReq_CmdId["CMD_ID"] = 8178] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    QuickOpenActivityReq_CmdId[QuickOpenActivityReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    QuickOpenActivityReq_CmdId[QuickOpenActivityReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    QuickOpenActivityReq_CmdId[QuickOpenActivityReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(QuickOpenActivityReq_CmdId = exports.QuickOpenActivityReq_CmdId || (exports.QuickOpenActivityReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.QuickOpenActivityRsp.CmdId
 */
var QuickOpenActivityRsp_CmdId;
(function (QuickOpenActivityRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    QuickOpenActivityRsp_CmdId[QuickOpenActivityRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8882;
     */
    QuickOpenActivityRsp_CmdId[QuickOpenActivityRsp_CmdId["CMD_ID"] = 8882] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    QuickOpenActivityRsp_CmdId[QuickOpenActivityRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    QuickOpenActivityRsp_CmdId[QuickOpenActivityRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(QuickOpenActivityRsp_CmdId = exports.QuickOpenActivityRsp_CmdId || (exports.QuickOpenActivityRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriEditFlowerCombinationReq.CmdId
 */
var IrodoriEditFlowerCombinationReq_CmdId;
(function (IrodoriEditFlowerCombinationReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriEditFlowerCombinationReq_CmdId[IrodoriEditFlowerCombinationReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8608;
     */
    IrodoriEditFlowerCombinationReq_CmdId[IrodoriEditFlowerCombinationReq_CmdId["CMD_ID"] = 8608] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriEditFlowerCombinationReq_CmdId[IrodoriEditFlowerCombinationReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriEditFlowerCombinationReq_CmdId[IrodoriEditFlowerCombinationReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriEditFlowerCombinationReq_CmdId[IrodoriEditFlowerCombinationReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriEditFlowerCombinationReq_CmdId = exports.IrodoriEditFlowerCombinationReq_CmdId || (exports.IrodoriEditFlowerCombinationReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriEditFlowerCombinationRsp.CmdId
 */
var IrodoriEditFlowerCombinationRsp_CmdId;
(function (IrodoriEditFlowerCombinationRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriEditFlowerCombinationRsp_CmdId[IrodoriEditFlowerCombinationRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8833;
     */
    IrodoriEditFlowerCombinationRsp_CmdId[IrodoriEditFlowerCombinationRsp_CmdId["CMD_ID"] = 8833] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriEditFlowerCombinationRsp_CmdId[IrodoriEditFlowerCombinationRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriEditFlowerCombinationRsp_CmdId[IrodoriEditFlowerCombinationRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriEditFlowerCombinationRsp_CmdId = exports.IrodoriEditFlowerCombinationRsp_CmdId || (exports.IrodoriEditFlowerCombinationRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriScanEntityReq.CmdId
 */
var IrodoriScanEntityReq_CmdId;
(function (IrodoriScanEntityReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriScanEntityReq_CmdId[IrodoriScanEntityReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8767;
     */
    IrodoriScanEntityReq_CmdId[IrodoriScanEntityReq_CmdId["CMD_ID"] = 8767] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriScanEntityReq_CmdId[IrodoriScanEntityReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriScanEntityReq_CmdId[IrodoriScanEntityReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriScanEntityReq_CmdId[IrodoriScanEntityReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriScanEntityReq_CmdId = exports.IrodoriScanEntityReq_CmdId || (exports.IrodoriScanEntityReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriScanEntityRsp.CmdId
 */
var IrodoriScanEntityRsp_CmdId;
(function (IrodoriScanEntityRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriScanEntityRsp_CmdId[IrodoriScanEntityRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8026;
     */
    IrodoriScanEntityRsp_CmdId[IrodoriScanEntityRsp_CmdId["CMD_ID"] = 8026] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriScanEntityRsp_CmdId[IrodoriScanEntityRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriScanEntityRsp_CmdId[IrodoriScanEntityRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriScanEntityRsp_CmdId = exports.IrodoriScanEntityRsp_CmdId || (exports.IrodoriScanEntityRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriFillPoetryReq.CmdId
 */
var IrodoriFillPoetryReq_CmdId;
(function (IrodoriFillPoetryReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriFillPoetryReq_CmdId[IrodoriFillPoetryReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8129;
     */
    IrodoriFillPoetryReq_CmdId[IrodoriFillPoetryReq_CmdId["CMD_ID"] = 8129] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriFillPoetryReq_CmdId[IrodoriFillPoetryReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriFillPoetryReq_CmdId[IrodoriFillPoetryReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriFillPoetryReq_CmdId[IrodoriFillPoetryReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriFillPoetryReq_CmdId = exports.IrodoriFillPoetryReq_CmdId || (exports.IrodoriFillPoetryReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriFillPoetryRsp.CmdId
 */
var IrodoriFillPoetryRsp_CmdId;
(function (IrodoriFillPoetryRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriFillPoetryRsp_CmdId[IrodoriFillPoetryRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8880;
     */
    IrodoriFillPoetryRsp_CmdId[IrodoriFillPoetryRsp_CmdId["CMD_ID"] = 8880] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriFillPoetryRsp_CmdId[IrodoriFillPoetryRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriFillPoetryRsp_CmdId[IrodoriFillPoetryRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriFillPoetryRsp_CmdId = exports.IrodoriFillPoetryRsp_CmdId || (exports.IrodoriFillPoetryRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessEquipCardReq.CmdId
 */
var IrodoriChessEquipCardReq_CmdId;
(function (IrodoriChessEquipCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessEquipCardReq_CmdId[IrodoriChessEquipCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8561;
     */
    IrodoriChessEquipCardReq_CmdId[IrodoriChessEquipCardReq_CmdId["CMD_ID"] = 8561] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessEquipCardReq_CmdId[IrodoriChessEquipCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessEquipCardReq_CmdId[IrodoriChessEquipCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessEquipCardReq_CmdId[IrodoriChessEquipCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriChessEquipCardReq_CmdId = exports.IrodoriChessEquipCardReq_CmdId || (exports.IrodoriChessEquipCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessEquipCardRsp.CmdId
 */
var IrodoriChessEquipCardRsp_CmdId;
(function (IrodoriChessEquipCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessEquipCardRsp_CmdId[IrodoriChessEquipCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8308;
     */
    IrodoriChessEquipCardRsp_CmdId[IrodoriChessEquipCardRsp_CmdId["CMD_ID"] = 8308] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessEquipCardRsp_CmdId[IrodoriChessEquipCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessEquipCardRsp_CmdId[IrodoriChessEquipCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriChessEquipCardRsp_CmdId = exports.IrodoriChessEquipCardRsp_CmdId || (exports.IrodoriChessEquipCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessUnequipCardReq.CmdId
 */
var IrodoriChessUnequipCardReq_CmdId;
(function (IrodoriChessUnequipCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessUnequipCardReq_CmdId[IrodoriChessUnequipCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8057;
     */
    IrodoriChessUnequipCardReq_CmdId[IrodoriChessUnequipCardReq_CmdId["CMD_ID"] = 8057] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessUnequipCardReq_CmdId[IrodoriChessUnequipCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessUnequipCardReq_CmdId[IrodoriChessUnequipCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessUnequipCardReq_CmdId[IrodoriChessUnequipCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriChessUnequipCardReq_CmdId = exports.IrodoriChessUnequipCardReq_CmdId || (exports.IrodoriChessUnequipCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriChessUnequipCardRsp.CmdId
 */
var IrodoriChessUnequipCardRsp_CmdId;
(function (IrodoriChessUnequipCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessUnequipCardRsp_CmdId[IrodoriChessUnequipCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8817;
     */
    IrodoriChessUnequipCardRsp_CmdId[IrodoriChessUnequipCardRsp_CmdId["CMD_ID"] = 8817] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriChessUnequipCardRsp_CmdId[IrodoriChessUnequipCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriChessUnequipCardRsp_CmdId[IrodoriChessUnequipCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriChessUnequipCardRsp_CmdId = exports.IrodoriChessUnequipCardRsp_CmdId || (exports.IrodoriChessUnequipCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterIrodoriChessDungeonReq.CmdId
 */
var EnterIrodoriChessDungeonReq_CmdId;
(function (EnterIrodoriChessDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterIrodoriChessDungeonReq_CmdId[EnterIrodoriChessDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8717;
     */
    EnterIrodoriChessDungeonReq_CmdId[EnterIrodoriChessDungeonReq_CmdId["CMD_ID"] = 8717] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterIrodoriChessDungeonReq_CmdId[EnterIrodoriChessDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterIrodoriChessDungeonReq_CmdId[EnterIrodoriChessDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterIrodoriChessDungeonReq_CmdId[EnterIrodoriChessDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterIrodoriChessDungeonReq_CmdId = exports.EnterIrodoriChessDungeonReq_CmdId || (exports.EnterIrodoriChessDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterIrodoriChessDungeonRsp.CmdId
 */
var EnterIrodoriChessDungeonRsp_CmdId;
(function (EnterIrodoriChessDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterIrodoriChessDungeonRsp_CmdId[EnterIrodoriChessDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8546;
     */
    EnterIrodoriChessDungeonRsp_CmdId[EnterIrodoriChessDungeonRsp_CmdId["CMD_ID"] = 8546] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterIrodoriChessDungeonRsp_CmdId[EnterIrodoriChessDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterIrodoriChessDungeonRsp_CmdId[EnterIrodoriChessDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterIrodoriChessDungeonRsp_CmdId = exports.EnterIrodoriChessDungeonRsp_CmdId || (exports.EnterIrodoriChessDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterStartGalleryReq.CmdId
 */
var IrodoriMasterStartGalleryReq_CmdId;
(function (IrodoriMasterStartGalleryReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterStartGalleryReq_CmdId[IrodoriMasterStartGalleryReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8165;
     */
    IrodoriMasterStartGalleryReq_CmdId[IrodoriMasterStartGalleryReq_CmdId["CMD_ID"] = 8165] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterStartGalleryReq_CmdId[IrodoriMasterStartGalleryReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterStartGalleryReq_CmdId[IrodoriMasterStartGalleryReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterStartGalleryReq_CmdId[IrodoriMasterStartGalleryReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriMasterStartGalleryReq_CmdId = exports.IrodoriMasterStartGalleryReq_CmdId || (exports.IrodoriMasterStartGalleryReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterStartGalleryRsp.CmdId
 */
var IrodoriMasterStartGalleryRsp_CmdId;
(function (IrodoriMasterStartGalleryRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterStartGalleryRsp_CmdId[IrodoriMasterStartGalleryRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8381;
     */
    IrodoriMasterStartGalleryRsp_CmdId[IrodoriMasterStartGalleryRsp_CmdId["CMD_ID"] = 8381] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterStartGalleryRsp_CmdId[IrodoriMasterStartGalleryRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterStartGalleryRsp_CmdId[IrodoriMasterStartGalleryRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IrodoriMasterStartGalleryRsp_CmdId = exports.IrodoriMasterStartGalleryRsp_CmdId || (exports.IrodoriMasterStartGalleryRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterGalleryCgEndNotify.CmdId
 */
var IrodoriMasterGalleryCgEndNotify_CmdId;
(function (IrodoriMasterGalleryCgEndNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterGalleryCgEndNotify_CmdId[IrodoriMasterGalleryCgEndNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8061;
     */
    IrodoriMasterGalleryCgEndNotify_CmdId[IrodoriMasterGalleryCgEndNotify_CmdId["CMD_ID"] = 8061] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterGalleryCgEndNotify_CmdId[IrodoriMasterGalleryCgEndNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterGalleryCgEndNotify_CmdId[IrodoriMasterGalleryCgEndNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterGalleryCgEndNotify_CmdId[IrodoriMasterGalleryCgEndNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriMasterGalleryCgEndNotify_CmdId = exports.IrodoriMasterGalleryCgEndNotify_CmdId || (exports.IrodoriMasterGalleryCgEndNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IrodoriMasterGallerySettleNotify.CmdId
 */
var IrodoriMasterGallerySettleNotify_CmdId;
(function (IrodoriMasterGallerySettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterGallerySettleNotify_CmdId[IrodoriMasterGallerySettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8340;
     */
    IrodoriMasterGallerySettleNotify_CmdId[IrodoriMasterGallerySettleNotify_CmdId["CMD_ID"] = 8340] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IrodoriMasterGallerySettleNotify_CmdId[IrodoriMasterGallerySettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterGallerySettleNotify_CmdId[IrodoriMasterGallerySettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IrodoriMasterGallerySettleNotify_CmdId[IrodoriMasterGallerySettleNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(IrodoriMasterGallerySettleNotify_CmdId = exports.IrodoriMasterGallerySettleNotify_CmdId || (exports.IrodoriMasterGallerySettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityFinishReq.CmdId
 */
var PhotoActivityFinishReq_CmdId;
(function (PhotoActivityFinishReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityFinishReq_CmdId[PhotoActivityFinishReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8921;
     */
    PhotoActivityFinishReq_CmdId[PhotoActivityFinishReq_CmdId["CMD_ID"] = 8921] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityFinishReq_CmdId[PhotoActivityFinishReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityFinishReq_CmdId[PhotoActivityFinishReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityFinishReq_CmdId[PhotoActivityFinishReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PhotoActivityFinishReq_CmdId = exports.PhotoActivityFinishReq_CmdId || (exports.PhotoActivityFinishReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityFinishRsp.CmdId
 */
var PhotoActivityFinishRsp_CmdId;
(function (PhotoActivityFinishRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityFinishRsp_CmdId[PhotoActivityFinishRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8854;
     */
    PhotoActivityFinishRsp_CmdId[PhotoActivityFinishRsp_CmdId["CMD_ID"] = 8854] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityFinishRsp_CmdId[PhotoActivityFinishRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityFinishRsp_CmdId[PhotoActivityFinishRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PhotoActivityFinishRsp_CmdId = exports.PhotoActivityFinishRsp_CmdId || (exports.PhotoActivityFinishRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityClientViewReq.CmdId
 */
var PhotoActivityClientViewReq_CmdId;
(function (PhotoActivityClientViewReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityClientViewReq_CmdId[PhotoActivityClientViewReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8709;
     */
    PhotoActivityClientViewReq_CmdId[PhotoActivityClientViewReq_CmdId["CMD_ID"] = 8709] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityClientViewReq_CmdId[PhotoActivityClientViewReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityClientViewReq_CmdId[PhotoActivityClientViewReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityClientViewReq_CmdId[PhotoActivityClientViewReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(PhotoActivityClientViewReq_CmdId = exports.PhotoActivityClientViewReq_CmdId || (exports.PhotoActivityClientViewReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.PhotoActivityClientViewRsp.CmdId
 */
var PhotoActivityClientViewRsp_CmdId;
(function (PhotoActivityClientViewRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityClientViewRsp_CmdId[PhotoActivityClientViewRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8983;
     */
    PhotoActivityClientViewRsp_CmdId[PhotoActivityClientViewRsp_CmdId["CMD_ID"] = 8983] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    PhotoActivityClientViewRsp_CmdId[PhotoActivityClientViewRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    PhotoActivityClientViewRsp_CmdId[PhotoActivityClientViewRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(PhotoActivityClientViewRsp_CmdId = exports.PhotoActivityClientViewRsp_CmdId || (exports.PhotoActivityClientViewRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityFinishMakeSpiceReq.CmdId
 */
var SpiceActivityFinishMakeSpiceReq_CmdId;
(function (SpiceActivityFinishMakeSpiceReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityFinishMakeSpiceReq_CmdId[SpiceActivityFinishMakeSpiceReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8096;
     */
    SpiceActivityFinishMakeSpiceReq_CmdId[SpiceActivityFinishMakeSpiceReq_CmdId["CMD_ID"] = 8096] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityFinishMakeSpiceReq_CmdId[SpiceActivityFinishMakeSpiceReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityFinishMakeSpiceReq_CmdId[SpiceActivityFinishMakeSpiceReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityFinishMakeSpiceReq_CmdId[SpiceActivityFinishMakeSpiceReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SpiceActivityFinishMakeSpiceReq_CmdId = exports.SpiceActivityFinishMakeSpiceReq_CmdId || (exports.SpiceActivityFinishMakeSpiceReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityFinishMakeSpiceRsp.CmdId
 */
var SpiceActivityFinishMakeSpiceRsp_CmdId;
(function (SpiceActivityFinishMakeSpiceRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityFinishMakeSpiceRsp_CmdId[SpiceActivityFinishMakeSpiceRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8481;
     */
    SpiceActivityFinishMakeSpiceRsp_CmdId[SpiceActivityFinishMakeSpiceRsp_CmdId["CMD_ID"] = 8481] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityFinishMakeSpiceRsp_CmdId[SpiceActivityFinishMakeSpiceRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityFinishMakeSpiceRsp_CmdId[SpiceActivityFinishMakeSpiceRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SpiceActivityFinishMakeSpiceRsp_CmdId = exports.SpiceActivityFinishMakeSpiceRsp_CmdId || (exports.SpiceActivityFinishMakeSpiceRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityProcessFoodReq.CmdId
 */
var SpiceActivityProcessFoodReq_CmdId;
(function (SpiceActivityProcessFoodReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityProcessFoodReq_CmdId[SpiceActivityProcessFoodReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8216;
     */
    SpiceActivityProcessFoodReq_CmdId[SpiceActivityProcessFoodReq_CmdId["CMD_ID"] = 8216] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityProcessFoodReq_CmdId[SpiceActivityProcessFoodReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityProcessFoodReq_CmdId[SpiceActivityProcessFoodReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityProcessFoodReq_CmdId[SpiceActivityProcessFoodReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SpiceActivityProcessFoodReq_CmdId = exports.SpiceActivityProcessFoodReq_CmdId || (exports.SpiceActivityProcessFoodReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityProcessFoodRsp.CmdId
 */
var SpiceActivityProcessFoodRsp_CmdId;
(function (SpiceActivityProcessFoodRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityProcessFoodRsp_CmdId[SpiceActivityProcessFoodRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8772;
     */
    SpiceActivityProcessFoodRsp_CmdId[SpiceActivityProcessFoodRsp_CmdId["CMD_ID"] = 8772] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityProcessFoodRsp_CmdId[SpiceActivityProcessFoodRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityProcessFoodRsp_CmdId[SpiceActivityProcessFoodRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SpiceActivityProcessFoodRsp_CmdId = exports.SpiceActivityProcessFoodRsp_CmdId || (exports.SpiceActivityProcessFoodRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SpiceActivityGivingRecordNotify.CmdId
 */
var SpiceActivityGivingRecordNotify_CmdId;
(function (SpiceActivityGivingRecordNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityGivingRecordNotify_CmdId[SpiceActivityGivingRecordNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8407;
     */
    SpiceActivityGivingRecordNotify_CmdId[SpiceActivityGivingRecordNotify_CmdId["CMD_ID"] = 8407] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SpiceActivityGivingRecordNotify_CmdId[SpiceActivityGivingRecordNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SpiceActivityGivingRecordNotify_CmdId[SpiceActivityGivingRecordNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SpiceActivityGivingRecordNotify_CmdId = exports.SpiceActivityGivingRecordNotify_CmdId || (exports.SpiceActivityGivingRecordNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityPercentNotify.CmdId
 */
var GachaActivityPercentNotify_CmdId;
(function (GachaActivityPercentNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityPercentNotify_CmdId[GachaActivityPercentNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8450;
     */
    GachaActivityPercentNotify_CmdId[GachaActivityPercentNotify_CmdId["CMD_ID"] = 8450] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityPercentNotify_CmdId[GachaActivityPercentNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityPercentNotify_CmdId[GachaActivityPercentNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaActivityPercentNotify_CmdId = exports.GachaActivityPercentNotify_CmdId || (exports.GachaActivityPercentNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityUpdateElemNotify.CmdId
 */
var GachaActivityUpdateElemNotify_CmdId;
(function (GachaActivityUpdateElemNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityUpdateElemNotify_CmdId[GachaActivityUpdateElemNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8919;
     */
    GachaActivityUpdateElemNotify_CmdId[GachaActivityUpdateElemNotify_CmdId["CMD_ID"] = 8919] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityUpdateElemNotify_CmdId[GachaActivityUpdateElemNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityUpdateElemNotify_CmdId[GachaActivityUpdateElemNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityUpdateElemNotify_CmdId[GachaActivityUpdateElemNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaActivityUpdateElemNotify_CmdId = exports.GachaActivityUpdateElemNotify_CmdId || (exports.GachaActivityUpdateElemNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityCreateRobotReq.CmdId
 */
var GachaActivityCreateRobotReq_CmdId;
(function (GachaActivityCreateRobotReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityCreateRobotReq_CmdId[GachaActivityCreateRobotReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8614;
     */
    GachaActivityCreateRobotReq_CmdId[GachaActivityCreateRobotReq_CmdId["CMD_ID"] = 8614] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityCreateRobotReq_CmdId[GachaActivityCreateRobotReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityCreateRobotReq_CmdId[GachaActivityCreateRobotReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityCreateRobotReq_CmdId[GachaActivityCreateRobotReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaActivityCreateRobotReq_CmdId = exports.GachaActivityCreateRobotReq_CmdId || (exports.GachaActivityCreateRobotReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityCreateRobotRsp.CmdId
 */
var GachaActivityCreateRobotRsp_CmdId;
(function (GachaActivityCreateRobotRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityCreateRobotRsp_CmdId[GachaActivityCreateRobotRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8610;
     */
    GachaActivityCreateRobotRsp_CmdId[GachaActivityCreateRobotRsp_CmdId["CMD_ID"] = 8610] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityCreateRobotRsp_CmdId[GachaActivityCreateRobotRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityCreateRobotRsp_CmdId[GachaActivityCreateRobotRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaActivityCreateRobotRsp_CmdId = exports.GachaActivityCreateRobotRsp_CmdId || (exports.GachaActivityCreateRobotRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityTakeRewardReq.CmdId
 */
var GachaActivityTakeRewardReq_CmdId;
(function (GachaActivityTakeRewardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityTakeRewardReq_CmdId[GachaActivityTakeRewardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8930;
     */
    GachaActivityTakeRewardReq_CmdId[GachaActivityTakeRewardReq_CmdId["CMD_ID"] = 8930] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityTakeRewardReq_CmdId[GachaActivityTakeRewardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityTakeRewardReq_CmdId[GachaActivityTakeRewardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityTakeRewardReq_CmdId[GachaActivityTakeRewardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaActivityTakeRewardReq_CmdId = exports.GachaActivityTakeRewardReq_CmdId || (exports.GachaActivityTakeRewardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityTakeRewardRsp.CmdId
 */
var GachaActivityTakeRewardRsp_CmdId;
(function (GachaActivityTakeRewardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityTakeRewardRsp_CmdId[GachaActivityTakeRewardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8768;
     */
    GachaActivityTakeRewardRsp_CmdId[GachaActivityTakeRewardRsp_CmdId["CMD_ID"] = 8768] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityTakeRewardRsp_CmdId[GachaActivityTakeRewardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityTakeRewardRsp_CmdId[GachaActivityTakeRewardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaActivityTakeRewardRsp_CmdId = exports.GachaActivityTakeRewardRsp_CmdId || (exports.GachaActivityTakeRewardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityResetReq.CmdId
 */
var GachaActivityResetReq_CmdId;
(function (GachaActivityResetReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityResetReq_CmdId[GachaActivityResetReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8163;
     */
    GachaActivityResetReq_CmdId[GachaActivityResetReq_CmdId["CMD_ID"] = 8163] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityResetReq_CmdId[GachaActivityResetReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityResetReq_CmdId[GachaActivityResetReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityResetReq_CmdId[GachaActivityResetReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaActivityResetReq_CmdId = exports.GachaActivityResetReq_CmdId || (exports.GachaActivityResetReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityResetRsp.CmdId
 */
var GachaActivityResetRsp_CmdId;
(function (GachaActivityResetRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityResetRsp_CmdId[GachaActivityResetRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8240;
     */
    GachaActivityResetRsp_CmdId[GachaActivityResetRsp_CmdId["CMD_ID"] = 8240] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityResetRsp_CmdId[GachaActivityResetRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityResetRsp_CmdId[GachaActivityResetRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaActivityResetRsp_CmdId = exports.GachaActivityResetRsp_CmdId || (exports.GachaActivityResetRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityNextStageReq.CmdId
 */
var GachaActivityNextStageReq_CmdId;
(function (GachaActivityNextStageReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityNextStageReq_CmdId[GachaActivityNextStageReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8257;
     */
    GachaActivityNextStageReq_CmdId[GachaActivityNextStageReq_CmdId["CMD_ID"] = 8257] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityNextStageReq_CmdId[GachaActivityNextStageReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityNextStageReq_CmdId[GachaActivityNextStageReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityNextStageReq_CmdId[GachaActivityNextStageReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GachaActivityNextStageReq_CmdId = exports.GachaActivityNextStageReq_CmdId || (exports.GachaActivityNextStageReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GachaActivityNextStageRsp.CmdId
 */
var GachaActivityNextStageRsp_CmdId;
(function (GachaActivityNextStageRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityNextStageRsp_CmdId[GachaActivityNextStageRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8918;
     */
    GachaActivityNextStageRsp_CmdId[GachaActivityNextStageRsp_CmdId["CMD_ID"] = 8918] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GachaActivityNextStageRsp_CmdId[GachaActivityNextStageRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GachaActivityNextStageRsp_CmdId[GachaActivityNextStageRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GachaActivityNextStageRsp_CmdId = exports.GachaActivityNextStageRsp_CmdId || (exports.GachaActivityNextStageRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGiveFriendGiftReq.CmdId
 */
var ActivityGiveFriendGiftReq_CmdId;
(function (ActivityGiveFriendGiftReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGiveFriendGiftReq_CmdId[ActivityGiveFriendGiftReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8233;
     */
    ActivityGiveFriendGiftReq_CmdId[ActivityGiveFriendGiftReq_CmdId["CMD_ID"] = 8233] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGiveFriendGiftReq_CmdId[ActivityGiveFriendGiftReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGiveFriendGiftReq_CmdId[ActivityGiveFriendGiftReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGiveFriendGiftReq_CmdId[ActivityGiveFriendGiftReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityGiveFriendGiftReq_CmdId = exports.ActivityGiveFriendGiftReq_CmdId || (exports.ActivityGiveFriendGiftReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGiveFriendGiftRsp.CmdId
 */
var ActivityGiveFriendGiftRsp_CmdId;
(function (ActivityGiveFriendGiftRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGiveFriendGiftRsp_CmdId[ActivityGiveFriendGiftRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8696;
     */
    ActivityGiveFriendGiftRsp_CmdId[ActivityGiveFriendGiftRsp_CmdId["CMD_ID"] = 8696] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGiveFriendGiftRsp_CmdId[ActivityGiveFriendGiftRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGiveFriendGiftRsp_CmdId[ActivityGiveFriendGiftRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityGiveFriendGiftRsp_CmdId = exports.ActivityGiveFriendGiftRsp_CmdId || (exports.ActivityGiveFriendGiftRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetRecvGiftListReq.CmdId
 */
var ActivityGetRecvGiftListReq_CmdId;
(function (ActivityGetRecvGiftListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetRecvGiftListReq_CmdId[ActivityGetRecvGiftListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8725;
     */
    ActivityGetRecvGiftListReq_CmdId[ActivityGetRecvGiftListReq_CmdId["CMD_ID"] = 8725] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetRecvGiftListReq_CmdId[ActivityGetRecvGiftListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetRecvGiftListReq_CmdId[ActivityGetRecvGiftListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetRecvGiftListReq_CmdId[ActivityGetRecvGiftListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityGetRecvGiftListReq_CmdId = exports.ActivityGetRecvGiftListReq_CmdId || (exports.ActivityGetRecvGiftListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetRecvGiftListRsp.CmdId
 */
var ActivityGetRecvGiftListRsp_CmdId;
(function (ActivityGetRecvGiftListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetRecvGiftListRsp_CmdId[ActivityGetRecvGiftListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8120;
     */
    ActivityGetRecvGiftListRsp_CmdId[ActivityGetRecvGiftListRsp_CmdId["CMD_ID"] = 8120] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetRecvGiftListRsp_CmdId[ActivityGetRecvGiftListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetRecvGiftListRsp_CmdId[ActivityGetRecvGiftListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityGetRecvGiftListRsp_CmdId = exports.ActivityGetRecvGiftListRsp_CmdId || (exports.ActivityGetRecvGiftListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityHaveRecvGiftNotify.CmdId
 */
var ActivityHaveRecvGiftNotify_CmdId;
(function (ActivityHaveRecvGiftNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityHaveRecvGiftNotify_CmdId[ActivityHaveRecvGiftNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8733;
     */
    ActivityHaveRecvGiftNotify_CmdId[ActivityHaveRecvGiftNotify_CmdId["CMD_ID"] = 8733] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityHaveRecvGiftNotify_CmdId[ActivityHaveRecvGiftNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityHaveRecvGiftNotify_CmdId[ActivityHaveRecvGiftNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityHaveRecvGiftNotify_CmdId = exports.ActivityHaveRecvGiftNotify_CmdId || (exports.ActivityHaveRecvGiftNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptGiveGiftReq.CmdId
 */
var ActivityAcceptGiveGiftReq_CmdId;
(function (ActivityAcceptGiveGiftReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptGiveGiftReq_CmdId[ActivityAcceptGiveGiftReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8095;
     */
    ActivityAcceptGiveGiftReq_CmdId[ActivityAcceptGiveGiftReq_CmdId["CMD_ID"] = 8095] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptGiveGiftReq_CmdId[ActivityAcceptGiveGiftReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptGiveGiftReq_CmdId[ActivityAcceptGiveGiftReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptGiveGiftReq_CmdId[ActivityAcceptGiveGiftReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityAcceptGiveGiftReq_CmdId = exports.ActivityAcceptGiveGiftReq_CmdId || (exports.ActivityAcceptGiveGiftReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptGiveGiftRsp.CmdId
 */
var ActivityAcceptGiveGiftRsp_CmdId;
(function (ActivityAcceptGiveGiftRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptGiveGiftRsp_CmdId[ActivityAcceptGiveGiftRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8502;
     */
    ActivityAcceptGiveGiftRsp_CmdId[ActivityAcceptGiveGiftRsp_CmdId["CMD_ID"] = 8502] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptGiveGiftRsp_CmdId[ActivityAcceptGiveGiftRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptGiveGiftRsp_CmdId[ActivityAcceptGiveGiftRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityAcceptGiveGiftRsp_CmdId = exports.ActivityAcceptGiveGiftRsp_CmdId || (exports.ActivityAcceptGiveGiftRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptAllGiveGiftReq.CmdId
 */
var ActivityAcceptAllGiveGiftReq_CmdId;
(function (ActivityAcceptAllGiveGiftReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptAllGiveGiftReq_CmdId[ActivityAcceptAllGiveGiftReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8113;
     */
    ActivityAcceptAllGiveGiftReq_CmdId[ActivityAcceptAllGiveGiftReq_CmdId["CMD_ID"] = 8113] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptAllGiveGiftReq_CmdId[ActivityAcceptAllGiveGiftReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptAllGiveGiftReq_CmdId[ActivityAcceptAllGiveGiftReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptAllGiveGiftReq_CmdId[ActivityAcceptAllGiveGiftReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityAcceptAllGiveGiftReq_CmdId = exports.ActivityAcceptAllGiveGiftReq_CmdId || (exports.ActivityAcceptAllGiveGiftReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityAcceptAllGiveGiftRsp.CmdId
 */
var ActivityAcceptAllGiveGiftRsp_CmdId;
(function (ActivityAcceptAllGiveGiftRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptAllGiveGiftRsp_CmdId[ActivityAcceptAllGiveGiftRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8132;
     */
    ActivityAcceptAllGiveGiftRsp_CmdId[ActivityAcceptAllGiveGiftRsp_CmdId["CMD_ID"] = 8132] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityAcceptAllGiveGiftRsp_CmdId[ActivityAcceptAllGiveGiftRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityAcceptAllGiveGiftRsp_CmdId[ActivityAcceptAllGiveGiftRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityAcceptAllGiveGiftRsp_CmdId = exports.ActivityAcceptAllGiveGiftRsp_CmdId || (exports.ActivityAcceptAllGiveGiftRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetCanGiveFriendGiftReq.CmdId
 */
var ActivityGetCanGiveFriendGiftReq_CmdId;
(function (ActivityGetCanGiveFriendGiftReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetCanGiveFriendGiftReq_CmdId[ActivityGetCanGiveFriendGiftReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8559;
     */
    ActivityGetCanGiveFriendGiftReq_CmdId[ActivityGetCanGiveFriendGiftReq_CmdId["CMD_ID"] = 8559] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetCanGiveFriendGiftReq_CmdId[ActivityGetCanGiveFriendGiftReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetCanGiveFriendGiftReq_CmdId[ActivityGetCanGiveFriendGiftReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetCanGiveFriendGiftReq_CmdId[ActivityGetCanGiveFriendGiftReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityGetCanGiveFriendGiftReq_CmdId = exports.ActivityGetCanGiveFriendGiftReq_CmdId || (exports.ActivityGetCanGiveFriendGiftReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetCanGiveFriendGiftRsp.CmdId
 */
var ActivityGetCanGiveFriendGiftRsp_CmdId;
(function (ActivityGetCanGiveFriendGiftRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetCanGiveFriendGiftRsp_CmdId[ActivityGetCanGiveFriendGiftRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8848;
     */
    ActivityGetCanGiveFriendGiftRsp_CmdId[ActivityGetCanGiveFriendGiftRsp_CmdId["CMD_ID"] = 8848] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetCanGiveFriendGiftRsp_CmdId[ActivityGetCanGiveFriendGiftRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetCanGiveFriendGiftRsp_CmdId[ActivityGetCanGiveFriendGiftRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityGetCanGiveFriendGiftRsp_CmdId = exports.ActivityGetCanGiveFriendGiftRsp_CmdId || (exports.ActivityGetCanGiveFriendGiftRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivitySetGiftWishReq.CmdId
 */
var ActivitySetGiftWishReq_CmdId;
(function (ActivitySetGiftWishReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySetGiftWishReq_CmdId[ActivitySetGiftWishReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8017;
     */
    ActivitySetGiftWishReq_CmdId[ActivitySetGiftWishReq_CmdId["CMD_ID"] = 8017] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySetGiftWishReq_CmdId[ActivitySetGiftWishReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySetGiftWishReq_CmdId[ActivitySetGiftWishReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySetGiftWishReq_CmdId[ActivitySetGiftWishReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivitySetGiftWishReq_CmdId = exports.ActivitySetGiftWishReq_CmdId || (exports.ActivitySetGiftWishReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivitySetGiftWishRsp.CmdId
 */
var ActivitySetGiftWishRsp_CmdId;
(function (ActivitySetGiftWishRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySetGiftWishRsp_CmdId[ActivitySetGiftWishRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8554;
     */
    ActivitySetGiftWishRsp_CmdId[ActivitySetGiftWishRsp_CmdId["CMD_ID"] = 8554] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivitySetGiftWishRsp_CmdId[ActivitySetGiftWishRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivitySetGiftWishRsp_CmdId[ActivitySetGiftWishRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivitySetGiftWishRsp_CmdId = exports.ActivitySetGiftWishRsp_CmdId || (exports.ActivitySetGiftWishRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetFriendGiftWishListReq.CmdId
 */
var ActivityGetFriendGiftWishListReq_CmdId;
(function (ActivityGetFriendGiftWishListReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetFriendGiftWishListReq_CmdId[ActivityGetFriendGiftWishListReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8806;
     */
    ActivityGetFriendGiftWishListReq_CmdId[ActivityGetFriendGiftWishListReq_CmdId["CMD_ID"] = 8806] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetFriendGiftWishListReq_CmdId[ActivityGetFriendGiftWishListReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetFriendGiftWishListReq_CmdId[ActivityGetFriendGiftWishListReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetFriendGiftWishListReq_CmdId[ActivityGetFriendGiftWishListReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityGetFriendGiftWishListReq_CmdId = exports.ActivityGetFriendGiftWishListReq_CmdId || (exports.ActivityGetFriendGiftWishListReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityGetFriendGiftWishListRsp.CmdId
 */
var ActivityGetFriendGiftWishListRsp_CmdId;
(function (ActivityGetFriendGiftWishListRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetFriendGiftWishListRsp_CmdId[ActivityGetFriendGiftWishListRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8253;
     */
    ActivityGetFriendGiftWishListRsp_CmdId[ActivityGetFriendGiftWishListRsp_CmdId["CMD_ID"] = 8253] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityGetFriendGiftWishListRsp_CmdId[ActivityGetFriendGiftWishListRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityGetFriendGiftWishListRsp_CmdId[ActivityGetFriendGiftWishListRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityGetFriendGiftWishListRsp_CmdId = exports.ActivityGetFriendGiftWishListRsp_CmdId || (exports.ActivityGetFriendGiftWishListRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.LuminanceStoneChallengeSettleNotify.CmdId
 */
var LuminanceStoneChallengeSettleNotify_CmdId;
(function (LuminanceStoneChallengeSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LuminanceStoneChallengeSettleNotify_CmdId[LuminanceStoneChallengeSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8186;
     */
    LuminanceStoneChallengeSettleNotify_CmdId[LuminanceStoneChallengeSettleNotify_CmdId["CMD_ID"] = 8186] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    LuminanceStoneChallengeSettleNotify_CmdId[LuminanceStoneChallengeSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    LuminanceStoneChallengeSettleNotify_CmdId[LuminanceStoneChallengeSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(LuminanceStoneChallengeSettleNotify_CmdId = exports.LuminanceStoneChallengeSettleNotify_CmdId || (exports.LuminanceStoneChallengeSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryPlayReq.CmdId
 */
var StartRogueDiaryPlayReq_CmdId;
(function (StartRogueDiaryPlayReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryPlayReq_CmdId[StartRogueDiaryPlayReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8419;
     */
    StartRogueDiaryPlayReq_CmdId[StartRogueDiaryPlayReq_CmdId["CMD_ID"] = 8419] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryPlayReq_CmdId[StartRogueDiaryPlayReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryPlayReq_CmdId[StartRogueDiaryPlayReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryPlayReq_CmdId[StartRogueDiaryPlayReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartRogueDiaryPlayReq_CmdId = exports.StartRogueDiaryPlayReq_CmdId || (exports.StartRogueDiaryPlayReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryPlayRsp.CmdId
 */
var StartRogueDiaryPlayRsp_CmdId;
(function (StartRogueDiaryPlayRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryPlayRsp_CmdId[StartRogueDiaryPlayRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8385;
     */
    StartRogueDiaryPlayRsp_CmdId[StartRogueDiaryPlayRsp_CmdId["CMD_ID"] = 8385] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryPlayRsp_CmdId[StartRogueDiaryPlayRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryPlayRsp_CmdId[StartRogueDiaryPlayRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartRogueDiaryPlayRsp_CmdId = exports.StartRogueDiaryPlayRsp_CmdId || (exports.StartRogueDiaryPlayRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ResetRogueDiaryPlayReq.CmdId
 */
var ResetRogueDiaryPlayReq_CmdId;
(function (ResetRogueDiaryPlayReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResetRogueDiaryPlayReq_CmdId[ResetRogueDiaryPlayReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8127;
     */
    ResetRogueDiaryPlayReq_CmdId[ResetRogueDiaryPlayReq_CmdId["CMD_ID"] = 8127] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResetRogueDiaryPlayReq_CmdId[ResetRogueDiaryPlayReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResetRogueDiaryPlayReq_CmdId[ResetRogueDiaryPlayReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResetRogueDiaryPlayReq_CmdId[ResetRogueDiaryPlayReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ResetRogueDiaryPlayReq_CmdId = exports.ResetRogueDiaryPlayReq_CmdId || (exports.ResetRogueDiaryPlayReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ResetRogueDiaryPlayRsp.CmdId
 */
var ResetRogueDiaryPlayRsp_CmdId;
(function (ResetRogueDiaryPlayRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResetRogueDiaryPlayRsp_CmdId[ResetRogueDiaryPlayRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8948;
     */
    ResetRogueDiaryPlayRsp_CmdId[ResetRogueDiaryPlayRsp_CmdId["CMD_ID"] = 8948] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResetRogueDiaryPlayRsp_CmdId[ResetRogueDiaryPlayRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResetRogueDiaryPlayRsp_CmdId[ResetRogueDiaryPlayRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ResetRogueDiaryPlayRsp_CmdId = exports.ResetRogueDiaryPlayRsp_CmdId || (exports.ResetRogueDiaryPlayRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterRogueDiaryDungeonReq.CmdId
 */
var EnterRogueDiaryDungeonReq_CmdId;
(function (EnterRogueDiaryDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRogueDiaryDungeonReq_CmdId[EnterRogueDiaryDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8943;
     */
    EnterRogueDiaryDungeonReq_CmdId[EnterRogueDiaryDungeonReq_CmdId["CMD_ID"] = 8943] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRogueDiaryDungeonReq_CmdId[EnterRogueDiaryDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterRogueDiaryDungeonReq_CmdId[EnterRogueDiaryDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterRogueDiaryDungeonReq_CmdId[EnterRogueDiaryDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterRogueDiaryDungeonReq_CmdId = exports.EnterRogueDiaryDungeonReq_CmdId || (exports.EnterRogueDiaryDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterRogueDiaryDungeonRsp.CmdId
 */
var EnterRogueDiaryDungeonRsp_CmdId;
(function (EnterRogueDiaryDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRogueDiaryDungeonRsp_CmdId[EnterRogueDiaryDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8352;
     */
    EnterRogueDiaryDungeonRsp_CmdId[EnterRogueDiaryDungeonRsp_CmdId["CMD_ID"] = 8352] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterRogueDiaryDungeonRsp_CmdId[EnterRogueDiaryDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterRogueDiaryDungeonRsp_CmdId[EnterRogueDiaryDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterRogueDiaryDungeonRsp_CmdId = exports.EnterRogueDiaryDungeonRsp_CmdId || (exports.EnterRogueDiaryDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ResumeRogueDiaryDungeonReq.CmdId
 */
var ResumeRogueDiaryDungeonReq_CmdId;
(function (ResumeRogueDiaryDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResumeRogueDiaryDungeonReq_CmdId[ResumeRogueDiaryDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8838;
     */
    ResumeRogueDiaryDungeonReq_CmdId[ResumeRogueDiaryDungeonReq_CmdId["CMD_ID"] = 8838] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResumeRogueDiaryDungeonReq_CmdId[ResumeRogueDiaryDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResumeRogueDiaryDungeonReq_CmdId[ResumeRogueDiaryDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResumeRogueDiaryDungeonReq_CmdId[ResumeRogueDiaryDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ResumeRogueDiaryDungeonReq_CmdId = exports.ResumeRogueDiaryDungeonReq_CmdId || (exports.ResumeRogueDiaryDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ResumeRogueDiaryDungeonRsp.CmdId
 */
var ResumeRogueDiaryDungeonRsp_CmdId;
(function (ResumeRogueDiaryDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResumeRogueDiaryDungeonRsp_CmdId[ResumeRogueDiaryDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8989;
     */
    ResumeRogueDiaryDungeonRsp_CmdId[ResumeRogueDiaryDungeonRsp_CmdId["CMD_ID"] = 8989] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ResumeRogueDiaryDungeonRsp_CmdId[ResumeRogueDiaryDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ResumeRogueDiaryDungeonRsp_CmdId[ResumeRogueDiaryDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ResumeRogueDiaryDungeonRsp_CmdId = exports.ResumeRogueDiaryDungeonRsp_CmdId || (exports.ResumeRogueDiaryDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryDungeonInfoNotify.CmdId
 */
var RogueDiaryDungeonInfoNotify_CmdId;
(function (RogueDiaryDungeonInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryDungeonInfoNotify_CmdId[RogueDiaryDungeonInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8597;
     */
    RogueDiaryDungeonInfoNotify_CmdId[RogueDiaryDungeonInfoNotify_CmdId["CMD_ID"] = 8597] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryDungeonInfoNotify_CmdId[RogueDiaryDungeonInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryDungeonInfoNotify_CmdId[RogueDiaryDungeonInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryDungeonInfoNotify_CmdId[RogueDiaryDungeonInfoNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryDungeonInfoNotify_CmdId = exports.RogueDiaryDungeonInfoNotify_CmdId || (exports.RogueDiaryDungeonInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryDungeonSettleNotify.CmdId
 */
var RogueDiaryDungeonSettleNotify_CmdId;
(function (RogueDiaryDungeonSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryDungeonSettleNotify_CmdId[RogueDiaryDungeonSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8895;
     */
    RogueDiaryDungeonSettleNotify_CmdId[RogueDiaryDungeonSettleNotify_CmdId["CMD_ID"] = 8895] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryDungeonSettleNotify_CmdId[RogueDiaryDungeonSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryDungeonSettleNotify_CmdId[RogueDiaryDungeonSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryDungeonSettleNotify_CmdId[RogueDiaryDungeonSettleNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryDungeonSettleNotify_CmdId = exports.RogueDiaryDungeonSettleNotify_CmdId || (exports.RogueDiaryDungeonSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryRoomReq.CmdId
 */
var StartRogueDiaryRoomReq_CmdId;
(function (StartRogueDiaryRoomReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryRoomReq_CmdId[StartRogueDiaryRoomReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8159;
     */
    StartRogueDiaryRoomReq_CmdId[StartRogueDiaryRoomReq_CmdId["CMD_ID"] = 8159] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryRoomReq_CmdId[StartRogueDiaryRoomReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryRoomReq_CmdId[StartRogueDiaryRoomReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryRoomReq_CmdId[StartRogueDiaryRoomReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(StartRogueDiaryRoomReq_CmdId = exports.StartRogueDiaryRoomReq_CmdId || (exports.StartRogueDiaryRoomReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.StartRogueDiaryRoomRsp.CmdId
 */
var StartRogueDiaryRoomRsp_CmdId;
(function (StartRogueDiaryRoomRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryRoomRsp_CmdId[StartRogueDiaryRoomRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8793;
     */
    StartRogueDiaryRoomRsp_CmdId[StartRogueDiaryRoomRsp_CmdId["CMD_ID"] = 8793] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    StartRogueDiaryRoomRsp_CmdId[StartRogueDiaryRoomRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    StartRogueDiaryRoomRsp_CmdId[StartRogueDiaryRoomRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(StartRogueDiaryRoomRsp_CmdId = exports.StartRogueDiaryRoomRsp_CmdId || (exports.StartRogueDiaryRoomRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryTiredAvatarNotify.CmdId
 */
var RogueDiaryTiredAvatarNotify_CmdId;
(function (RogueDiaryTiredAvatarNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryTiredAvatarNotify_CmdId[RogueDiaryTiredAvatarNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8514;
     */
    RogueDiaryTiredAvatarNotify_CmdId[RogueDiaryTiredAvatarNotify_CmdId["CMD_ID"] = 8514] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryTiredAvatarNotify_CmdId[RogueDiaryTiredAvatarNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryTiredAvatarNotify_CmdId[RogueDiaryTiredAvatarNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryTiredAvatarNotify_CmdId[RogueDiaryTiredAvatarNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryTiredAvatarNotify_CmdId = exports.RogueDiaryTiredAvatarNotify_CmdId || (exports.RogueDiaryTiredAvatarNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ReserveRogueDiaryAvatarReq.CmdId
 */
var ReserveRogueDiaryAvatarReq_CmdId;
(function (ReserveRogueDiaryAvatarReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReserveRogueDiaryAvatarReq_CmdId[ReserveRogueDiaryAvatarReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8748;
     */
    ReserveRogueDiaryAvatarReq_CmdId[ReserveRogueDiaryAvatarReq_CmdId["CMD_ID"] = 8748] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReserveRogueDiaryAvatarReq_CmdId[ReserveRogueDiaryAvatarReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReserveRogueDiaryAvatarReq_CmdId[ReserveRogueDiaryAvatarReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReserveRogueDiaryAvatarReq_CmdId[ReserveRogueDiaryAvatarReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ReserveRogueDiaryAvatarReq_CmdId = exports.ReserveRogueDiaryAvatarReq_CmdId || (exports.ReserveRogueDiaryAvatarReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ReserveRogueDiaryAvatarRsp.CmdId
 */
var ReserveRogueDiaryAvatarRsp_CmdId;
(function (ReserveRogueDiaryAvatarRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReserveRogueDiaryAvatarRsp_CmdId[ReserveRogueDiaryAvatarRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8799;
     */
    ReserveRogueDiaryAvatarRsp_CmdId[ReserveRogueDiaryAvatarRsp_CmdId["CMD_ID"] = 8799] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ReserveRogueDiaryAvatarRsp_CmdId[ReserveRogueDiaryAvatarRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ReserveRogueDiaryAvatarRsp_CmdId[ReserveRogueDiaryAvatarRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ReserveRogueDiaryAvatarRsp_CmdId = exports.ReserveRogueDiaryAvatarRsp_CmdId || (exports.ReserveRogueDiaryAvatarRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetRogueDairyRepairInfoReq.CmdId
 */
var GetRogueDairyRepairInfoReq_CmdId;
(function (GetRogueDairyRepairInfoReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetRogueDairyRepairInfoReq_CmdId[GetRogueDairyRepairInfoReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8014;
     */
    GetRogueDairyRepairInfoReq_CmdId[GetRogueDairyRepairInfoReq_CmdId["CMD_ID"] = 8014] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetRogueDairyRepairInfoReq_CmdId[GetRogueDairyRepairInfoReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetRogueDairyRepairInfoReq_CmdId[GetRogueDairyRepairInfoReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetRogueDairyRepairInfoReq_CmdId[GetRogueDairyRepairInfoReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GetRogueDairyRepairInfoReq_CmdId = exports.GetRogueDairyRepairInfoReq_CmdId || (exports.GetRogueDairyRepairInfoReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GetRogueDairyRepairInfoRsp.CmdId
 */
var GetRogueDairyRepairInfoRsp_CmdId;
(function (GetRogueDairyRepairInfoRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetRogueDairyRepairInfoRsp_CmdId[GetRogueDairyRepairInfoRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8447;
     */
    GetRogueDairyRepairInfoRsp_CmdId[GetRogueDairyRepairInfoRsp_CmdId["CMD_ID"] = 8447] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GetRogueDairyRepairInfoRsp_CmdId[GetRogueDairyRepairInfoRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GetRogueDairyRepairInfoRsp_CmdId[GetRogueDairyRepairInfoRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GetRogueDairyRepairInfoRsp_CmdId = exports.GetRogueDairyRepairInfoRsp_CmdId || (exports.GetRogueDairyRepairInfoRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RefreshRogueDiaryCardReq.CmdId
 */
var RefreshRogueDiaryCardReq_CmdId;
(function (RefreshRogueDiaryCardReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRogueDiaryCardReq_CmdId[RefreshRogueDiaryCardReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8991;
     */
    RefreshRogueDiaryCardReq_CmdId[RefreshRogueDiaryCardReq_CmdId["CMD_ID"] = 8991] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRogueDiaryCardReq_CmdId[RefreshRogueDiaryCardReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRogueDiaryCardReq_CmdId[RefreshRogueDiaryCardReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRogueDiaryCardReq_CmdId[RefreshRogueDiaryCardReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RefreshRogueDiaryCardReq_CmdId = exports.RefreshRogueDiaryCardReq_CmdId || (exports.RefreshRogueDiaryCardReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RefreshRogueDiaryCardRsp.CmdId
 */
var RefreshRogueDiaryCardRsp_CmdId;
(function (RefreshRogueDiaryCardRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRogueDiaryCardRsp_CmdId[RefreshRogueDiaryCardRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8028;
     */
    RefreshRogueDiaryCardRsp_CmdId[RefreshRogueDiaryCardRsp_CmdId["CMD_ID"] = 8028] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RefreshRogueDiaryCardRsp_CmdId[RefreshRogueDiaryCardRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RefreshRogueDiaryCardRsp_CmdId[RefreshRogueDiaryCardRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RefreshRogueDiaryCardRsp_CmdId = exports.RefreshRogueDiaryCardRsp_CmdId || (exports.RefreshRogueDiaryCardRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueFinishRepairReq.CmdId
 */
var RogueFinishRepairReq_CmdId;
(function (RogueFinishRepairReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueFinishRepairReq_CmdId[RogueFinishRepairReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8363;
     */
    RogueFinishRepairReq_CmdId[RogueFinishRepairReq_CmdId["CMD_ID"] = 8363] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueFinishRepairReq_CmdId[RogueFinishRepairReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueFinishRepairReq_CmdId[RogueFinishRepairReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueFinishRepairReq_CmdId[RogueFinishRepairReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueFinishRepairReq_CmdId = exports.RogueFinishRepairReq_CmdId || (exports.RogueFinishRepairReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueFinishRepairRsp.CmdId
 */
var RogueFinishRepairRsp_CmdId;
(function (RogueFinishRepairRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueFinishRepairRsp_CmdId[RogueFinishRepairRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8535;
     */
    RogueFinishRepairRsp_CmdId[RogueFinishRepairRsp_CmdId["CMD_ID"] = 8535] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueFinishRepairRsp_CmdId[RogueFinishRepairRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueFinishRepairRsp_CmdId[RogueFinishRepairRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueFinishRepairRsp_CmdId = exports.RogueFinishRepairRsp_CmdId || (exports.RogueFinishRepairRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TryInterruptRogueDiaryDungeonReq.CmdId
 */
var TryInterruptRogueDiaryDungeonReq_CmdId;
(function (TryInterruptRogueDiaryDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryInterruptRogueDiaryDungeonReq_CmdId[TryInterruptRogueDiaryDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8617;
     */
    TryInterruptRogueDiaryDungeonReq_CmdId[TryInterruptRogueDiaryDungeonReq_CmdId["CMD_ID"] = 8617] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryInterruptRogueDiaryDungeonReq_CmdId[TryInterruptRogueDiaryDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryInterruptRogueDiaryDungeonReq_CmdId[TryInterruptRogueDiaryDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryInterruptRogueDiaryDungeonReq_CmdId[TryInterruptRogueDiaryDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TryInterruptRogueDiaryDungeonReq_CmdId = exports.TryInterruptRogueDiaryDungeonReq_CmdId || (exports.TryInterruptRogueDiaryDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TryInterruptRogueDiaryDungeonRsp.CmdId
 */
var TryInterruptRogueDiaryDungeonRsp_CmdId;
(function (TryInterruptRogueDiaryDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryInterruptRogueDiaryDungeonRsp_CmdId[TryInterruptRogueDiaryDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8903;
     */
    TryInterruptRogueDiaryDungeonRsp_CmdId[TryInterruptRogueDiaryDungeonRsp_CmdId["CMD_ID"] = 8903] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryInterruptRogueDiaryDungeonRsp_CmdId[TryInterruptRogueDiaryDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryInterruptRogueDiaryDungeonRsp_CmdId[TryInterruptRogueDiaryDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TryInterruptRogueDiaryDungeonRsp_CmdId = exports.TryInterruptRogueDiaryDungeonRsp_CmdId || (exports.TryInterruptRogueDiaryDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryRepairInfoNotify.CmdId
 */
var RogueDiaryRepairInfoNotify_CmdId;
(function (RogueDiaryRepairInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryRepairInfoNotify_CmdId[RogueDiaryRepairInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8641;
     */
    RogueDiaryRepairInfoNotify_CmdId[RogueDiaryRepairInfoNotify_CmdId["CMD_ID"] = 8641] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryRepairInfoNotify_CmdId[RogueDiaryRepairInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryRepairInfoNotify_CmdId[RogueDiaryRepairInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryRepairInfoNotify_CmdId[RogueDiaryRepairInfoNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryRepairInfoNotify_CmdId = exports.RogueDiaryRepairInfoNotify_CmdId || (exports.RogueDiaryRepairInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RetryCurRogueDiaryDungeonReq.CmdId
 */
var RetryCurRogueDiaryDungeonReq_CmdId;
(function (RetryCurRogueDiaryDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RetryCurRogueDiaryDungeonReq_CmdId[RetryCurRogueDiaryDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8398;
     */
    RetryCurRogueDiaryDungeonReq_CmdId[RetryCurRogueDiaryDungeonReq_CmdId["CMD_ID"] = 8398] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RetryCurRogueDiaryDungeonReq_CmdId[RetryCurRogueDiaryDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RetryCurRogueDiaryDungeonReq_CmdId[RetryCurRogueDiaryDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RetryCurRogueDiaryDungeonReq_CmdId[RetryCurRogueDiaryDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RetryCurRogueDiaryDungeonReq_CmdId = exports.RetryCurRogueDiaryDungeonReq_CmdId || (exports.RetryCurRogueDiaryDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RetryCurRogueDiaryDungeonRsp.CmdId
 */
var RetryCurRogueDiaryDungeonRsp_CmdId;
(function (RetryCurRogueDiaryDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RetryCurRogueDiaryDungeonRsp_CmdId[RetryCurRogueDiaryDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8334;
     */
    RetryCurRogueDiaryDungeonRsp_CmdId[RetryCurRogueDiaryDungeonRsp_CmdId["CMD_ID"] = 8334] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RetryCurRogueDiaryDungeonRsp_CmdId[RetryCurRogueDiaryDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RetryCurRogueDiaryDungeonRsp_CmdId[RetryCurRogueDiaryDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RetryCurRogueDiaryDungeonRsp_CmdId = exports.RetryCurRogueDiaryDungeonRsp_CmdId || (exports.RetryCurRogueDiaryDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryReviveAvatarReq.CmdId
 */
var RogueDiaryReviveAvatarReq_CmdId;
(function (RogueDiaryReviveAvatarReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryReviveAvatarReq_CmdId[RogueDiaryReviveAvatarReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8038;
     */
    RogueDiaryReviveAvatarReq_CmdId[RogueDiaryReviveAvatarReq_CmdId["CMD_ID"] = 8038] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryReviveAvatarReq_CmdId[RogueDiaryReviveAvatarReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryReviveAvatarReq_CmdId[RogueDiaryReviveAvatarReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryReviveAvatarReq_CmdId[RogueDiaryReviveAvatarReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryReviveAvatarReq_CmdId = exports.RogueDiaryReviveAvatarReq_CmdId || (exports.RogueDiaryReviveAvatarReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryReviveAvatarRsp.CmdId
 */
var RogueDiaryReviveAvatarRsp_CmdId;
(function (RogueDiaryReviveAvatarRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryReviveAvatarRsp_CmdId[RogueDiaryReviveAvatarRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8343;
     */
    RogueDiaryReviveAvatarRsp_CmdId[RogueDiaryReviveAvatarRsp_CmdId["CMD_ID"] = 8343] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryReviveAvatarRsp_CmdId[RogueDiaryReviveAvatarRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryReviveAvatarRsp_CmdId[RogueDiaryReviveAvatarRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(RogueDiaryReviveAvatarRsp_CmdId = exports.RogueDiaryReviveAvatarRsp_CmdId || (exports.RogueDiaryReviveAvatarRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TryEnterNextRogueDiaryDungeonReq.CmdId
 */
var TryEnterNextRogueDiaryDungeonReq_CmdId;
(function (TryEnterNextRogueDiaryDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryEnterNextRogueDiaryDungeonReq_CmdId[TryEnterNextRogueDiaryDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8280;
     */
    TryEnterNextRogueDiaryDungeonReq_CmdId[TryEnterNextRogueDiaryDungeonReq_CmdId["CMD_ID"] = 8280] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryEnterNextRogueDiaryDungeonReq_CmdId[TryEnterNextRogueDiaryDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryEnterNextRogueDiaryDungeonReq_CmdId[TryEnterNextRogueDiaryDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryEnterNextRogueDiaryDungeonReq_CmdId[TryEnterNextRogueDiaryDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(TryEnterNextRogueDiaryDungeonReq_CmdId = exports.TryEnterNextRogueDiaryDungeonReq_CmdId || (exports.TryEnterNextRogueDiaryDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TryEnterNextRogueDiaryDungeonRsp.CmdId
 */
var TryEnterNextRogueDiaryDungeonRsp_CmdId;
(function (TryEnterNextRogueDiaryDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryEnterNextRogueDiaryDungeonRsp_CmdId[TryEnterNextRogueDiaryDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8362;
     */
    TryEnterNextRogueDiaryDungeonRsp_CmdId[TryEnterNextRogueDiaryDungeonRsp_CmdId["CMD_ID"] = 8362] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TryEnterNextRogueDiaryDungeonRsp_CmdId[TryEnterNextRogueDiaryDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TryEnterNextRogueDiaryDungeonRsp_CmdId[TryEnterNextRogueDiaryDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TryEnterNextRogueDiaryDungeonRsp_CmdId = exports.TryEnterNextRogueDiaryDungeonRsp_CmdId || (exports.TryEnterNextRogueDiaryDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryCoinAddNotify.CmdId
 */
var RogueDiaryCoinAddNotify_CmdId;
(function (RogueDiaryCoinAddNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryCoinAddNotify_CmdId[RogueDiaryCoinAddNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8602;
     */
    RogueDiaryCoinAddNotify_CmdId[RogueDiaryCoinAddNotify_CmdId["CMD_ID"] = 8602] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    RogueDiaryCoinAddNotify_CmdId[RogueDiaryCoinAddNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryCoinAddNotify_CmdId[RogueDiaryCoinAddNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    RogueDiaryCoinAddNotify_CmdId[RogueDiaryCoinAddNotify_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(RogueDiaryCoinAddNotify_CmdId = exports.RogueDiaryCoinAddNotify_CmdId || (exports.RogueDiaryCoinAddNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2BoatSettleNotify.CmdId
 */
var SummerTimeV2BoatSettleNotify_CmdId;
(function (SummerTimeV2BoatSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2BoatSettleNotify_CmdId[SummerTimeV2BoatSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8870;
     */
    SummerTimeV2BoatSettleNotify_CmdId[SummerTimeV2BoatSettleNotify_CmdId["CMD_ID"] = 8870] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2BoatSettleNotify_CmdId[SummerTimeV2BoatSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2BoatSettleNotify_CmdId[SummerTimeV2BoatSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeV2BoatSettleNotify_CmdId = exports.SummerTimeV2BoatSettleNotify_CmdId || (exports.SummerTimeV2BoatSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityPushTipsInfoNotify.CmdId
 */
var ActivityPushTipsInfoNotify_CmdId;
(function (ActivityPushTipsInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityPushTipsInfoNotify_CmdId[ActivityPushTipsInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8513;
     */
    ActivityPushTipsInfoNotify_CmdId[ActivityPushTipsInfoNotify_CmdId["CMD_ID"] = 8513] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityPushTipsInfoNotify_CmdId[ActivityPushTipsInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityPushTipsInfoNotify_CmdId[ActivityPushTipsInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityPushTipsInfoNotify_CmdId = exports.ActivityPushTipsInfoNotify_CmdId || (exports.ActivityPushTipsInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityReadPushTipsReq.CmdId
 */
var ActivityReadPushTipsReq_CmdId;
(function (ActivityReadPushTipsReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityReadPushTipsReq_CmdId[ActivityReadPushTipsReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8145;
     */
    ActivityReadPushTipsReq_CmdId[ActivityReadPushTipsReq_CmdId["CMD_ID"] = 8145] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityReadPushTipsReq_CmdId[ActivityReadPushTipsReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityReadPushTipsReq_CmdId[ActivityReadPushTipsReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityReadPushTipsReq_CmdId[ActivityReadPushTipsReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(ActivityReadPushTipsReq_CmdId = exports.ActivityReadPushTipsReq_CmdId || (exports.ActivityReadPushTipsReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityReadPushTipsRsp.CmdId
 */
var ActivityReadPushTipsRsp_CmdId;
(function (ActivityReadPushTipsRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityReadPushTipsRsp_CmdId[ActivityReadPushTipsRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8574;
     */
    ActivityReadPushTipsRsp_CmdId[ActivityReadPushTipsRsp_CmdId["CMD_ID"] = 8574] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ActivityReadPushTipsRsp_CmdId[ActivityReadPushTipsRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ActivityReadPushTipsRsp_CmdId[ActivityReadPushTipsRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(ActivityReadPushTipsRsp_CmdId = exports.ActivityReadPushTipsRsp_CmdId || (exports.ActivityReadPushTipsRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartBoatGalleryReq.CmdId
 */
var SummerTimeV2RestartBoatGalleryReq_CmdId;
(function (SummerTimeV2RestartBoatGalleryReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartBoatGalleryReq_CmdId[SummerTimeV2RestartBoatGalleryReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8476;
     */
    SummerTimeV2RestartBoatGalleryReq_CmdId[SummerTimeV2RestartBoatGalleryReq_CmdId["CMD_ID"] = 8476] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartBoatGalleryReq_CmdId[SummerTimeV2RestartBoatGalleryReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartBoatGalleryReq_CmdId[SummerTimeV2RestartBoatGalleryReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartBoatGalleryReq_CmdId[SummerTimeV2RestartBoatGalleryReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SummerTimeV2RestartBoatGalleryReq_CmdId = exports.SummerTimeV2RestartBoatGalleryReq_CmdId || (exports.SummerTimeV2RestartBoatGalleryReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartBoatGalleryRsp.CmdId
 */
var SummerTimeV2RestartBoatGalleryRsp_CmdId;
(function (SummerTimeV2RestartBoatGalleryRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartBoatGalleryRsp_CmdId[SummerTimeV2RestartBoatGalleryRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8004;
     */
    SummerTimeV2RestartBoatGalleryRsp_CmdId[SummerTimeV2RestartBoatGalleryRsp_CmdId["CMD_ID"] = 8004] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartBoatGalleryRsp_CmdId[SummerTimeV2RestartBoatGalleryRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartBoatGalleryRsp_CmdId[SummerTimeV2RestartBoatGalleryRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeV2RestartBoatGalleryRsp_CmdId = exports.SummerTimeV2RestartBoatGalleryRsp_CmdId || (exports.SummerTimeV2RestartBoatGalleryRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartDungeonReq.CmdId
 */
var SummerTimeV2RestartDungeonReq_CmdId;
(function (SummerTimeV2RestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartDungeonReq_CmdId[SummerTimeV2RestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8346;
     */
    SummerTimeV2RestartDungeonReq_CmdId[SummerTimeV2RestartDungeonReq_CmdId["CMD_ID"] = 8346] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartDungeonReq_CmdId[SummerTimeV2RestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartDungeonReq_CmdId[SummerTimeV2RestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartDungeonReq_CmdId[SummerTimeV2RestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(SummerTimeV2RestartDungeonReq_CmdId = exports.SummerTimeV2RestartDungeonReq_CmdId || (exports.SummerTimeV2RestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SummerTimeV2RestartDungeonRsp.CmdId
 */
var SummerTimeV2RestartDungeonRsp_CmdId;
(function (SummerTimeV2RestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartDungeonRsp_CmdId[SummerTimeV2RestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 8996;
     */
    SummerTimeV2RestartDungeonRsp_CmdId[SummerTimeV2RestartDungeonRsp_CmdId["CMD_ID"] = 8996] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SummerTimeV2RestartDungeonRsp_CmdId[SummerTimeV2RestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SummerTimeV2RestartDungeonRsp_CmdId[SummerTimeV2RestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SummerTimeV2RestartDungeonRsp_CmdId = exports.SummerTimeV2RestartDungeonRsp_CmdId || (exports.SummerTimeV2RestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.IslandPartySettleNotify.CmdId
 */
var IslandPartySettleNotify_CmdId;
(function (IslandPartySettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IslandPartySettleNotify_CmdId[IslandPartySettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24601;
     */
    IslandPartySettleNotify_CmdId[IslandPartySettleNotify_CmdId["CMD_ID"] = 24601] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    IslandPartySettleNotify_CmdId[IslandPartySettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IslandPartySettleNotify_CmdId[IslandPartySettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(IslandPartySettleNotify_CmdId = exports.IslandPartySettleNotify_CmdId || (exports.IslandPartySettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayGearReq.CmdId
 */
var GearActivityStartPlayGearReq_CmdId;
(function (GearActivityStartPlayGearReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayGearReq_CmdId[GearActivityStartPlayGearReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23467;
     */
    GearActivityStartPlayGearReq_CmdId[GearActivityStartPlayGearReq_CmdId["CMD_ID"] = 23467] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayGearReq_CmdId[GearActivityStartPlayGearReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayGearReq_CmdId[GearActivityStartPlayGearReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayGearReq_CmdId[GearActivityStartPlayGearReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GearActivityStartPlayGearReq_CmdId = exports.GearActivityStartPlayGearReq_CmdId || (exports.GearActivityStartPlayGearReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayGearRsp.CmdId
 */
var GearActivityStartPlayGearRsp_CmdId;
(function (GearActivityStartPlayGearRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayGearRsp_CmdId[GearActivityStartPlayGearRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21025;
     */
    GearActivityStartPlayGearRsp_CmdId[GearActivityStartPlayGearRsp_CmdId["CMD_ID"] = 21025] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayGearRsp_CmdId[GearActivityStartPlayGearRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayGearRsp_CmdId[GearActivityStartPlayGearRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GearActivityStartPlayGearRsp_CmdId = exports.GearActivityStartPlayGearRsp_CmdId || (exports.GearActivityStartPlayGearRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayGearReq.CmdId
 */
var GearActivityFinishPlayGearReq_CmdId;
(function (GearActivityFinishPlayGearReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayGearReq_CmdId[GearActivityFinishPlayGearReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21834;
     */
    GearActivityFinishPlayGearReq_CmdId[GearActivityFinishPlayGearReq_CmdId["CMD_ID"] = 21834] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayGearReq_CmdId[GearActivityFinishPlayGearReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayGearReq_CmdId[GearActivityFinishPlayGearReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayGearReq_CmdId[GearActivityFinishPlayGearReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GearActivityFinishPlayGearReq_CmdId = exports.GearActivityFinishPlayGearReq_CmdId || (exports.GearActivityFinishPlayGearReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayGearRsp.CmdId
 */
var GearActivityFinishPlayGearRsp_CmdId;
(function (GearActivityFinishPlayGearRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayGearRsp_CmdId[GearActivityFinishPlayGearRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21800;
     */
    GearActivityFinishPlayGearRsp_CmdId[GearActivityFinishPlayGearRsp_CmdId["CMD_ID"] = 21800] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayGearRsp_CmdId[GearActivityFinishPlayGearRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayGearRsp_CmdId[GearActivityFinishPlayGearRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GearActivityFinishPlayGearRsp_CmdId = exports.GearActivityFinishPlayGearRsp_CmdId || (exports.GearActivityFinishPlayGearRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayPictureReq.CmdId
 */
var GearActivityStartPlayPictureReq_CmdId;
(function (GearActivityStartPlayPictureReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayPictureReq_CmdId[GearActivityStartPlayPictureReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24550;
     */
    GearActivityStartPlayPictureReq_CmdId[GearActivityStartPlayPictureReq_CmdId["CMD_ID"] = 24550] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayPictureReq_CmdId[GearActivityStartPlayPictureReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayPictureReq_CmdId[GearActivityStartPlayPictureReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayPictureReq_CmdId[GearActivityStartPlayPictureReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GearActivityStartPlayPictureReq_CmdId = exports.GearActivityStartPlayPictureReq_CmdId || (exports.GearActivityStartPlayPictureReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityStartPlayPictureRsp.CmdId
 */
var GearActivityStartPlayPictureRsp_CmdId;
(function (GearActivityStartPlayPictureRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayPictureRsp_CmdId[GearActivityStartPlayPictureRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23388;
     */
    GearActivityStartPlayPictureRsp_CmdId[GearActivityStartPlayPictureRsp_CmdId["CMD_ID"] = 23388] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityStartPlayPictureRsp_CmdId[GearActivityStartPlayPictureRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityStartPlayPictureRsp_CmdId[GearActivityStartPlayPictureRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GearActivityStartPlayPictureRsp_CmdId = exports.GearActivityStartPlayPictureRsp_CmdId || (exports.GearActivityStartPlayPictureRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayPictureReq.CmdId
 */
var GearActivityFinishPlayPictureReq_CmdId;
(function (GearActivityFinishPlayPictureReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayPictureReq_CmdId[GearActivityFinishPlayPictureReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21054;
     */
    GearActivityFinishPlayPictureReq_CmdId[GearActivityFinishPlayPictureReq_CmdId["CMD_ID"] = 21054] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayPictureReq_CmdId[GearActivityFinishPlayPictureReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayPictureReq_CmdId[GearActivityFinishPlayPictureReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayPictureReq_CmdId[GearActivityFinishPlayPictureReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GearActivityFinishPlayPictureReq_CmdId = exports.GearActivityFinishPlayPictureReq_CmdId || (exports.GearActivityFinishPlayPictureReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GearActivityFinishPlayPictureRsp.CmdId
 */
var GearActivityFinishPlayPictureRsp_CmdId;
(function (GearActivityFinishPlayPictureRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayPictureRsp_CmdId[GearActivityFinishPlayPictureRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21851;
     */
    GearActivityFinishPlayPictureRsp_CmdId[GearActivityFinishPlayPictureRsp_CmdId["CMD_ID"] = 21851] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GearActivityFinishPlayPictureRsp_CmdId[GearActivityFinishPlayPictureRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GearActivityFinishPlayPictureRsp_CmdId[GearActivityFinishPlayPictureRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GearActivityFinishPlayPictureRsp_CmdId = exports.GearActivityFinishPlayPictureRsp_CmdId || (exports.GearActivityFinishPlayPictureRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceSettleNotify.CmdId
 */
var GravenInnocenceRaceSettleNotify_CmdId;
(function (GravenInnocenceRaceSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceSettleNotify_CmdId[GravenInnocenceRaceSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20681;
     */
    GravenInnocenceRaceSettleNotify_CmdId[GravenInnocenceRaceSettleNotify_CmdId["CMD_ID"] = 20681] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceSettleNotify_CmdId[GravenInnocenceRaceSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceRaceSettleNotify_CmdId[GravenInnocenceRaceSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GravenInnocenceRaceSettleNotify_CmdId = exports.GravenInnocenceRaceSettleNotify_CmdId || (exports.GravenInnocenceRaceSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceRestartReq.CmdId
 */
var GravenInnocenceRaceRestartReq_CmdId;
(function (GravenInnocenceRaceRestartReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceRestartReq_CmdId[GravenInnocenceRaceRestartReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22882;
     */
    GravenInnocenceRaceRestartReq_CmdId[GravenInnocenceRaceRestartReq_CmdId["CMD_ID"] = 22882] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceRestartReq_CmdId[GravenInnocenceRaceRestartReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceRaceRestartReq_CmdId[GravenInnocenceRaceRestartReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceRaceRestartReq_CmdId[GravenInnocenceRaceRestartReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GravenInnocenceRaceRestartReq_CmdId = exports.GravenInnocenceRaceRestartReq_CmdId || (exports.GravenInnocenceRaceRestartReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceRaceRestartRsp.CmdId
 */
var GravenInnocenceRaceRestartRsp_CmdId;
(function (GravenInnocenceRaceRestartRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceRestartRsp_CmdId[GravenInnocenceRaceRestartRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21880;
     */
    GravenInnocenceRaceRestartRsp_CmdId[GravenInnocenceRaceRestartRsp_CmdId["CMD_ID"] = 21880] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceRaceRestartRsp_CmdId[GravenInnocenceRaceRestartRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceRaceRestartRsp_CmdId[GravenInnocenceRaceRestartRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GravenInnocenceRaceRestartRsp_CmdId = exports.GravenInnocenceRaceRestartRsp_CmdId || (exports.GravenInnocenceRaceRestartRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceEditCarveCombinationReq.CmdId
 */
var GravenInnocenceEditCarveCombinationReq_CmdId;
(function (GravenInnocenceEditCarveCombinationReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceEditCarveCombinationReq_CmdId[GravenInnocenceEditCarveCombinationReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23107;
     */
    GravenInnocenceEditCarveCombinationReq_CmdId[GravenInnocenceEditCarveCombinationReq_CmdId["CMD_ID"] = 23107] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceEditCarveCombinationReq_CmdId[GravenInnocenceEditCarveCombinationReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceEditCarveCombinationReq_CmdId[GravenInnocenceEditCarveCombinationReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceEditCarveCombinationReq_CmdId[GravenInnocenceEditCarveCombinationReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GravenInnocenceEditCarveCombinationReq_CmdId = exports.GravenInnocenceEditCarveCombinationReq_CmdId || (exports.GravenInnocenceEditCarveCombinationReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocenceEditCarveCombinationRsp.CmdId
 */
var GravenInnocenceEditCarveCombinationRsp_CmdId;
(function (GravenInnocenceEditCarveCombinationRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceEditCarveCombinationRsp_CmdId[GravenInnocenceEditCarveCombinationRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20702;
     */
    GravenInnocenceEditCarveCombinationRsp_CmdId[GravenInnocenceEditCarveCombinationRsp_CmdId["CMD_ID"] = 20702] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocenceEditCarveCombinationRsp_CmdId[GravenInnocenceEditCarveCombinationRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocenceEditCarveCombinationRsp_CmdId[GravenInnocenceEditCarveCombinationRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GravenInnocenceEditCarveCombinationRsp_CmdId = exports.GravenInnocenceEditCarveCombinationRsp_CmdId || (exports.GravenInnocenceEditCarveCombinationRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoFinishReq.CmdId
 */
var GravenInnocencePhotoFinishReq_CmdId;
(function (GravenInnocencePhotoFinishReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoFinishReq_CmdId[GravenInnocencePhotoFinishReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21750;
     */
    GravenInnocencePhotoFinishReq_CmdId[GravenInnocencePhotoFinishReq_CmdId["CMD_ID"] = 21750] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoFinishReq_CmdId[GravenInnocencePhotoFinishReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocencePhotoFinishReq_CmdId[GravenInnocencePhotoFinishReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocencePhotoFinishReq_CmdId[GravenInnocencePhotoFinishReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(GravenInnocencePhotoFinishReq_CmdId = exports.GravenInnocencePhotoFinishReq_CmdId || (exports.GravenInnocencePhotoFinishReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoFinishRsp.CmdId
 */
var GravenInnocencePhotoFinishRsp_CmdId;
(function (GravenInnocencePhotoFinishRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoFinishRsp_CmdId[GravenInnocencePhotoFinishRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23948;
     */
    GravenInnocencePhotoFinishRsp_CmdId[GravenInnocencePhotoFinishRsp_CmdId["CMD_ID"] = 23948] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoFinishRsp_CmdId[GravenInnocencePhotoFinishRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocencePhotoFinishRsp_CmdId[GravenInnocencePhotoFinishRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GravenInnocencePhotoFinishRsp_CmdId = exports.GravenInnocencePhotoFinishRsp_CmdId || (exports.GravenInnocencePhotoFinishRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.GravenInnocencePhotoReminderNotify.CmdId
 */
var GravenInnocencePhotoReminderNotify_CmdId;
(function (GravenInnocencePhotoReminderNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoReminderNotify_CmdId[GravenInnocencePhotoReminderNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23864;
     */
    GravenInnocencePhotoReminderNotify_CmdId[GravenInnocencePhotoReminderNotify_CmdId["CMD_ID"] = 23864] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    GravenInnocencePhotoReminderNotify_CmdId[GravenInnocencePhotoReminderNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    GravenInnocencePhotoReminderNotify_CmdId[GravenInnocencePhotoReminderNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(GravenInnocencePhotoReminderNotify_CmdId = exports.GravenInnocencePhotoReminderNotify_CmdId || (exports.GravenInnocencePhotoReminderNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayEnterDungeonReq.CmdId
 */
var InstableSprayEnterDungeonReq_CmdId;
(function (InstableSprayEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayEnterDungeonReq_CmdId[InstableSprayEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24312;
     */
    InstableSprayEnterDungeonReq_CmdId[InstableSprayEnterDungeonReq_CmdId["CMD_ID"] = 24312] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayEnterDungeonReq_CmdId[InstableSprayEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayEnterDungeonReq_CmdId[InstableSprayEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayEnterDungeonReq_CmdId[InstableSprayEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(InstableSprayEnterDungeonReq_CmdId = exports.InstableSprayEnterDungeonReq_CmdId || (exports.InstableSprayEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayEnterDungeonRsp.CmdId
 */
var InstableSprayEnterDungeonRsp_CmdId;
(function (InstableSprayEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayEnterDungeonRsp_CmdId[InstableSprayEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23381;
     */
    InstableSprayEnterDungeonRsp_CmdId[InstableSprayEnterDungeonRsp_CmdId["CMD_ID"] = 23381] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayEnterDungeonRsp_CmdId[InstableSprayEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayEnterDungeonRsp_CmdId[InstableSprayEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(InstableSprayEnterDungeonRsp_CmdId = exports.InstableSprayEnterDungeonRsp_CmdId || (exports.InstableSprayEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSpraySwitchTeamReq.CmdId
 */
var InstableSpraySwitchTeamReq_CmdId;
(function (InstableSpraySwitchTeamReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSpraySwitchTeamReq_CmdId[InstableSpraySwitchTeamReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24857;
     */
    InstableSpraySwitchTeamReq_CmdId[InstableSpraySwitchTeamReq_CmdId["CMD_ID"] = 24857] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSpraySwitchTeamReq_CmdId[InstableSpraySwitchTeamReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSpraySwitchTeamReq_CmdId[InstableSpraySwitchTeamReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSpraySwitchTeamReq_CmdId[InstableSpraySwitchTeamReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(InstableSpraySwitchTeamReq_CmdId = exports.InstableSpraySwitchTeamReq_CmdId || (exports.InstableSpraySwitchTeamReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSpraySwitchTeamRsp.CmdId
 */
var InstableSpraySwitchTeamRsp_CmdId;
(function (InstableSpraySwitchTeamRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSpraySwitchTeamRsp_CmdId[InstableSpraySwitchTeamRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24152;
     */
    InstableSpraySwitchTeamRsp_CmdId[InstableSpraySwitchTeamRsp_CmdId["CMD_ID"] = 24152] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSpraySwitchTeamRsp_CmdId[InstableSpraySwitchTeamRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSpraySwitchTeamRsp_CmdId[InstableSpraySwitchTeamRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(InstableSpraySwitchTeamRsp_CmdId = exports.InstableSpraySwitchTeamRsp_CmdId || (exports.InstableSpraySwitchTeamRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayLevelFinishNotify.CmdId
 */
var InstableSprayLevelFinishNotify_CmdId;
(function (InstableSprayLevelFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayLevelFinishNotify_CmdId[InstableSprayLevelFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21961;
     */
    InstableSprayLevelFinishNotify_CmdId[InstableSprayLevelFinishNotify_CmdId["CMD_ID"] = 21961] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayLevelFinishNotify_CmdId[InstableSprayLevelFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayLevelFinishNotify_CmdId[InstableSprayLevelFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(InstableSprayLevelFinishNotify_CmdId = exports.InstableSprayLevelFinishNotify_CmdId || (exports.InstableSprayLevelFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayRestartDungeonReq.CmdId
 */
var InstableSprayRestartDungeonReq_CmdId;
(function (InstableSprayRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayRestartDungeonReq_CmdId[InstableSprayRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23678;
     */
    InstableSprayRestartDungeonReq_CmdId[InstableSprayRestartDungeonReq_CmdId["CMD_ID"] = 23678] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayRestartDungeonReq_CmdId[InstableSprayRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayRestartDungeonReq_CmdId[InstableSprayRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayRestartDungeonReq_CmdId[InstableSprayRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(InstableSprayRestartDungeonReq_CmdId = exports.InstableSprayRestartDungeonReq_CmdId || (exports.InstableSprayRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayRestartDungeonRsp.CmdId
 */
var InstableSprayRestartDungeonRsp_CmdId;
(function (InstableSprayRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayRestartDungeonRsp_CmdId[InstableSprayRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24923;
     */
    InstableSprayRestartDungeonRsp_CmdId[InstableSprayRestartDungeonRsp_CmdId["CMD_ID"] = 24923] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    InstableSprayRestartDungeonRsp_CmdId[InstableSprayRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    InstableSprayRestartDungeonRsp_CmdId[InstableSprayRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(InstableSprayRestartDungeonRsp_CmdId = exports.InstableSprayRestartDungeonRsp_CmdId || (exports.InstableSprayRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionActivityEnterDungeonReq.CmdId
 */
var MuqadasPotionActivityEnterDungeonReq_CmdId;
(function (MuqadasPotionActivityEnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionActivityEnterDungeonReq_CmdId[MuqadasPotionActivityEnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24602;
     */
    MuqadasPotionActivityEnterDungeonReq_CmdId[MuqadasPotionActivityEnterDungeonReq_CmdId["CMD_ID"] = 24602] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionActivityEnterDungeonReq_CmdId[MuqadasPotionActivityEnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionActivityEnterDungeonReq_CmdId[MuqadasPotionActivityEnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionActivityEnterDungeonReq_CmdId[MuqadasPotionActivityEnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MuqadasPotionActivityEnterDungeonReq_CmdId = exports.MuqadasPotionActivityEnterDungeonReq_CmdId || (exports.MuqadasPotionActivityEnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionActivityEnterDungeonRsp.CmdId
 */
var MuqadasPotionActivityEnterDungeonRsp_CmdId;
(function (MuqadasPotionActivityEnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionActivityEnterDungeonRsp_CmdId[MuqadasPotionActivityEnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21804;
     */
    MuqadasPotionActivityEnterDungeonRsp_CmdId[MuqadasPotionActivityEnterDungeonRsp_CmdId["CMD_ID"] = 21804] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionActivityEnterDungeonRsp_CmdId[MuqadasPotionActivityEnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionActivityEnterDungeonRsp_CmdId[MuqadasPotionActivityEnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MuqadasPotionActivityEnterDungeonRsp_CmdId = exports.MuqadasPotionActivityEnterDungeonRsp_CmdId || (exports.MuqadasPotionActivityEnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionDungeonSettleNotify.CmdId
 */
var MuqadasPotionDungeonSettleNotify_CmdId;
(function (MuqadasPotionDungeonSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionDungeonSettleNotify_CmdId[MuqadasPotionDungeonSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20005;
     */
    MuqadasPotionDungeonSettleNotify_CmdId[MuqadasPotionDungeonSettleNotify_CmdId["CMD_ID"] = 20005] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionDungeonSettleNotify_CmdId[MuqadasPotionDungeonSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionDungeonSettleNotify_CmdId[MuqadasPotionDungeonSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MuqadasPotionDungeonSettleNotify_CmdId = exports.MuqadasPotionDungeonSettleNotify_CmdId || (exports.MuqadasPotionDungeonSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionRestartDungeonReq.CmdId
 */
var MuqadasPotionRestartDungeonReq_CmdId;
(function (MuqadasPotionRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionRestartDungeonReq_CmdId[MuqadasPotionRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22391;
     */
    MuqadasPotionRestartDungeonReq_CmdId[MuqadasPotionRestartDungeonReq_CmdId["CMD_ID"] = 22391] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionRestartDungeonReq_CmdId[MuqadasPotionRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionRestartDungeonReq_CmdId[MuqadasPotionRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionRestartDungeonReq_CmdId[MuqadasPotionRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MuqadasPotionRestartDungeonReq_CmdId = exports.MuqadasPotionRestartDungeonReq_CmdId || (exports.MuqadasPotionRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionRestartDungeonRsp.CmdId
 */
var MuqadasPotionRestartDungeonRsp_CmdId;
(function (MuqadasPotionRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionRestartDungeonRsp_CmdId[MuqadasPotionRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21208;
     */
    MuqadasPotionRestartDungeonRsp_CmdId[MuqadasPotionRestartDungeonRsp_CmdId["CMD_ID"] = 21208] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionRestartDungeonRsp_CmdId[MuqadasPotionRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionRestartDungeonRsp_CmdId[MuqadasPotionRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MuqadasPotionRestartDungeonRsp_CmdId = exports.MuqadasPotionRestartDungeonRsp_CmdId || (exports.MuqadasPotionRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionCaptureWeaknessReq.CmdId
 */
var MuqadasPotionCaptureWeaknessReq_CmdId;
(function (MuqadasPotionCaptureWeaknessReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionCaptureWeaknessReq_CmdId[MuqadasPotionCaptureWeaknessReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20011;
     */
    MuqadasPotionCaptureWeaknessReq_CmdId[MuqadasPotionCaptureWeaknessReq_CmdId["CMD_ID"] = 20011] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionCaptureWeaknessReq_CmdId[MuqadasPotionCaptureWeaknessReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionCaptureWeaknessReq_CmdId[MuqadasPotionCaptureWeaknessReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionCaptureWeaknessReq_CmdId[MuqadasPotionCaptureWeaknessReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(MuqadasPotionCaptureWeaknessReq_CmdId = exports.MuqadasPotionCaptureWeaknessReq_CmdId || (exports.MuqadasPotionCaptureWeaknessReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.MuqadasPotionCaptureWeaknessRsp.CmdId
 */
var MuqadasPotionCaptureWeaknessRsp_CmdId;
(function (MuqadasPotionCaptureWeaknessRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionCaptureWeaknessRsp_CmdId[MuqadasPotionCaptureWeaknessRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24081;
     */
    MuqadasPotionCaptureWeaknessRsp_CmdId[MuqadasPotionCaptureWeaknessRsp_CmdId["CMD_ID"] = 24081] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    MuqadasPotionCaptureWeaknessRsp_CmdId[MuqadasPotionCaptureWeaknessRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    MuqadasPotionCaptureWeaknessRsp_CmdId[MuqadasPotionCaptureWeaknessRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(MuqadasPotionCaptureWeaknessRsp_CmdId = exports.MuqadasPotionCaptureWeaknessRsp_CmdId || (exports.MuqadasPotionCaptureWeaknessRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.TreasureSeelieCollectOrbsNotify.CmdId
 */
var TreasureSeelieCollectOrbsNotify_CmdId;
(function (TreasureSeelieCollectOrbsNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureSeelieCollectOrbsNotify_CmdId[TreasureSeelieCollectOrbsNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20754;
     */
    TreasureSeelieCollectOrbsNotify_CmdId[TreasureSeelieCollectOrbsNotify_CmdId["CMD_ID"] = 20754] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    TreasureSeelieCollectOrbsNotify_CmdId[TreasureSeelieCollectOrbsNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    TreasureSeelieCollectOrbsNotify_CmdId[TreasureSeelieCollectOrbsNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(TreasureSeelieCollectOrbsNotify_CmdId = exports.TreasureSeelieCollectOrbsNotify_CmdId || (exports.TreasureSeelieCollectOrbsNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDeliverItemReq.CmdId
 */
var VintageMarketDeliverItemReq_CmdId;
(function (VintageMarketDeliverItemReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDeliverItemReq_CmdId[VintageMarketDeliverItemReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23141;
     */
    VintageMarketDeliverItemReq_CmdId[VintageMarketDeliverItemReq_CmdId["CMD_ID"] = 23141] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDeliverItemReq_CmdId[VintageMarketDeliverItemReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketDeliverItemReq_CmdId[VintageMarketDeliverItemReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketDeliverItemReq_CmdId[VintageMarketDeliverItemReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketDeliverItemReq_CmdId = exports.VintageMarketDeliverItemReq_CmdId || (exports.VintageMarketDeliverItemReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDeliverItemRsp.CmdId
 */
var VintageMarketDeliverItemRsp_CmdId;
(function (VintageMarketDeliverItemRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDeliverItemRsp_CmdId[VintageMarketDeliverItemRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22181;
     */
    VintageMarketDeliverItemRsp_CmdId[VintageMarketDeliverItemRsp_CmdId["CMD_ID"] = 22181] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDeliverItemRsp_CmdId[VintageMarketDeliverItemRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketDeliverItemRsp_CmdId[VintageMarketDeliverItemRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketDeliverItemRsp_CmdId = exports.VintageMarketDeliverItemRsp_CmdId || (exports.VintageMarketDeliverItemRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.SceneGalleryVintageHuntingSettleNotify.CmdId
 */
var SceneGalleryVintageHuntingSettleNotify_CmdId;
(function (SceneGalleryVintageHuntingSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SceneGalleryVintageHuntingSettleNotify_CmdId[SceneGalleryVintageHuntingSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20324;
     */
    SceneGalleryVintageHuntingSettleNotify_CmdId[SceneGalleryVintageHuntingSettleNotify_CmdId["CMD_ID"] = 20324] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    SceneGalleryVintageHuntingSettleNotify_CmdId[SceneGalleryVintageHuntingSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    SceneGalleryVintageHuntingSettleNotify_CmdId[SceneGalleryVintageHuntingSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(SceneGalleryVintageHuntingSettleNotify_CmdId = exports.SceneGalleryVintageHuntingSettleNotify_CmdId || (exports.SceneGalleryVintageHuntingSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintagePresentFinishNoify.CmdId
 */
var VintagePresentFinishNoify_CmdId;
(function (VintagePresentFinishNoify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintagePresentFinishNoify_CmdId[VintagePresentFinishNoify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24142;
     */
    VintagePresentFinishNoify_CmdId[VintagePresentFinishNoify_CmdId["CMD_ID"] = 24142] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintagePresentFinishNoify_CmdId[VintagePresentFinishNoify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintagePresentFinishNoify_CmdId[VintagePresentFinishNoify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintagePresentFinishNoify_CmdId = exports.VintagePresentFinishNoify_CmdId || (exports.VintagePresentFinishNoify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageDecorateBoothReq.CmdId
 */
var VintageDecorateBoothReq_CmdId;
(function (VintageDecorateBoothReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageDecorateBoothReq_CmdId[VintageDecorateBoothReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20846;
     */
    VintageDecorateBoothReq_CmdId[VintageDecorateBoothReq_CmdId["CMD_ID"] = 20846] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageDecorateBoothReq_CmdId[VintageDecorateBoothReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageDecorateBoothReq_CmdId[VintageDecorateBoothReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageDecorateBoothReq_CmdId[VintageDecorateBoothReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageDecorateBoothReq_CmdId = exports.VintageDecorateBoothReq_CmdId || (exports.VintageDecorateBoothReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageDecorateBoothRsp.CmdId
 */
var VintageDecorateBoothRsp_CmdId;
(function (VintageDecorateBoothRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageDecorateBoothRsp_CmdId[VintageDecorateBoothRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20993;
     */
    VintageDecorateBoothRsp_CmdId[VintageDecorateBoothRsp_CmdId["CMD_ID"] = 20993] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageDecorateBoothRsp_CmdId[VintageDecorateBoothRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageDecorateBoothRsp_CmdId[VintageDecorateBoothRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageDecorateBoothRsp_CmdId = exports.VintageDecorateBoothRsp_CmdId || (exports.VintageDecorateBoothRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageHuntingStartGalleryReq.CmdId
 */
var VintageHuntingStartGalleryReq_CmdId;
(function (VintageHuntingStartGalleryReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageHuntingStartGalleryReq_CmdId[VintageHuntingStartGalleryReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21780;
     */
    VintageHuntingStartGalleryReq_CmdId[VintageHuntingStartGalleryReq_CmdId["CMD_ID"] = 21780] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageHuntingStartGalleryReq_CmdId[VintageHuntingStartGalleryReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageHuntingStartGalleryReq_CmdId[VintageHuntingStartGalleryReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageHuntingStartGalleryReq_CmdId[VintageHuntingStartGalleryReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageHuntingStartGalleryReq_CmdId = exports.VintageHuntingStartGalleryReq_CmdId || (exports.VintageHuntingStartGalleryReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageHuntingStartGalleryRsp.CmdId
 */
var VintageHuntingStartGalleryRsp_CmdId;
(function (VintageHuntingStartGalleryRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageHuntingStartGalleryRsp_CmdId[VintageHuntingStartGalleryRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21951;
     */
    VintageHuntingStartGalleryRsp_CmdId[VintageHuntingStartGalleryRsp_CmdId["CMD_ID"] = 21951] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageHuntingStartGalleryRsp_CmdId[VintageHuntingStartGalleryRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageHuntingStartGalleryRsp_CmdId[VintageHuntingStartGalleryRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageHuntingStartGalleryRsp_CmdId = exports.VintageHuntingStartGalleryRsp_CmdId || (exports.VintageHuntingStartGalleryRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageCampGroupBundleRegisterNotify.CmdId
 */
var VintageCampGroupBundleRegisterNotify_CmdId;
(function (VintageCampGroupBundleRegisterNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageCampGroupBundleRegisterNotify_CmdId[VintageCampGroupBundleRegisterNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24244;
     */
    VintageCampGroupBundleRegisterNotify_CmdId[VintageCampGroupBundleRegisterNotify_CmdId["CMD_ID"] = 24244] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageCampGroupBundleRegisterNotify_CmdId[VintageCampGroupBundleRegisterNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageCampGroupBundleRegisterNotify_CmdId[VintageCampGroupBundleRegisterNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageCampGroupBundleRegisterNotify_CmdId = exports.VintageCampGroupBundleRegisterNotify_CmdId || (exports.VintageCampGroupBundleRegisterNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageCampStageFinishNotify.CmdId
 */
var VintageCampStageFinishNotify_CmdId;
(function (VintageCampStageFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageCampStageFinishNotify_CmdId[VintageCampStageFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22830;
     */
    VintageCampStageFinishNotify_CmdId[VintageCampStageFinishNotify_CmdId["CMD_ID"] = 22830] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageCampStageFinishNotify_CmdId[VintageCampStageFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageCampStageFinishNotify_CmdId[VintageCampStageFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageCampStageFinishNotify_CmdId = exports.VintageCampStageFinishNotify_CmdId || (exports.VintageCampStageFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStartStorePlayReq.CmdId
 */
var VintageMarketStartStorePlayReq_CmdId;
(function (VintageMarketStartStorePlayReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStartStorePlayReq_CmdId[VintageMarketStartStorePlayReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22864;
     */
    VintageMarketStartStorePlayReq_CmdId[VintageMarketStartStorePlayReq_CmdId["CMD_ID"] = 22864] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStartStorePlayReq_CmdId[VintageMarketStartStorePlayReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStartStorePlayReq_CmdId[VintageMarketStartStorePlayReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStartStorePlayReq_CmdId[VintageMarketStartStorePlayReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketStartStorePlayReq_CmdId = exports.VintageMarketStartStorePlayReq_CmdId || (exports.VintageMarketStartStorePlayReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStartStorePlayRsp.CmdId
 */
var VintageMarketStartStorePlayRsp_CmdId;
(function (VintageMarketStartStorePlayRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStartStorePlayRsp_CmdId[VintageMarketStartStorePlayRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22130;
     */
    VintageMarketStartStorePlayRsp_CmdId[VintageMarketStartStorePlayRsp_CmdId["CMD_ID"] = 22130] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStartStorePlayRsp_CmdId[VintageMarketStartStorePlayRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStartStorePlayRsp_CmdId[VintageMarketStartStorePlayRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketStartStorePlayRsp_CmdId = exports.VintageMarketStartStorePlayRsp_CmdId || (exports.VintageMarketStartStorePlayRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketFinishStorePlayReq.CmdId
 */
var VintageMarketFinishStorePlayReq_CmdId;
(function (VintageMarketFinishStorePlayReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketFinishStorePlayReq_CmdId[VintageMarketFinishStorePlayReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20676;
     */
    VintageMarketFinishStorePlayReq_CmdId[VintageMarketFinishStorePlayReq_CmdId["CMD_ID"] = 20676] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketFinishStorePlayReq_CmdId[VintageMarketFinishStorePlayReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketFinishStorePlayReq_CmdId[VintageMarketFinishStorePlayReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketFinishStorePlayReq_CmdId[VintageMarketFinishStorePlayReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketFinishStorePlayReq_CmdId = exports.VintageMarketFinishStorePlayReq_CmdId || (exports.VintageMarketFinishStorePlayReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketFinishStorePlayRsp.CmdId
 */
var VintageMarketFinishStorePlayRsp_CmdId;
(function (VintageMarketFinishStorePlayRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketFinishStorePlayRsp_CmdId[VintageMarketFinishStorePlayRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23462;
     */
    VintageMarketFinishStorePlayRsp_CmdId[VintageMarketFinishStorePlayRsp_CmdId["CMD_ID"] = 23462] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketFinishStorePlayRsp_CmdId[VintageMarketFinishStorePlayRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketFinishStorePlayRsp_CmdId[VintageMarketFinishStorePlayRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketFinishStorePlayRsp_CmdId = exports.VintageMarketFinishStorePlayRsp_CmdId || (exports.VintageMarketFinishStorePlayRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintagePresentFinishNotify.CmdId
 */
var VintagePresentFinishNotify_CmdId;
(function (VintagePresentFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintagePresentFinishNotify_CmdId[VintagePresentFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20086;
     */
    VintagePresentFinishNotify_CmdId[VintagePresentFinishNotify_CmdId["CMD_ID"] = 20086] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintagePresentFinishNotify_CmdId[VintagePresentFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintagePresentFinishNotify_CmdId[VintagePresentFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintagePresentFinishNotify_CmdId = exports.VintagePresentFinishNotify_CmdId || (exports.VintagePresentFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreUnlockSlotReq.CmdId
 */
var VintageMarketStoreUnlockSlotReq_CmdId;
(function (VintageMarketStoreUnlockSlotReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreUnlockSlotReq_CmdId[VintageMarketStoreUnlockSlotReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20626;
     */
    VintageMarketStoreUnlockSlotReq_CmdId[VintageMarketStoreUnlockSlotReq_CmdId["CMD_ID"] = 20626] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreUnlockSlotReq_CmdId[VintageMarketStoreUnlockSlotReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreUnlockSlotReq_CmdId[VintageMarketStoreUnlockSlotReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreUnlockSlotReq_CmdId[VintageMarketStoreUnlockSlotReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketStoreUnlockSlotReq_CmdId = exports.VintageMarketStoreUnlockSlotReq_CmdId || (exports.VintageMarketStoreUnlockSlotReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreUnlockSlotRsp.CmdId
 */
var VintageMarketStoreUnlockSlotRsp_CmdId;
(function (VintageMarketStoreUnlockSlotRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreUnlockSlotRsp_CmdId[VintageMarketStoreUnlockSlotRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20733;
     */
    VintageMarketStoreUnlockSlotRsp_CmdId[VintageMarketStoreUnlockSlotRsp_CmdId["CMD_ID"] = 20733] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreUnlockSlotRsp_CmdId[VintageMarketStoreUnlockSlotRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreUnlockSlotRsp_CmdId[VintageMarketStoreUnlockSlotRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketStoreUnlockSlotRsp_CmdId = exports.VintageMarketStoreUnlockSlotRsp_CmdId || (exports.VintageMarketStoreUnlockSlotRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreChooseStrategyReq.CmdId
 */
var VintageMarketStoreChooseStrategyReq_CmdId;
(function (VintageMarketStoreChooseStrategyReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreChooseStrategyReq_CmdId[VintageMarketStoreChooseStrategyReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21248;
     */
    VintageMarketStoreChooseStrategyReq_CmdId[VintageMarketStoreChooseStrategyReq_CmdId["CMD_ID"] = 21248] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreChooseStrategyReq_CmdId[VintageMarketStoreChooseStrategyReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreChooseStrategyReq_CmdId[VintageMarketStoreChooseStrategyReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreChooseStrategyReq_CmdId[VintageMarketStoreChooseStrategyReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketStoreChooseStrategyReq_CmdId = exports.VintageMarketStoreChooseStrategyReq_CmdId || (exports.VintageMarketStoreChooseStrategyReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreChooseStrategyRsp.CmdId
 */
var VintageMarketStoreChooseStrategyRsp_CmdId;
(function (VintageMarketStoreChooseStrategyRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreChooseStrategyRsp_CmdId[VintageMarketStoreChooseStrategyRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24860;
     */
    VintageMarketStoreChooseStrategyRsp_CmdId[VintageMarketStoreChooseStrategyRsp_CmdId["CMD_ID"] = 24860] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreChooseStrategyRsp_CmdId[VintageMarketStoreChooseStrategyRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreChooseStrategyRsp_CmdId[VintageMarketStoreChooseStrategyRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketStoreChooseStrategyRsp_CmdId = exports.VintageMarketStoreChooseStrategyRsp_CmdId || (exports.VintageMarketStoreChooseStrategyRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreViewStrategyReq.CmdId
 */
var VintageMarketStoreViewStrategyReq_CmdId;
(function (VintageMarketStoreViewStrategyReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreViewStrategyReq_CmdId[VintageMarketStoreViewStrategyReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21700;
     */
    VintageMarketStoreViewStrategyReq_CmdId[VintageMarketStoreViewStrategyReq_CmdId["CMD_ID"] = 21700] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreViewStrategyReq_CmdId[VintageMarketStoreViewStrategyReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreViewStrategyReq_CmdId[VintageMarketStoreViewStrategyReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreViewStrategyReq_CmdId[VintageMarketStoreViewStrategyReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(VintageMarketStoreViewStrategyReq_CmdId = exports.VintageMarketStoreViewStrategyReq_CmdId || (exports.VintageMarketStoreViewStrategyReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketStoreViewStrategyRsp.CmdId
 */
var VintageMarketStoreViewStrategyRsp_CmdId;
(function (VintageMarketStoreViewStrategyRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreViewStrategyRsp_CmdId[VintageMarketStoreViewStrategyRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21814;
     */
    VintageMarketStoreViewStrategyRsp_CmdId[VintageMarketStoreViewStrategyRsp_CmdId["CMD_ID"] = 21814] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketStoreViewStrategyRsp_CmdId[VintageMarketStoreViewStrategyRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketStoreViewStrategyRsp_CmdId[VintageMarketStoreViewStrategyRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketStoreViewStrategyRsp_CmdId = exports.VintageMarketStoreViewStrategyRsp_CmdId || (exports.VintageMarketStoreViewStrategyRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketDividendFinishNotify.CmdId
 */
var VintageMarketDividendFinishNotify_CmdId;
(function (VintageMarketDividendFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDividendFinishNotify_CmdId[VintageMarketDividendFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23147;
     */
    VintageMarketDividendFinishNotify_CmdId[VintageMarketDividendFinishNotify_CmdId["CMD_ID"] = 23147] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketDividendFinishNotify_CmdId[VintageMarketDividendFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketDividendFinishNotify_CmdId[VintageMarketDividendFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketDividendFinishNotify_CmdId = exports.VintageMarketDividendFinishNotify_CmdId || (exports.VintageMarketDividendFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.VintageMarketNpcEventFinishNotify.CmdId
 */
var VintageMarketNpcEventFinishNotify_CmdId;
(function (VintageMarketNpcEventFinishNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketNpcEventFinishNotify_CmdId[VintageMarketNpcEventFinishNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24201;
     */
    VintageMarketNpcEventFinishNotify_CmdId[VintageMarketNpcEventFinishNotify_CmdId["CMD_ID"] = 24201] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    VintageMarketNpcEventFinishNotify_CmdId[VintageMarketNpcEventFinishNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    VintageMarketNpcEventFinishNotify_CmdId[VintageMarketNpcEventFinishNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(VintageMarketNpcEventFinishNotify_CmdId = exports.VintageMarketNpcEventFinishNotify_CmdId || (exports.VintageMarketNpcEventFinishNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WindFieldRestartDungeonReq.CmdId
 */
var WindFieldRestartDungeonReq_CmdId;
(function (WindFieldRestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WindFieldRestartDungeonReq_CmdId[WindFieldRestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20731;
     */
    WindFieldRestartDungeonReq_CmdId[WindFieldRestartDungeonReq_CmdId["CMD_ID"] = 20731] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WindFieldRestartDungeonReq_CmdId[WindFieldRestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WindFieldRestartDungeonReq_CmdId[WindFieldRestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WindFieldRestartDungeonReq_CmdId[WindFieldRestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(WindFieldRestartDungeonReq_CmdId = exports.WindFieldRestartDungeonReq_CmdId || (exports.WindFieldRestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.WindFieldRestartDungeonRsp.CmdId
 */
var WindFieldRestartDungeonRsp_CmdId;
(function (WindFieldRestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WindFieldRestartDungeonRsp_CmdId[WindFieldRestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24712;
     */
    WindFieldRestartDungeonRsp_CmdId[WindFieldRestartDungeonRsp_CmdId["CMD_ID"] = 24712] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    WindFieldRestartDungeonRsp_CmdId[WindFieldRestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    WindFieldRestartDungeonRsp_CmdId[WindFieldRestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(WindFieldRestartDungeonRsp_CmdId = exports.WindFieldRestartDungeonRsp_CmdId || (exports.WindFieldRestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterPlotDungeonReq.CmdId
 */
var EnterFungusFighterPlotDungeonReq_CmdId;
(function (EnterFungusFighterPlotDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterPlotDungeonReq_CmdId[EnterFungusFighterPlotDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23053;
     */
    EnterFungusFighterPlotDungeonReq_CmdId[EnterFungusFighterPlotDungeonReq_CmdId["CMD_ID"] = 23053] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterPlotDungeonReq_CmdId[EnterFungusFighterPlotDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterPlotDungeonReq_CmdId[EnterFungusFighterPlotDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterPlotDungeonReq_CmdId[EnterFungusFighterPlotDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterFungusFighterPlotDungeonReq_CmdId = exports.EnterFungusFighterPlotDungeonReq_CmdId || (exports.EnterFungusFighterPlotDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterPlotDungeonRsp.CmdId
 */
var EnterFungusFighterPlotDungeonRsp_CmdId;
(function (EnterFungusFighterPlotDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterPlotDungeonRsp_CmdId[EnterFungusFighterPlotDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21008;
     */
    EnterFungusFighterPlotDungeonRsp_CmdId[EnterFungusFighterPlotDungeonRsp_CmdId["CMD_ID"] = 21008] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterPlotDungeonRsp_CmdId[EnterFungusFighterPlotDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterPlotDungeonRsp_CmdId[EnterFungusFighterPlotDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterFungusFighterPlotDungeonRsp_CmdId = exports.EnterFungusFighterPlotDungeonRsp_CmdId || (exports.EnterFungusFighterPlotDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterPlotInfoNotify.CmdId
 */
var FungusFighterPlotInfoNotify_CmdId;
(function (FungusFighterPlotInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterPlotInfoNotify_CmdId[FungusFighterPlotInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22174;
     */
    FungusFighterPlotInfoNotify_CmdId[FungusFighterPlotInfoNotify_CmdId["CMD_ID"] = 22174] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterPlotInfoNotify_CmdId[FungusFighterPlotInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterPlotInfoNotify_CmdId[FungusFighterPlotInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterPlotInfoNotify_CmdId = exports.FungusFighterPlotInfoNotify_CmdId || (exports.FungusFighterPlotInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusCultivateReq.CmdId
 */
var FungusCultivateReq_CmdId;
(function (FungusCultivateReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusCultivateReq_CmdId[FungusCultivateReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21749;
     */
    FungusCultivateReq_CmdId[FungusCultivateReq_CmdId["CMD_ID"] = 21749] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusCultivateReq_CmdId[FungusCultivateReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusCultivateReq_CmdId[FungusCultivateReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusCultivateReq_CmdId[FungusCultivateReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusCultivateReq_CmdId = exports.FungusCultivateReq_CmdId || (exports.FungusCultivateReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusCultivateRsp.CmdId
 */
var FungusCultivateRsp_CmdId;
(function (FungusCultivateRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusCultivateRsp_CmdId[FungusCultivateRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23532;
     */
    FungusCultivateRsp_CmdId[FungusCultivateRsp_CmdId["CMD_ID"] = 23532] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusCultivateRsp_CmdId[FungusCultivateRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusCultivateRsp_CmdId[FungusCultivateRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusCultivateRsp_CmdId = exports.FungusCultivateRsp_CmdId || (exports.FungusCultivateRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusRenameReq.CmdId
 */
var FungusRenameReq_CmdId;
(function (FungusRenameReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusRenameReq_CmdId[FungusRenameReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22006;
     */
    FungusRenameReq_CmdId[FungusRenameReq_CmdId["CMD_ID"] = 22006] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusRenameReq_CmdId[FungusRenameReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusRenameReq_CmdId[FungusRenameReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusRenameReq_CmdId[FungusRenameReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusRenameReq_CmdId = exports.FungusRenameReq_CmdId || (exports.FungusRenameReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusRenameRsp.CmdId
 */
var FungusRenameRsp_CmdId;
(function (FungusRenameRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusRenameRsp_CmdId[FungusRenameRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 20066;
     */
    FungusRenameRsp_CmdId[FungusRenameRsp_CmdId["CMD_ID"] = 20066] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusRenameRsp_CmdId[FungusRenameRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusRenameRsp_CmdId[FungusRenameRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusRenameRsp_CmdId = exports.FungusRenameRsp_CmdId || (exports.FungusRenameRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterTrainingDungeonReq.CmdId
 */
var EnterFungusFighterTrainingDungeonReq_CmdId;
(function (EnterFungusFighterTrainingDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterTrainingDungeonReq_CmdId[EnterFungusFighterTrainingDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23860;
     */
    EnterFungusFighterTrainingDungeonReq_CmdId[EnterFungusFighterTrainingDungeonReq_CmdId["CMD_ID"] = 23860] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterTrainingDungeonReq_CmdId[EnterFungusFighterTrainingDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterTrainingDungeonReq_CmdId[EnterFungusFighterTrainingDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterTrainingDungeonReq_CmdId[EnterFungusFighterTrainingDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EnterFungusFighterTrainingDungeonReq_CmdId = exports.EnterFungusFighterTrainingDungeonReq_CmdId || (exports.EnterFungusFighterTrainingDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EnterFungusFighterTrainingDungeonRsp.CmdId
 */
var EnterFungusFighterTrainingDungeonRsp_CmdId;
(function (EnterFungusFighterTrainingDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterTrainingDungeonRsp_CmdId[EnterFungusFighterTrainingDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21593;
     */
    EnterFungusFighterTrainingDungeonRsp_CmdId[EnterFungusFighterTrainingDungeonRsp_CmdId["CMD_ID"] = 21593] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EnterFungusFighterTrainingDungeonRsp_CmdId[EnterFungusFighterTrainingDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EnterFungusFighterTrainingDungeonRsp_CmdId[EnterFungusFighterTrainingDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EnterFungusFighterTrainingDungeonRsp_CmdId = exports.EnterFungusFighterTrainingDungeonRsp_CmdId || (exports.EnterFungusFighterTrainingDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRuntimeDataNotify.CmdId
 */
var FungusFighterRuntimeDataNotify_CmdId;
(function (FungusFighterRuntimeDataNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRuntimeDataNotify_CmdId[FungusFighterRuntimeDataNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24674;
     */
    FungusFighterRuntimeDataNotify_CmdId[FungusFighterRuntimeDataNotify_CmdId["CMD_ID"] = 24674] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRuntimeDataNotify_CmdId[FungusFighterRuntimeDataNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterRuntimeDataNotify_CmdId[FungusFighterRuntimeDataNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterRuntimeDataNotify_CmdId = exports.FungusFighterRuntimeDataNotify_CmdId || (exports.FungusFighterRuntimeDataNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingSelectFungusReq.CmdId
 */
var FungusFighterTrainingSelectFungusReq_CmdId;
(function (FungusFighterTrainingSelectFungusReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingSelectFungusReq_CmdId[FungusFighterTrainingSelectFungusReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23903;
     */
    FungusFighterTrainingSelectFungusReq_CmdId[FungusFighterTrainingSelectFungusReq_CmdId["CMD_ID"] = 23903] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingSelectFungusReq_CmdId[FungusFighterTrainingSelectFungusReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterTrainingSelectFungusReq_CmdId[FungusFighterTrainingSelectFungusReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterTrainingSelectFungusReq_CmdId[FungusFighterTrainingSelectFungusReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusFighterTrainingSelectFungusReq_CmdId = exports.FungusFighterTrainingSelectFungusReq_CmdId || (exports.FungusFighterTrainingSelectFungusReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingSelectFungusRsp.CmdId
 */
var FungusFighterTrainingSelectFungusRsp_CmdId;
(function (FungusFighterTrainingSelectFungusRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingSelectFungusRsp_CmdId[FungusFighterTrainingSelectFungusRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21570;
     */
    FungusFighterTrainingSelectFungusRsp_CmdId[FungusFighterTrainingSelectFungusRsp_CmdId["CMD_ID"] = 21570] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingSelectFungusRsp_CmdId[FungusFighterTrainingSelectFungusRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterTrainingSelectFungusRsp_CmdId[FungusFighterTrainingSelectFungusRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterTrainingSelectFungusRsp_CmdId = exports.FungusFighterTrainingSelectFungusRsp_CmdId || (exports.FungusFighterTrainingSelectFungusRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingGallerySettleNotify.CmdId
 */
var FungusFighterTrainingGallerySettleNotify_CmdId;
(function (FungusFighterTrainingGallerySettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingGallerySettleNotify_CmdId[FungusFighterTrainingGallerySettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23931;
     */
    FungusFighterTrainingGallerySettleNotify_CmdId[FungusFighterTrainingGallerySettleNotify_CmdId["CMD_ID"] = 23931] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterTrainingGallerySettleNotify_CmdId[FungusFighterTrainingGallerySettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterTrainingGallerySettleNotify_CmdId[FungusFighterTrainingGallerySettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterTrainingGallerySettleNotify_CmdId = exports.FungusFighterTrainingGallerySettleNotify_CmdId || (exports.FungusFighterTrainingGallerySettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterClearTrainingRuntimeDataReq.CmdId
 */
var FungusFighterClearTrainingRuntimeDataReq_CmdId;
(function (FungusFighterClearTrainingRuntimeDataReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterClearTrainingRuntimeDataReq_CmdId[FungusFighterClearTrainingRuntimeDataReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24137;
     */
    FungusFighterClearTrainingRuntimeDataReq_CmdId[FungusFighterClearTrainingRuntimeDataReq_CmdId["CMD_ID"] = 24137] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterClearTrainingRuntimeDataReq_CmdId[FungusFighterClearTrainingRuntimeDataReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterClearTrainingRuntimeDataReq_CmdId[FungusFighterClearTrainingRuntimeDataReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterClearTrainingRuntimeDataReq_CmdId[FungusFighterClearTrainingRuntimeDataReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusFighterClearTrainingRuntimeDataReq_CmdId = exports.FungusFighterClearTrainingRuntimeDataReq_CmdId || (exports.FungusFighterClearTrainingRuntimeDataReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp.CmdId
 */
var FungusFighterClearTrainingRuntimeDataRsp_CmdId;
(function (FungusFighterClearTrainingRuntimeDataRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterClearTrainingRuntimeDataRsp_CmdId[FungusFighterClearTrainingRuntimeDataRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22991;
     */
    FungusFighterClearTrainingRuntimeDataRsp_CmdId[FungusFighterClearTrainingRuntimeDataRsp_CmdId["CMD_ID"] = 22991] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterClearTrainingRuntimeDataRsp_CmdId[FungusFighterClearTrainingRuntimeDataRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterClearTrainingRuntimeDataRsp_CmdId[FungusFighterClearTrainingRuntimeDataRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterClearTrainingRuntimeDataRsp_CmdId = exports.FungusFighterClearTrainingRuntimeDataRsp_CmdId || (exports.FungusFighterClearTrainingRuntimeDataRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterUseBackupFungusReq.CmdId
 */
var FungusFighterUseBackupFungusReq_CmdId;
(function (FungusFighterUseBackupFungusReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterUseBackupFungusReq_CmdId[FungusFighterUseBackupFungusReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21266;
     */
    FungusFighterUseBackupFungusReq_CmdId[FungusFighterUseBackupFungusReq_CmdId["CMD_ID"] = 21266] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterUseBackupFungusReq_CmdId[FungusFighterUseBackupFungusReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterUseBackupFungusReq_CmdId[FungusFighterUseBackupFungusReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterUseBackupFungusReq_CmdId[FungusFighterUseBackupFungusReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusFighterUseBackupFungusReq_CmdId = exports.FungusFighterUseBackupFungusReq_CmdId || (exports.FungusFighterUseBackupFungusReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterUseBackupFungusRsp.CmdId
 */
var FungusFighterUseBackupFungusRsp_CmdId;
(function (FungusFighterUseBackupFungusRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterUseBackupFungusRsp_CmdId[FungusFighterUseBackupFungusRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23428;
     */
    FungusFighterUseBackupFungusRsp_CmdId[FungusFighterUseBackupFungusRsp_CmdId["CMD_ID"] = 23428] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterUseBackupFungusRsp_CmdId[FungusFighterUseBackupFungusRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterUseBackupFungusRsp_CmdId[FungusFighterUseBackupFungusRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterUseBackupFungusRsp_CmdId = exports.FungusFighterUseBackupFungusRsp_CmdId || (exports.FungusFighterUseBackupFungusRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRestartTraningDungeonReq.CmdId
 */
var FungusFighterRestartTraningDungeonReq_CmdId;
(function (FungusFighterRestartTraningDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRestartTraningDungeonReq_CmdId[FungusFighterRestartTraningDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23980;
     */
    FungusFighterRestartTraningDungeonReq_CmdId[FungusFighterRestartTraningDungeonReq_CmdId["CMD_ID"] = 23980] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRestartTraningDungeonReq_CmdId[FungusFighterRestartTraningDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterRestartTraningDungeonReq_CmdId[FungusFighterRestartTraningDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterRestartTraningDungeonReq_CmdId[FungusFighterRestartTraningDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(FungusFighterRestartTraningDungeonReq_CmdId = exports.FungusFighterRestartTraningDungeonReq_CmdId || (exports.FungusFighterRestartTraningDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterRestartTraningDungeonRsp.CmdId
 */
var FungusFighterRestartTraningDungeonRsp_CmdId;
(function (FungusFighterRestartTraningDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRestartTraningDungeonRsp_CmdId[FungusFighterRestartTraningDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22890;
     */
    FungusFighterRestartTraningDungeonRsp_CmdId[FungusFighterRestartTraningDungeonRsp_CmdId["CMD_ID"] = 22890] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    FungusFighterRestartTraningDungeonRsp_CmdId[FungusFighterRestartTraningDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    FungusFighterRestartTraningDungeonRsp_CmdId[FungusFighterRestartTraningDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(FungusFighterRestartTraningDungeonRsp_CmdId = exports.FungusFighterRestartTraningDungeonRsp_CmdId || (exports.FungusFighterRestartTraningDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.CharAmusementSettleNotify.CmdId
 */
var CharAmusementSettleNotify_CmdId;
(function (CharAmusementSettleNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CharAmusementSettleNotify_CmdId[CharAmusementSettleNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23133;
     */
    CharAmusementSettleNotify_CmdId[CharAmusementSettleNotify_CmdId["CMD_ID"] = 23133] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    CharAmusementSettleNotify_CmdId[CharAmusementSettleNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    CharAmusementSettleNotify_CmdId[CharAmusementSettleNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(CharAmusementSettleNotify_CmdId = exports.CharAmusementSettleNotify_CmdId || (exports.CharAmusementSettleNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2EnterDungeonReq.CmdId
 */
var EffigyChallengeV2EnterDungeonReq_CmdId;
(function (EffigyChallengeV2EnterDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2EnterDungeonReq_CmdId[EffigyChallengeV2EnterDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23489;
     */
    EffigyChallengeV2EnterDungeonReq_CmdId[EffigyChallengeV2EnterDungeonReq_CmdId["CMD_ID"] = 23489] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2EnterDungeonReq_CmdId[EffigyChallengeV2EnterDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2EnterDungeonReq_CmdId[EffigyChallengeV2EnterDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2EnterDungeonReq_CmdId[EffigyChallengeV2EnterDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EffigyChallengeV2EnterDungeonReq_CmdId = exports.EffigyChallengeV2EnterDungeonReq_CmdId || (exports.EffigyChallengeV2EnterDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2EnterDungeonRsp.CmdId
 */
var EffigyChallengeV2EnterDungeonRsp_CmdId;
(function (EffigyChallengeV2EnterDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2EnterDungeonRsp_CmdId[EffigyChallengeV2EnterDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24917;
     */
    EffigyChallengeV2EnterDungeonRsp_CmdId[EffigyChallengeV2EnterDungeonRsp_CmdId["CMD_ID"] = 24917] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2EnterDungeonRsp_CmdId[EffigyChallengeV2EnterDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2EnterDungeonRsp_CmdId[EffigyChallengeV2EnterDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeV2EnterDungeonRsp_CmdId = exports.EffigyChallengeV2EnterDungeonRsp_CmdId || (exports.EffigyChallengeV2EnterDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2RestartDungeonReq.CmdId
 */
var EffigyChallengeV2RestartDungeonReq_CmdId;
(function (EffigyChallengeV2RestartDungeonReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2RestartDungeonReq_CmdId[EffigyChallengeV2RestartDungeonReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 24522;
     */
    EffigyChallengeV2RestartDungeonReq_CmdId[EffigyChallengeV2RestartDungeonReq_CmdId["CMD_ID"] = 24522] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2RestartDungeonReq_CmdId[EffigyChallengeV2RestartDungeonReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2RestartDungeonReq_CmdId[EffigyChallengeV2RestartDungeonReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2RestartDungeonReq_CmdId[EffigyChallengeV2RestartDungeonReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EffigyChallengeV2RestartDungeonReq_CmdId = exports.EffigyChallengeV2RestartDungeonReq_CmdId || (exports.EffigyChallengeV2RestartDungeonReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2RestartDungeonRsp.CmdId
 */
var EffigyChallengeV2RestartDungeonRsp_CmdId;
(function (EffigyChallengeV2RestartDungeonRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2RestartDungeonRsp_CmdId[EffigyChallengeV2RestartDungeonRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 23167;
     */
    EffigyChallengeV2RestartDungeonRsp_CmdId[EffigyChallengeV2RestartDungeonRsp_CmdId["CMD_ID"] = 23167] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2RestartDungeonRsp_CmdId[EffigyChallengeV2RestartDungeonRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2RestartDungeonRsp_CmdId[EffigyChallengeV2RestartDungeonRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeV2RestartDungeonRsp_CmdId = exports.EffigyChallengeV2RestartDungeonRsp_CmdId || (exports.EffigyChallengeV2RestartDungeonRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2ChooseSkillReq.CmdId
 */
var EffigyChallengeV2ChooseSkillReq_CmdId;
(function (EffigyChallengeV2ChooseSkillReq_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2ChooseSkillReq_CmdId[EffigyChallengeV2ChooseSkillReq_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 21269;
     */
    EffigyChallengeV2ChooseSkillReq_CmdId[EffigyChallengeV2ChooseSkillReq_CmdId["CMD_ID"] = 21269] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2ChooseSkillReq_CmdId[EffigyChallengeV2ChooseSkillReq_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2ChooseSkillReq_CmdId[EffigyChallengeV2ChooseSkillReq_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2ChooseSkillReq_CmdId[EffigyChallengeV2ChooseSkillReq_CmdId["IS_ALLOW_CLIENT"] = 1] = "IS_ALLOW_CLIENT";
})(EffigyChallengeV2ChooseSkillReq_CmdId = exports.EffigyChallengeV2ChooseSkillReq_CmdId || (exports.EffigyChallengeV2ChooseSkillReq_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2ChooseSkillRsp.CmdId
 */
var EffigyChallengeV2ChooseSkillRsp_CmdId;
(function (EffigyChallengeV2ChooseSkillRsp_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2ChooseSkillRsp_CmdId[EffigyChallengeV2ChooseSkillRsp_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22448;
     */
    EffigyChallengeV2ChooseSkillRsp_CmdId[EffigyChallengeV2ChooseSkillRsp_CmdId["CMD_ID"] = 22448] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2ChooseSkillRsp_CmdId[EffigyChallengeV2ChooseSkillRsp_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2ChooseSkillRsp_CmdId[EffigyChallengeV2ChooseSkillRsp_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeV2ChooseSkillRsp_CmdId = exports.EffigyChallengeV2ChooseSkillRsp_CmdId || (exports.EffigyChallengeV2ChooseSkillRsp_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.EffigyChallengeV2DungeonInfoNotify.CmdId
 */
var EffigyChallengeV2DungeonInfoNotify_CmdId;
(function (EffigyChallengeV2DungeonInfoNotify_CmdId) {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2DungeonInfoNotify_CmdId[EffigyChallengeV2DungeonInfoNotify_CmdId["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: CMD_ID = 22835;
     */
    EffigyChallengeV2DungeonInfoNotify_CmdId[EffigyChallengeV2DungeonInfoNotify_CmdId["CMD_ID"] = 22835] = "CMD_ID";
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    EffigyChallengeV2DungeonInfoNotify_CmdId[EffigyChallengeV2DungeonInfoNotify_CmdId["ENET_CHANNEL_ID"] = 0] = "ENET_CHANNEL_ID";
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    EffigyChallengeV2DungeonInfoNotify_CmdId[EffigyChallengeV2DungeonInfoNotify_CmdId["ENET_IS_RELIABLE"] = 1] = "ENET_IS_RELIABLE";
})(EffigyChallengeV2DungeonInfoNotify_CmdId = exports.EffigyChallengeV2DungeonInfoNotify_CmdId || (exports.EffigyChallengeV2DungeonInfoNotify_CmdId = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueCellState
 */
var RogueCellState;
(function (RogueCellState) {
    /**
     * @generated from protobuf enum value: ROGUE_CELL_NONE = 0;
     */
    RogueCellState[RogueCellState["ROGUE_CELL_NONE"] = 0] = "ROGUE_CELL_NONE";
    /**
     * @generated from protobuf enum value: ROGUE_CELL_BATTLE = 1;
     */
    RogueCellState[RogueCellState["ROGUE_CELL_BATTLE"] = 1] = "ROGUE_CELL_BATTLE";
    /**
     * @generated from protobuf enum value: ROGUE_CELL_SUCCESS = 2;
     */
    RogueCellState[RogueCellState["ROGUE_CELL_SUCCESS"] = 2] = "ROGUE_CELL_SUCCESS";
    /**
     * @generated from protobuf enum value: ROGUE_CELL_FINISH = 3;
     */
    RogueCellState[RogueCellState["ROGUE_CELL_FINISH"] = 3] = "ROGUE_CELL_FINISH";
    /**
     * @generated from protobuf enum value: ROGUE_CELL_TAKEN_CHEST = 4;
     */
    RogueCellState[RogueCellState["ROGUE_CELL_TAKEN_CHEST"] = 4] = "ROGUE_CELL_TAKEN_CHEST";
})(RogueCellState = exports.RogueCellState || (exports.RogueCellState = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueEliteCellDifficultyType
 */
var RogueEliteCellDifficultyType;
(function (RogueEliteCellDifficultyType) {
    /**
     * @generated from protobuf enum value: ROGUE_ELITE_NORMAL = 0;
     */
    RogueEliteCellDifficultyType[RogueEliteCellDifficultyType["ROGUE_ELITE_NORMAL"] = 0] = "ROGUE_ELITE_NORMAL";
    /**
     * @generated from protobuf enum value: ROGUE_ELITE_HARD = 1;
     */
    RogueEliteCellDifficultyType[RogueEliteCellDifficultyType["ROGUE_ELITE_HARD"] = 1] = "ROGUE_ELITE_HARD";
})(RogueEliteCellDifficultyType = exports.RogueEliteCellDifficultyType || (exports.RogueEliteCellDifficultyType = {}));
/**
 * @generated from protobuf enum com.midnights.game.RogueDiaryAvatarDisableStatus
 */
var RogueDiaryAvatarDisableStatus;
(function (RogueDiaryAvatarDisableStatus) {
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_NONE = 0;
     */
    RogueDiaryAvatarDisableStatus[RogueDiaryAvatarDisableStatus["ROGUE_DIARY_AVATAR_DISABLE_NONE"] = 0] = "ROGUE_DIARY_AVATAR_DISABLE_NONE";
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_DEATH = 1;
     */
    RogueDiaryAvatarDisableStatus[RogueDiaryAvatarDisableStatus["ROGUE_DIARY_AVATAR_DISABLE_DEATH"] = 1] = "ROGUE_DIARY_AVATAR_DISABLE_DEATH";
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_TIRED = 2;
     */
    RogueDiaryAvatarDisableStatus[RogueDiaryAvatarDisableStatus["ROGUE_DIARY_AVATAR_DISABLE_TIRED"] = 2] = "ROGUE_DIARY_AVATAR_DISABLE_TIRED";
    /**
     * @generated from protobuf enum value: ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED = 3;
     */
    RogueDiaryAvatarDisableStatus[RogueDiaryAvatarDisableStatus["ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED"] = 3] = "ROGUE_DIARY_AVATAR_DISABLE_DUPLICATED";
})(RogueDiaryAvatarDisableStatus = exports.RogueDiaryAvatarDisableStatus || (exports.RogueDiaryAvatarDisableStatus = {}));
/**
 * @generated from protobuf enum com.midnights.game.ActivityPushTipsState
 */
var ActivityPushTipsState;
(function (ActivityPushTipsState) {
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_NONE = 0;
     */
    ActivityPushTipsState[ActivityPushTipsState["NONE"] = 0] = "NONE";
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_START = 1;
     */
    ActivityPushTipsState[ActivityPushTipsState["START"] = 1] = "START";
    /**
     * @generated from protobuf enum value: ACTIVITY_PUSH_TIPS_STATE_READ = 2;
     */
    ActivityPushTipsState[ActivityPushTipsState["READ"] = 2] = "READ";
})(ActivityPushTipsState = exports.ActivityPushTipsState || (exports.ActivityPushTipsState = {}));
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityScheduleReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetActivityScheduleReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityScheduleReq
 */
exports.GetActivityScheduleReq = new GetActivityScheduleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityScheduleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityScheduleInfo", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional bool is_open */ 2:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 1:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 10:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional bool is_open = 2; */
        if (message.isOpen !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 end_time = 1; */
        if (message.endTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.endTime);
        /* optional uint32 begin_time = 10; */
        if (message.beginTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityScheduleInfo
 */
exports.ActivityScheduleInfo = new ActivityScheduleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityScheduleRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetActivityScheduleRsp", [
            { no: 9, name: "activity_schedule_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityScheduleInfo },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "remain_fly_sea_lamp_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activityScheduleList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list */ 9:
                    message.activityScheduleList.push(exports.ActivityScheduleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 remain_fly_sea_lamp_num */ 4:
                    message.remainFlySeaLampNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 9; */
        for (let i = 0; i < message.activityScheduleList.length; i++)
            exports.ActivityScheduleInfo.internalBinaryWrite(message.activityScheduleList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 remain_fly_sea_lamp_num = 4; */
        if (message.remainFlySeaLampNum !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.remainFlySeaLampNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityScheduleRsp
 */
exports.GetActivityScheduleRsp = new GetActivityScheduleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetActivityInfoReq", [
            { no: 4, name: "activity_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activityIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activity_id_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityIdList.push(reader.uint32());
                    else
                        message.activityIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 activity_id_list = 4; */
        if (message.activityIdList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityIdList.length; i++)
                writer.uint32(message.activityIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityInfoReq
 */
exports.GetActivityInfoReq = new GetActivityInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityInfo", [
            { no: 6, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "activity_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 329, name: "taken_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 919, name: "is_hidden", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1449, name: "is_quick_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "meet_cond_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 682, name: "activity_coin_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 102, name: "is_banner_cleared", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1906, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 592, name: "first_day_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_play_open_anim", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1958, name: "score_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1399, name: "wish_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 1290, name: "selected_avatar_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1963, name: "is_common_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "expire_cond_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 864, name: "activity_push_tips_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityPushTipsData },
            { no: 2, name: "watcher_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityWatcherInfo },
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_starting", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "sam_lamp_info", kind: "message", oneof: "detail", T: () => exports.SeaLampActivityDetailInfo },
            { no: 14, name: "crucible_info", kind: "message", oneof: "detail", T: () => exports.CrucibleActivityDetailInfo },
            { no: 11, name: "salesman_info", kind: "message", oneof: "detail", T: () => exports.SalesmanActivityDetailInfo },
            { no: 1, name: "trial_avatar_info", kind: "message", oneof: "detail", T: () => exports.TrialAvatarActivityDetailInfo },
            { no: 1092, name: "delivery_info", kind: "message", oneof: "detail", T: () => exports.DeliveryActivityDetailInfo },
            { no: 557, name: "aster_info", kind: "message", oneof: "detail", T: () => exports.AsterActivityDetailInfo },
            { no: 1365, name: "flight_info", kind: "message", oneof: "detail", T: () => exports.FlightActivityDetailInfo },
            { no: 1727, name: "dragon_spine_info", kind: "message", oneof: "detail", T: () => exports.DragonSpineActivityDetailInfo },
            { no: 391, name: "effigy_info", kind: "message", oneof: "detail", T: () => exports.EffigyActivityDetailInfo },
            { no: 1114, name: "treasure_map_info", kind: "message", oneof: "detail", T: () => exports.TreasureMapActivityDetailInfo },
            { no: 1869, name: "blessing_info", kind: "message", oneof: "detail", T: () => exports.BlessingActivityDetailInfo },
            { no: 494, name: "sea_lamp_info", kind: "message", oneof: "detail", T: () => exports.SeaLampActivityInfo },
            { no: 202, name: "expedition_info", kind: "message", oneof: "detail", T: () => exports.ExpeditionActivityDetailInfo },
            { no: 859, name: "arena_challenge_info", kind: "message", oneof: "detail", T: () => exports.ArenaChallengeActivityDetailInfo },
            { no: 857, name: "fleur_fair_info", kind: "message", oneof: "detail", T: () => exports.FleurFairActivityDetailInfo },
            { no: 1675, name: "water_spirit_info", kind: "message", oneof: "detail", T: () => exports.WaterSpiritActivityDetailInfo },
            { no: 1015, name: "challneler_slab_info", kind: "message", oneof: "detail", T: () => exports.ChannelerSlabActivityDetailInfo },
            { no: 156, name: "mist_trial_activity_info", kind: "message", oneof: "detail", T: () => exports.MistTrialActivityDetailInfo },
            { no: 427, name: "hide_and_seek_info", kind: "message", oneof: "detail", T: () => exports.HideAndSeekActivityDetailInfo },
            { no: 1411, name: "find_hilichurl_info", kind: "message", oneof: "detail", T: () => exports.FindHilichurlDetailInfo },
            { no: 1372, name: "summer_time_info", kind: "message", oneof: "detail", T: () => exports.SummerTimeDetailInfo },
            { no: 1842, name: "buoyant_combat_info", kind: "message", oneof: "detail", T: () => exports.BuoyantCombatDetailInfo },
            { no: 1113, name: "echo_shell_info", kind: "message", oneof: "detail", T: () => exports.EchoShellDetailInfo },
            { no: 767, name: "bounce_conjuring_info", kind: "message", oneof: "detail", T: () => exports.BounceConjuringActivityDetailInfo },
            { no: 794, name: "blitz_rush_info", kind: "message", oneof: "detail", T: () => exports.BlitzRushActivityDetailInfo },
            { no: 927, name: "chess_info", kind: "message", oneof: "detail", T: () => exports.ChessActivityDetailInfo },
            { no: 1261, name: "sumo_info", kind: "message", oneof: "detail", T: () => exports.SumoActivityDetailInfo },
            { no: 1588, name: "moonfin_trial_info", kind: "message", oneof: "detail", T: () => exports.MoonfinTrialActivityDetailInfo },
            { no: 814, name: "luna_rite_info", kind: "message", oneof: "detail", T: () => exports.LunaRiteDetailInfo },
            { no: 54, name: "plant_flower_info", kind: "message", oneof: "detail", T: () => exports.PlantFlowerActivityDetailInfo },
            { no: 460, name: "music_game_info", kind: "message", oneof: "detail", T: () => exports.MusicGameActivityDetailInfo },
            { no: 219, name: "roguelike_dungoen_info", kind: "message", oneof: "detail", T: () => exports.RoguelikeDungeonActivityDetailInfo },
            { no: 403, name: "dig_info", kind: "message", oneof: "detail", T: () => exports.DigActivityDetailInfo },
            { no: 491, name: "hachi_info", kind: "message", oneof: "detail", T: () => exports.HachiActivityDetailInfo },
            { no: 1083, name: "winter_camp_info", kind: "message", oneof: "detail", T: () => exports.WinterCampActivityDetailInfo },
            { no: 1273, name: "potion_info", kind: "message", oneof: "detail", T: () => exports.PotionActivityDetailInfo },
            { no: 1796, name: "tanuki_travel_activity_info", kind: "message", oneof: "detail", T: () => exports.TanukiTravelActivityDetailInfo },
            { no: 1876, name: "lantern_rite_activity_info", kind: "message", oneof: "detail", T: () => exports.LanternRiteActivityDetailInfo },
            { no: 194, name: "michiae_matsuri_info", kind: "message", oneof: "detail", T: () => exports.MichiaeMatsuriActivityDetailInfo },
            { no: 1725, name: "bartender_info", kind: "message", oneof: "detail", T: () => exports.BartenderActivityDetailInfo },
            { no: 703, name: "ugc_info", kind: "message", oneof: "detail", T: () => exports.UgcActivityDetailInfo },
            { no: 1226, name: "crystal_link_info", kind: "message", oneof: "detail", T: () => exports.CrystalLinkActivityDetailInfo },
            { no: 750, name: "irodori_info", kind: "message", oneof: "detail", T: () => exports.IrodoriActivityDetailInfo },
            { no: 328, name: "photo_info", kind: "message", oneof: "detail", T: () => exports.PhotoActivityDetailInfo },
            { no: 1891, name: "spice_info", kind: "message", oneof: "detail", T: () => exports.SpiceActivityDetailInfo },
            { no: 825, name: "gacha_info", kind: "message", oneof: "detail", T: () => exports.GachaActivityDetailInfo },
            { no: 1308, name: "luminance_stone_challenge_info", kind: "message", oneof: "detail", T: () => exports.LuminanceStoneChallengeActivityDetailInfo },
            { no: 812, name: "rogue_diary_info", kind: "message", oneof: "detail", T: () => exports.RogueDiaryActivityDetailInfo },
            { no: 622, name: "summer_time_v2_info", kind: "message", oneof: "detail", T: () => exports.SummerTimeV2DetailInfo },
            { no: 1885, name: "island_party_info", kind: "message", oneof: "detail", T: () => exports.IslandPartyDetailInfo },
            { no: 722, name: "gear_info", kind: "message", oneof: "detail", T: () => exports.GearActivityDetailInfo },
            { no: 1911, name: "graven_innocence_info", kind: "message", oneof: "detail", T: () => exports.GravenInnocenceDetailInfo },
            { no: 1043, name: "instable_spray_info", kind: "message", oneof: "detail", T: () => exports.InstableSprayDetailInfo },
            { no: 1157, name: "muqadas_potion_info", kind: "message", oneof: "detail", T: () => exports.MuqadasPotionActivityDetailInfo },
            { no: 966, name: "treasure_seelie_info", kind: "message", oneof: "detail", T: () => exports.TreasureSeelieActivityDetailInfo },
            { no: 1078, name: "rock_board_explore_info", kind: "message", oneof: "detail", T: () => exports.RockBoardExploreDetailInfo },
            { no: 445, name: "vintage_info", kind: "message", oneof: "detail", T: () => exports.VintageActivityDetailInfo },
            { no: 352, name: "wind_field_info", kind: "message", oneof: "detail", T: () => exports.WindFieldDetailInfo },
            { no: 490, name: "fungus_fighter_info", kind: "message", oneof: "detail", T: () => exports.FungusFighterDetailInfo },
            { no: 1496, name: "char_amusement_info", kind: "message", oneof: "detail", T: () => exports.CharAmusementDetailInfo },
            { no: 1025, name: "effigy_challenge_info", kind: "message", oneof: "detail", T: () => exports.EffigyChallengeV2DetailInfo }
        ]);
    }
    create(value) {
        const message = { takenRewardList: [], meetCondList: [], activityCoinMap: {}, wishGiftNumMap: {}, expireCondList: [], activityPushTipsDataList: [], watcherInfoList: [], detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 6:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 activity_type */ 4:
                    message.activityType = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 8:
                    message.beginTime = reader.uint32();
                    break;
                case /* repeated uint32 taken_reward_list */ 329:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardList.push(reader.uint32());
                    else
                        message.takenRewardList.push(reader.uint32());
                    break;
                case /* optional bool is_hidden */ 919:
                    message.isHidden = reader.bool();
                    break;
                case /* optional bool is_quick_open */ 1449:
                    message.isQuickOpen = reader.bool();
                    break;
                case /* repeated uint32 meet_cond_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.meetCondList.push(reader.uint32());
                    else
                        message.meetCondList.push(reader.uint32());
                    break;
                case /* map<uint32, uint32> activity_coin_map */ 682:
                    this.binaryReadMap682(message.activityCoinMap, reader, options);
                    break;
                case /* optional bool is_banner_cleared */ 102:
                    message.isBannerCleared = reader.bool();
                    break;
                case /* optional uint32 cur_score */ 1906:
                    message.curScore = reader.uint32();
                    break;
                case /* optional uint32 first_day_start_time */ 592:
                    message.firstDayStartTime = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 12:
                    message.activityId = reader.uint32();
                    break;
                case /* optional bool is_play_open_anim */ 13:
                    message.isPlayOpenAnim = reader.bool();
                    break;
                case /* optional uint32 end_time */ 5:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 score_limit */ 1958:
                    message.scoreLimit = reader.uint32();
                    break;
                case /* map<uint32, uint32> wish_gift_num_map */ 1399:
                    this.binaryReadMap1399(message.wishGiftNumMap, reader, options);
                    break;
                case /* optional uint32 selected_avatar_reward_id */ 1290:
                    message.selectedAvatarRewardId = reader.uint32();
                    break;
                case /* optional bool is_common_content_closed */ 1963:
                    message.isCommonContentClosed = reader.bool();
                    break;
                case /* repeated uint32 expire_cond_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.expireCondList.push(reader.uint32());
                    else
                        message.expireCondList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list */ 864:
                    message.activityPushTipsDataList.push(exports.ActivityPushTipsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ActivityWatcherInfo watcher_info_list */ 2:
                    message.watcherInfoList.push(exports.ActivityWatcherInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional bool is_starting */ 9:
                    message.isStarting = reader.bool();
                    break;
                case /* com.midnights.game.SeaLampActivityDetailInfo sam_lamp_info */ 7:
                    message.detail = {
                        oneofKind: "samLampInfo",
                        samLampInfo: exports.SeaLampActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.samLampInfo)
                    };
                    break;
                case /* com.midnights.game.CrucibleActivityDetailInfo crucible_info */ 14:
                    message.detail = {
                        oneofKind: "crucibleInfo",
                        crucibleInfo: exports.CrucibleActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.crucibleInfo)
                    };
                    break;
                case /* com.midnights.game.SalesmanActivityDetailInfo salesman_info */ 11:
                    message.detail = {
                        oneofKind: "salesmanInfo",
                        salesmanInfo: exports.SalesmanActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.salesmanInfo)
                    };
                    break;
                case /* com.midnights.game.TrialAvatarActivityDetailInfo trial_avatar_info */ 1:
                    message.detail = {
                        oneofKind: "trialAvatarInfo",
                        trialAvatarInfo: exports.TrialAvatarActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.trialAvatarInfo)
                    };
                    break;
                case /* com.midnights.game.DeliveryActivityDetailInfo delivery_info */ 1092:
                    message.detail = {
                        oneofKind: "deliveryInfo",
                        deliveryInfo: exports.DeliveryActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.deliveryInfo)
                    };
                    break;
                case /* com.midnights.game.AsterActivityDetailInfo aster_info */ 557:
                    message.detail = {
                        oneofKind: "asterInfo",
                        asterInfo: exports.AsterActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.asterInfo)
                    };
                    break;
                case /* com.midnights.game.FlightActivityDetailInfo flight_info */ 1365:
                    message.detail = {
                        oneofKind: "flightInfo",
                        flightInfo: exports.FlightActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.flightInfo)
                    };
                    break;
                case /* com.midnights.game.DragonSpineActivityDetailInfo dragon_spine_info */ 1727:
                    message.detail = {
                        oneofKind: "dragonSpineInfo",
                        dragonSpineInfo: exports.DragonSpineActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.dragonSpineInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyActivityDetailInfo effigy_info */ 391:
                    message.detail = {
                        oneofKind: "effigyInfo",
                        effigyInfo: exports.EffigyActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.effigyInfo)
                    };
                    break;
                case /* com.midnights.game.TreasureMapActivityDetailInfo treasure_map_info */ 1114:
                    message.detail = {
                        oneofKind: "treasureMapInfo",
                        treasureMapInfo: exports.TreasureMapActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.treasureMapInfo)
                    };
                    break;
                case /* com.midnights.game.BlessingActivityDetailInfo blessing_info */ 1869:
                    message.detail = {
                        oneofKind: "blessingInfo",
                        blessingInfo: exports.BlessingActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.blessingInfo)
                    };
                    break;
                case /* com.midnights.game.SeaLampActivityInfo sea_lamp_info */ 494:
                    message.detail = {
                        oneofKind: "seaLampInfo",
                        seaLampInfo: exports.SeaLampActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.seaLampInfo)
                    };
                    break;
                case /* com.midnights.game.ExpeditionActivityDetailInfo expedition_info */ 202:
                    message.detail = {
                        oneofKind: "expeditionInfo",
                        expeditionInfo: exports.ExpeditionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.expeditionInfo)
                    };
                    break;
                case /* com.midnights.game.ArenaChallengeActivityDetailInfo arena_challenge_info */ 859:
                    message.detail = {
                        oneofKind: "arenaChallengeInfo",
                        arenaChallengeInfo: exports.ArenaChallengeActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.arenaChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairActivityDetailInfo fleur_fair_info */ 857:
                    message.detail = {
                        oneofKind: "fleurFairInfo",
                        fleurFairInfo: exports.FleurFairActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.fleurFairInfo)
                    };
                    break;
                case /* com.midnights.game.WaterSpiritActivityDetailInfo water_spirit_info */ 1675:
                    message.detail = {
                        oneofKind: "waterSpiritInfo",
                        waterSpiritInfo: exports.WaterSpiritActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.waterSpiritInfo)
                    };
                    break;
                case /* com.midnights.game.ChannelerSlabActivityDetailInfo challneler_slab_info */ 1015:
                    message.detail = {
                        oneofKind: "challnelerSlabInfo",
                        challnelerSlabInfo: exports.ChannelerSlabActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.challnelerSlabInfo)
                    };
                    break;
                case /* com.midnights.game.MistTrialActivityDetailInfo mist_trial_activity_info */ 156:
                    message.detail = {
                        oneofKind: "mistTrialActivityInfo",
                        mistTrialActivityInfo: exports.MistTrialActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.mistTrialActivityInfo)
                    };
                    break;
                case /* com.midnights.game.HideAndSeekActivityDetailInfo hide_and_seek_info */ 427:
                    message.detail = {
                        oneofKind: "hideAndSeekInfo",
                        hideAndSeekInfo: exports.HideAndSeekActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.hideAndSeekInfo)
                    };
                    break;
                case /* com.midnights.game.FindHilichurlDetailInfo find_hilichurl_info */ 1411:
                    message.detail = {
                        oneofKind: "findHilichurlInfo",
                        findHilichurlInfo: exports.FindHilichurlDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.findHilichurlInfo)
                    };
                    break;
                case /* com.midnights.game.SummerTimeDetailInfo summer_time_info */ 1372:
                    message.detail = {
                        oneofKind: "summerTimeInfo",
                        summerTimeInfo: exports.SummerTimeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.summerTimeInfo)
                    };
                    break;
                case /* com.midnights.game.BuoyantCombatDetailInfo buoyant_combat_info */ 1842:
                    message.detail = {
                        oneofKind: "buoyantCombatInfo",
                        buoyantCombatInfo: exports.BuoyantCombatDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.buoyantCombatInfo)
                    };
                    break;
                case /* com.midnights.game.EchoShellDetailInfo echo_shell_info */ 1113:
                    message.detail = {
                        oneofKind: "echoShellInfo",
                        echoShellInfo: exports.EchoShellDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.echoShellInfo)
                    };
                    break;
                case /* com.midnights.game.BounceConjuringActivityDetailInfo bounce_conjuring_info */ 767:
                    message.detail = {
                        oneofKind: "bounceConjuringInfo",
                        bounceConjuringInfo: exports.BounceConjuringActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.bounceConjuringInfo)
                    };
                    break;
                case /* com.midnights.game.BlitzRushActivityDetailInfo blitz_rush_info */ 794:
                    message.detail = {
                        oneofKind: "blitzRushInfo",
                        blitzRushInfo: exports.BlitzRushActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.blitzRushInfo)
                    };
                    break;
                case /* com.midnights.game.ChessActivityDetailInfo chess_info */ 927:
                    message.detail = {
                        oneofKind: "chessInfo",
                        chessInfo: exports.ChessActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.chessInfo)
                    };
                    break;
                case /* com.midnights.game.SumoActivityDetailInfo sumo_info */ 1261:
                    message.detail = {
                        oneofKind: "sumoInfo",
                        sumoInfo: exports.SumoActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.sumoInfo)
                    };
                    break;
                case /* com.midnights.game.MoonfinTrialActivityDetailInfo moonfin_trial_info */ 1588:
                    message.detail = {
                        oneofKind: "moonfinTrialInfo",
                        moonfinTrialInfo: exports.MoonfinTrialActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.moonfinTrialInfo)
                    };
                    break;
                case /* com.midnights.game.LunaRiteDetailInfo luna_rite_info */ 814:
                    message.detail = {
                        oneofKind: "lunaRiteInfo",
                        lunaRiteInfo: exports.LunaRiteDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.lunaRiteInfo)
                    };
                    break;
                case /* com.midnights.game.PlantFlowerActivityDetailInfo plant_flower_info */ 54:
                    message.detail = {
                        oneofKind: "plantFlowerInfo",
                        plantFlowerInfo: exports.PlantFlowerActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.plantFlowerInfo)
                    };
                    break;
                case /* com.midnights.game.MusicGameActivityDetailInfo music_game_info */ 460:
                    message.detail = {
                        oneofKind: "musicGameInfo",
                        musicGameInfo: exports.MusicGameActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.musicGameInfo)
                    };
                    break;
                case /* com.midnights.game.RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info */ 219:
                    message.detail = {
                        oneofKind: "roguelikeDungoenInfo",
                        roguelikeDungoenInfo: exports.RoguelikeDungeonActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.roguelikeDungoenInfo)
                    };
                    break;
                case /* com.midnights.game.DigActivityDetailInfo dig_info */ 403:
                    message.detail = {
                        oneofKind: "digInfo",
                        digInfo: exports.DigActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.digInfo)
                    };
                    break;
                case /* com.midnights.game.HachiActivityDetailInfo hachi_info */ 491:
                    message.detail = {
                        oneofKind: "hachiInfo",
                        hachiInfo: exports.HachiActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.hachiInfo)
                    };
                    break;
                case /* com.midnights.game.WinterCampActivityDetailInfo winter_camp_info */ 1083:
                    message.detail = {
                        oneofKind: "winterCampInfo",
                        winterCampInfo: exports.WinterCampActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.winterCampInfo)
                    };
                    break;
                case /* com.midnights.game.PotionActivityDetailInfo potion_info */ 1273:
                    message.detail = {
                        oneofKind: "potionInfo",
                        potionInfo: exports.PotionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.potionInfo)
                    };
                    break;
                case /* com.midnights.game.TanukiTravelActivityDetailInfo tanuki_travel_activity_info */ 1796:
                    message.detail = {
                        oneofKind: "tanukiTravelActivityInfo",
                        tanukiTravelActivityInfo: exports.TanukiTravelActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.tanukiTravelActivityInfo)
                    };
                    break;
                case /* com.midnights.game.LanternRiteActivityDetailInfo lantern_rite_activity_info */ 1876:
                    message.detail = {
                        oneofKind: "lanternRiteActivityInfo",
                        lanternRiteActivityInfo: exports.LanternRiteActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.lanternRiteActivityInfo)
                    };
                    break;
                case /* com.midnights.game.MichiaeMatsuriActivityDetailInfo michiae_matsuri_info */ 194:
                    message.detail = {
                        oneofKind: "michiaeMatsuriInfo",
                        michiaeMatsuriInfo: exports.MichiaeMatsuriActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.michiaeMatsuriInfo)
                    };
                    break;
                case /* com.midnights.game.BartenderActivityDetailInfo bartender_info */ 1725:
                    message.detail = {
                        oneofKind: "bartenderInfo",
                        bartenderInfo: exports.BartenderActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.bartenderInfo)
                    };
                    break;
                case /* com.midnights.game.UgcActivityDetailInfo ugc_info */ 703:
                    message.detail = {
                        oneofKind: "ugcInfo",
                        ugcInfo: exports.UgcActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.ugcInfo)
                    };
                    break;
                case /* com.midnights.game.CrystalLinkActivityDetailInfo crystal_link_info */ 1226:
                    message.detail = {
                        oneofKind: "crystalLinkInfo",
                        crystalLinkInfo: exports.CrystalLinkActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.crystalLinkInfo)
                    };
                    break;
                case /* com.midnights.game.IrodoriActivityDetailInfo irodori_info */ 750:
                    message.detail = {
                        oneofKind: "irodoriInfo",
                        irodoriInfo: exports.IrodoriActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.irodoriInfo)
                    };
                    break;
                case /* com.midnights.game.PhotoActivityDetailInfo photo_info */ 328:
                    message.detail = {
                        oneofKind: "photoInfo",
                        photoInfo: exports.PhotoActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.photoInfo)
                    };
                    break;
                case /* com.midnights.game.SpiceActivityDetailInfo spice_info */ 1891:
                    message.detail = {
                        oneofKind: "spiceInfo",
                        spiceInfo: exports.SpiceActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.spiceInfo)
                    };
                    break;
                case /* com.midnights.game.GachaActivityDetailInfo gacha_info */ 825:
                    message.detail = {
                        oneofKind: "gachaInfo",
                        gachaInfo: exports.GachaActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.gachaInfo)
                    };
                    break;
                case /* com.midnights.game.LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info */ 1308:
                    message.detail = {
                        oneofKind: "luminanceStoneChallengeInfo",
                        luminanceStoneChallengeInfo: exports.LuminanceStoneChallengeActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.luminanceStoneChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.RogueDiaryActivityDetailInfo rogue_diary_info */ 812:
                    message.detail = {
                        oneofKind: "rogueDiaryInfo",
                        rogueDiaryInfo: exports.RogueDiaryActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.rogueDiaryInfo)
                    };
                    break;
                case /* com.midnights.game.SummerTimeV2DetailInfo summer_time_v2_info */ 622:
                    message.detail = {
                        oneofKind: "summerTimeV2Info",
                        summerTimeV2Info: exports.SummerTimeV2DetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.summerTimeV2Info)
                    };
                    break;
                case /* com.midnights.game.IslandPartyDetailInfo island_party_info */ 1885:
                    message.detail = {
                        oneofKind: "islandPartyInfo",
                        islandPartyInfo: exports.IslandPartyDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.islandPartyInfo)
                    };
                    break;
                case /* com.midnights.game.GearActivityDetailInfo gear_info */ 722:
                    message.detail = {
                        oneofKind: "gearInfo",
                        gearInfo: exports.GearActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.gearInfo)
                    };
                    break;
                case /* com.midnights.game.GravenInnocenceDetailInfo graven_innocence_info */ 1911:
                    message.detail = {
                        oneofKind: "gravenInnocenceInfo",
                        gravenInnocenceInfo: exports.GravenInnocenceDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.gravenInnocenceInfo)
                    };
                    break;
                case /* com.midnights.game.InstableSprayDetailInfo instable_spray_info */ 1043:
                    message.detail = {
                        oneofKind: "instableSprayInfo",
                        instableSprayInfo: exports.InstableSprayDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.instableSprayInfo)
                    };
                    break;
                case /* com.midnights.game.MuqadasPotionActivityDetailInfo muqadas_potion_info */ 1157:
                    message.detail = {
                        oneofKind: "muqadasPotionInfo",
                        muqadasPotionInfo: exports.MuqadasPotionActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.muqadasPotionInfo)
                    };
                    break;
                case /* com.midnights.game.TreasureSeelieActivityDetailInfo treasure_seelie_info */ 966:
                    message.detail = {
                        oneofKind: "treasureSeelieInfo",
                        treasureSeelieInfo: exports.TreasureSeelieActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.treasureSeelieInfo)
                    };
                    break;
                case /* com.midnights.game.RockBoardExploreDetailInfo rock_board_explore_info */ 1078:
                    message.detail = {
                        oneofKind: "rockBoardExploreInfo",
                        rockBoardExploreInfo: exports.RockBoardExploreDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.rockBoardExploreInfo)
                    };
                    break;
                case /* com.midnights.game.VintageActivityDetailInfo vintage_info */ 445:
                    message.detail = {
                        oneofKind: "vintageInfo",
                        vintageInfo: exports.VintageActivityDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.vintageInfo)
                    };
                    break;
                case /* com.midnights.game.WindFieldDetailInfo wind_field_info */ 352:
                    message.detail = {
                        oneofKind: "windFieldInfo",
                        windFieldInfo: exports.WindFieldDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.windFieldInfo)
                    };
                    break;
                case /* com.midnights.game.FungusFighterDetailInfo fungus_fighter_info */ 490:
                    message.detail = {
                        oneofKind: "fungusFighterInfo",
                        fungusFighterInfo: exports.FungusFighterDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.fungusFighterInfo)
                    };
                    break;
                case /* com.midnights.game.CharAmusementDetailInfo char_amusement_info */ 1496:
                    message.detail = {
                        oneofKind: "charAmusementInfo",
                        charAmusementInfo: exports.CharAmusementDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.charAmusementInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyChallengeV2DetailInfo effigy_challenge_info */ 1025:
                    message.detail = {
                        oneofKind: "effigyChallengeInfo",
                        effigyChallengeInfo: exports.EffigyChallengeV2DetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.effigyChallengeInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap682(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityInfo.activity_coin_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap1399(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityInfo.wish_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finished = 6; */
        if (message.isFinished !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 activity_type = 4; */
        if (message.activityType !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityType);
        /* optional uint32 begin_time = 8; */
        if (message.beginTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.beginTime);
        /* repeated uint32 taken_reward_list = 329; */
        if (message.takenRewardList.length) {
            writer.tag(329, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenRewardList.length; i++)
                writer.uint32(message.takenRewardList[i]);
            writer.join();
        }
        /* optional bool is_hidden = 919; */
        if (message.isHidden !== undefined)
            writer.tag(919, runtime_1.WireType.Varint).bool(message.isHidden);
        /* optional bool is_quick_open = 1449; */
        if (message.isQuickOpen !== undefined)
            writer.tag(1449, runtime_1.WireType.Varint).bool(message.isQuickOpen);
        /* repeated uint32 meet_cond_list = 10; */
        if (message.meetCondList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.meetCondList.length; i++)
                writer.uint32(message.meetCondList[i]);
            writer.join();
        }
        /* map<uint32, uint32> activity_coin_map = 682; */
        for (let k of Object.keys(message.activityCoinMap))
            writer.tag(682, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.activityCoinMap[k]).join();
        /* optional bool is_banner_cleared = 102; */
        if (message.isBannerCleared !== undefined)
            writer.tag(102, runtime_1.WireType.Varint).bool(message.isBannerCleared);
        /* optional uint32 cur_score = 1906; */
        if (message.curScore !== undefined)
            writer.tag(1906, runtime_1.WireType.Varint).uint32(message.curScore);
        /* optional uint32 first_day_start_time = 592; */
        if (message.firstDayStartTime !== undefined)
            writer.tag(592, runtime_1.WireType.Varint).uint32(message.firstDayStartTime);
        /* optional uint32 activity_id = 12; */
        if (message.activityId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional bool is_play_open_anim = 13; */
        if (message.isPlayOpenAnim !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isPlayOpenAnim);
        /* optional uint32 end_time = 5; */
        if (message.endTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.endTime);
        /* optional uint32 score_limit = 1958; */
        if (message.scoreLimit !== undefined)
            writer.tag(1958, runtime_1.WireType.Varint).uint32(message.scoreLimit);
        /* map<uint32, uint32> wish_gift_num_map = 1399; */
        for (let k of Object.keys(message.wishGiftNumMap))
            writer.tag(1399, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.wishGiftNumMap[k]).join();
        /* optional uint32 selected_avatar_reward_id = 1290; */
        if (message.selectedAvatarRewardId !== undefined)
            writer.tag(1290, runtime_1.WireType.Varint).uint32(message.selectedAvatarRewardId);
        /* optional bool is_common_content_closed = 1963; */
        if (message.isCommonContentClosed !== undefined)
            writer.tag(1963, runtime_1.WireType.Varint).bool(message.isCommonContentClosed);
        /* repeated uint32 expire_cond_list = 3; */
        if (message.expireCondList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.expireCondList.length; i++)
                writer.uint32(message.expireCondList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 864; */
        for (let i = 0; i < message.activityPushTipsDataList.length; i++)
            exports.ActivityPushTipsData.internalBinaryWrite(message.activityPushTipsDataList[i], writer.tag(864, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ActivityWatcherInfo watcher_info_list = 2; */
        for (let i = 0; i < message.watcherInfoList.length; i++)
            exports.ActivityWatcherInfo.internalBinaryWrite(message.watcherInfoList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional bool is_starting = 9; */
        if (message.isStarting !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isStarting);
        /* com.midnights.game.SeaLampActivityDetailInfo sam_lamp_info = 7; */
        if (message.detail.oneofKind === "samLampInfo")
            exports.SeaLampActivityDetailInfo.internalBinaryWrite(message.detail.samLampInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CrucibleActivityDetailInfo crucible_info = 14; */
        if (message.detail.oneofKind === "crucibleInfo")
            exports.CrucibleActivityDetailInfo.internalBinaryWrite(message.detail.crucibleInfo, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SalesmanActivityDetailInfo salesman_info = 11; */
        if (message.detail.oneofKind === "salesmanInfo")
            exports.SalesmanActivityDetailInfo.internalBinaryWrite(message.detail.salesmanInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TrialAvatarActivityDetailInfo trial_avatar_info = 1; */
        if (message.detail.oneofKind === "trialAvatarInfo")
            exports.TrialAvatarActivityDetailInfo.internalBinaryWrite(message.detail.trialAvatarInfo, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DeliveryActivityDetailInfo delivery_info = 1092; */
        if (message.detail.oneofKind === "deliveryInfo")
            exports.DeliveryActivityDetailInfo.internalBinaryWrite(message.detail.deliveryInfo, writer.tag(1092, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.AsterActivityDetailInfo aster_info = 557; */
        if (message.detail.oneofKind === "asterInfo")
            exports.AsterActivityDetailInfo.internalBinaryWrite(message.detail.asterInfo, writer.tag(557, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FlightActivityDetailInfo flight_info = 1365; */
        if (message.detail.oneofKind === "flightInfo")
            exports.FlightActivityDetailInfo.internalBinaryWrite(message.detail.flightInfo, writer.tag(1365, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DragonSpineActivityDetailInfo dragon_spine_info = 1727; */
        if (message.detail.oneofKind === "dragonSpineInfo")
            exports.DragonSpineActivityDetailInfo.internalBinaryWrite(message.detail.dragonSpineInfo, writer.tag(1727, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyActivityDetailInfo effigy_info = 391; */
        if (message.detail.oneofKind === "effigyInfo")
            exports.EffigyActivityDetailInfo.internalBinaryWrite(message.detail.effigyInfo, writer.tag(391, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TreasureMapActivityDetailInfo treasure_map_info = 1114; */
        if (message.detail.oneofKind === "treasureMapInfo")
            exports.TreasureMapActivityDetailInfo.internalBinaryWrite(message.detail.treasureMapInfo, writer.tag(1114, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BlessingActivityDetailInfo blessing_info = 1869; */
        if (message.detail.oneofKind === "blessingInfo")
            exports.BlessingActivityDetailInfo.internalBinaryWrite(message.detail.blessingInfo, writer.tag(1869, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SeaLampActivityInfo sea_lamp_info = 494; */
        if (message.detail.oneofKind === "seaLampInfo")
            exports.SeaLampActivityInfo.internalBinaryWrite(message.detail.seaLampInfo, writer.tag(494, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ExpeditionActivityDetailInfo expedition_info = 202; */
        if (message.detail.oneofKind === "expeditionInfo")
            exports.ExpeditionActivityDetailInfo.internalBinaryWrite(message.detail.expeditionInfo, writer.tag(202, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ArenaChallengeActivityDetailInfo arena_challenge_info = 859; */
        if (message.detail.oneofKind === "arenaChallengeInfo")
            exports.ArenaChallengeActivityDetailInfo.internalBinaryWrite(message.detail.arenaChallengeInfo, writer.tag(859, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairActivityDetailInfo fleur_fair_info = 857; */
        if (message.detail.oneofKind === "fleurFairInfo")
            exports.FleurFairActivityDetailInfo.internalBinaryWrite(message.detail.fleurFairInfo, writer.tag(857, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WaterSpiritActivityDetailInfo water_spirit_info = 1675; */
        if (message.detail.oneofKind === "waterSpiritInfo")
            exports.WaterSpiritActivityDetailInfo.internalBinaryWrite(message.detail.waterSpiritInfo, writer.tag(1675, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ChannelerSlabActivityDetailInfo challneler_slab_info = 1015; */
        if (message.detail.oneofKind === "challnelerSlabInfo")
            exports.ChannelerSlabActivityDetailInfo.internalBinaryWrite(message.detail.challnelerSlabInfo, writer.tag(1015, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MistTrialActivityDetailInfo mist_trial_activity_info = 156; */
        if (message.detail.oneofKind === "mistTrialActivityInfo")
            exports.MistTrialActivityDetailInfo.internalBinaryWrite(message.detail.mistTrialActivityInfo, writer.tag(156, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.HideAndSeekActivityDetailInfo hide_and_seek_info = 427; */
        if (message.detail.oneofKind === "hideAndSeekInfo")
            exports.HideAndSeekActivityDetailInfo.internalBinaryWrite(message.detail.hideAndSeekInfo, writer.tag(427, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FindHilichurlDetailInfo find_hilichurl_info = 1411; */
        if (message.detail.oneofKind === "findHilichurlInfo")
            exports.FindHilichurlDetailInfo.internalBinaryWrite(message.detail.findHilichurlInfo, writer.tag(1411, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SummerTimeDetailInfo summer_time_info = 1372; */
        if (message.detail.oneofKind === "summerTimeInfo")
            exports.SummerTimeDetailInfo.internalBinaryWrite(message.detail.summerTimeInfo, writer.tag(1372, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BuoyantCombatDetailInfo buoyant_combat_info = 1842; */
        if (message.detail.oneofKind === "buoyantCombatInfo")
            exports.BuoyantCombatDetailInfo.internalBinaryWrite(message.detail.buoyantCombatInfo, writer.tag(1842, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EchoShellDetailInfo echo_shell_info = 1113; */
        if (message.detail.oneofKind === "echoShellInfo")
            exports.EchoShellDetailInfo.internalBinaryWrite(message.detail.echoShellInfo, writer.tag(1113, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BounceConjuringActivityDetailInfo bounce_conjuring_info = 767; */
        if (message.detail.oneofKind === "bounceConjuringInfo")
            exports.BounceConjuringActivityDetailInfo.internalBinaryWrite(message.detail.bounceConjuringInfo, writer.tag(767, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BlitzRushActivityDetailInfo blitz_rush_info = 794; */
        if (message.detail.oneofKind === "blitzRushInfo")
            exports.BlitzRushActivityDetailInfo.internalBinaryWrite(message.detail.blitzRushInfo, writer.tag(794, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ChessActivityDetailInfo chess_info = 927; */
        if (message.detail.oneofKind === "chessInfo")
            exports.ChessActivityDetailInfo.internalBinaryWrite(message.detail.chessInfo, writer.tag(927, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SumoActivityDetailInfo sumo_info = 1261; */
        if (message.detail.oneofKind === "sumoInfo")
            exports.SumoActivityDetailInfo.internalBinaryWrite(message.detail.sumoInfo, writer.tag(1261, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MoonfinTrialActivityDetailInfo moonfin_trial_info = 1588; */
        if (message.detail.oneofKind === "moonfinTrialInfo")
            exports.MoonfinTrialActivityDetailInfo.internalBinaryWrite(message.detail.moonfinTrialInfo, writer.tag(1588, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LunaRiteDetailInfo luna_rite_info = 814; */
        if (message.detail.oneofKind === "lunaRiteInfo")
            exports.LunaRiteDetailInfo.internalBinaryWrite(message.detail.lunaRiteInfo, writer.tag(814, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PlantFlowerActivityDetailInfo plant_flower_info = 54; */
        if (message.detail.oneofKind === "plantFlowerInfo")
            exports.PlantFlowerActivityDetailInfo.internalBinaryWrite(message.detail.plantFlowerInfo, writer.tag(54, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MusicGameActivityDetailInfo music_game_info = 460; */
        if (message.detail.oneofKind === "musicGameInfo")
            exports.MusicGameActivityDetailInfo.internalBinaryWrite(message.detail.musicGameInfo, writer.tag(460, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RoguelikeDungeonActivityDetailInfo roguelike_dungoen_info = 219; */
        if (message.detail.oneofKind === "roguelikeDungoenInfo")
            exports.RoguelikeDungeonActivityDetailInfo.internalBinaryWrite(message.detail.roguelikeDungoenInfo, writer.tag(219, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.DigActivityDetailInfo dig_info = 403; */
        if (message.detail.oneofKind === "digInfo")
            exports.DigActivityDetailInfo.internalBinaryWrite(message.detail.digInfo, writer.tag(403, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.HachiActivityDetailInfo hachi_info = 491; */
        if (message.detail.oneofKind === "hachiInfo")
            exports.HachiActivityDetailInfo.internalBinaryWrite(message.detail.hachiInfo, writer.tag(491, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WinterCampActivityDetailInfo winter_camp_info = 1083; */
        if (message.detail.oneofKind === "winterCampInfo")
            exports.WinterCampActivityDetailInfo.internalBinaryWrite(message.detail.winterCampInfo, writer.tag(1083, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PotionActivityDetailInfo potion_info = 1273; */
        if (message.detail.oneofKind === "potionInfo")
            exports.PotionActivityDetailInfo.internalBinaryWrite(message.detail.potionInfo, writer.tag(1273, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TanukiTravelActivityDetailInfo tanuki_travel_activity_info = 1796; */
        if (message.detail.oneofKind === "tanukiTravelActivityInfo")
            exports.TanukiTravelActivityDetailInfo.internalBinaryWrite(message.detail.tanukiTravelActivityInfo, writer.tag(1796, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LanternRiteActivityDetailInfo lantern_rite_activity_info = 1876; */
        if (message.detail.oneofKind === "lanternRiteActivityInfo")
            exports.LanternRiteActivityDetailInfo.internalBinaryWrite(message.detail.lanternRiteActivityInfo, writer.tag(1876, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MichiaeMatsuriActivityDetailInfo michiae_matsuri_info = 194; */
        if (message.detail.oneofKind === "michiaeMatsuriInfo")
            exports.MichiaeMatsuriActivityDetailInfo.internalBinaryWrite(message.detail.michiaeMatsuriInfo, writer.tag(194, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.BartenderActivityDetailInfo bartender_info = 1725; */
        if (message.detail.oneofKind === "bartenderInfo")
            exports.BartenderActivityDetailInfo.internalBinaryWrite(message.detail.bartenderInfo, writer.tag(1725, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.UgcActivityDetailInfo ugc_info = 703; */
        if (message.detail.oneofKind === "ugcInfo")
            exports.UgcActivityDetailInfo.internalBinaryWrite(message.detail.ugcInfo, writer.tag(703, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CrystalLinkActivityDetailInfo crystal_link_info = 1226; */
        if (message.detail.oneofKind === "crystalLinkInfo")
            exports.CrystalLinkActivityDetailInfo.internalBinaryWrite(message.detail.crystalLinkInfo, writer.tag(1226, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.IrodoriActivityDetailInfo irodori_info = 750; */
        if (message.detail.oneofKind === "irodoriInfo")
            exports.IrodoriActivityDetailInfo.internalBinaryWrite(message.detail.irodoriInfo, writer.tag(750, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PhotoActivityDetailInfo photo_info = 328; */
        if (message.detail.oneofKind === "photoInfo")
            exports.PhotoActivityDetailInfo.internalBinaryWrite(message.detail.photoInfo, writer.tag(328, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SpiceActivityDetailInfo spice_info = 1891; */
        if (message.detail.oneofKind === "spiceInfo")
            exports.SpiceActivityDetailInfo.internalBinaryWrite(message.detail.spiceInfo, writer.tag(1891, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GachaActivityDetailInfo gacha_info = 825; */
        if (message.detail.oneofKind === "gachaInfo")
            exports.GachaActivityDetailInfo.internalBinaryWrite(message.detail.gachaInfo, writer.tag(825, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.LuminanceStoneChallengeActivityDetailInfo luminance_stone_challenge_info = 1308; */
        if (message.detail.oneofKind === "luminanceStoneChallengeInfo")
            exports.LuminanceStoneChallengeActivityDetailInfo.internalBinaryWrite(message.detail.luminanceStoneChallengeInfo, writer.tag(1308, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RogueDiaryActivityDetailInfo rogue_diary_info = 812; */
        if (message.detail.oneofKind === "rogueDiaryInfo")
            exports.RogueDiaryActivityDetailInfo.internalBinaryWrite(message.detail.rogueDiaryInfo, writer.tag(812, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SummerTimeV2DetailInfo summer_time_v2_info = 622; */
        if (message.detail.oneofKind === "summerTimeV2Info")
            exports.SummerTimeV2DetailInfo.internalBinaryWrite(message.detail.summerTimeV2Info, writer.tag(622, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.IslandPartyDetailInfo island_party_info = 1885; */
        if (message.detail.oneofKind === "islandPartyInfo")
            exports.IslandPartyDetailInfo.internalBinaryWrite(message.detail.islandPartyInfo, writer.tag(1885, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GearActivityDetailInfo gear_info = 722; */
        if (message.detail.oneofKind === "gearInfo")
            exports.GearActivityDetailInfo.internalBinaryWrite(message.detail.gearInfo, writer.tag(722, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GravenInnocenceDetailInfo graven_innocence_info = 1911; */
        if (message.detail.oneofKind === "gravenInnocenceInfo")
            exports.GravenInnocenceDetailInfo.internalBinaryWrite(message.detail.gravenInnocenceInfo, writer.tag(1911, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.InstableSprayDetailInfo instable_spray_info = 1043; */
        if (message.detail.oneofKind === "instableSprayInfo")
            exports.InstableSprayDetailInfo.internalBinaryWrite(message.detail.instableSprayInfo, writer.tag(1043, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.MuqadasPotionActivityDetailInfo muqadas_potion_info = 1157; */
        if (message.detail.oneofKind === "muqadasPotionInfo")
            exports.MuqadasPotionActivityDetailInfo.internalBinaryWrite(message.detail.muqadasPotionInfo, writer.tag(1157, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TreasureSeelieActivityDetailInfo treasure_seelie_info = 966; */
        if (message.detail.oneofKind === "treasureSeelieInfo")
            exports.TreasureSeelieActivityDetailInfo.internalBinaryWrite(message.detail.treasureSeelieInfo, writer.tag(966, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RockBoardExploreDetailInfo rock_board_explore_info = 1078; */
        if (message.detail.oneofKind === "rockBoardExploreInfo")
            exports.RockBoardExploreDetailInfo.internalBinaryWrite(message.detail.rockBoardExploreInfo, writer.tag(1078, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageActivityDetailInfo vintage_info = 445; */
        if (message.detail.oneofKind === "vintageInfo")
            exports.VintageActivityDetailInfo.internalBinaryWrite(message.detail.vintageInfo, writer.tag(445, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WindFieldDetailInfo wind_field_info = 352; */
        if (message.detail.oneofKind === "windFieldInfo")
            exports.WindFieldDetailInfo.internalBinaryWrite(message.detail.windFieldInfo, writer.tag(352, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FungusFighterDetailInfo fungus_fighter_info = 490; */
        if (message.detail.oneofKind === "fungusFighterInfo")
            exports.FungusFighterDetailInfo.internalBinaryWrite(message.detail.fungusFighterInfo, writer.tag(490, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CharAmusementDetailInfo char_amusement_info = 1496; */
        if (message.detail.oneofKind === "charAmusementInfo")
            exports.CharAmusementDetailInfo.internalBinaryWrite(message.detail.charAmusementInfo, writer.tag(1496, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyChallengeV2DetailInfo effigy_challenge_info = 1025; */
        if (message.detail.oneofKind === "effigyChallengeInfo")
            exports.EffigyChallengeV2DetailInfo.internalBinaryWrite(message.detail.effigyChallengeInfo, writer.tag(1025, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityInfo
 */
exports.ActivityInfo = new ActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetActivityInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetActivityInfoRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "activity_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityInfo },
            { no: 11, name: "activated_sale_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "disable_transfer_point_interaction_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_13.Uint32Pair }
        ]);
    }
    create(value) {
        const message = { activityInfoList: [], activatedSaleIdList: [], disableTransferPointInteractionList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityInfo activity_info_list */ 5:
                    message.activityInfoList.push(exports.ActivityInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 activated_sale_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatedSaleIdList.push(reader.uint32());
                    else
                        message.activatedSaleIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list */ 10:
                    message.disableTransferPointInteractionList.push(define_13.Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityInfo activity_info_list = 5; */
        for (let i = 0; i < message.activityInfoList.length; i++)
            exports.ActivityInfo.internalBinaryWrite(message.activityInfoList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 activated_sale_id_list = 11; */
        if (message.activatedSaleIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activatedSaleIdList.length; i++)
                writer.uint32(message.activatedSaleIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 10; */
        for (let i = 0; i < message.disableTransferPointInteractionList.length; i++)
            define_13.Uint32Pair.internalBinaryWrite(message.disableTransferPointInteractionList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetActivityInfoRsp
 */
exports.GetActivityInfoRsp = new GetActivityInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPlayOpenAnimNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityPlayOpenAnimNotify", [
            { no: 8, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 8:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 8; */
        if (message.activityId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPlayOpenAnimNotify
 */
exports.ActivityPlayOpenAnimNotify = new ActivityPlayOpenAnimNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityInfoNotify", [
            { no: 9, name: "activity_info", kind: "message", T: () => exports.ActivityInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityInfo activity_info */ 9:
                    message.activityInfo = exports.ActivityInfo.internalBinaryRead(reader, reader.uint32(), options, message.activityInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ActivityInfo activity_info = 9; */
        if (message.activityInfo)
            exports.ActivityInfo.internalBinaryWrite(message.activityInfo, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityInfoNotify
 */
exports.ActivityInfoNotify = new ActivityInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityScheduleInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityScheduleInfoNotify", [
            { no: 12, name: "activity_schedule_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityScheduleInfo },
            { no: 6, name: "remain_fly_sea_lamp_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activityScheduleList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list */ 12:
                    message.activityScheduleList.push(exports.ActivityScheduleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 remain_fly_sea_lamp_num */ 6:
                    message.remainFlySeaLampNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ActivityScheduleInfo activity_schedule_list = 12; */
        for (let i = 0; i < message.activityScheduleList.length; i++)
            exports.ActivityScheduleInfo.internalBinaryWrite(message.activityScheduleList[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 remain_fly_sea_lamp_num = 6; */
        if (message.remainFlySeaLampNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.remainFlySeaLampNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityScheduleInfoNotify
 */
exports.ActivityScheduleInfoNotify = new ActivityScheduleInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityWatcherInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityWatcherInfo", [
            { no: 8, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_taken_reward */ 8:
                    message.isTakenReward = reader.bool();
                    break;
                case /* optional uint32 cur_progress */ 2:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 total_progress */ 4:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 5:
                    message.watcherId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_taken_reward = 8; */
        if (message.isTakenReward !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isTakenReward);
        /* optional uint32 cur_progress = 2; */
        if (message.curProgress !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.curProgress);
        /* optional uint32 total_progress = 4; */
        if (message.totalProgress !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.totalProgress);
        /* optional uint32 watcher_id = 5; */
        if (message.watcherId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.watcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityWatcherInfo
 */
exports.ActivityWatcherInfo = new ActivityWatcherInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardReq", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 14:
                    message.watcherId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 watcher_id = 14; */
        if (message.watcherId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.watcherId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardReq
 */
exports.ActivityTakeWatcherRewardReq = new ActivityTakeWatcherRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardRsp", [
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "watcher_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 watcher_id */ 7:
                    message.watcherId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 watcher_id = 7; */
        if (message.watcherId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.watcherId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardRsp
 */
exports.ActivityTakeWatcherRewardRsp = new ActivityTakeWatcherRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityUpdateWatcherNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityUpdateWatcherNotify", [
            { no: 2, name: "watcher_info", kind: "message", T: () => exports.ActivityWatcherInfo },
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityWatcherInfo watcher_info */ 2:
                    message.watcherInfo = exports.ActivityWatcherInfo.internalBinaryRead(reader, reader.uint32(), options, message.watcherInfo);
                    break;
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ActivityWatcherInfo watcher_info = 2; */
        if (message.watcherInfo)
            exports.ActivityWatcherInfo.internalBinaryWrite(message.watcherInfo, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityUpdateWatcherNotify
 */
exports.ActivityUpdateWatcherNotify = new ActivityUpdateWatcherNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySelectAvatarCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivitySelectAvatarCardReq", [
            { no: 15, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 10:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 15; */
        if (message.activityId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 reward_id = 10; */
        if (message.rewardId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySelectAvatarCardReq
 */
exports.ActivitySelectAvatarCardReq = new ActivitySelectAvatarCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySelectAvatarCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivitySelectAvatarCardRsp", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_id */ 9:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_id = 9; */
        if (message.rewardId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySelectAvatarCardRsp
 */
exports.ActivitySelectAvatarCardRsp = new ActivitySelectAvatarCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCoinInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityCoinInfoNotify", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "activity_coin_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { activityCoinMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                case /* map<uint32, uint32> activity_coin_map */ 2:
                    this.binaryReadMap2(message.activityCoinMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityCoinInfoNotify.activity_coin_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.activityId);
        /* map<uint32, uint32> activity_coin_map = 2; */
        for (let k of Object.keys(message.activityCoinMap))
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.activityCoinMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityCoinInfoNotify
 */
exports.ActivityCoinInfoNotify = new ActivityCoinInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampActivityDetailInfo", [
            { no: 14, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "taken_phase_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "taken_contribution_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "days", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { takenPhaseRewardList: [], takenContributionRewardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 14:
                    message.phaseId = reader.uint32();
                    break;
                case /* repeated uint32 taken_phase_reward_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenPhaseRewardList.push(reader.uint32());
                    else
                        message.takenPhaseRewardList.push(reader.uint32());
                    break;
                case /* repeated uint32 taken_contribution_reward_list */ 7:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenContributionRewardList.push(reader.uint32());
                    else
                        message.takenContributionRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 progress */ 8:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 contribution */ 15:
                    message.contribution = reader.uint32();
                    break;
                case /* optional uint32 factor */ 13:
                    message.factor = reader.uint32();
                    break;
                case /* optional uint32 days */ 4:
                    message.days = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 phase_id = 14; */
        if (message.phaseId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.phaseId);
        /* repeated uint32 taken_phase_reward_list = 1; */
        if (message.takenPhaseRewardList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenPhaseRewardList.length; i++)
                writer.uint32(message.takenPhaseRewardList[i]);
            writer.join();
        }
        /* repeated uint32 taken_contribution_reward_list = 7; */
        if (message.takenContributionRewardList.length) {
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenContributionRewardList.length; i++)
                writer.uint32(message.takenContributionRewardList[i]);
            writer.join();
        }
        /* optional uint32 progress = 8; */
        if (message.progress !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.progress);
        /* optional uint32 contribution = 15; */
        if (message.contribution !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.contribution);
        /* optional uint32 factor = 13; */
        if (message.factor !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.factor);
        /* optional uint32 days = 4; */
        if (message.days !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.days);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampActivityDetailInfo
 */
exports.SeaLampActivityDetailInfo = new SeaLampActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampReq", [
            { no: 9, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "param", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 5, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_id */ 9:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 param */ 10:
                    message.param = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 7:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 item_num */ 5:
                    message.itemNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 item_id = 9; */
        if (message.itemId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.itemId);
        /* optional int32 param = 10; */
        if (message.param !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.param);
        /* optional com.midnights.game.Vector pos = 7; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 item_num = 5; */
        if (message.itemNum !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.itemNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampReq
 */
exports.SeaLampFlyLampReq = new SeaLampFlyLampReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampRsp", [
            { no: 9, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_num */ 9:
                    message.itemNum = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 15:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 item_num = 9; */
        if (message.itemNum !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.itemNum);
        /* optional uint32 item_id = 15; */
        if (message.itemId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.itemId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampRsp
 */
exports.SeaLampFlyLampRsp = new SeaLampFlyLampRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakeContributionRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampTakeContributionRewardReq", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 10:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 config_id = 10; */
        if (message.configId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakeContributionRewardReq
 */
exports.SeaLampTakeContributionRewardReq = new SeaLampTakeContributionRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakeContributionRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampTakeContributionRewardRsp", [
            { no: 9, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 config_id */ 9:
                    message.configId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 config_id = 9; */
        if (message.configId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.configId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakeContributionRewardRsp
 */
exports.SeaLampTakeContributionRewardRsp = new SeaLampTakeContributionRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakePhaseRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampTakePhaseRewardReq", [
            { no: 12, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 12:
                    message.phaseId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 phase_id = 12; */
        if (message.phaseId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.phaseId);
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakePhaseRewardReq
 */
exports.SeaLampTakePhaseRewardReq = new SeaLampTakePhaseRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampTakePhaseRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampTakePhaseRewardRsp", [
            { no: 2, name: "phase_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 phase_id */ 2:
                    message.phaseId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 phase_id = 2; */
        if (message.phaseId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.phaseId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampTakePhaseRewardRsp
 */
exports.SeaLampTakePhaseRewardRsp = new SeaLampTakePhaseRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampContributeItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampContributeItemReq", [
            { no: 8, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 8:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 1:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 8; */
        if (message.activityId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.ItemParam item_list = 1; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampContributeItemReq
 */
exports.SeaLampContributeItemReq = new SeaLampContributeItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampContributeItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampContributeItemRsp", [
            { no: 7, name: "add_contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "add_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "total_contribution", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 add_contribution */ 7:
                    message.addContribution = reader.uint32();
                    break;
                case /* optional uint32 add_progress */ 1:
                    message.addProgress = reader.uint32();
                    break;
                case /* optional uint32 total_contribution */ 14:
                    message.totalContribution = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 add_contribution = 7; */
        if (message.addContribution !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.addContribution);
        /* optional uint32 add_progress = 1; */
        if (message.addProgress !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.addProgress);
        /* optional uint32 total_contribution = 14; */
        if (message.totalContribution !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.totalContribution);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampContributeItemRsp
 */
exports.SeaLampContributeItemRsp = new SeaLampContributeItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampSectionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampSectionInfo", [
            { no: 11, name: "section_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 section_id */ 11:
                    message.sectionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 section_id = 11; */
        if (message.sectionId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.sectionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampSectionInfo
 */
exports.SeaLampSectionInfo = new SeaLampSectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampActivityInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampActivityInfo", [
            { no: 14, name: "is_mechanicus_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "section_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SeaLampSectionInfo },
            { no: 10, name: "popularity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "sea_lamp_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "first_day_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_mechanicus_feature_close", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { sectionInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mechanicus_open */ 14:
                    message.isMechanicusOpen = reader.bool();
                    break;
                case /* optional uint32 day_index */ 1:
                    message.dayIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SeaLampSectionInfo section_info_list */ 6:
                    message.sectionInfoList.push(exports.SeaLampSectionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 popularity */ 10:
                    message.popularity = reader.uint32();
                    break;
                case /* optional uint32 sea_lamp_coin */ 15:
                    message.seaLampCoin = reader.uint32();
                    break;
                case /* optional uint32 first_day_start_time */ 11:
                    message.firstDayStartTime = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_id */ 9:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional bool is_mechanicus_feature_close */ 12:
                    message.isMechanicusFeatureClose = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 5:
                    message.isContentClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_mechanicus_open = 14; */
        if (message.isMechanicusOpen !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isMechanicusOpen);
        /* optional uint32 day_index = 1; */
        if (message.dayIndex !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.dayIndex);
        /* repeated com.midnights.game.SeaLampSectionInfo section_info_list = 6; */
        for (let i = 0; i < message.sectionInfoList.length; i++)
            exports.SeaLampSectionInfo.internalBinaryWrite(message.sectionInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 popularity = 10; */
        if (message.popularity !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.popularity);
        /* optional uint32 sea_lamp_coin = 15; */
        if (message.seaLampCoin !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.seaLampCoin);
        /* optional uint32 first_day_start_time = 11; */
        if (message.firstDayStartTime !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.firstDayStartTime);
        /* optional uint32 mechanicus_id = 9; */
        if (message.mechanicusId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.mechanicusId);
        /* optional bool is_mechanicus_feature_close = 12; */
        if (message.isMechanicusFeatureClose !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isMechanicusFeatureClose);
        /* optional bool is_content_closed = 5; */
        if (message.isContentClosed !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isContentClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampActivityInfo
 */
exports.SeaLampActivityInfo = new SeaLampActivityInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampFlyLampNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampFlyLampNotify", [
            { no: 11, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 10, name: "item_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "param", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 11:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 item_num */ 10:
                    message.itemNum = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 7:
                    message.itemId = reader.uint32();
                    break;
                case /* optional int32 param */ 5:
                    message.param = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector pos = 11; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 item_num = 10; */
        if (message.itemNum !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.itemNum);
        /* optional uint32 item_id = 7; */
        if (message.itemId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.itemId);
        /* optional int32 param = 5; */
        if (message.param !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampFlyLampNotify
 */
exports.SeaLampFlyLampNotify = new SeaLampFlyLampNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampCoinNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampCoinNotify", [
            { no: 8, name: "sea_lamp_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sea_lamp_coin */ 8:
                    message.seaLampCoin = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 sea_lamp_coin = 8; */
        if (message.seaLampCoin !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.seaLampCoin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampCoinNotify
 */
exports.SeaLampCoinNotify = new SeaLampCoinNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SeaLampPopularityNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SeaLampPopularityNotify", [
            { no: 4, name: "popularity", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 popularity */ 4:
                    message.popularity = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 popularity = 4; */
        if (message.popularity !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.popularity);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SeaLampPopularityNotify
 */
exports.SeaLampPopularityNotify = new SeaLampPopularityNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AnnounceData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AnnounceData", [
            { no: 9, name: "count_down_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "center_system_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "count_down_frequency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "center_system_frequency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "dungeon_confirm_text", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "is_center_system_last_5_every_minutes", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string count_down_text */ 9:
                    message.countDownText = reader.string();
                    break;
                case /* optional string center_system_text */ 8:
                    message.centerSystemText = reader.string();
                    break;
                case /* optional uint32 count_down_frequency */ 1:
                    message.countDownFrequency = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 7:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 4:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 center_system_frequency */ 11:
                    message.centerSystemFrequency = reader.uint32();
                    break;
                case /* optional string dungeon_confirm_text */ 2:
                    message.dungeonConfirmText = reader.string();
                    break;
                case /* optional bool is_center_system_last_5_every_minutes */ 14:
                    message.isCenterSystemLast5EveryMinutes = reader.bool();
                    break;
                case /* optional uint32 end_time */ 10:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string count_down_text = 9; */
        if (message.countDownText !== undefined)
            writer.tag(9, runtime_1.WireType.LengthDelimited).string(message.countDownText);
        /* optional string center_system_text = 8; */
        if (message.centerSystemText !== undefined)
            writer.tag(8, runtime_1.WireType.LengthDelimited).string(message.centerSystemText);
        /* optional uint32 count_down_frequency = 1; */
        if (message.countDownFrequency !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.countDownFrequency);
        /* optional uint32 config_id = 7; */
        if (message.configId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.configId);
        /* optional uint32 begin_time = 4; */
        if (message.beginTime !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.beginTime);
        /* optional uint32 center_system_frequency = 11; */
        if (message.centerSystemFrequency !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.centerSystemFrequency);
        /* optional string dungeon_confirm_text = 2; */
        if (message.dungeonConfirmText !== undefined)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.dungeonConfirmText);
        /* optional bool is_center_system_last_5_every_minutes = 14; */
        if (message.isCenterSystemLast5EveryMinutes !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isCenterSystemLast5EveryMinutes);
        /* optional uint32 end_time = 10; */
        if (message.endTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AnnounceData
 */
exports.AnnounceData = new AnnounceData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LoadActivityTerrainNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LoadActivityTerrainNotify", [
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LoadActivityTerrainNotify
 */
exports.LoadActivityTerrainNotify = new LoadActivityTerrainNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerAnnounceNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ServerAnnounceNotify", [
            { no: 11, name: "announce_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.AnnounceData }
        ]);
    }
    create(value) {
        const message = { announceDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AnnounceData announce_data_list */ 11:
                    message.announceDataList.push(exports.AnnounceData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.AnnounceData announce_data_list = 11; */
        for (let i = 0; i < message.announceDataList.length; i++)
            exports.AnnounceData.internalBinaryWrite(message.announceDataList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerAnnounceNotify
 */
exports.ServerAnnounceNotify = new ServerAnnounceNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerAnnounceRevokeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ServerAnnounceRevokeNotify", [
            { no: 15, name: "config_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { configIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 config_id_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.configIdList.push(reader.uint32());
                    else
                        message.configIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 config_id_list = 15; */
        if (message.configIdList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.configIdList.length; i++)
                writer.uint32(message.configIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerAnnounceRevokeNotify
 */
exports.ServerAnnounceRevokeNotify = new ServerAnnounceRevokeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityBannerNotify", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerNotify
 */
exports.ActivityBannerNotify = new ActivityBannerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerClearReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityBannerClearReq", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 12:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 activity_id = 12; */
        if (message.activityId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerClearReq
 */
exports.ActivityBannerClearReq = new ActivityBannerClearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityBannerClearRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityBannerClearRsp", [
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityBannerClearRsp
 */
exports.ActivityBannerClearRsp = new ActivityBannerClearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanActivityDetailInfo", [
            { no: 3, name: "special_reward_preview_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "status", kind: "enum", opt: true, T: () => ["com.midnights.game.SalesmanStatusType", define_10.SalesmanStatusType] },
            { no: 2, name: "last_deliver_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "selected_reward_id_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "deliver_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_has_taken_special_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cond_day_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "day_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_today_has_delivered", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { selectedRewardIdMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 special_reward_preview_id */ 3:
                    message.specialRewardPreviewId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalesmanStatusType status */ 4:
                    message.status = reader.int32();
                    break;
                case /* optional uint32 last_deliver_time */ 2:
                    message.lastDeliverTime = reader.uint32();
                    break;
                case /* map<uint32, uint32> selected_reward_id_map */ 5:
                    this.binaryReadMap5(message.selectedRewardIdMap, reader, options);
                    break;
                case /* optional uint32 deliver_count */ 11:
                    message.deliverCount = reader.uint32();
                    break;
                case /* optional bool is_has_taken_special_reward */ 7:
                    message.isHasTakenSpecialReward = reader.bool();
                    break;
                case /* optional uint32 day_index */ 12:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional uint32 cond_day_count */ 6:
                    message.condDayCount = reader.uint32();
                    break;
                case /* optional uint32 day_reward_id */ 9:
                    message.dayRewardId = reader.uint32();
                    break;
                case /* optional bool is_today_has_delivered */ 13:
                    message.isTodayHasDelivered = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SalesmanActivityDetailInfo.selected_reward_id_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 special_reward_preview_id = 3; */
        if (message.specialRewardPreviewId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.specialRewardPreviewId);
        /* optional com.midnights.game.SalesmanStatusType status = 4; */
        if (message.status !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.status);
        /* optional uint32 last_deliver_time = 2; */
        if (message.lastDeliverTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.lastDeliverTime);
        /* map<uint32, uint32> selected_reward_id_map = 5; */
        for (let k of Object.keys(message.selectedRewardIdMap))
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.selectedRewardIdMap[k]).join();
        /* optional uint32 deliver_count = 11; */
        if (message.deliverCount !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.deliverCount);
        /* optional bool is_has_taken_special_reward = 7; */
        if (message.isHasTakenSpecialReward !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isHasTakenSpecialReward);
        /* optional uint32 day_index = 12; */
        if (message.dayIndex !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dayIndex);
        /* optional uint32 cond_day_count = 6; */
        if (message.condDayCount !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.condDayCount);
        /* optional uint32 day_reward_id = 9; */
        if (message.dayRewardId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.dayRewardId);
        /* optional bool is_today_has_delivered = 13; */
        if (message.isTodayHasDelivered !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isTodayHasDelivered);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanActivityDetailInfo
 */
exports.SalesmanActivityDetailInfo = new SalesmanActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanDeliverItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanDeliverItemReq", [
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanDeliverItemReq
 */
exports.SalesmanDeliverItemReq = new SalesmanDeliverItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanDeliverItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanDeliverItemRsp", [
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanDeliverItemRsp
 */
exports.SalesmanDeliverItemRsp = new SalesmanDeliverItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanTakeRewardReq", [
            { no: 8, name: "position", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 position */ 8:
                    message.position = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 position = 8; */
        if (message.position !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.position);
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeRewardReq
 */
exports.SalesmanTakeRewardReq = new SalesmanTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanTakeRewardRsp", [
            { no: 13, name: "position", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 position */ 13:
                    message.position = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 9:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 position = 13; */
        if (message.position !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.position);
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 reward_id = 9; */
        if (message.rewardId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.rewardId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeRewardRsp
 */
exports.SalesmanTakeRewardRsp = new SalesmanTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityCondStateChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityCondStateChangeNotify", [
            { no: 9, name: "activated_sale_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "expire_cond_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "disable_transfer_point_interaction_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_13.Uint32Pair },
            { no: 1, name: "meet_cond_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activatedSaleIdList: [], expireCondList: [], disableTransferPointInteractionList: [], meetCondList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activated_sale_id_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activatedSaleIdList.push(reader.uint32());
                    else
                        message.activatedSaleIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated uint32 expire_cond_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.expireCondList.push(reader.uint32());
                    else
                        message.expireCondList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list */ 12:
                    message.disableTransferPointInteractionList.push(define_13.Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 meet_cond_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.meetCondList.push(reader.uint32());
                    else
                        message.meetCondList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 activated_sale_id_list = 9; */
        if (message.activatedSaleIdList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activatedSaleIdList.length; i++)
                writer.uint32(message.activatedSaleIdList[i]);
            writer.join();
        }
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* repeated uint32 expire_cond_list = 11; */
        if (message.expireCondList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.expireCondList.length; i++)
                writer.uint32(message.expireCondList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.Uint32Pair disable_transfer_point_interaction_list = 12; */
        for (let i = 0; i < message.disableTransferPointInteractionList.length; i++)
            define_13.Uint32Pair.internalBinaryWrite(message.disableTransferPointInteractionList[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 meet_cond_list = 1; */
        if (message.meetCondList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.meetCondList.length; i++)
                writer.uint32(message.meetCondList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityCondStateChangeNotify
 */
exports.ActivityCondStateChangeNotify = new ActivityCondStateChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeSpecialRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanTakeSpecialRewardReq", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeSpecialRewardReq
 */
exports.SalesmanTakeSpecialRewardReq = new SalesmanTakeSpecialRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalesmanTakeSpecialRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalesmanTakeSpecialRewardRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalesmanTakeSpecialRewardRsp
 */
exports.SalesmanTakeSpecialRewardRsp = new SalesmanTakeSpecialRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAuthSalesmanInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetAuthSalesmanInfoReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAuthSalesmanInfoReq
 */
exports.GetAuthSalesmanInfoReq = new GetAuthSalesmanInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAuthSalesmanInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetAuthSalesmanInfoRsp", [
            { no: 5, name: "day_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_reward_id */ 5:
                    message.dayRewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 day_reward_id = 5; */
        if (message.dayRewardId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.dayRewardId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAuthSalesmanInfoRsp
 */
exports.GetAuthSalesmanInfoRsp = new GetAuthSalesmanInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarActivityRewardDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TrialAvatarActivityRewardDetailInfo", [
            { no: 2, name: "passed_dungeon", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "received_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool passed_dungeon */ 2:
                    message.passedDungeon = reader.bool();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 4:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional bool received_reward */ 5:
                    message.receivedReward = reader.bool();
                    break;
                case /* optional uint32 reward_id */ 7:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool passed_dungeon = 2; */
        if (message.passedDungeon !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.passedDungeon);
        /* optional uint32 trial_avatar_index_id = 4; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional bool received_reward = 5; */
        if (message.receivedReward !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.receivedReward);
        /* optional uint32 reward_id = 7; */
        if (message.rewardId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarActivityRewardDetailInfo
 */
exports.TrialAvatarActivityRewardDetailInfo = new TrialAvatarActivityRewardDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TrialAvatarActivityDetailInfo", [
            { no: 13, name: "reward_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TrialAvatarActivityRewardDetailInfo }
        ]);
    }
    create(value) {
        const message = { rewardInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TrialAvatarActivityRewardDetailInfo reward_info_list */ 13:
                    message.rewardInfoList.push(exports.TrialAvatarActivityRewardDetailInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.TrialAvatarActivityRewardDetailInfo reward_info_list = 13; */
        for (let i = 0; i < message.rewardInfoList.length; i++)
            exports.TrialAvatarActivityRewardDetailInfo.internalBinaryWrite(message.rewardInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarActivityDetailInfo
 */
exports.TrialAvatarActivityDetailInfo = new TrialAvatarActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterTrialAvatarActivityDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterTrialAvatarActivityDungeonReq", [
            { no: 10, name: "enter_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 enter_point_id */ 10:
                    message.enterPointId = reader.uint32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 5:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 enter_point_id = 10; */
        if (message.enterPointId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.enterPointId);
        /* optional uint32 trial_avatar_index_id = 5; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonReq
 */
exports.EnterTrialAvatarActivityDungeonReq = new EnterTrialAvatarActivityDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterTrialAvatarActivityDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterTrialAvatarActivityDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 13:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 trial_avatar_index_id = 13; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterTrialAvatarActivityDungeonRsp
 */
exports.EnterTrialAvatarActivityDungeonRsp = new EnterTrialAvatarActivityDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceivedTrialAvatarActivityRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ReceivedTrialAvatarActivityRewardReq", [
            { no: 4, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 4:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_avatar_index_id = 4; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardReq
 */
exports.ReceivedTrialAvatarActivityRewardReq = new ReceivedTrialAvatarActivityRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReceivedTrialAvatarActivityRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ReceivedTrialAvatarActivityRewardRsp", [
            { no: 13, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 13:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trial_avatar_index_id */ 9:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 13; */
        if (message.activityId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 trial_avatar_index_id = 9; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReceivedTrialAvatarActivityRewardRsp
 */
exports.ReceivedTrialAvatarActivityRewardRsp = new ReceivedTrialAvatarActivityRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarFirstPassDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TrialAvatarFirstPassDungeonNotify", [
            { no: 10, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 10:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_avatar_index_id = 10; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarFirstPassDungeonNotify
 */
exports.TrialAvatarFirstPassDungeonNotify = new TrialAvatarFirstPassDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrialAvatarInDungeonIndexNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TrialAvatarInDungeonIndexNotify", [
            { no: 14, name: "trial_avatar_index_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_avatar_index_id */ 14:
                    message.trialAvatarIndexId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_avatar_index_id = 14; */
        if (message.trialAvatarIndexId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.trialAvatarIndexId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrialAvatarInDungeonIndexNotify
 */
exports.TrialAvatarInDungeonIndexNotify = new TrialAvatarInDungeonIndexNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrucibleBattleUidInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrucibleBattleUidInfo", [
            { no: 15, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 4, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "icon", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 15:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 4:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                case /* optional string online_id */ 13:
                    message.onlineId = reader.string();
                    break;
                case /* optional uint32 icon */ 11:
                    message.icon = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ProfilePicture profile_picture = 15; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 4; */
        if (message.uid !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional string nickname = 5; */
        if (message.nickname !== undefined)
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional string online_id = 13; */
        if (message.onlineId !== undefined)
            writer.tag(13, runtime_1.WireType.LengthDelimited).string(message.onlineId);
        /* optional uint32 icon = 11; */
        if (message.icon !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.icon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrucibleBattleUidInfo
 */
exports.CrucibleBattleUidInfo = new CrucibleBattleUidInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrucibleActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrucibleActivityDetailInfo", [
            { no: 5, name: "cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "battle_world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "uid_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrucibleBattleUidInfo },
            { no: 9, name: "pos", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = { uidInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cost_time */ 5:
                    message.costTime = reader.uint32();
                    break;
                case /* optional uint32 battle_world_level */ 12:
                    message.battleWorldLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrucibleBattleUidInfo uid_info_list */ 3:
                    message.uidInfoList.push(exports.CrucibleBattleUidInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.Vector pos */ 9:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cost_time = 5; */
        if (message.costTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.costTime);
        /* optional uint32 battle_world_level = 12; */
        if (message.battleWorldLevel !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.battleWorldLevel);
        /* repeated com.midnights.game.CrucibleBattleUidInfo uid_info_list = 3; */
        for (let i = 0; i < message.uidInfoList.length; i++)
            exports.CrucibleBattleUidInfo.internalBinaryWrite(message.uidInfoList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector pos = 9; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrucibleActivityDetailInfo
 */
exports.CrucibleActivityDetailInfo = new CrucibleActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DeliveryActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DeliveryActivityDetailInfo", [
            { no: 14, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "finished_delivery_quest_index", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { finishedDeliveryQuestIndex: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_index */ 14:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional bool is_taken_reward */ 13:
                    message.isTakenReward = reader.bool();
                    break;
                case /* repeated uint32 finished_delivery_quest_index */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedDeliveryQuestIndex.push(reader.uint32());
                    else
                        message.finishedDeliveryQuestIndex.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 day_index = 14; */
        if (message.dayIndex !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.dayIndex);
        /* optional bool is_taken_reward = 13; */
        if (message.isTakenReward !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isTakenReward);
        /* repeated uint32 finished_delivery_quest_index = 4; */
        if (message.finishedDeliveryQuestIndex.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedDeliveryQuestIndex.length; i++)
                writer.uint32(message.finishedDeliveryQuestIndex[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DeliveryActivityDetailInfo
 */
exports.DeliveryActivityDetailInfo = new DeliveryActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDeliveryDailyRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeDeliveryDailyRewardReq", [
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeDeliveryDailyRewardReq
 */
exports.TakeDeliveryDailyRewardReq = new TakeDeliveryDailyRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeDeliveryDailyRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeDeliveryDailyRewardRsp", [
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeDeliveryDailyRewardRsp
 */
exports.TakeDeliveryDailyRewardRsp = new TakeDeliveryDailyRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishDeliveryNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FinishDeliveryNotify", [
            { no: 1, name: "finished_quest_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finished_quest_index */ 1:
                    message.finishedQuestIndex = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 12:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 finished_quest_index = 1; */
        if (message.finishedQuestIndex !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.finishedQuestIndex);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 day_index = 12; */
        if (message.dayIndex !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishDeliveryNotify
 */
exports.FinishDeliveryNotify = new FinishDeliveryNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLittleDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterLittleDetailInfo", [
            { no: 4, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "stage_state", kind: "enum", opt: true, T: () => ["com.midnights.game.AsterLittleStageState", define_8.AsterLittleStageState] },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stage_begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 4:
                    message.isOpen = reader.bool();
                    break;
                case /* optional com.midnights.game.AsterLittleStageState stage_state */ 7:
                    message.stageState = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 6:
                    message.beginTime = reader.uint32();
                    break;
                case /* optional uint32 stage_begin_time */ 5:
                    message.stageBeginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 4; */
        if (message.isOpen !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional com.midnights.game.AsterLittleStageState stage_state = 7; */
        if (message.stageState !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.stageState);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 begin_time = 6; */
        if (message.beginTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.beginTime);
        /* optional uint32 stage_begin_time = 5; */
        if (message.stageBeginTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.stageBeginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLittleDetailInfo
 */
exports.AsterLittleDetailInfo = new AsterLittleDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidCampInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterMidCampInfo", [
            { no: 3, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 8, name: "camp_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 3:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 camp_id */ 8:
                    message.campId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector pos = 3; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 camp_id = 8; */
        if (message.campId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.campId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidCampInfo
 */
exports.AsterMidCampInfo = new AsterMidCampInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterMidDetailInfo", [
            { no: 10, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "camp_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.AsterMidCampInfo },
            { no: 4, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "collect_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 begin_time */ 10:
                    message.beginTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.AsterMidCampInfo camp_list */ 7:
                    message.campList.push(exports.AsterMidCampInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 4:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 collect_count */ 11:
                    message.collectCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 begin_time = 10; */
        if (message.beginTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.beginTime);
        /* repeated com.midnights.game.AsterMidCampInfo camp_list = 7; */
        for (let i = 0; i < message.campList.length; i++)
            exports.AsterMidCampInfo.internalBinaryWrite(message.campList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 4; */
        if (message.isOpen !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 collect_count = 11; */
        if (message.collectCount !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.collectCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidDetailInfo
 */
exports.AsterMidDetailInfo = new AsterMidDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLargeDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterLargeDetailInfo", [
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 begin_time */ 13:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 begin_time = 13; */
        if (message.beginTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLargeDetailInfo
 */
exports.AsterLargeDetailInfo = new AsterLargeDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterProgressDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterProgressDetailInfo", [
            { no: 3, name: "last_auto_add_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 last_auto_add_time */ 3:
                    message.lastAutoAddTime = reader.uint32();
                    break;
                case /* optional uint32 count */ 1:
                    message.count = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 last_auto_add_time = 3; */
        if (message.lastAutoAddTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.lastAutoAddTime);
        /* optional uint32 count = 1; */
        if (message.count !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterProgressDetailInfo
 */
exports.AsterProgressDetailInfo = new AsterProgressDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterActivityDetailInfo", [
            { no: 7, name: "aster_little", kind: "message", T: () => exports.AsterLittleDetailInfo },
            { no: 14, name: "aster_credit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "aster_large", kind: "message", T: () => exports.AsterLargeDetailInfo },
            { no: 1, name: "is_special_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "aster_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "aster_mid", kind: "message", T: () => exports.AsterMidDetailInfo },
            { no: 2, name: "aster_progress", kind: "message", T: () => exports.AsterProgressDetailInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLittleDetailInfo aster_little */ 7:
                    message.asterLittle = exports.AsterLittleDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterLittle);
                    break;
                case /* optional uint32 aster_credit */ 14:
                    message.asterCredit = reader.uint32();
                    break;
                case /* optional com.midnights.game.AsterLargeDetailInfo aster_large */ 9:
                    message.asterLarge = exports.AsterLargeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterLarge);
                    break;
                case /* optional bool is_special_reward_taken */ 1:
                    message.isSpecialRewardTaken = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 13:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 8:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 aster_token */ 5:
                    message.asterToken = reader.uint32();
                    break;
                case /* optional com.midnights.game.AsterMidDetailInfo aster_mid */ 6:
                    message.asterMid = exports.AsterMidDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterMid);
                    break;
                case /* optional com.midnights.game.AsterProgressDetailInfo aster_progress */ 2:
                    message.asterProgress = exports.AsterProgressDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.asterProgress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.AsterLittleDetailInfo aster_little = 7; */
        if (message.asterLittle)
            exports.AsterLittleDetailInfo.internalBinaryWrite(message.asterLittle, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 aster_credit = 14; */
        if (message.asterCredit !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.asterCredit);
        /* optional com.midnights.game.AsterLargeDetailInfo aster_large = 9; */
        if (message.asterLarge)
            exports.AsterLargeDetailInfo.internalBinaryWrite(message.asterLarge, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_special_reward_taken = 1; */
        if (message.isSpecialRewardTaken !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isSpecialRewardTaken);
        /* optional bool is_content_closed = 13; */
        if (message.isContentClosed !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 content_close_time = 8; */
        if (message.contentCloseTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 aster_token = 5; */
        if (message.asterToken !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.asterToken);
        /* optional com.midnights.game.AsterMidDetailInfo aster_mid = 6; */
        if (message.asterMid)
            exports.AsterMidDetailInfo.internalBinaryWrite(message.asterMid, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.AsterProgressDetailInfo aster_progress = 2; */
        if (message.asterProgress)
            exports.AsterProgressDetailInfo.internalBinaryWrite(message.asterProgress, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterActivityDetailInfo
 */
exports.AsterActivityDetailInfo = new AsterActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectAsterMidDifficultyReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectAsterMidDifficultyReq", [
            { no: 13, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_entity_id */ 13:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 5:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gadget_entity_id = 13; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 difficulty_id = 5; */
        if (message.difficultyId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectAsterMidDifficultyReq
 */
exports.SelectAsterMidDifficultyReq = new SelectAsterMidDifficultyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectAsterMidDifficultyRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectAsterMidDifficultyRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectAsterMidDifficultyRsp
 */
exports.SelectAsterMidDifficultyRsp = new SelectAsterMidDifficultyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterProgressInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterProgressInfoNotify", [
            { no: 1, name: "info", kind: "message", T: () => exports.AsterProgressDetailInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterProgressDetailInfo info */ 1:
                    message.info = exports.AsterProgressDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.AsterProgressDetailInfo info = 1; */
        if (message.info)
            exports.AsterProgressDetailInfo.internalBinaryWrite(message.info, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterProgressInfoNotify
 */
exports.AsterProgressInfoNotify = new AsterProgressInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLittleInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterLittleInfoNotify", [
            { no: 1, name: "info", kind: "message", T: () => exports.AsterLittleDetailInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLittleDetailInfo info */ 1:
                    message.info = exports.AsterLittleDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.AsterLittleDetailInfo info = 1; */
        if (message.info)
            exports.AsterLittleDetailInfo.internalBinaryWrite(message.info, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLittleInfoNotify
 */
exports.AsterLittleInfoNotify = new AsterLittleInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterMidInfoNotify", [
            { no: 4, name: "info", kind: "message", T: () => exports.AsterMidDetailInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterMidDetailInfo info */ 4:
                    message.info = exports.AsterMidDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.AsterMidDetailInfo info = 4; */
        if (message.info)
            exports.AsterMidDetailInfo.internalBinaryWrite(message.info, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidInfoNotify
 */
exports.AsterMidInfoNotify = new AsterMidInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMiscInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterMiscInfoNotify", [
            { no: 2, name: "aster_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "aster_credit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 aster_token */ 2:
                    message.asterToken = reader.uint32();
                    break;
                case /* optional uint32 aster_credit */ 15:
                    message.asterCredit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 aster_token = 2; */
        if (message.asterToken !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.asterToken);
        /* optional uint32 aster_credit = 15; */
        if (message.asterCredit !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.asterCredit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMiscInfoNotify
 */
exports.AsterMiscInfoNotify = new AsterMiscInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAsterSpecialRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeAsterSpecialRewardReq", [
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAsterSpecialRewardReq
 */
exports.TakeAsterSpecialRewardReq = new TakeAsterSpecialRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeAsterSpecialRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeAsterSpecialRewardRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeAsterSpecialRewardRsp
 */
exports.TakeAsterSpecialRewardRsp = new TakeAsterSpecialRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterLargeInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterLargeInfoNotify", [
            { no: 10, name: "info", kind: "message", T: () => exports.AsterLargeDetailInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.AsterLargeDetailInfo info */ 10:
                    message.info = exports.AsterLargeDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.AsterLargeDetailInfo info = 10; */
        if (message.info)
            exports.AsterLargeDetailInfo.internalBinaryWrite(message.info, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterLargeInfoNotify
 */
exports.AsterLargeInfoNotify = new AsterLargeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightDailyRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FlightDailyRecord", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "watcher_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_touched */ 1:
                    message.isTouched = reader.bool();
                    break;
                case /* repeated uint32 watcher_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 best_score */ 7:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 3:
                    message.startTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional bool is_touched = 1; */
        if (message.isTouched !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isTouched);
        /* repeated uint32 watcher_id_list = 11; */
        if (message.watcherIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.watcherIdList.length; i++)
                writer.uint32(message.watcherIdList[i]);
            writer.join();
        }
        /* optional uint32 best_score = 7; */
        if (message.bestScore !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.bestScore);
        /* optional uint32 start_time = 3; */
        if (message.startTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightDailyRecord
 */
exports.FlightDailyRecord = new FlightDailyRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FlightActivityDetailInfo", [
            { no: 15, name: "preview_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "daily_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FlightDailyRecord }
        ]);
    }
    create(value) {
        const message = { dailyRecordList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 preview_reward_id */ 15:
                    message.previewRewardId = reader.uint32();
                    break;
                case /* optional uint32 min_open_player_level */ 11:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FlightDailyRecord daily_record_list */ 1:
                    message.dailyRecordList.push(exports.FlightDailyRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 preview_reward_id = 15; */
        if (message.previewRewardId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.previewRewardId);
        /* optional uint32 min_open_player_level = 11; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* repeated com.midnights.game.FlightDailyRecord daily_record_list = 1; */
        for (let i = 0; i < message.dailyRecordList.length; i++)
            exports.FlightDailyRecord.internalBinaryWrite(message.dailyRecordList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityDetailInfo
 */
exports.FlightActivityDetailInfo = new FlightActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivitySettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FlightActivitySettleNotify", [
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "medal_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "collect_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 medal_level */ 6:
                    message.medalLevel = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 13:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 collect_num */ 9:
                    message.collectNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 5:
                    message.totalNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 8:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                case /* optional bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 medal_level = 6; */
        if (message.medalLevel !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.medalLevel);
        /* optional uint32 left_time = 13; */
        if (message.leftTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.leftTime);
        /* optional uint32 collect_num = 9; */
        if (message.collectNum !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.collectNum);
        /* optional uint32 total_num = 5; */
        if (message.totalNum !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.totalNum);
        /* optional uint32 group_id = 8; */
        if (message.groupId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.score);
        /* optional bool is_success = 4; */
        if (message.isSuccess !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivitySettleNotify
 */
exports.FlightActivitySettleNotify = new FlightActivitySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FlightActivityRestartReq", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityRestartReq
 */
exports.FlightActivityRestartReq = new FlightActivityRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FlightActivityRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FlightActivityRestartRsp", [
            { no: 11, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 11:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_id = 11; */
        if (message.groupId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FlightActivityRestartRsp
 */
exports.FlightActivityRestartRsp = new FlightActivityRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AsterMidCampInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.AsterMidCampInfoNotify", [
            { no: 5, name: "camp_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.AsterMidCampInfo }
        ]);
    }
    create(value) {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.AsterMidCampInfo camp_list */ 5:
                    message.campList.push(exports.AsterMidCampInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.AsterMidCampInfo camp_list = 5; */
        for (let i = 0; i < message.campList.length; i++)
            exports.AsterMidCampInfo.internalBinaryWrite(message.campList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AsterMidCampInfoNotify
 */
exports.AsterMidCampInfoNotify = new AsterMidCampInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineActivityDetailInfo", [
            { no: 10, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "chapter_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.DragonSpineChapterInfo },
            { no: 2, name: "weapon_enhance_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "content_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "shimmering_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "warm_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "wondrous_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { chapterInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 10:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.DragonSpineChapterInfo chapter_info_list */ 4:
                    message.chapterInfoList.push(exports.DragonSpineChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 weapon_enhance_level */ 2:
                    message.weaponEnhanceLevel = reader.uint32();
                    break;
                case /* optional uint32 content_finish_time */ 15:
                    message.contentFinishTime = reader.uint32();
                    break;
                case /* optional uint32 shimmering_essence */ 13:
                    message.shimmeringEssence = reader.uint32();
                    break;
                case /* optional uint32 warm_essence */ 11:
                    message.warmEssence = reader.uint32();
                    break;
                case /* optional uint32 wondrous_essence */ 7:
                    message.wondrousEssence = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_content_closed = 10; */
        if (message.isContentClosed !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.DragonSpineChapterInfo chapter_info_list = 4; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            exports.DragonSpineChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 weapon_enhance_level = 2; */
        if (message.weaponEnhanceLevel !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.weaponEnhanceLevel);
        /* optional uint32 content_finish_time = 15; */
        if (message.contentFinishTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.contentFinishTime);
        /* optional uint32 shimmering_essence = 13; */
        if (message.shimmeringEssence !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.shimmeringEssence);
        /* optional uint32 warm_essence = 11; */
        if (message.warmEssence !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.warmEssence);
        /* optional uint32 wondrous_essence = 7; */
        if (message.wondrousEssence !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.wondrousEssence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineActivityDetailInfo
 */
exports.DragonSpineActivityDetailInfo = new DragonSpineActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineChapterInfo", [
            { no: 14, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "finished_mission_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 progress */ 14:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 6:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 chapter_id */ 9:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 finished_mission_num */ 10:
                    message.finishedMissionNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 progress = 14; */
        if (message.progress !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.progress);
        /* optional uint32 open_time = 6; */
        if (message.openTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 chapter_id = 9; */
        if (message.chapterId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.chapterId);
        /* optional uint32 finished_mission_num = 10; */
        if (message.finishedMissionNum !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.finishedMissionNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterInfo
 */
exports.DragonSpineChapterInfo = new DragonSpineChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterOpenNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineChapterOpenNotify", [
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 10:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 10; */
        if (message.chapterId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterOpenNotify
 */
exports.DragonSpineChapterOpenNotify = new DragonSpineChapterOpenNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterProgressChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineChapterProgressChangeNotify", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 cur_progress */ 5:
                    message.curProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.chapterId);
        /* optional uint32 cur_progress = 5; */
        if (message.curProgress !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.curProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterProgressChangeNotify
 */
exports.DragonSpineChapterProgressChangeNotify = new DragonSpineChapterProgressChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineChapterFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineChapterFinishNotify", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "weapon_enhance_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                case /* optional uint32 weapon_enhance_level */ 14:
                    message.weaponEnhanceLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.chapterId);
        /* optional uint32 weapon_enhance_level = 14; */
        if (message.weaponEnhanceLevel !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.weaponEnhanceLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineChapterFinishNotify
 */
exports.DragonSpineChapterFinishNotify = new DragonSpineChapterFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DragonSpineCoinChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DragonSpineCoinChangeNotify", [
            { no: 4, name: "shimmering_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "warm_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "wondrous_essence", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shimmering_essence */ 4:
                    message.shimmeringEssence = reader.uint32();
                    break;
                case /* optional uint32 warm_essence */ 13:
                    message.warmEssence = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 wondrous_essence */ 11:
                    message.wondrousEssence = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 shimmering_essence = 4; */
        if (message.shimmeringEssence !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.shimmeringEssence);
        /* optional uint32 warm_essence = 13; */
        if (message.warmEssence !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.warmEssence);
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 wondrous_essence = 11; */
        if (message.wondrousEssence !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.wondrousEssence);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DragonSpineCoinChangeNotify
 */
exports.DragonSpineCoinChangeNotify = new DragonSpineCoinChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySaleChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivitySaleChangeNotify", [
            { no: 5, name: "sale_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_close", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 sale_id */ 5:
                    message.saleId = reader.uint32();
                    break;
                case /* optional bool is_close */ 1:
                    message.isClose = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 sale_id = 5; */
        if (message.saleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.saleId);
        /* optional bool is_close = 1; */
        if (message.isClose !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isClose);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySaleChangeNotify
 */
exports.ActivitySaleChangeNotify = new ActivitySaleChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyDailyInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyDailyInfo", [
            { no: 6, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_first_pass_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "challenge_total_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_max_score */ 6:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional bool is_first_pass_reward_taken */ 12:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* optional uint32 challenge_total_score */ 15:
                    message.challengeTotalScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 challenge_count */ 3:
                    message.challengeCount = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 14:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional uint32 begin_time */ 2:
                    message.beginTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_max_score = 6; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.challengeMaxScore);
        /* optional bool is_first_pass_reward_taken = 12; */
        if (message.isFirstPassRewardTaken !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* optional uint32 challenge_total_score = 15; */
        if (message.challengeTotalScore !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.challengeTotalScore);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 challenge_count = 3; */
        if (message.challengeCount !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.challengeCount);
        /* optional uint32 day_index = 14; */
        if (message.dayIndex !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.dayIndex);
        /* optional uint32 begin_time = 2; */
        if (message.beginTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.beginTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyDailyInfo
 */
exports.EffigyDailyInfo = new EffigyDailyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyActivityDetailInfo", [
            { no: 5, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "daily_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.EffigyDailyInfo },
            { no: 9, name: "last_difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "taken_reward_index_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dailyInfoList: [], takenRewardIndexList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_score */ 5:
                    message.curScore = reader.uint32();
                    break;
                case /* repeated com.midnights.game.EffigyDailyInfo daily_info_list */ 14:
                    message.dailyInfoList.push(exports.EffigyDailyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 last_difficulty_id */ 9:
                    message.lastDifficultyId = reader.uint32();
                    break;
                case /* repeated uint32 taken_reward_index_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardIndexList.push(reader.uint32());
                    else
                        message.takenRewardIndexList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_score = 5; */
        if (message.curScore !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.curScore);
        /* repeated com.midnights.game.EffigyDailyInfo daily_info_list = 14; */
        for (let i = 0; i < message.dailyInfoList.length; i++)
            exports.EffigyDailyInfo.internalBinaryWrite(message.dailyInfoList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 last_difficulty_id = 9; */
        if (message.lastDifficultyId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.lastDifficultyId);
        /* repeated uint32 taken_reward_index_list = 2; */
        if (message.takenRewardIndexList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenRewardIndexList.length; i++)
                writer.uint32(message.takenRewardIndexList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyActivityDetailInfo
 */
exports.EffigyActivityDetailInfo = new EffigyActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartEffigyChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartEffigyChallengeReq", [
            { no: 9, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 9:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty_id = 9; */
        if (message.difficultyId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 6; */
        if (message.conditionIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartEffigyChallengeReq
 */
exports.StartEffigyChallengeReq = new StartEffigyChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartEffigyChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartEffigyChallengeRsp", [
            { no: 2, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 condition_id_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_id */ 15:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 condition_id_list = 2; */
        if (message.conditionIdList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_id = 15; */
        if (message.challengeId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartEffigyChallengeRsp
 */
exports.StartEffigyChallengeRsp = new StartEffigyChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeInfoNotify", [
            { no: 9, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 9:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 challenge_score */ 14:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 8:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty_id = 9; */
        if (message.difficultyId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 11; */
        if (message.conditionIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 challenge_score = 14; */
        if (message.challengeScore !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 challenge_id = 8; */
        if (message.challengeId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeInfoNotify
 */
exports.EffigyChallengeInfoNotify = new EffigyChallengeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeDungeonResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeDungeonResultInfo", [
            { no: 7, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_in_time_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_score */ 7:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional bool is_in_time_limit */ 8:
                    message.isInTimeLimit = reader.bool();
                    break;
                case /* optional uint32 challenge_id */ 6:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 13:
                    message.challengeMaxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_score = 7; */
        if (message.challengeScore !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeScore);
        /* optional bool is_in_time_limit = 8; */
        if (message.isInTimeLimit !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isInTimeLimit);
        /* optional uint32 challenge_id = 6; */
        if (message.challengeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 13; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.challengeMaxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeDungeonResultInfo
 */
exports.EffigyChallengeDungeonResultInfo = new EffigyChallengeDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeResultNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeResultNotify", [
            { no: 5, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 5:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 12:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_score */ 3:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_success = 5; */
        if (message.isSuccess !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 12; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.challengeMaxScore);
        /* optional uint32 challenge_score = 3; */
        if (message.challengeScore !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeResultNotify
 */
exports.EffigyChallengeResultNotify = new EffigyChallengeResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyFirstPassRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeEffigyFirstPassRewardReq", [
            { no: 6, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 6:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_id = 6; */
        if (message.challengeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyFirstPassRewardReq
 */
exports.TakeEffigyFirstPassRewardReq = new TakeEffigyFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyFirstPassRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeEffigyFirstPassRewardRsp", [
            { no: 2, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 2:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_id = 2; */
        if (message.challengeId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyFirstPassRewardRsp
 */
exports.TakeEffigyFirstPassRewardRsp = new TakeEffigyFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeEffigyRewardReq", [
            { no: 14, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 14:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_index = 14; */
        if (message.rewardIndex !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyRewardReq
 */
exports.TakeEffigyRewardReq = new TakeEffigyRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeEffigyRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TakeEffigyRewardRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_index */ 7:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_index = 7; */
        if (message.rewardIndex !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeEffigyRewardRsp
 */
exports.TakeEffigyRewardRsp = new TakeEffigyRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEffigyChallengeConditionReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectEffigyChallengeConditionReq", [
            { no: 15, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 15:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty_id = 15; */
        if (message.difficultyId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* repeated uint32 condition_id_list = 9; */
        if (message.conditionIdList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectEffigyChallengeConditionReq
 */
exports.SelectEffigyChallengeConditionReq = new SelectEffigyChallengeConditionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectEffigyChallengeConditionRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectEffigyChallengeConditionRsp", [
            { no: 12, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 condition_id_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 2:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 condition_id_list = 12; */
        if (message.conditionIdList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 challenge_id = 2; */
        if (message.challengeId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectEffigyChallengeConditionRsp
 */
exports.SelectEffigyChallengeConditionRsp = new SelectEffigyChallengeConditionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartEffigyChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RestartEffigyChallengeReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RestartEffigyChallengeReq
 */
exports.RestartEffigyChallengeReq = new RestartEffigyChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RestartEffigyChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RestartEffigyChallengeRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RestartEffigyChallengeRsp
 */
exports.RestartEffigyChallengeRsp = new RestartEffigyChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapRegionInfo", [
            { no: 6, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "current_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_done_mp_spot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "goal_points", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_find_mp_spot", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "region_radius", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "region_center_pos", kind: "message", T: () => define_12.Vector },
            { no: 5, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 6:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 current_progress */ 11:
                    message.currentProgress = reader.uint32();
                    break;
                case /* optional bool is_done_mp_spot */ 3:
                    message.isDoneMpSpot = reader.bool();
                    break;
                case /* optional uint32 scene_id */ 2:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 goal_points */ 12:
                    message.goalPoints = reader.uint32();
                    break;
                case /* optional bool is_find_mp_spot */ 4:
                    message.isFindMpSpot = reader.bool();
                    break;
                case /* optional uint32 region_radius */ 1:
                    message.regionRadius = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector region_center_pos */ 9:
                    message.regionCenterPos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.regionCenterPos);
                    break;
                case /* optional uint32 region_id */ 5:
                    message.regionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 start_time = 6; */
        if (message.startTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.startTime);
        /* optional uint32 current_progress = 11; */
        if (message.currentProgress !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.currentProgress);
        /* optional bool is_done_mp_spot = 3; */
        if (message.isDoneMpSpot !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isDoneMpSpot);
        /* optional uint32 scene_id = 2; */
        if (message.sceneId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.sceneId);
        /* optional uint32 goal_points = 12; */
        if (message.goalPoints !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.goalPoints);
        /* optional bool is_find_mp_spot = 4; */
        if (message.isFindMpSpot !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isFindMpSpot);
        /* optional uint32 region_radius = 1; */
        if (message.regionRadius !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.regionRadius);
        /* optional com.midnights.game.Vector region_center_pos = 9; */
        if (message.regionCenterPos)
            define_12.Vector.internalBinaryWrite(message.regionCenterPos, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 region_id = 5; */
        if (message.regionId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.regionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionInfo
 */
exports.TreasureMapRegionInfo = new TreasureMapRegionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapBonusChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapBonusChallengeInfo", [
            { no: 5, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "fragment_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 8, name: "solution_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { fragmentMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 5:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 config_id */ 10:
                    message.configId = reader.uint32();
                    break;
                case /* optional bool is_active */ 1:
                    message.isActive = reader.bool();
                    break;
                case /* map<uint32, bool> fragment_map */ 12:
                    this.binaryReadMap12(message.fragmentMap, reader, options);
                    break;
                case /* optional uint32 solution_id */ 8:
                    message.solutionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.TreasureMapBonusChallengeInfo.fragment_map");
            }
        }
        map[key ?? 0] = val ?? false;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_done = 5; */
        if (message.isDone !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isDone);
        /* optional uint32 config_id = 10; */
        if (message.configId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.configId);
        /* optional bool is_active = 1; */
        if (message.isActive !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isActive);
        /* map<uint32, bool> fragment_map = 12; */
        for (let k of Object.keys(message.fragmentMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).bool(message.fragmentMap[k]).join();
        /* optional uint32 solution_id = 8; */
        if (message.solutionId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.solutionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapBonusChallengeInfo
 */
exports.TreasureMapBonusChallengeInfo = new TreasureMapBonusChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapActivityDetailInfo", [
            { no: 1, name: "active_region_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "region_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TreasureMapRegionInfo },
            { no: 7, name: "is_mp_challenge_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "treasure_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "bonus_challenge_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TreasureMapBonusChallengeInfo },
            { no: 2, name: "currency_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "preview_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "total_mp_spot_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { regionInfoList: [], bonusChallengeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_region_index */ 1:
                    message.activeRegionIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TreasureMapRegionInfo region_info_list */ 6:
                    message.regionInfoList.push(exports.TreasureMapRegionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_mp_challenge_touched */ 7:
                    message.isMpChallengeTouched = reader.bool();
                    break;
                case /* optional uint32 treasure_close_time */ 10:
                    message.treasureCloseTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.TreasureMapBonusChallengeInfo bonus_challenge_list */ 5:
                    message.bonusChallengeList.push(exports.TreasureMapBonusChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 currency_num */ 2:
                    message.currencyNum = reader.uint32();
                    break;
                case /* optional uint32 preview_reward_id */ 14:
                    message.previewRewardId = reader.uint32();
                    break;
                case /* optional uint32 min_open_player_level */ 8:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* optional uint32 total_mp_spot_num */ 13:
                    message.totalMpSpotNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 active_region_index = 1; */
        if (message.activeRegionIndex !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.activeRegionIndex);
        /* repeated com.midnights.game.TreasureMapRegionInfo region_info_list = 6; */
        for (let i = 0; i < message.regionInfoList.length; i++)
            exports.TreasureMapRegionInfo.internalBinaryWrite(message.regionInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_mp_challenge_touched = 7; */
        if (message.isMpChallengeTouched !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isMpChallengeTouched);
        /* optional uint32 treasure_close_time = 10; */
        if (message.treasureCloseTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.treasureCloseTime);
        /* repeated com.midnights.game.TreasureMapBonusChallengeInfo bonus_challenge_list = 5; */
        for (let i = 0; i < message.bonusChallengeList.length; i++)
            exports.TreasureMapBonusChallengeInfo.internalBinaryWrite(message.bonusChallengeList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 currency_num = 2; */
        if (message.currencyNum !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.currencyNum);
        /* optional uint32 preview_reward_id = 14; */
        if (message.previewRewardId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.previewRewardId);
        /* optional uint32 min_open_player_level = 8; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* optional uint32 total_mp_spot_num = 13; */
        if (message.totalMpSpotNum !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.totalMpSpotNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapActivityDetailInfo
 */
exports.TreasureMapActivityDetailInfo = new TreasureMapActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapRegionInfoNotify", [
            { no: 14, name: "region_info", kind: "message", T: () => exports.TreasureMapRegionInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TreasureMapRegionInfo region_info */ 14:
                    message.regionInfo = exports.TreasureMapRegionInfo.internalBinaryRead(reader, reader.uint32(), options, message.regionInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.TreasureMapRegionInfo region_info = 14; */
        if (message.regionInfo)
            exports.TreasureMapRegionInfo.internalBinaryWrite(message.regionInfo, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionInfoNotify
 */
exports.TreasureMapRegionInfoNotify = new TreasureMapRegionInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapCurrencyNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapCurrencyNotify", [
            { no: 8, name: "currency_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 currency_num */ 8:
                    message.currencyNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 currency_num = 8; */
        if (message.currencyNum !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.currencyNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapCurrencyNotify
 */
exports.TreasureMapCurrencyNotify = new TreasureMapCurrencyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapRegionActiveNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapRegionActiveNotify", [
            { no: 14, name: "active_region_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_region_index */ 14:
                    message.activeRegionIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 active_region_index = 14; */
        if (message.activeRegionIndex !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activeRegionIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapRegionActiveNotify
 */
exports.TreasureMapRegionActiveNotify = new TreasureMapRegionActiveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapMpChallengeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapMpChallengeNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapMpChallengeNotify
 */
exports.TreasureMapMpChallengeNotify = new TreasureMapMpChallengeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapBonusChallengeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapBonusChallengeNotify", [
            { no: 5, name: "info", kind: "message", T: () => exports.TreasureMapBonusChallengeInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.TreasureMapBonusChallengeInfo info */ 5:
                    message.info = exports.TreasureMapBonusChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.TreasureMapBonusChallengeInfo info = 5; */
        if (message.info)
            exports.TreasureMapBonusChallengeInfo.internalBinaryWrite(message.info, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapBonusChallengeNotify
 */
exports.TreasureMapBonusChallengeNotify = new TreasureMapBonusChallengeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapGuideTaskDoneNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapGuideTaskDoneNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapGuideTaskDoneNotify
 */
exports.TreasureMapGuideTaskDoneNotify = new TreasureMapGuideTaskDoneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapPreTaskDoneNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapPreTaskDoneNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapPreTaskDoneNotify
 */
exports.TreasureMapPreTaskDoneNotify = new TreasureMapPreTaskDoneNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingActivityDetailInfo", [
            { no: 9, name: "cur_day_scan_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_day_scan_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "redeem_reward_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_activated", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_day_scan_type */ 9:
                    message.curDayScanType = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, uint32> pic_num_map */ 15:
                    this.binaryReadMap15(message.picNumMap, reader, options);
                    break;
                case /* optional uint32 content_close_time */ 2:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 cur_day_scan_num */ 4:
                    message.curDayScanNum = reader.uint32();
                    break;
                case /* optional uint32 redeem_reward_num */ 1:
                    message.redeemRewardNum = reader.uint32();
                    break;
                case /* optional bool is_activated */ 13:
                    message.isActivated = reader.bool();
                    break;
                case /* optional uint32 next_refresh_time */ 6:
                    message.nextRefreshTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap15(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingActivityDetailInfo.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_day_scan_type = 9; */
        if (message.curDayScanType !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.curDayScanType);
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, uint32> pic_num_map = 15; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.picNumMap[k]).join();
        /* optional uint32 content_close_time = 2; */
        if (message.contentCloseTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 cur_day_scan_num = 4; */
        if (message.curDayScanNum !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.curDayScanNum);
        /* optional uint32 redeem_reward_num = 1; */
        if (message.redeemRewardNum !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.redeemRewardNum);
        /* optional bool is_activated = 13; */
        if (message.isActivated !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isActivated);
        /* optional uint32 next_refresh_time = 6; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.nextRefreshTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingActivityDetailInfo
 */
exports.BlessingActivityDetailInfo = new BlessingActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingScanReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingScanReq", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingScanReq
 */
exports.BlessingScanReq = new BlessingScanReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingScanRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingScanRsp", [
            { no: 4, name: "scan_pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "cur_day_scan_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scan_pic_id */ 4:
                    message.scanPicId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cur_day_scan_num */ 1:
                    message.curDayScanNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 scan_pic_id = 4; */
        if (message.scanPicId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.scanPicId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 cur_day_scan_num = 1; */
        if (message.curDayScanNum !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.curDayScanNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingScanRsp
 */
exports.BlessingScanRsp = new BlessingScanRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRedeemRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingRedeemRewardReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRedeemRewardReq
 */
exports.BlessingRedeemRewardReq = new BlessingRedeemRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRedeemRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingRedeemRewardRsp", [
            { no: 12, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> pic_num_map */ 12:
                    this.binaryReadMap12(message.picNumMap, reader, options);
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingRedeemRewardRsp.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> pic_num_map = 12; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.picNumMap[k]).join();
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRedeemRewardRsp
 */
exports.BlessingRedeemRewardRsp = new BlessingRedeemRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingFriendPicData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingFriendPicData", [
            { no: 4, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 9, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { picNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> pic_num_map */ 4:
                    this.binaryReadMap4(message.picNumMap, reader, options);
                    break;
                case /* optional uint32 avatar_id */ 5:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional string remark_name */ 11:
                    message.remarkName = reader.string();
                    break;
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* optional string signature */ 1:
                    message.signature = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 6:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 9:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingFriendPicData.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> pic_num_map = 4; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.picNumMap[k]).join();
        /* optional uint32 avatar_id = 5; */
        if (message.avatarId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.avatarId);
        /* optional string remark_name = 11; */
        if (message.remarkName !== undefined)
            writer.tag(11, runtime_1.WireType.LengthDelimited).string(message.remarkName);
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional string signature = 1; */
        if (message.signature !== undefined)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.signature);
        /* optional com.midnights.game.ProfilePicture profile_picture = 6; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 9; */
        if (message.uid !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingFriendPicData
 */
exports.BlessingFriendPicData = new BlessingFriendPicData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRecvPicRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingRecvPicRecord", [
            { no: 1, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "signature", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_recv", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 1:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 2:
                    message.remarkName = reader.string();
                    break;
                case /* optional uint32 pic_id */ 3:
                    message.picId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 6:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional string signature */ 10:
                    message.signature = reader.string();
                    break;
                case /* optional uint32 index */ 14:
                    message.index = reader.uint32();
                    break;
                case /* optional bool is_recv */ 7:
                    message.isRecv = reader.bool();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 9:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string nickname = 1; */
        if (message.nickname !== undefined)
            writer.tag(1, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 2; */
        if (message.remarkName !== undefined)
            writer.tag(2, runtime_1.WireType.LengthDelimited).string(message.remarkName);
        /* optional uint32 pic_id = 3; */
        if (message.picId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.picId);
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional uint32 avatar_id = 6; */
        if (message.avatarId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.avatarId);
        /* optional string signature = 10; */
        if (message.signature !== undefined)
            writer.tag(10, runtime_1.WireType.LengthDelimited).string(message.signature);
        /* optional uint32 index = 14; */
        if (message.index !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.index);
        /* optional bool is_recv = 7; */
        if (message.isRecv !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isRecv);
        /* optional com.midnights.game.ProfilePicture profile_picture = 9; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRecvPicRecord
 */
exports.BlessingRecvPicRecord = new BlessingRecvPicRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetFriendPicListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGetFriendPicListReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetFriendPicListReq
 */
exports.BlessingGetFriendPicListReq = new BlessingGetFriendPicListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetFriendPicListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGetFriendPicListRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "friend_pic_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BlessingFriendPicData }
        ]);
    }
    create(value) {
        const message = { friendPicDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.BlessingFriendPicData friend_pic_data_list */ 6:
                    message.friendPicDataList.push(exports.BlessingFriendPicData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.BlessingFriendPicData friend_pic_data_list = 6; */
        for (let i = 0; i < message.friendPicDataList.length; i++)
            exports.BlessingFriendPicData.internalBinaryWrite(message.friendPicDataList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetFriendPicListRsp
 */
exports.BlessingGetFriendPicListRsp = new BlessingGetFriendPicListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGiveFriendPicReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGiveFriendPicReq", [
            { no: 11, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 11:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 pic_id */ 3:
                    message.picId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 11; */
        if (message.uid !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional uint32 pic_id = 3; */
        if (message.picId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.picId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGiveFriendPicReq
 */
exports.BlessingGiveFriendPicReq = new BlessingGiveFriendPicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGiveFriendPicRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGiveFriendPicRsp", [
            { no: 10, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pic_id */ 10:
                    message.picId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 uid */ 13:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 pic_id = 10; */
        if (message.picId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.picId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 uid = 13; */
        if (message.uid !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGiveFriendPicRsp
 */
exports.BlessingGiveFriendPicRsp = new BlessingGiveFriendPicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptGivePicReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingAcceptGivePicReq", [
            { no: 9, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 index */ 9:
                    message.index = reader.uint32();
                    break;
                case /* optional uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 index = 9; */
        if (message.index !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.index);
        /* optional uint32 uid = 1; */
        if (message.uid !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptGivePicReq
 */
exports.BlessingAcceptGivePicReq = new BlessingAcceptGivePicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptGivePicRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingAcceptGivePicRsp", [
            { no: 1, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pic_id */ 1:
                    message.picId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 index */ 5:
                    message.index = reader.uint32();
                    break;
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 pic_id = 1; */
        if (message.picId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.picId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 index = 5; */
        if (message.index !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.index);
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptGivePicRsp
 */
exports.BlessingAcceptGivePicRsp = new BlessingAcceptGivePicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetAllRecvPicRecordListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGetAllRecvPicRecordListReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListReq
 */
exports.BlessingGetAllRecvPicRecordListReq = new BlessingGetAllRecvPicRecordListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingGetAllRecvPicRecordListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingGetAllRecvPicRecordListRsp", [
            { no: 15, name: "recv_pic_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BlessingRecvPicRecord },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { recvPicRecordList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BlessingRecvPicRecord recv_pic_record_list */ 15:
                    message.recvPicRecordList.push(exports.BlessingRecvPicRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.BlessingRecvPicRecord recv_pic_record_list = 15; */
        for (let i = 0; i < message.recvPicRecordList.length; i++)
            exports.BlessingRecvPicRecord.internalBinaryWrite(message.recvPicRecordList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingGetAllRecvPicRecordListRsp
 */
exports.BlessingGetAllRecvPicRecordListRsp = new BlessingGetAllRecvPicRecordListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRecvFriendPicNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingRecvFriendPicNotify", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "pic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 pic_id */ 5:
                    message.picId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional uint32 pic_id = 5; */
        if (message.picId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.picId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingRecvFriendPicNotify
 */
exports.BlessingRecvFriendPicNotify = new BlessingRecvFriendPicNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptAllGivePicReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingAcceptAllGivePicReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptAllGivePicReq
 */
exports.BlessingAcceptAllGivePicReq = new BlessingAcceptAllGivePicReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlessingAcceptAllGivePicRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlessingAcceptAllGivePicRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "accept_pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "accept_index_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { acceptPicNumMap: {}, acceptIndexList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* map<uint32, uint32> accept_pic_num_map */ 14:
                    this.binaryReadMap14(message.acceptPicNumMap, reader, options);
                    break;
                case /* repeated uint32 accept_index_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.acceptIndexList.push(reader.uint32());
                    else
                        message.acceptIndexList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BlessingAcceptAllGivePicRsp.accept_pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* map<uint32, uint32> accept_pic_num_map = 14; */
        for (let k of Object.keys(message.acceptPicNumMap))
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.acceptPicNumMap[k]).join();
        /* repeated uint32 accept_index_list = 5; */
        if (message.acceptIndexList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.acceptIndexList.length; i++)
                writer.uint32(message.acceptIndexList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlessingAcceptAllGivePicRsp
 */
exports.BlessingAcceptAllGivePicRsp = new BlessingAcceptAllGivePicRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionPathInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionPathInfo", [
            { no: 12, name: "mark_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "bonus_probability", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.ExpeditionState", define_7.ExpeditionState] },
            { no: 2, name: "avatar_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "assist_costume_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mark_id */ 12:
                    message.markId = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 9:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 assist_avatar_id */ 7:
                    message.assistAvatarId = reader.uint32();
                    break;
                case /* optional float bonus_probability */ 4:
                    message.bonusProbability = reader.float();
                    break;
                case /* optional com.midnights.game.ExpeditionState state */ 15:
                    message.state = reader.int32();
                    break;
                case /* repeated uint32 avatar_id_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 assist_costume_id */ 5:
                    message.assistCostumeId = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 8:
                    message.pathId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 assist_uid */ 10:
                    message.assistUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 mark_id = 12; */
        if (message.markId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.markId);
        /* optional uint32 start_time = 9; */
        if (message.startTime !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.startTime);
        /* optional uint32 assist_avatar_id = 7; */
        if (message.assistAvatarId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.assistAvatarId);
        /* optional float bonus_probability = 4; */
        if (message.bonusProbability !== undefined)
            writer.tag(4, runtime_1.WireType.Bit32).float(message.bonusProbability);
        /* optional com.midnights.game.ExpeditionState state = 15; */
        if (message.state !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.state);
        /* repeated uint32 avatar_id_list = 2; */
        if (message.avatarIdList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.avatarIdList.length; i++)
                writer.uint32(message.avatarIdList[i]);
            writer.join();
        }
        /* optional uint32 assist_costume_id = 5; */
        if (message.assistCostumeId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.assistCostumeId);
        /* optional uint32 path_id = 8; */
        if (message.pathId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.pathId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 assist_uid = 10; */
        if (message.assistUid !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.assistUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionPathInfo
 */
exports.ExpeditionPathInfo = new ExpeditionPathInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeInfo", [
            { no: 5, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 5:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 id */ 11:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 9:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finished = 5; */
        if (message.isFinished !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 id = 11; */
        if (message.id !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.id);
        /* optional uint32 open_time = 9; */
        if (message.openTime !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeInfo
 */
exports.ExpeditionChallengeInfo = new ExpeditionChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionActivityDetailInfo", [
            { no: 5, name: "cur_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ExpeditionChallengeInfo },
            { no: 2, name: "expedition_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "path_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ExpeditionPathInfo }
        ]);
    }
    create(value) {
        const message = { challengeInfoList: [], pathInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_challenge_id */ 5:
                    message.curChallengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ExpeditionChallengeInfo challenge_info_list */ 10:
                    message.challengeInfoList.push(exports.ExpeditionChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 expedition_count */ 2:
                    message.expeditionCount = reader.uint32();
                    break;
                case /* optional uint32 content_close_time */ 4:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.ExpeditionPathInfo path_info_list */ 15:
                    message.pathInfoList.push(exports.ExpeditionPathInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_challenge_id = 5; */
        if (message.curChallengeId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.curChallengeId);
        /* repeated com.midnights.game.ExpeditionChallengeInfo challenge_info_list = 10; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            exports.ExpeditionChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 expedition_count = 2; */
        if (message.expeditionCount !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.expeditionCount);
        /* optional uint32 content_close_time = 4; */
        if (message.contentCloseTime !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.ExpeditionPathInfo path_info_list = 15; */
        for (let i = 0; i < message.pathInfoList.length; i++)
            exports.ExpeditionPathInfo.internalBinaryWrite(message.pathInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionActivityDetailInfo
 */
exports.ExpeditionActivityDetailInfo = new ExpeditionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionStartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionStartReq", [
            { no: 1, name: "avatar_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 avatar_id_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 assist_uid */ 5:
                    message.assistUid = reader.uint32();
                    break;
                case /* optional uint32 assist_avatar_id */ 8:
                    message.assistAvatarId = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 7:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 avatar_id_list = 1; */
        if (message.avatarIdList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.avatarIdList.length; i++)
                writer.uint32(message.avatarIdList[i]);
            writer.join();
        }
        /* optional uint32 assist_uid = 5; */
        if (message.assistUid !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.assistUid);
        /* optional uint32 assist_avatar_id = 8; */
        if (message.assistAvatarId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.assistAvatarId);
        /* optional uint32 path_id = 7; */
        if (message.pathId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionStartReq
 */
exports.ExpeditionStartReq = new ExpeditionStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionStartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionStartRsp", [
            { no: 1, name: "assist_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "avatar_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "assist_avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { avatarIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 assist_uid */ 1:
                    message.assistUid = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 7:
                    message.pathId = reader.uint32();
                    break;
                case /* repeated uint32 avatar_id_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarIdList.push(reader.uint32());
                    else
                        message.avatarIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 assist_avatar_id */ 2:
                    message.assistAvatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 assist_uid = 1; */
        if (message.assistUid !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.assistUid);
        /* optional uint32 path_id = 7; */
        if (message.pathId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.pathId);
        /* repeated uint32 avatar_id_list = 4; */
        if (message.avatarIdList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.avatarIdList.length; i++)
                writer.uint32(message.avatarIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 assist_avatar_id = 2; */
        if (message.assistAvatarId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.assistAvatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionStartRsp
 */
exports.ExpeditionStartRsp = new ExpeditionStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionRecallReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionRecallReq", [
            { no: 13, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 13:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 path_id = 13; */
        if (message.pathId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionRecallReq
 */
exports.ExpeditionRecallReq = new ExpeditionRecallReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionRecallRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionRecallRsp", [
            { no: 1, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 1:
                    message.pathId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 path_id = 1; */
        if (message.pathId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.pathId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionRecallRsp
 */
exports.ExpeditionRecallRsp = new ExpeditionRecallRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionTakeRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionTakeRewardReq", [
            { no: 3, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 path_id */ 3:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 path_id = 3; */
        if (message.pathId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionTakeRewardReq
 */
exports.ExpeditionTakeRewardReq = new ExpeditionTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionTakeRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionTakeRewardRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "is_bonus", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "reward_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "path_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_bonus */ 11:
                    message.isBonus = reader.bool();
                    break;
                case /* optional uint32 reward_level */ 1:
                    message.rewardLevel = reader.uint32();
                    break;
                case /* optional uint32 path_id */ 9:
                    message.pathId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_bonus = 11; */
        if (message.isBonus !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isBonus);
        /* optional uint32 reward_level = 1; */
        if (message.rewardLevel !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.rewardLevel);
        /* optional uint32 path_id = 9; */
        if (message.pathId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.pathId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionTakeRewardRsp
 */
exports.ExpeditionTakeRewardRsp = new ExpeditionTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionAssistInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionAssistInfo", [
            { no: 14, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "assist_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "costume_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "target_nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string online_id */ 14:
                    message.onlineId = reader.string();
                    break;
                case /* optional uint32 assist_time */ 1:
                    message.assistTime = reader.uint32();
                    break;
                case /* optional uint32 costume_id */ 6:
                    message.costumeId = reader.uint32();
                    break;
                case /* optional string target_nick_name */ 4:
                    message.targetNickName = reader.string();
                    break;
                case /* optional uint32 avatar_id */ 12:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string online_id = 14; */
        if (message.onlineId !== undefined)
            writer.tag(14, runtime_1.WireType.LengthDelimited).string(message.onlineId);
        /* optional uint32 assist_time = 1; */
        if (message.assistTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.assistTime);
        /* optional uint32 costume_id = 6; */
        if (message.costumeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.costumeId);
        /* optional string target_nick_name = 4; */
        if (message.targetNickName !== undefined)
            writer.tag(4, runtime_1.WireType.LengthDelimited).string(message.targetNickName);
        /* optional uint32 avatar_id = 12; */
        if (message.avatarId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionAssistInfo
 */
exports.ExpeditionAssistInfo = new ExpeditionAssistInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExpeditionAssistInfoListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetExpeditionAssistInfoListReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetExpeditionAssistInfoListReq
 */
exports.GetExpeditionAssistInfoListReq = new GetExpeditionAssistInfoListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetExpeditionAssistInfoListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetExpeditionAssistInfoListRsp", [
            { no: 6, name: "assist_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ExpeditionAssistInfo },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ExpeditionAssistInfo assist_info_list */ 6:
                    message.assistInfoList.push(exports.ExpeditionAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ExpeditionAssistInfo assist_info_list = 6; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            exports.ExpeditionAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetExpeditionAssistInfoListRsp
 */
exports.GetExpeditionAssistInfoListRsp = new GetExpeditionAssistInfoListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurExpeditionChallengeIdReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SetCurExpeditionChallengeIdReq", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetCurExpeditionChallengeIdReq
 */
exports.SetCurExpeditionChallengeIdReq = new SetCurExpeditionChallengeIdReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetCurExpeditionChallengeIdRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SetCurExpeditionChallengeIdRsp", [
            { no: 14, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 14:
                    message.id = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 14; */
        if (message.id !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.id);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetCurExpeditionChallengeIdRsp
 */
exports.SetCurExpeditionChallengeIdRsp = new SetCurExpeditionChallengeIdRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeEnterRegionNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeEnterRegionNotify", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_puzzle_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_puzzle_finished */ 10:
                    message.isPuzzleFinished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.id);
        /* optional bool is_puzzle_finished = 10; */
        if (message.isPuzzleFinished !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isPuzzleFinished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeEnterRegionNotify
 */
exports.ExpeditionChallengeEnterRegionNotify = new ExpeditionChallengeEnterRegionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExpeditionChallengeFinishedNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ExpeditionChallengeFinishedNotify", [
            { no: 13, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 13:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 13; */
        if (message.id !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExpeditionChallengeFinishedNotify
 */
exports.ExpeditionChallengeFinishedNotify = new ExpeditionChallengeFinishedNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaterSpiritActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WaterSpiritActivityDetailInfo", [
            { no: 9, name: "search_time_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "region_search_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { searchTimeMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> search_time_map */ 9:
                    this.binaryReadMap9(message.searchTimeMap, reader, options);
                    break;
                case /* optional uint32 region_search_id */ 2:
                    message.regionSearchId = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 15:
                    message.mpPlayId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WaterSpiritActivityDetailInfo.search_time_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> search_time_map = 9; */
        for (let k of Object.keys(message.searchTimeMap))
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.searchTimeMap[k]).join();
        /* optional uint32 region_search_id = 2; */
        if (message.regionSearchId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.regionSearchId);
        /* optional uint32 mp_play_id = 15; */
        if (message.mpPlayId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.mpPlayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WaterSpiritActivityDetailInfo
 */
exports.WaterSpiritActivityDetailInfo = new WaterSpiritActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairChapterInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairChapterInfo", [
            { no: 15, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 15:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 11:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 15; */
        if (message.openTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 chapter_id = 11; */
        if (message.chapterId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairChapterInfo
 */
exports.FleurFairChapterInfo = new FleurFairChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairBalloonInfo", [
            { no: 4, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 4:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_score = 4; */
        if (message.bestScore !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonInfo
 */
exports.FleurFairBalloonInfo = new FleurFairBalloonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairFallInfo", [
            { no: 10, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 10:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_score = 10; */
        if (message.bestScore !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallInfo
 */
exports.FleurFairFallInfo = new FleurFairFallInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicRecord", [
            { no: 1, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_combo */ 1:
                    message.maxCombo = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 11:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 12:
                    message.isUnlock = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 max_combo = 1; */
        if (message.maxCombo !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.maxCombo);
        /* optional uint32 max_score = 11; */
        if (message.maxScore !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional bool is_unlock = 12; */
        if (message.isUnlock !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isUnlock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicRecord
 */
exports.FleurFairMusicRecord = new FleurFairMusicRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameInfo", [
            { no: 10, name: "music_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.FleurFairMusicRecord } }
        ]);
    }
    create(value) {
        const message = { musicRecordMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.FleurFairMusicRecord> music_record_map */ 10:
                    this.binaryReadMap10(message.musicRecordMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.FleurFairMusicRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairMusicGameInfo.music_record_map");
            }
        }
        map[key ?? 0] = val ?? exports.FleurFairMusicRecord.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, com.midnights.game.FleurFairMusicRecord> music_record_map = 10; */
        for (let k of Object.keys(message.musicRecordMap)) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.FleurFairMusicRecord.internalBinaryWrite(message.musicRecordMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameInfo
 */
exports.FleurFairMusicGameInfo = new FleurFairMusicGameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMinigameInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMinigameInfo", [
            { no: 13, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "balloon_info", kind: "message", oneof: "detail", T: () => exports.FleurFairBalloonInfo },
            { no: 11, name: "fall_info", kind: "message", oneof: "detail", T: () => exports.FleurFairFallInfo },
            { no: 9, name: "music_info", kind: "message", oneof: "detail", T: () => exports.FleurFairMusicGameInfo }
        ]);
    }
    create(value) {
        const message = { detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 13:
                    message.minigameId = reader.uint32();
                    break;
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 15:
                    message.openTime = reader.uint32();
                    break;
                case /* com.midnights.game.FleurFairBalloonInfo balloon_info */ 12:
                    message.detail = {
                        oneofKind: "balloonInfo",
                        balloonInfo: exports.FleurFairBalloonInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.balloonInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairFallInfo fall_info */ 11:
                    message.detail = {
                        oneofKind: "fallInfo",
                        fallInfo: exports.FleurFairFallInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.fallInfo)
                    };
                    break;
                case /* com.midnights.game.FleurFairMusicGameInfo music_info */ 9:
                    message.detail = {
                        oneofKind: "musicInfo",
                        musicInfo: exports.FleurFairMusicGameInfo.internalBinaryRead(reader, reader.uint32(), options, message.detail.musicInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 minigame_id = 13; */
        if (message.minigameId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.minigameId);
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 15; */
        if (message.openTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.openTime);
        /* com.midnights.game.FleurFairBalloonInfo balloon_info = 12; */
        if (message.detail.oneofKind === "balloonInfo")
            exports.FleurFairBalloonInfo.internalBinaryWrite(message.detail.balloonInfo, writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairFallInfo fall_info = 11; */
        if (message.detail.oneofKind === "fallInfo")
            exports.FleurFairFallInfo.internalBinaryWrite(message.detail.fallInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.FleurFairMusicGameInfo music_info = 9; */
        if (message.detail.oneofKind === "musicInfo")
            exports.FleurFairMusicGameInfo.internalBinaryWrite(message.detail.musicInfo, writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMinigameInfo
 */
exports.FleurFairMinigameInfo = new FleurFairMinigameInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairDungeonSectionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairDungeonSectionInfo", [
            { no: 10, name: "section_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 section_id */ 10:
                    message.sectionId = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 13:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 section_id = 10; */
        if (message.sectionId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.sectionId);
        /* optional uint32 open_time = 13; */
        if (message.openTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairDungeonSectionInfo
 */
exports.FleurFairDungeonSectionInfo = new FleurFairDungeonSectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairActivityDetailInfo", [
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "dungeon_punish_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "obtained_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "chapter_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FleurFairChapterInfo },
            { no: 9, name: "minigame_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.FleurFairMinigameInfo } },
            { no: 3, name: "dungeon_section_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.FleurFairDungeonSectionInfo } },
            { no: 11, name: "is_dungeon_unlocked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { chapterInfoList: [], minigameInfoMap: {}, dungeonSectionInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 dungeon_punish_over_time */ 6:
                    message.dungeonPunishOverTime = reader.uint32();
                    break;
                case /* optional uint32 content_close_time */ 15:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 obtained_token */ 13:
                    message.obtainedToken = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FleurFairChapterInfo chapter_info_list */ 14:
                    message.chapterInfoList.push(exports.FleurFairChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, com.midnights.game.FleurFairMinigameInfo> minigame_info_map */ 9:
                    this.binaryReadMap9(message.minigameInfoMap, reader, options);
                    break;
                case /* map<uint32, com.midnights.game.FleurFairDungeonSectionInfo> dungeon_section_info_map */ 3:
                    this.binaryReadMap3(message.dungeonSectionInfoMap, reader, options);
                    break;
                case /* optional bool is_dungeon_unlocked */ 11:
                    message.isDungeonUnlocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.FleurFairMinigameInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairActivityDetailInfo.minigame_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.FleurFairMinigameInfo.create();
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.FleurFairDungeonSectionInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairActivityDetailInfo.dungeon_section_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.FleurFairDungeonSectionInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 dungeon_punish_over_time = 6; */
        if (message.dungeonPunishOverTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.dungeonPunishOverTime);
        /* optional uint32 content_close_time = 15; */
        if (message.contentCloseTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 obtained_token = 13; */
        if (message.obtainedToken !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.obtainedToken);
        /* repeated com.midnights.game.FleurFairChapterInfo chapter_info_list = 14; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            exports.FleurFairChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.FleurFairMinigameInfo> minigame_info_map = 9; */
        for (let k of Object.keys(message.minigameInfoMap)) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.FleurFairMinigameInfo.internalBinaryWrite(message.minigameInfoMap[k], writer, options);
            writer.join().join();
        }
        /* map<uint32, com.midnights.game.FleurFairDungeonSectionInfo> dungeon_section_info_map = 3; */
        for (let k of Object.keys(message.dungeonSectionInfoMap)) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.FleurFairDungeonSectionInfo.internalBinaryWrite(message.dungeonSectionInfoMap[k], writer, options);
            writer.join().join();
        }
        /* optional bool is_dungeon_unlocked = 11; */
        if (message.isDungeonUnlocked !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isDungeonUnlocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairActivityDetailInfo
 */
exports.FleurFairActivityDetailInfo = new FleurFairActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairBalloonSettleInfo", [
            { no: 10, name: "settle_info", kind: "message", T: () => cmd_gallery_12.BalloonSettleInfo },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.BalloonSettleInfo settle_info */ 10:
                    message.settleInfo = cmd_gallery_12.BalloonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.BalloonSettleInfo settle_info = 10; */
        if (message.settleInfo)
            cmd_gallery_12.BalloonSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonSettleInfo
 */
exports.FleurFairBalloonSettleInfo = new FleurFairBalloonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairFallSettleInfo", [
            { no: 4, name: "settle_info", kind: "message", T: () => cmd_gallery_11.FallSettleInfo },
            { no: 10, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FallSettleInfo settle_info */ 4:
                    message.settleInfo = cmd_gallery_11.FallSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 10:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.FallSettleInfo settle_info = 4; */
        if (message.settleInfo)
            cmd_gallery_11.FallSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 10; */
        if (message.isNewRecord !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallSettleInfo
 */
exports.FleurFairFallSettleInfo = new FleurFairFallSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairBalloonSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairBalloonSettleNotify", [
            { no: 9, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.FleurFairBalloonSettleInfo } }
        ]);
    }
    create(value) {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 9:
                    message.minigameId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.FleurFairBalloonSettleInfo> settle_info_map */ 15:
                    this.binaryReadMap15(message.settleInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap15(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.FleurFairBalloonSettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairBalloonSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.FleurFairBalloonSettleInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 minigame_id = 9; */
        if (message.minigameId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.minigameId);
        /* map<uint32, com.midnights.game.FleurFairBalloonSettleInfo> settle_info_map = 15; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.FleurFairBalloonSettleInfo.internalBinaryWrite(message.settleInfoMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairBalloonSettleNotify
 */
exports.FleurFairBalloonSettleNotify = new FleurFairBalloonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairFallSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairFallSettleNotify", [
            { no: 15, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.FleurFairFallSettleInfo } }
        ]);
    }
    create(value) {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 15:
                    message.minigameId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.FleurFairFallSettleInfo> settle_info_map */ 11:
                    this.binaryReadMap11(message.settleInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap11(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.FleurFairFallSettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FleurFairFallSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.FleurFairFallSettleInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 minigame_id = 15; */
        if (message.minigameId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.minigameId);
        /* map<uint32, com.midnights.game.FleurFairFallSettleInfo> settle_info_map = 11; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.FleurFairFallSettleInfo.internalBinaryWrite(message.settleInfoMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairFallSettleNotify
 */
exports.FleurFairFallSettleNotify = new FleurFairFallSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameSettleReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameSettleReq", [
            { no: 3, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "correct_hit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 3:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 combo */ 6:
                    message.combo = reader.uint32();
                    break;
                case /* optional uint32 correct_hit */ 10:
                    message.correctHit = reader.uint32();
                    break;
                case /* optional uint32 music_basic_id */ 11:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 score = 3; */
        if (message.score !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.score);
        /* optional uint32 combo = 6; */
        if (message.combo !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.combo);
        /* optional uint32 correct_hit = 10; */
        if (message.correctHit !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.correctHit);
        /* optional uint32 music_basic_id = 11; */
        if (message.musicBasicId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameSettleReq
 */
exports.FleurFairMusicGameSettleReq = new FleurFairMusicGameSettleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameSettleRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameSettleRsp", [
            { no: 4, name: "is_unlock_next_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_unlock_next_level */ 4:
                    message.isUnlockNextLevel = reader.bool();
                    break;
                case /* optional bool is_new_record */ 12:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 9:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_unlock_next_level = 4; */
        if (message.isUnlockNextLevel !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isUnlockNextLevel);
        /* optional bool is_new_record = 12; */
        if (message.isNewRecord !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 9; */
        if (message.musicBasicId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameSettleRsp
 */
exports.FleurFairMusicGameSettleRsp = new FleurFairMusicGameSettleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameStartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameStartReq", [
            { no: 2, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 2:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 music_basic_id = 2; */
        if (message.musicBasicId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameStartReq
 */
exports.FleurFairMusicGameStartReq = new FleurFairMusicGameStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairMusicGameStartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairMusicGameStartRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 7:
                    message.musicBasicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 7; */
        if (message.musicBasicId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairMusicGameStartRsp
 */
exports.FleurFairMusicGameStartRsp = new FleurFairMusicGameStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairReplayMiniGameReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairReplayMiniGameReq", [
            { no: 5, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 minigame_id */ 5:
                    message.minigameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 minigame_id = 5; */
        if (message.minigameId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.minigameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairReplayMiniGameReq
 */
exports.FleurFairReplayMiniGameReq = new FleurFairReplayMiniGameReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FleurFairReplayMiniGameRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FleurFairReplayMiniGameRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "minigame_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 minigame_id */ 8:
                    message.minigameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 minigame_id = 8; */
        if (message.minigameId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.minigameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FleurFairReplayMiniGameRsp
 */
exports.FleurFairReplayMiniGameRsp = new FleurFairReplayMiniGameRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeMonsterLevel$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ArenaChallengeMonsterLevel", [
            { no: 7, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 7:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 15:
                    message.arenaChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 arena_challenge_level = 7; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional uint32 arena_challenge_id = 15; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.arenaChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeMonsterLevel
 */
exports.ArenaChallengeMonsterLevel = new ArenaChallengeMonsterLevel$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ArenaChallengeActivityDetailInfo", [
            { no: 14, name: "is_finish_any_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "level_open_time_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ArenaChallengeMonsterLevel }
        ]);
    }
    create(value) {
        const message = { levelOpenTimeMap: {}, levelList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish_any_level */ 14:
                    message.isFinishAnyLevel = reader.bool();
                    break;
                case /* map<uint32, uint32> level_open_time_map */ 3:
                    this.binaryReadMap3(message.levelOpenTimeMap, reader, options);
                    break;
                case /* optional uint32 world_level */ 15:
                    message.worldLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ArenaChallengeMonsterLevel level_list */ 9:
                    message.levelList.push(exports.ArenaChallengeMonsterLevel.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ArenaChallengeActivityDetailInfo.level_open_time_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finish_any_level = 14; */
        if (message.isFinishAnyLevel !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isFinishAnyLevel);
        /* map<uint32, uint32> level_open_time_map = 3; */
        for (let k of Object.keys(message.levelOpenTimeMap))
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.levelOpenTimeMap[k]).join();
        /* optional uint32 world_level = 15; */
        if (message.worldLevel !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.worldLevel);
        /* repeated com.midnights.game.ArenaChallengeMonsterLevel level_list = 9; */
        for (let i = 0; i < message.levelList.length; i++)
            exports.ArenaChallengeMonsterLevel.internalBinaryWrite(message.levelList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeActivityDetailInfo
 */
exports.ArenaChallengeActivityDetailInfo = new ArenaChallengeActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartArenaChallengeLevelReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartArenaChallengeLevelReq", [
            { no: 4, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_id */ 4:
                    message.arenaChallengeId = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 5:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_level */ 2:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 arena_challenge_id = 4; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.arenaChallengeId);
        /* optional uint32 gadget_entity_id = 5; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 arena_challenge_level = 2; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.arenaChallengeLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartArenaChallengeLevelReq
 */
exports.StartArenaChallengeLevelReq = new StartArenaChallengeLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartArenaChallengeLevelRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartArenaChallengeLevelRsp", [
            { no: 1, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 1:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gadget_entity_id */ 3:
                    message.gadgetEntityId = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 6:
                    message.arenaChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 arena_challenge_level = 1; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 gadget_entity_id = 3; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.gadgetEntityId);
        /* optional uint32 arena_challenge_id = 6; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.arenaChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartArenaChallengeLevelRsp
 */
exports.StartArenaChallengeLevelRsp = new StartArenaChallengeLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeChildChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ArenaChallengeChildChallengeInfo", [
            { no: 12, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "is_settled", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_id */ 12:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 challenge_type */ 5:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 4:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional bool is_settled */ 11:
                    message.isSettled = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_id = 12; */
        if (message.challengeId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 challenge_type = 5; */
        if (message.challengeType !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.challengeType);
        /* optional uint32 challenge_index = 4; */
        if (message.challengeIndex !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.challengeIndex);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional bool is_settled = 11; */
        if (message.isSettled !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isSettled);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeChildChallengeInfo
 */
exports.ArenaChallengeChildChallengeInfo = new ArenaChallengeChildChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ArenaChallengeFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ArenaChallengeFinishNotify", [
            { no: 13, name: "arena_challenge_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "arena_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "child_challenge_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ArenaChallengeChildChallengeInfo },
            { no: 12, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { childChallengeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 arena_challenge_level */ 13:
                    message.arenaChallengeLevel = reader.uint32();
                    break;
                case /* optional uint32 arena_challenge_id */ 3:
                    message.arenaChallengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ArenaChallengeChildChallengeInfo child_challenge_list */ 2:
                    message.childChallengeList.push(exports.ArenaChallengeChildChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_success */ 12:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 arena_challenge_level = 13; */
        if (message.arenaChallengeLevel !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.arenaChallengeLevel);
        /* optional uint32 arena_challenge_id = 3; */
        if (message.arenaChallengeId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.arenaChallengeId);
        /* repeated com.midnights.game.ArenaChallengeChildChallengeInfo child_challenge_list = 2; */
        for (let i = 0; i < message.childChallengeList.length; i++)
            exports.ArenaChallengeChildChallengeInfo.internalBinaryWrite(message.childChallengeList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_success = 12; */
        if (message.isSuccess !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ArenaChallengeFinishNotify
 */
exports.ArenaChallengeFinishNotify = new ArenaChallengeFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WaterSpritePhaseFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WaterSpritePhaseFinishNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WaterSpritePhaseFinishNotify
 */
exports.WaterSpritePhaseFinishNotify = new WaterSpritePhaseFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardBatchReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardBatchReq", [
            { no: 11, name: "watcher_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 watcher_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 watcher_id_list = 11; */
        if (message.watcherIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.watcherIdList.length; i++)
                writer.uint32(message.watcherIdList[i]);
            writer.join();
        }
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchReq
 */
exports.ActivityTakeWatcherRewardBatchReq = new ActivityTakeWatcherRewardBatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeWatcherRewardBatchRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeWatcherRewardBatchRsp", [
            { no: 6, name: "watcher_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { watcherIdList: [], itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 watcher_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 1:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 watcher_id_list = 6; */
        if (message.watcherIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.watcherIdList.length; i++)
                writer.uint32(message.watcherIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.ItemParam item_list = 1; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeWatcherRewardBatchRsp
 */
exports.ActivityTakeWatcherRewardBatchRsp = new ActivityTakeWatcherRewardBatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabCamp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabCamp", [
            { no: 11, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 7, name: "buff_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 11:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 8:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 buff_num */ 7:
                    message.buffNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 3:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_id = 11; */
        if (message.rewardId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.rewardId);
        /* optional com.midnights.game.Vector pos = 8; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 buff_num = 7; */
        if (message.buffNum !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.buffNum);
        /* optional uint32 group_id = 3; */
        if (message.groupId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabCamp
 */
exports.ChannelerSlabCamp = new ChannelerSlabCamp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabChallenge$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabChallenge", [
            { no: 5, name: "active_camp_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "camp_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannelerSlabCamp }
        ]);
    }
    create(value) {
        const message = { campList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 active_camp_index */ 5:
                    message.activeCampIndex = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChannelerSlabCamp camp_list */ 14:
                    message.campList.push(exports.ChannelerSlabCamp.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 active_camp_index = 5; */
        if (message.activeCampIndex !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.activeCampIndex);
        /* repeated com.midnights.game.ChannelerSlabCamp camp_list = 14; */
        for (let i = 0; i < message.campList.length; i++)
            exports.ChannelerSlabCamp.internalBinaryWrite(message.campList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabChallenge
 */
exports.ChannelerSlabChallenge = new ChannelerSlabChallenge$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabOneoffDungeon$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabOneoffDungeon", [
            { no: 8, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 8:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 reward_id */ 13:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_done = 8; */
        if (message.isDone !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isDone);
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 reward_id = 13; */
        if (message.rewardId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabOneoffDungeon
 */
exports.ChannelerSlabOneoffDungeon = new ChannelerSlabOneoffDungeon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabChallengeStage$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabChallengeStage", [
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "challenge_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannelerSlabChallenge },
            { no: 7, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "dungeon_info", kind: "message", T: () => exports.ChannelerSlabOneoffDungeon }
        ]);
    }
    create(value) {
        const message = { challengeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChannelerSlabChallenge challenge_list */ 14:
                    message.challengeList.push(exports.ChannelerSlabChallenge.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 7:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ChannelerSlabOneoffDungeon dungeon_info */ 13:
                    message.dungeonInfo = exports.ChannelerSlabOneoffDungeon.internalBinaryRead(reader, reader.uint32(), options, message.dungeonInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.openTime);
        /* repeated com.midnights.game.ChannelerSlabChallenge challenge_list = 14; */
        for (let i = 0; i < message.challengeList.length; i++)
            exports.ChannelerSlabChallenge.internalBinaryWrite(message.challengeList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 7; */
        if (message.isOpen !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional com.midnights.game.ChannelerSlabOneoffDungeon dungeon_info = 13; */
        if (message.dungeonInfo)
            exports.ChannelerSlabOneoffDungeon.internalBinaryWrite(message.dungeonInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabChallengeStage
 */
exports.ChannelerSlabChallengeStage = new ChannelerSlabChallengeStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabBuffSchemeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabBuffSchemeInfo", [
            { no: 9, name: "slot_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "total_energy", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "self_energy", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { slotMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> slot_map */ 9:
                    this.binaryReadMap9(message.slotMap, reader, options);
                    break;
                case /* optional uint32 total_energy */ 13:
                    message.totalEnergy = reader.uint32();
                    break;
                case /* optional uint32 self_energy */ 15:
                    message.selfEnergy = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ChannellerSlabBuffSchemeInfo.slot_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> slot_map = 9; */
        for (let k of Object.keys(message.slotMap))
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.slotMap[k]).join();
        /* optional uint32 total_energy = 13; */
        if (message.totalEnergy !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.totalEnergy);
        /* optional uint32 self_energy = 15; */
        if (message.selfEnergy !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.selfEnergy);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabBuffSchemeInfo
 */
exports.ChannellerSlabBuffSchemeInfo = new ChannellerSlabBuffSchemeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabAssistInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabAssistInfo", [
            { no: 10, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "avatar_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 10:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 avatar_level */ 12:
                    message.avatarLevel = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 6:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 10; */
        if (message.uid !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional uint32 avatar_level = 12; */
        if (message.avatarLevel !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.avatarLevel);
        /* optional uint32 avatar_id = 6; */
        if (message.avatarId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabAssistInfo
 */
exports.ChannellerSlabAssistInfo = new ChannellerSlabAssistInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabBuffInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabBuffInfo", [
            { no: 6, name: "mp_buff_scheme_info", kind: "message", T: () => exports.ChannellerSlabBuffSchemeInfo },
            { no: 8, name: "buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "single_buff_scheme_info", kind: "message", T: () => exports.ChannellerSlabBuffSchemeInfo },
            { no: 15, name: "assist_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannellerSlabAssistInfo }
        ]);
    }
    create(value) {
        const message = { buffIdList: [], assistInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo mp_buff_scheme_info */ 6:
                    message.mpBuffSchemeInfo = exports.ChannellerSlabBuffSchemeInfo.internalBinaryRead(reader, reader.uint32(), options, message.mpBuffSchemeInfo);
                    break;
                case /* repeated uint32 buff_id_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo single_buff_scheme_info */ 7:
                    message.singleBuffSchemeInfo = exports.ChannellerSlabBuffSchemeInfo.internalBinaryRead(reader, reader.uint32(), options, message.singleBuffSchemeInfo);
                    break;
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 15:
                    message.assistInfoList.push(exports.ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo mp_buff_scheme_info = 6; */
        if (message.mpBuffSchemeInfo)
            exports.ChannellerSlabBuffSchemeInfo.internalBinaryWrite(message.mpBuffSchemeInfo, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 buff_id_list = 8; */
        if (message.buffIdList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.buffIdList.length; i++)
                writer.uint32(message.buffIdList[i]);
            writer.join();
        }
        /* optional com.midnights.game.ChannellerSlabBuffSchemeInfo single_buff_scheme_info = 7; */
        if (message.singleBuffSchemeInfo)
            exports.ChannellerSlabBuffSchemeInfo.internalBinaryWrite(message.singleBuffSchemeInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 15; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            exports.ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabBuffInfo
 */
exports.ChannellerSlabBuffInfo = new ChannellerSlabBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonInfo", [
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_first_pass_reward_taken", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "last_condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { lastConditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 4:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 12:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_first_pass_reward_taken */ 9:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* repeated uint32 last_condition_id_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lastConditionIdList.push(reader.uint32());
                    else
                        message.lastConditionIdList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.score);
        /* optional uint32 dungeon_index = 4; */
        if (message.dungeonIndex !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 open_time = 12; */
        if (message.openTime !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_first_pass_reward_taken = 9; */
        if (message.isFirstPassRewardTaken !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* repeated uint32 last_condition_id_list = 14; */
        if (message.lastConditionIdList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lastConditionIdList.length; i++)
                writer.uint32(message.lastConditionIdList[i]);
            writer.join();
        }
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonInfo
 */
exports.ChannellerSlabLoopDungeonInfo = new ChannellerSlabLoopDungeonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonStageInfo", [
            { no: 15, name: "dungeon_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannellerSlabLoopDungeonInfo },
            { no: 5, name: "taken_reward_index_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "last_difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dungeonInfoList: [], takenRewardIndexList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabLoopDungeonInfo dungeon_info_list */ 15:
                    message.dungeonInfoList.push(exports.ChannellerSlabLoopDungeonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 taken_reward_index_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardIndexList.push(reader.uint32());
                    else
                        message.takenRewardIndexList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 last_difficulty_id */ 6:
                    message.lastDifficultyId = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ChannellerSlabLoopDungeonInfo dungeon_info_list = 15; */
        for (let i = 0; i < message.dungeonInfoList.length; i++)
            exports.ChannellerSlabLoopDungeonInfo.internalBinaryWrite(message.dungeonInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 taken_reward_index_list = 5; */
        if (message.takenRewardIndexList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenRewardIndexList.length; i++)
                writer.uint32(message.takenRewardIndexList[i]);
            writer.join();
        }
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 last_difficulty_id = 6; */
        if (message.lastDifficultyId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.lastDifficultyId);
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonStageInfo
 */
exports.ChannellerSlabLoopDungeonStageInfo = new ChannellerSlabLoopDungeonStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabActivityDetailInfo", [
            { no: 1, name: "buff_info", kind: "message", T: () => exports.ChannellerSlabBuffInfo },
            { no: 7, name: "loop_dungeon_stage_info", kind: "message", T: () => exports.ChannellerSlabLoopDungeonStageInfo },
            { no: 15, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannelerSlabChallengeStage },
            { no: 3, name: "play_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ChannellerSlabBuffInfo buff_info */ 1:
                    message.buffInfo = exports.ChannellerSlabBuffInfo.internalBinaryRead(reader, reader.uint32(), options, message.buffInfo);
                    break;
                case /* optional com.midnights.game.ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info */ 7:
                    message.loopDungeonStageInfo = exports.ChannellerSlabLoopDungeonStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.loopDungeonStageInfo);
                    break;
                case /* repeated com.midnights.game.ChannelerSlabChallengeStage stage_list */ 15:
                    message.stageList.push(exports.ChannelerSlabChallengeStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 play_end_time */ 3:
                    message.playEndTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ChannellerSlabBuffInfo buff_info = 1; */
        if (message.buffInfo)
            exports.ChannellerSlabBuffInfo.internalBinaryWrite(message.buffInfo, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.ChannellerSlabLoopDungeonStageInfo loop_dungeon_stage_info = 7; */
        if (message.loopDungeonStageInfo)
            exports.ChannellerSlabLoopDungeonStageInfo.internalBinaryWrite(message.loopDungeonStageInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ChannelerSlabChallengeStage stage_list = 15; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.ChannelerSlabChallengeStage.internalBinaryWrite(message.stageList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 play_end_time = 3; */
        if (message.playEndTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.playEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabActivityDetailInfo
 */
exports.ChannelerSlabActivityDetailInfo = new ChannelerSlabActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabStageActiveChallengeIndexNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "active_camp_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 12:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 active_camp_index */ 6:
                    message.activeCampIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_index = 12; */
        if (message.challengeIndex !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 active_camp_index = 6; */
        if (message.activeCampIndex !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.activeCampIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabStageActiveChallengeIndexNotify
 */
exports.ChannelerSlabStageActiveChallengeIndexNotify = new ChannelerSlabStageActiveChallengeIndexNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannelerSlabStageOneoffDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannelerSlabStageOneoffDungeonNotify", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_done */ 8:
                    message.isDone = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_done = 8; */
        if (message.isDone !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isDone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannelerSlabStageOneoffDungeonNotify
 */
exports.ChannelerSlabStageOneoffDungeonNotify = new ChannelerSlabStageOneoffDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabWearBuffReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabWearBuffReq", [
            { no: 3, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_id */ 3:
                    message.buffId = reader.uint32();
                    break;
                case /* optional bool is_mp */ 5:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 13:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 buff_id = 3; */
        if (message.buffId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.buffId);
        /* optional bool is_mp = 5; */
        if (message.isMp !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 13; */
        if (message.slotId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabWearBuffReq
 */
exports.ChannellerSlabWearBuffReq = new ChannellerSlabWearBuffReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabWearBuffRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabWearBuffRsp", [
            { no: 15, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_id */ 15:
                    message.buffId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_mp */ 9:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 8:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 buff_id = 15; */
        if (message.buffId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.buffId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_mp = 9; */
        if (message.isMp !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 8; */
        if (message.slotId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabWearBuffRsp
 */
exports.ChannellerSlabWearBuffRsp = new ChannellerSlabWearBuffRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabTakeoffBuffReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabTakeoffBuffReq", [
            { no: 10, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mp */ 10:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 slot_id */ 12:
                    message.slotId = reader.uint32();
                    break;
                case /* optional uint32 buff_id */ 9:
                    message.buffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_mp = 10; */
        if (message.isMp !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isMp);
        /* optional uint32 slot_id = 12; */
        if (message.slotId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.slotId);
        /* optional uint32 buff_id = 9; */
        if (message.buffId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.buffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabTakeoffBuffReq
 */
exports.ChannellerSlabTakeoffBuffReq = new ChannellerSlabTakeoffBuffReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabTakeoffBuffRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabTakeoffBuffRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "is_mp", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "slot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_mp */ 13:
                    message.isMp = reader.bool();
                    break;
                case /* optional uint32 buff_id */ 14:
                    message.buffId = reader.uint32();
                    break;
                case /* optional uint32 slot_id */ 8:
                    message.slotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_mp = 13; */
        if (message.isMp !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isMp);
        /* optional uint32 buff_id = 14; */
        if (message.buffId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.buffId);
        /* optional uint32 slot_id = 8; */
        if (message.slotId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.slotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabTakeoffBuffRsp
 */
exports.ChannellerSlabTakeoffBuffRsp = new ChannellerSlabTakeoffBuffRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabEnterLoopDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabEnterLoopDungeonReq", [
            { no: 9, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 9:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 10:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 12:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 point_id = 9; */
        if (message.pointId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.pointId);
        /* optional uint32 dungeon_index = 10; */
        if (message.dungeonIndex !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 5; */
        if (message.conditionIdList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 difficulty_id = 12; */
        if (message.difficultyId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonReq
 */
exports.ChannellerSlabEnterLoopDungeonReq = new ChannellerSlabEnterLoopDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabEnterLoopDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabEnterLoopDungeonRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 dungeon_index */ 15:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 3:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.pointId);
        /* repeated uint32 condition_id_list = 6; */
        if (message.conditionIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 dungeon_index = 15; */
        if (message.dungeonIndex !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 difficulty_id = 3; */
        if (message.difficultyId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabEnterLoopDungeonRsp
 */
exports.ChannellerSlabEnterLoopDungeonRsp = new ChannellerSlabEnterLoopDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeFirstPassRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq", [
            { no: 10, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 10:
                    message.dungeonIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_index = 10; */
        if (message.dungeonIndex !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardReq
 */
exports.ChannellerSlabLoopDungeonTakeFirstPassRewardReq = new ChannellerSlabLoopDungeonTakeFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeFirstPassRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_index */ 8:
                    message.dungeonIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_index = 8; */
        if (message.dungeonIndex !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp
 */
exports.ChannellerSlabLoopDungeonTakeFirstPassRewardRsp = new ChannellerSlabLoopDungeonTakeFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeScoreRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq", [
            { no: 8, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 8:
                    message.rewardIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_index = 8; */
        if (message.rewardIndex !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.rewardIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardReq
 */
exports.ChannellerSlabLoopDungeonTakeScoreRewardReq = new ChannellerSlabLoopDungeonTakeScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonTakeScoreRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp", [
            { no: 12, name: "reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_index */ 12:
                    message.rewardIndex = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_index = 12; */
        if (message.rewardIndex !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.rewardIndex);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonTakeScoreRewardRsp
 */
exports.ChannellerSlabLoopDungeonTakeScoreRewardRsp = new ChannellerSlabLoopDungeonTakeScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonChallengeInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify", [
            { no: 12, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "scheme_buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [], schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 12:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional uint32 challenge_score */ 4:
                    message.challengeScore = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 2:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 scheme_buff_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_index = 12; */
        if (message.dungeonIndex !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* optional uint32 challenge_score = 4; */
        if (message.challengeScore !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.challengeScore);
        /* optional uint32 difficulty_id = 2; */
        if (message.difficultyId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated uint32 condition_id_list = 3; */
        if (message.conditionIdList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* repeated uint32 scheme_buff_id_list = 6; */
        if (message.schemeBuffIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.schemeBuffIdList.length; i++)
                writer.uint32(message.schemeBuffIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonChallengeInfoNotify
 */
exports.ChannellerSlabLoopDungeonChallengeInfoNotify = new ChannellerSlabLoopDungeonChallengeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonSelectConditionReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq", [
            { no: 4, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_index */ 4:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 8:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_index = 4; */
        if (message.dungeonIndex !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 3; */
        if (message.conditionIdList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 difficulty_id = 8; */
        if (message.difficultyId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionReq
 */
exports.ChannellerSlabLoopDungeonSelectConditionReq = new ChannellerSlabLoopDungeonSelectConditionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonSelectConditionRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "condition_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { conditionIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_index */ 5:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* repeated uint32 condition_id_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.conditionIdList.push(reader.uint32());
                    else
                        message.conditionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_index = 5; */
        if (message.dungeonIndex !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* repeated uint32 condition_id_list = 13; */
        if (message.conditionIdList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.conditionIdList.length; i++)
                writer.uint32(message.conditionIdList[i]);
            writer.join();
        }
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonSelectConditionRsp
 */
exports.ChannellerSlabLoopDungeonSelectConditionRsp = new ChannellerSlabLoopDungeonSelectConditionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabLoopDungeonResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabLoopDungeonResultInfo", [
            { no: 11, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "challenge_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "dungeon_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_in_time_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "challenge_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 11:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_max_score */ 8:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* optional uint32 dungeon_index */ 7:
                    message.dungeonIndex = reader.uint32();
                    break;
                case /* optional bool is_in_time_limit */ 10:
                    message.isInTimeLimit = reader.bool();
                    break;
                case /* optional uint32 challenge_score */ 12:
                    message.challengeScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_success = 11; */
        if (message.isSuccess !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_max_score = 8; */
        if (message.challengeMaxScore !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.challengeMaxScore);
        /* optional uint32 dungeon_index = 7; */
        if (message.dungeonIndex !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.dungeonIndex);
        /* optional bool is_in_time_limit = 10; */
        if (message.isInTimeLimit !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isInTimeLimit);
        /* optional uint32 challenge_score = 12; */
        if (message.challengeScore !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.challengeScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabLoopDungeonResultInfo
 */
exports.ChannellerSlabLoopDungeonResultInfo = new ChannellerSlabLoopDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoReq
 */
exports.ChannellerSlabOneOffDungeonInfoReq = new ChannellerSlabOneOffDungeonInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp", [
            { no: 3, name: "scheme_buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scheme_buff_id_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 scheme_buff_id_list = 3; */
        if (message.schemeBuffIdList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.schemeBuffIdList.length; i++)
                writer.uint32(message.schemeBuffIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoRsp
 */
exports.ChannellerSlabOneOffDungeonInfoRsp = new ChannellerSlabOneOffDungeonInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabOneOffDungeonInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify", [
            { no: 6, name: "scheme_buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { schemeBuffIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scheme_buff_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.schemeBuffIdList.push(reader.uint32());
                    else
                        message.schemeBuffIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 scheme_buff_id_list = 6; */
        if (message.schemeBuffIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.schemeBuffIdList.length; i++)
                writer.uint32(message.schemeBuffIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabOneOffDungeonInfoNotify
 */
exports.ChannellerSlabOneOffDungeonInfoNotify = new ChannellerSlabOneOffDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabSaveAssistInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabSaveAssistInfoReq", [
            { no: 8, name: "assist_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannellerSlabAssistInfo }
        ]);
    }
    create(value) {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 8:
                    message.assistInfoList.push(exports.ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            exports.ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoReq
 */
exports.ChannellerSlabSaveAssistInfoReq = new ChannellerSlabSaveAssistInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabSaveAssistInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabSaveAssistInfoRsp", [
            { no: 8, name: "assist_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ChannellerSlabAssistInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { assistInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list */ 8:
                    message.assistInfoList.push(exports.ChannellerSlabAssistInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ChannellerSlabAssistInfo assist_info_list = 8; */
        for (let i = 0; i < message.assistInfoList.length; i++)
            exports.ChannellerSlabAssistInfo.internalBinaryWrite(message.assistInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabSaveAssistInfoRsp
 */
exports.ChannellerSlabSaveAssistInfoRsp = new ChannellerSlabSaveAssistInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialLevelData", [
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialLevelData
 */
exports.MistTrialLevelData = new MistTrialLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialActivityDetailInfo", [
            { no: 5, name: "trial_level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MistTrialLevelData }
        ]);
    }
    create(value) {
        const message = { trialLevelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MistTrialLevelData trial_level_data_list */ 5:
                    message.trialLevelDataList.push(exports.MistTrialLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.MistTrialLevelData trial_level_data_list = 5; */
        for (let i = 0; i < message.trialLevelDataList.length; i++)
            exports.MistTrialLevelData.internalBinaryWrite(message.trialLevelDataList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialActivityDetailInfo
 */
exports.MistTrialActivityDetailInfo = new MistTrialActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSelectAvatarAndEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq", [
            { no: 4, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "select_trial_avatar_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "enter_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { selectTrialAvatarIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 4:
                    message.trialId = reader.uint32();
                    break;
                case /* repeated uint32 select_trial_avatar_id_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectTrialAvatarIdList.push(reader.uint32());
                    else
                        message.selectTrialAvatarIdList.push(reader.uint32());
                    break;
                case /* optional uint32 enter_point_id */ 7:
                    message.enterPointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 4; */
        if (message.trialId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.trialId);
        /* repeated uint32 select_trial_avatar_id_list = 10; */
        if (message.selectTrialAvatarIdList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.selectTrialAvatarIdList.length; i++)
                writer.uint32(message.selectTrialAvatarIdList[i]);
            writer.join();
        }
        /* optional uint32 enter_point_id = 7; */
        if (message.enterPointId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.enterPointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonReq
 */
exports.MistTrialSelectAvatarAndEnterDungeonReq = new MistTrialSelectAvatarAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSelectAvatarAndEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp", [
            { no: 1, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 1:
                    message.trialId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 1; */
        if (message.trialId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.trialId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSelectAvatarAndEnterDungeonRsp
 */
exports.MistTrialSelectAvatarAndEnterDungeonRsp = new MistTrialSelectAvatarAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialMissionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialMissionInfo", [
            { no: 9, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "watcher_list_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 9:
                    message.param = reader.uint32();
                    break;
                case /* optional uint32 watcher_list_id */ 13:
                    message.watcherListId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 param = 9; */
        if (message.param !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.param);
        /* optional uint32 watcher_list_id = 13; */
        if (message.watcherListId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.watcherListId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialMissionInfo
 */
exports.MistTrialMissionInfo = new MistTrialMissionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetChallengeMissionReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialGetChallengeMissionReq", [
            { no: 9, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 9:
                    message.trialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 9; */
        if (message.trialId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.trialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetChallengeMissionReq
 */
exports.MistTrialGetChallengeMissionReq = new MistTrialGetChallengeMissionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetChallengeMissionRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialGetChallengeMissionRsp", [
            { no: 1, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mission_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MistTrialMissionInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { missionInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 1:
                    message.trialId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.MistTrialMissionInfo mission_info_list */ 15:
                    message.missionInfoList.push(exports.MistTrialMissionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 1; */
        if (message.trialId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.trialId);
        /* repeated com.midnights.game.MistTrialMissionInfo mission_info_list = 15; */
        for (let i = 0; i < message.missionInfoList.length; i++)
            exports.MistTrialMissionInfo.internalBinaryWrite(message.missionInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetChallengeMissionRsp
 */
exports.MistTrialGetChallengeMissionRsp = new MistTrialGetChallengeMissionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialDunegonFailNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialDunegonFailNotify", [
            { no: 9, name: "dungeon_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 dungeon_id */ 9:
                    message.dungeonId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 dungeon_id = 9; */
        if (message.dungeonId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialDunegonFailNotify
 */
exports.MistTrialDunegonFailNotify = new MistTrialDunegonFailNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabCheckEnterLoopDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonReq
 */
exports.ChannellerSlabCheckEnterLoopDungeonReq = new ChannellerSlabCheckEnterLoopDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChannellerSlabCheckEnterLoopDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChannellerSlabCheckEnterLoopDungeonRsp
 */
exports.ChannellerSlabCheckEnterLoopDungeonRsp = new ChannellerSlabCheckEnterLoopDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekMapInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HideAndSeekMapInfo", [
            { no: 11, name: "match_lock_reason_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { matchLockReasonList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 match_lock_reason_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchLockReasonList.push(reader.uint32());
                    else
                        message.matchLockReasonList.push(reader.uint32());
                    break;
                case /* optional uint32 id */ 7:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 match_lock_reason_list = 11; */
        if (message.matchLockReasonList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.matchLockReasonList.length; i++)
                writer.uint32(message.matchLockReasonList[i]);
            writer.join();
        }
        /* optional uint32 id = 7; */
        if (message.id !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekMapInfo
 */
exports.HideAndSeekMapInfo = new HideAndSeekMapInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HideAndSeekActivityDetailInfo", [
            { no: 1, name: "open_map_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.HideAndSeekMapInfo },
            { no: 4, name: "chosen_hunter_skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "unlock_map_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "chosen_hider_skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { openMapInfoList: [], chosenHunterSkillList: [], unlockMapList: [], chosenHiderSkillList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.HideAndSeekMapInfo open_map_info_list */ 1:
                    message.openMapInfoList.push(exports.HideAndSeekMapInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 chosen_hunter_skill_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenHunterSkillList.push(reader.uint32());
                    else
                        message.chosenHunterSkillList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_map_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockMapList.push(reader.uint32());
                    else
                        message.unlockMapList.push(reader.uint32());
                    break;
                case /* repeated uint32 chosen_hider_skill_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenHiderSkillList.push(reader.uint32());
                    else
                        message.chosenHiderSkillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.HideAndSeekMapInfo open_map_info_list = 1; */
        for (let i = 0; i < message.openMapInfoList.length; i++)
            exports.HideAndSeekMapInfo.internalBinaryWrite(message.openMapInfoList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 chosen_hunter_skill_list = 4; */
        if (message.chosenHunterSkillList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenHunterSkillList.length; i++)
                writer.uint32(message.chosenHunterSkillList[i]);
            writer.join();
        }
        /* repeated uint32 unlock_map_list = 13; */
        if (message.unlockMapList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockMapList.length; i++)
                writer.uint32(message.unlockMapList[i]);
            writer.join();
        }
        /* repeated uint32 chosen_hider_skill_list = 6; */
        if (message.chosenHiderSkillList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenHiderSkillList.length; i++)
                writer.uint32(message.chosenHiderSkillList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekActivityDetailInfo
 */
exports.HideAndSeekActivityDetailInfo = new HideAndSeekActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekSelectSkillReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HideAndSeekSelectSkillReq", [
            { no: 13, name: "skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { skillList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 skill_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillList.push(reader.uint32());
                    else
                        message.skillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 skill_list = 13; */
        if (message.skillList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.skillList.length; i++)
                writer.uint32(message.skillList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekSelectSkillReq
 */
exports.HideAndSeekSelectSkillReq = new HideAndSeekSelectSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HideAndSeekSelectSkillRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HideAndSeekSelectSkillRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { skillList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 skill_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillList.push(reader.uint32());
                    else
                        message.skillList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 skill_list = 12; */
        if (message.skillList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.skillList.length; i++)
                writer.uint32(message.skillList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HideAndSeekSelectSkillRsp
 */
exports.HideAndSeekSelectSkillRsp = new HideAndSeekSelectSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeScoreRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeScoreRewardReq", [
            { no: 12, name: "reward_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_config_id */ 12:
                    message.rewardConfigId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_config_id = 12; */
        if (message.rewardConfigId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.rewardConfigId);
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeScoreRewardReq
 */
exports.ActivityTakeScoreRewardReq = new ActivityTakeScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeScoreRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeScoreRewardRsp", [
            { no: 13, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "reward_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 13:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 reward_config_id */ 15:
                    message.rewardConfigId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 13; */
        if (message.activityId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 reward_config_id = 15; */
        if (message.rewardConfigId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.rewardConfigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeScoreRewardRsp
 */
exports.ActivityTakeScoreRewardRsp = new ActivityTakeScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeAllScoreRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeAllScoreRewardReq", [
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeAllScoreRewardReq
 */
exports.ActivityTakeAllScoreRewardReq = new ActivityTakeAllScoreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityTakeAllScoreRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityTakeAllScoreRewardRsp", [
            { no: 14, name: "reward_config_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { rewardConfigList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 reward_config_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.rewardConfigList.push(reader.uint32());
                    else
                        message.rewardConfigList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 reward_config_list = 14; */
        if (message.rewardConfigList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.rewardConfigList.length; i++)
                writer.uint32(message.rewardConfigList[i]);
            writer.join();
        }
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityTakeAllScoreRewardRsp
 */
exports.ActivityTakeAllScoreRewardRsp = new ActivityTakeAllScoreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlDayContentInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FindHilichurlDayContentInfo", [
            { no: 1, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 1:
                    message.startTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 start_time = 1; */
        if (message.startTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.startTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlDayContentInfo
 */
exports.FindHilichurlDayContentInfo = new FindHilichurlDayContentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FindHilichurlDetailInfo", [
            { no: 1, name: "day_content_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FindHilichurlDayContentInfo },
            { no: 12, name: "min_open_player_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_end_quest_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "player_day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dayContentInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FindHilichurlDayContentInfo day_content_info_list */ 1:
                    message.dayContentInfoList.push(exports.FindHilichurlDayContentInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 min_open_player_level */ 12:
                    message.minOpenPlayerLevel = reader.uint32();
                    break;
                case /* optional bool is_end_quest_accept */ 7:
                    message.isEndQuestAccept = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 6:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 9:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 player_day_index */ 4:
                    message.playerDayIndex = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 15:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.FindHilichurlDayContentInfo day_content_info_list = 1; */
        for (let i = 0; i < message.dayContentInfoList.length; i++)
            exports.FindHilichurlDayContentInfo.internalBinaryWrite(message.dayContentInfoList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 min_open_player_level = 12; */
        if (message.minOpenPlayerLevel !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.minOpenPlayerLevel);
        /* optional bool is_end_quest_accept = 7; */
        if (message.isEndQuestAccept !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isEndQuestAccept);
        /* optional uint32 content_close_time = 6; */
        if (message.contentCloseTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 9; */
        if (message.isContentClosed !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 player_day_index = 4; */
        if (message.playerDayIndex !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.playerDayIndex);
        /* optional uint32 day_index = 15; */
        if (message.dayIndex !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlDetailInfo
 */
exports.FindHilichurlDetailInfo = new FindHilichurlDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CommonPlayerTipsNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CommonPlayerTipsNotify", [
            { no: 3, name: "notify_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "text_map_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { textMapIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 notify_type */ 3:
                    message.notifyType = reader.uint32();
                    break;
                case /* repeated string text_map_id_list */ 9:
                    message.textMapIdList.push(reader.string());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 notify_type = 3; */
        if (message.notifyType !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.notifyType);
        /* repeated string text_map_id_list = 9; */
        for (let i = 0; i < message.textMapIdList.length; i++)
            writer.tag(9, runtime_1.WireType.LengthDelimited).string(message.textMapIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CommonPlayerTipsNotify
 */
exports.CommonPlayerTipsNotify = new CommonPlayerTipsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlFinishSecondQuestNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FindHilichurlFinishSecondQuestNotify", [
            { no: 11, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 day_index */ 11:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 day_index = 11; */
        if (message.dayIndex !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlFinishSecondQuestNotify
 */
exports.FindHilichurlFinishSecondQuestNotify = new FindHilichurlFinishSecondQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FindHilichurlAcceptQuestNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FindHilichurlAcceptQuestNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FindHilichurlAcceptQuestNotify
 */
exports.FindHilichurlAcceptQuestNotify = new FindHilichurlAcceptQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRecord", [
            { no: 3, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_touched", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "watcher_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { watcherIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 3:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 13:
                    message.startTime = reader.uint32();
                    break;
                case /* optional bool is_touched */ 7:
                    message.isTouched = reader.bool();
                    break;
                case /* repeated uint32 watcher_id_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.watcherIdList.push(reader.uint32());
                    else
                        message.watcherIdList.push(reader.uint32());
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_score = 3; */
        if (message.bestScore !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.bestScore);
        /* optional uint32 start_time = 13; */
        if (message.startTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.startTime);
        /* optional bool is_touched = 7; */
        if (message.isTouched !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isTouched);
        /* repeated uint32 watcher_id_list = 10; */
        if (message.watcherIdList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.watcherIdList.length; i++)
                writer.uint32(message.watcherIdList[i]);
            writer.join();
        }
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRecord
 */
exports.SummerTimeSprintBoatRecord = new SummerTimeSprintBoatRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatInfo", [
            { no: 7, name: "record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SummerTimeSprintBoatRecord }
        ]);
    }
    create(value) {
        const message = { recordList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeSprintBoatRecord record_list */ 7:
                    message.recordList.push(exports.SummerTimeSprintBoatRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.SummerTimeSprintBoatRecord record_list = 7; */
        for (let i = 0; i < message.recordList.length; i++)
            exports.SummerTimeSprintBoatRecord.internalBinaryWrite(message.recordList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatInfo
 */
exports.SummerTimeSprintBoatInfo = new SummerTimeSprintBoatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeDetailInfo", [
            { no: 3, name: "stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.SummerTimeStageInfo } },
            { no: 11, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "sprint_boat_info", kind: "message", T: () => exports.SummerTimeSprintBoatInfo }
        ]);
    }
    create(value) {
        const message = { stageMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.SummerTimeStageInfo> stage_map */ 3:
                    this.binaryReadMap3(message.stageMap, reader, options);
                    break;
                case /* optional uint32 content_close_time */ 11:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 13:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.SummerTimeSprintBoatInfo sprint_boat_info */ 4:
                    message.sprintBoatInfo = exports.SummerTimeSprintBoatInfo.internalBinaryRead(reader, reader.uint32(), options, message.sprintBoatInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.SummerTimeStageInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SummerTimeDetailInfo.stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.SummerTimeStageInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, com.midnights.game.SummerTimeStageInfo> stage_map = 3; */
        for (let k of Object.keys(message.stageMap)) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.SummerTimeStageInfo.internalBinaryWrite(message.stageMap[k], writer, options);
            writer.join().join();
        }
        /* optional uint32 content_close_time = 11; */
        if (message.contentCloseTime !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 13; */
        if (message.isContentClosed !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.SummerTimeSprintBoatInfo sprint_boat_info = 4; */
        if (message.sprintBoatInfo)
            exports.SummerTimeSprintBoatInfo.internalBinaryWrite(message.sprintBoatInfo, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeDetailInfo
 */
exports.SummerTimeDetailInfo = new SummerTimeDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeStageInfo", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 10:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 10; */
        if (message.openTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeStageInfo
 */
exports.SummerTimeStageInfo = new SummerTimeStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeFloatSignalPositionNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeFloatSignalPositionNotify", [
            { no: 1, name: "position", kind: "message", T: () => define_12.Vector },
            { no: 5, name: "is_transfer_anchor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "float_signal_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector position */ 1:
                    message.position = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* optional bool is_transfer_anchor */ 5:
                    message.isTransferAnchor = reader.bool();
                    break;
                case /* optional uint32 float_signal_id */ 7:
                    message.floatSignalId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector position = 1; */
        if (message.position)
            define_12.Vector.internalBinaryWrite(message.position, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfer_anchor = 5; */
        if (message.isTransferAnchor !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isTransferAnchor);
        /* optional uint32 float_signal_id = 7; */
        if (message.floatSignalId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.floatSignalId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeFloatSignalPositionNotify
 */
exports.SummerTimeFloatSignalPositionNotify = new SummerTimeFloatSignalPositionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeFloatSignalUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeFloatSignalUpdateNotify", [
            { no: 4, name: "is_transfer_anchor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "float_signal_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "position", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_transfer_anchor */ 4:
                    message.isTransferAnchor = reader.bool();
                    break;
                case /* optional uint32 float_signal_id */ 8:
                    message.floatSignalId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector position */ 10:
                    message.position = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_transfer_anchor = 4; */
        if (message.isTransferAnchor !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isTransferAnchor);
        /* optional uint32 float_signal_id = 8; */
        if (message.floatSignalId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.floatSignalId);
        /* optional com.midnights.game.Vector position = 10; */
        if (message.position)
            define_12.Vector.internalBinaryWrite(message.position, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeFloatSignalUpdateNotify
 */
exports.SummerTimeFloatSignalUpdateNotify = new SummerTimeFloatSignalUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatSettleNotify", [
            { no: 13, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "collect_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "medal_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_num */ 13:
                    message.totalNum = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 12:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 collect_num */ 6:
                    message.collectNum = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 8:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 medal_level */ 2:
                    message.medalLevel = reader.uint32();
                    break;
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 total_num = 13; */
        if (message.totalNum !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.totalNum);
        /* optional uint32 group_id = 12; */
        if (message.groupId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 collect_num = 6; */
        if (message.collectNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.collectNum);
        /* optional uint32 left_time = 8; */
        if (message.leftTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.leftTime);
        /* optional uint32 medal_level = 2; */
        if (message.medalLevel !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.medalLevel);
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.score);
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatSettleNotify
 */
exports.SummerTimeSprintBoatSettleNotify = new SummerTimeSprintBoatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRestartReq", [
            { no: 10, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 10:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_id = 10; */
        if (message.groupId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRestartReq
 */
exports.SummerTimeSprintBoatRestartReq = new SummerTimeSprintBoatRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeSprintBoatRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeSprintBoatRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeSprintBoatRestartRsp
 */
exports.SummerTimeSprintBoatRestartRsp = new SummerTimeSprintBoatRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatDailyInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BuoyantCombatDailyInfo", [
            { no: 2, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 2:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 13:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 start_time = 2; */
        if (message.startTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.startTime);
        /* optional uint32 best_score = 13; */
        if (message.bestScore !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatDailyInfo
 */
exports.BuoyantCombatDailyInfo = new BuoyantCombatDailyInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BuoyantCombatDetailInfo", [
            { no: 8, name: "daily_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BuoyantCombatDailyInfo }
        ]);
    }
    create(value) {
        const message = { dailyInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BuoyantCombatDailyInfo daily_info_list */ 8:
                    message.dailyInfoList.push(exports.BuoyantCombatDailyInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.BuoyantCombatDailyInfo daily_info_list = 8; */
        for (let i = 0; i < message.dailyInfoList.length; i++)
            exports.BuoyantCombatDailyInfo.internalBinaryWrite(message.dailyInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatDetailInfo
 */
exports.BuoyantCombatDetailInfo = new BuoyantCombatDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBuoyantCombatGalleryReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartBuoyantCombatGalleryReq", [
            { no: 15, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gallery_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 15:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 gallery_level */ 13:
                    message.galleryLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 15; */
        if (message.galleryId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional uint32 gallery_level = 13; */
        if (message.galleryLevel !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.galleryLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartBuoyantCombatGalleryReq
 */
exports.StartBuoyantCombatGalleryReq = new StartBuoyantCombatGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartBuoyantCombatGalleryRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartBuoyantCombatGalleryRsp", [
            { no: 12, name: "gallery_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_level */ 12:
                    message.galleryLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 8:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_level = 12; */
        if (message.galleryLevel !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.galleryLevel);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 8; */
        if (message.galleryId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartBuoyantCombatGalleryRsp
 */
exports.StartBuoyantCombatGalleryRsp = new StartBuoyantCombatGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BuoyantCombatSettleInfo", [
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "settle_info", kind: "message", T: () => cmd_gallery_10.BuoyantCombatGallerySettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.BuoyantCombatGallerySettleInfo settle_info */ 3:
                    message.settleInfo = cmd_gallery_10.BuoyantCombatGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.BuoyantCombatGallerySettleInfo settle_info = 3; */
        if (message.settleInfo)
            cmd_gallery_10.BuoyantCombatGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatSettleInfo
 */
exports.BuoyantCombatSettleInfo = new BuoyantCombatSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BuoyantCombatSettleNotify", [
            { no: 8, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "settle_info", kind: "message", T: () => exports.BuoyantCombatSettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 8:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.BuoyantCombatSettleInfo settle_info */ 11:
                    message.settleInfo = exports.BuoyantCombatSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 8; */
        if (message.galleryId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.BuoyantCombatSettleInfo settle_info = 11; */
        if (message.settleInfo)
            exports.BuoyantCombatSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatSettleNotify
 */
exports.BuoyantCombatSettleNotify = new BuoyantCombatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetLimitOptimizationNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SetLimitOptimizationNotify", [
            { no: 3, name: "is_active", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_active */ 3:
                    message.isActive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_active = 3; */
        if (message.isActive !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isActive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetLimitOptimizationNotify
 */
exports.SetLimitOptimizationNotify = new SetLimitOptimizationNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeDungeonInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeDungeonInfo", [
            { no: 15, name: "taken_chest_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_chest_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "taken_shell_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "total_shell_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 taken_chest_count */ 15:
                    message.takenChestCount = reader.uint32();
                    break;
                case /* optional uint32 total_chest_count */ 12:
                    message.totalChestCount = reader.uint32();
                    break;
                case /* optional uint32 taken_shell_count */ 14:
                    message.takenShellCount = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 total_shell_count */ 13:
                    message.totalShellCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 taken_chest_count = 15; */
        if (message.takenChestCount !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.takenChestCount);
        /* optional uint32 total_chest_count = 12; */
        if (message.totalChestCount !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.totalChestCount);
        /* optional uint32 taken_shell_count = 14; */
        if (message.takenShellCount !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.takenShellCount);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 total_shell_count = 13; */
        if (message.totalShellCount !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.totalShellCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeDungeonInfo
 */
exports.SummerTimeDungeonInfo = new SummerTimeDungeonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EchoShellDetailInfo", [
            { no: 8, name: "summer_time_dungeon_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SummerTimeDungeonInfo },
            { no: 13, name: "shell_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "pass_dungeon_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "taken_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { summerTimeDungeonList: [], shellList: [], passDungeonList: [], takenRewardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeDungeonInfo summer_time_dungeon_list */ 8:
                    message.summerTimeDungeonList.push(exports.SummerTimeDungeonInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 shell_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.shellList.push(reader.uint32());
                    else
                        message.shellList.push(reader.uint32());
                    break;
                case /* repeated uint32 pass_dungeon_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.passDungeonList.push(reader.uint32());
                    else
                        message.passDungeonList.push(reader.uint32());
                    break;
                case /* repeated uint32 taken_reward_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.takenRewardList.push(reader.uint32());
                    else
                        message.takenRewardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.SummerTimeDungeonInfo summer_time_dungeon_list = 8; */
        for (let i = 0; i < message.summerTimeDungeonList.length; i++)
            exports.SummerTimeDungeonInfo.internalBinaryWrite(message.summerTimeDungeonList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 shell_list = 13; */
        if (message.shellList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.shellList.length; i++)
                writer.uint32(message.shellList[i]);
            writer.join();
        }
        /* repeated uint32 pass_dungeon_list = 4; */
        if (message.passDungeonList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.passDungeonList.length; i++)
                writer.uint32(message.passDungeonList[i]);
            writer.join();
        }
        /* repeated uint32 taken_reward_list = 2; */
        if (message.takenRewardList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.takenRewardList.length; i++)
                writer.uint32(message.takenRewardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellDetailInfo
 */
exports.EchoShellDetailInfo = new EchoShellDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EchoShellUpdateNotify", [
            { no: 1, name: "shell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shell_id */ 1:
                    message.shellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 shell_id = 1; */
        if (message.shellId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.shellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellUpdateNotify
 */
exports.EchoShellUpdateNotify = new EchoShellUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellTakeRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EchoShellTakeRewardReq", [
            { no: 10, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 10:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_id = 10; */
        if (message.rewardId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellTakeRewardReq
 */
exports.EchoShellTakeRewardReq = new EchoShellTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoShellTakeRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EchoShellTakeRewardRsp", [
            { no: 6, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 6:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 reward_id = 6; */
        if (message.rewardId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.rewardId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoShellTakeRewardRsp
 */
exports.EchoShellTakeRewardRsp = new EchoShellTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringChapterInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BounceConjuringChapterInfo", [
            { no: 12, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 12:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 9:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 13:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_score = 12; */
        if (message.bestScore !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.bestScore);
        /* optional uint32 open_time = 9; */
        if (message.openTime !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 chapter_id = 13; */
        if (message.chapterId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringChapterInfo
 */
exports.BounceConjuringChapterInfo = new BounceConjuringChapterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BounceConjuringActivityDetailInfo", [
            { no: 8, name: "chapter_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BounceConjuringChapterInfo },
            { no: 12, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { chapterInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BounceConjuringChapterInfo chapter_info_list */ 8:
                    message.chapterInfoList.push(exports.BounceConjuringChapterInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_content_closed */ 12:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 7:
                    message.contentCloseTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.BounceConjuringChapterInfo chapter_info_list = 8; */
        for (let i = 0; i < message.chapterInfoList.length; i++)
            exports.BounceConjuringChapterInfo.internalBinaryWrite(message.chapterInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_content_closed = 12; */
        if (message.isContentClosed !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 content_close_time = 7; */
        if (message.contentCloseTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringActivityDetailInfo
 */
exports.BounceConjuringActivityDetailInfo = new BounceConjuringActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BounceConjuringSettleNotify", [
            { no: 14, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "settle_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => cmd_gallery_9.BounceConjuringGallerySettleInfo } },
            { no: 2, name: "total_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "chapter_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { settleInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 14:
                    message.isNewRecord = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.BounceConjuringGallerySettleInfo> settle_info_map */ 4:
                    this.binaryReadMap4(message.settleInfoMap, reader, options);
                    break;
                case /* optional uint32 total_score */ 2:
                    message.totalScore = reader.uint32();
                    break;
                case /* optional uint32 chapter_id */ 13:
                    message.chapterId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = cmd_gallery_9.BounceConjuringGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BounceConjuringSettleNotify.settle_info_map");
            }
        }
        map[key ?? 0] = val ?? cmd_gallery_9.BounceConjuringGallerySettleInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 14; */
        if (message.isNewRecord !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* map<uint32, com.midnights.game.BounceConjuringGallerySettleInfo> settle_info_map = 4; */
        for (let k of Object.keys(message.settleInfoMap)) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            cmd_gallery_9.BounceConjuringGallerySettleInfo.internalBinaryWrite(message.settleInfoMap[k], writer, options);
            writer.join().join();
        }
        /* optional uint32 total_score = 2; */
        if (message.totalScore !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.totalScore);
        /* optional uint32 chapter_id = 13; */
        if (message.chapterId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.chapterId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringSettleNotify
 */
exports.BounceConjuringSettleNotify = new BounceConjuringSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushStage$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlitzRushStage", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 11:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 11; */
        if (message.openTime !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushStage
 */
exports.BlitzRushStage = new BlitzRushStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParkourLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ParkourLevelInfo", [
            { no: 12, name: "best_record", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "pos", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_record */ 12:
                    message.bestRecord = reader.uint32();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 2:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_record = 12; */
        if (message.bestRecord !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.bestRecord);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional com.midnights.game.Vector pos = 2; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ParkourLevelInfo
 */
exports.ParkourLevelInfo = new ParkourLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlitzRushActivityDetailInfo", [
            { no: 10, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BlitzRushStage },
            { no: 14, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "parkour_level_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ParkourLevelInfo }
        ]);
    }
    create(value) {
        const message = { stageList: [], parkourLevelInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.BlitzRushStage stage_list */ 10:
                    message.stageList.push(exports.BlitzRushStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 content_close_time */ 14:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 2:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.ParkourLevelInfo parkour_level_info_list */ 6:
                    message.parkourLevelInfoList.push(exports.ParkourLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.BlitzRushStage stage_list = 10; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.BlitzRushStage.internalBinaryWrite(message.stageList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 content_close_time = 14; */
        if (message.contentCloseTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 2; */
        if (message.isContentClosed !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.ParkourLevelInfo parkour_level_info_list = 6; */
        for (let i = 0; i < message.parkourLevelInfoList.length; i++)
            exports.ParkourLevelInfo.internalBinaryWrite(message.parkourLevelInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushActivityDetailInfo
 */
exports.BlitzRushActivityDetailInfo = new BlitzRushActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushParkourRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlitzRushParkourRestartReq", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushParkourRestartReq
 */
exports.BlitzRushParkourRestartReq = new BlitzRushParkourRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BlitzRushParkourRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BlitzRushParkourRestartRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 group_id */ 15:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 group_id = 15; */
        if (message.groupId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BlitzRushParkourRestartRsp
 */
exports.BlitzRushParkourRestartRsp = new BlitzRushParkourRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChessActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ChessActivityDetailInfo", [
            { no: 4, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_teach_dungeon_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "obtained_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "available_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "finished_map_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "punish_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { finishedMapIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 4:
                    message.level = reader.uint32();
                    break;
                case /* optional bool is_teach_dungeon_finished */ 9:
                    message.isTeachDungeonFinished = reader.bool();
                    break;
                case /* optional uint32 content_close_time */ 14:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional uint32 obtained_exp */ 8:
                    message.obtainedExp = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 5:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 available_exp */ 2:
                    message.availableExp = reader.uint32();
                    break;
                case /* optional uint32 exp */ 13:
                    message.exp = reader.uint32();
                    break;
                case /* repeated uint32 finished_map_id_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedMapIdList.push(reader.uint32());
                    else
                        message.finishedMapIdList.push(reader.uint32());
                    break;
                case /* optional uint32 punish_over_time */ 3:
                    message.punishOverTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level = 4; */
        if (message.level !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.level);
        /* optional bool is_teach_dungeon_finished = 9; */
        if (message.isTeachDungeonFinished !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isTeachDungeonFinished);
        /* optional uint32 content_close_time = 14; */
        if (message.contentCloseTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional uint32 obtained_exp = 8; */
        if (message.obtainedExp !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.obtainedExp);
        /* optional bool is_content_closed = 5; */
        if (message.isContentClosed !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 available_exp = 2; */
        if (message.availableExp !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.availableExp);
        /* optional uint32 exp = 13; */
        if (message.exp !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.exp);
        /* repeated uint32 finished_map_id_list = 1; */
        if (message.finishedMapIdList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedMapIdList.length; i++)
                writer.uint32(message.finishedMapIdList[i]);
            writer.join();
        }
        /* optional uint32 punish_over_time = 3; */
        if (message.punishOverTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.punishOverTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChessActivityDetailInfo
 */
exports.ChessActivityDetailInfo = new ChessActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterChessDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterChessDungeonReq", [
            { no: 12, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 map_id */ 12:
                    message.mapId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 map_id = 12; */
        if (message.mapId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.mapId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterChessDungeonReq
 */
exports.EnterChessDungeonReq = new EnterChessDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterChessDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterChessDungeonRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 map_id */ 13:
                    message.mapId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 map_id = 13; */
        if (message.mapId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.mapId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterChessDungeonRsp
 */
exports.EnterChessDungeonRsp = new EnterChessDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureMapHostInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureMapHostInfoNotify", [
            { no: 8, name: "mp_challenge_region_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { mpChallengeRegionList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 mp_challenge_region_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.mpChallengeRegionList.push(reader.uint32());
                    else
                        message.mpChallengeRegionList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 mp_challenge_region_list = 8; */
        if (message.mpChallengeRegionList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.mpChallengeRegionList.length; i++)
                writer.uint32(message.mpChallengeRegionList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureMapHostInfoNotify
 */
exports.TreasureMapHostInfoNotify = new TreasureMapHostInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoActivityDetailInfo", [
            { no: 11, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "sumo_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.SumoStageData } },
            { no: 14, name: "last_stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { sumoStageMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty_id */ 11:
                    message.difficultyId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.SumoStageData> sumo_stage_map */ 13:
                    this.binaryReadMap13(message.sumoStageMap, reader, options);
                    break;
                case /* optional uint32 last_stage_id */ 14:
                    message.lastStageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.SumoStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SumoActivityDetailInfo.sumo_stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.SumoStageData.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty_id = 11; */
        if (message.difficultyId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* map<uint32, com.midnights.game.SumoStageData> sumo_stage_map = 13; */
        for (let k of Object.keys(message.sumoStageMap)) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.SumoStageData.internalBinaryWrite(message.sumoStageMap[k], writer, options);
            writer.join().join();
        }
        /* optional uint32 last_stage_id = 14; */
        if (message.lastStageId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.lastStageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoActivityDetailInfo
 */
exports.SumoActivityDetailInfo = new SumoActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoAvatarInfo", [
            { no: 2, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 2:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 1:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_trial = 2; */
        if (message.isTrial !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 1; */
        if (message.avatarId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoAvatarInfo
 */
exports.SumoAvatarInfo = new SumoAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoTeamData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoTeamData", [
            { no: 14, name: "skill_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoAvatarInfo }
        ]);
    }
    create(value) {
        const message = { skillIdList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 skill_id_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillIdList.push(reader.uint32());
                    else
                        message.skillIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.SumoAvatarInfo avatar_info_list */ 3:
                    message.avatarInfoList.push(exports.SumoAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 skill_id_list = 14; */
        if (message.skillIdList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.skillIdList.length; i++)
                writer.uint32(message.skillIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.SumoAvatarInfo avatar_info_list = 3; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.SumoAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoTeamData
 */
exports.SumoTeamData = new SumoTeamData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoStageData", [
            { no: 1, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoTeamData },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_score */ 1:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 3:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 7:
                    message.teamList.push(exports.SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 max_score = 1; */
        if (message.maxScore !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 3; */
        if (message.stageId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoTeamData team_list = 7; */
        for (let i = 0; i < message.teamList.length; i++)
            exports.SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoStageData
 */
exports.SumoStageData = new SumoStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSaveTeamReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSaveTeamReq", [
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoTeamData }
        ]);
    }
    create(value) {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 12:
                    message.teamList.push(exports.SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.SumoTeamData team_list = 12; */
        for (let i = 0; i < message.teamList.length; i++)
            exports.SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSaveTeamReq
 */
exports.SumoSaveTeamReq = new SumoSaveTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSaveTeamRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSaveTeamRsp", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoTeamData },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 11:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 13:
                    message.teamList.push(exports.SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 11; */
        if (message.activityId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.SumoTeamData team_list = 13; */
        for (let i = 0; i < message.teamList.length; i++)
            exports.SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSaveTeamRsp
 */
exports.SumoSaveTeamRsp = new SumoSaveTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSelectTeamAndEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSelectTeamAndEnterDungeonReq", [
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoTeamData }
        ]);
    }
    create(value) {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 4:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 10:
                    message.teamList.push(exports.SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_id = 4; */
        if (message.difficultyId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.SumoTeamData team_list = 10; */
        for (let i = 0; i < message.teamList.length; i++)
            exports.SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonReq
 */
exports.SumoSelectTeamAndEnterDungeonReq = new SumoSelectTeamAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSelectTeamAndEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSelectTeamAndEnterDungeonRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoTeamData }
        ]);
    }
    create(value) {
        const message = { teamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 12:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoTeamData team_list */ 2:
                    message.teamList.push(exports.SumoTeamData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional uint32 difficulty_id = 12; */
        if (message.difficultyId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoTeamData team_list = 2; */
        for (let i = 0; i < message.teamList.length; i++)
            exports.SumoTeamData.internalBinaryWrite(message.teamList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSelectTeamAndEnterDungeonRsp
 */
exports.SumoSelectTeamAndEnterDungeonRsp = new SumoSelectTeamAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoDungeonSettleNotify", [
            { no: 7, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "kill_elite_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "kill_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 7:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 kill_elite_monster_num */ 15:
                    message.killEliteMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 kill_monster_num */ 4:
                    message.killMonsterNum = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 5:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 final_score = 7; */
        if (message.finalScore !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.finalScore);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 kill_elite_monster_num = 15; */
        if (message.killEliteMonsterNum !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.killEliteMonsterNum);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 kill_monster_num = 4; */
        if (message.killMonsterNum !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.killMonsterNum);
        /* optional bool is_new_record = 5; */
        if (message.isNewRecord !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonSettleNotify
 */
exports.SumoDungeonSettleNotify = new SumoDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonAvatar$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoDungeonAvatar", [
            { no: 11, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_avlive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 11:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_avlive */ 13:
                    message.isAvlive = reader.bool();
                    break;
                case /* optional bool is_trial */ 4:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint64 avatar_guid = 11; */
        if (message.avatarGuid !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint64(message.avatarGuid);
        /* optional bool is_avlive = 13; */
        if (message.isAvlive !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isAvlive);
        /* optional bool is_trial = 4; */
        if (message.isTrial !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonAvatar
 */
exports.SumoDungeonAvatar = new SumoDungeonAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoDungeonTeam$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoDungeonTeam", [
            { no: 15, name: "dungeon_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoDungeonAvatar }
        ]);
    }
    create(value) {
        const message = { dungeonAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SumoDungeonAvatar dungeon_avatar_list */ 15:
                    message.dungeonAvatarList.push(exports.SumoDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.SumoDungeonAvatar dungeon_avatar_list = 15; */
        for (let i = 0; i < message.dungeonAvatarList.length; i++)
            exports.SumoDungeonAvatar.internalBinaryWrite(message.dungeonAvatarList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoDungeonTeam
 */
exports.SumoDungeonTeam = new SumoDungeonTeam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoEnterDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoEnterDungeonNotify", [
            { no: 15, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dungeon_team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoDungeonTeam },
            { no: 10, name: "no_switch_punish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 15:
                    message.activityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 11:
                    message.dungeonTeamList.push(exports.SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 no_switch_punish_time */ 10:
                    message.noSwitchPunishTime = reader.uint32();
                    break;
                case /* optional uint32 next_valid_switch_time */ 13:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 cur_team_index */ 5:
                    message.curTeamIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 15; */
        if (message.activityId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.activityId);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            exports.SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 no_switch_punish_time = 10; */
        if (message.noSwitchPunishTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.noSwitchPunishTime);
        /* optional uint32 next_valid_switch_time = 13; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.nextValidSwitchTime);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 cur_team_index = 5; */
        if (message.curTeamIndex !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.curTeamIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoEnterDungeonNotify
 */
exports.SumoEnterDungeonNotify = new SumoEnterDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSwitchTeamReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSwitchTeamReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 5:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 activity_id = 5; */
        if (message.activityId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSwitchTeamReq
 */
exports.SumoSwitchTeamReq = new SumoSwitchTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSwitchTeamRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSwitchTeamRsp", [
            { no: 7, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoDungeonTeam },
            { no: 6, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 next_valid_switch_time */ 7:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 10:
                    message.dungeonTeamList.push(exports.SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 activity_id */ 6:
                    message.activityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cur_team_index */ 11:
                    message.curTeamIndex = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 next_valid_switch_time = 7; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.nextValidSwitchTime);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 10; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            exports.SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 6; */
        if (message.activityId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.activityId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 cur_team_index = 11; */
        if (message.curTeamIndex !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.curTeamIndex);
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSwitchTeamRsp
 */
exports.SumoSwitchTeamRsp = new SumoSwitchTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoLeaveDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoLeaveDungeonNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoLeaveDungeonNotify
 */
exports.SumoLeaveDungeonNotify = new SumoLeaveDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoRestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoRestartDungeonReq
 */
exports.SumoRestartDungeonReq = new SumoRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoRestartDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoRestartDungeonRsp
 */
exports.SumoRestartDungeonRsp = new SumoRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityDisableTransferPointInteractionNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityDisableTransferPointInteractionNotify", [
            { no: 10, name: "is_disable", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "scene_point_pair", kind: "message", T: () => define_13.Uint32Pair }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_disable */ 10:
                    message.isDisable = reader.bool();
                    break;
                case /* optional com.midnights.game.Uint32Pair scene_point_pair */ 5:
                    message.scenePointPair = define_13.Uint32Pair.internalBinaryRead(reader, reader.uint32(), options, message.scenePointPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_disable = 10; */
        if (message.isDisable !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isDisable);
        /* optional com.midnights.game.Uint32Pair scene_point_pair = 5; */
        if (message.scenePointPair)
            define_13.Uint32Pair.internalBinaryWrite(message.scenePointPair, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityDisableTransferPointInteractionNotify
 */
exports.ActivityDisableTransferPointInteractionNotify = new ActivityDisableTransferPointInteractionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SumoSetNoSwitchPunishTimeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SumoSetNoSwitchPunishTimeNotify", [
            { no: 15, name: "cur_team_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dungeon_team_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SumoDungeonTeam },
            { no: 2, name: "no_switch_punish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "next_valid_switch_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dungeonTeamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_team_index */ 15:
                    message.curTeamIndex = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list */ 11:
                    message.dungeonTeamList.push(exports.SumoDungeonTeam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 no_switch_punish_time */ 2:
                    message.noSwitchPunishTime = reader.uint32();
                    break;
                case /* optional uint32 next_valid_switch_time */ 14:
                    message.nextValidSwitchTime = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 9:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_team_index = 15; */
        if (message.curTeamIndex !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.curTeamIndex);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.SumoDungeonTeam dungeon_team_list = 11; */
        for (let i = 0; i < message.dungeonTeamList.length; i++)
            exports.SumoDungeonTeam.internalBinaryWrite(message.dungeonTeamList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 no_switch_punish_time = 2; */
        if (message.noSwitchPunishTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.noSwitchPunishTime);
        /* optional uint32 next_valid_switch_time = 14; */
        if (message.nextValidSwitchTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.nextValidSwitchTime);
        /* optional uint32 activity_id = 9; */
        if (message.activityId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SumoSetNoSwitchPunishTimeNotify
 */
exports.SumoSetNoSwitchPunishTimeNotify = new SumoSetNoSwitchPunishTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoonfinTrialLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MoonfinTrialLevelInfo", [
            { no: 3, name: "best_record", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_record */ 3:
                    message.bestRecord = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_record = 3; */
        if (message.bestRecord !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.bestRecord);
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.openTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MoonfinTrialLevelInfo
 */
exports.MoonfinTrialLevelInfo = new MoonfinTrialLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MoonfinTrialActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MoonfinTrialActivityDetailInfo", [
            { no: 5, name: "level_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.MoonfinTrialLevelInfo } },
            { no: 11, name: "special_fish_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { levelInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.MoonfinTrialLevelInfo> level_info_map */ 5:
                    this.binaryReadMap5(message.levelInfoMap, reader, options);
                    break;
                case /* optional uint32 special_fish_count */ 11:
                    message.specialFishCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.MoonfinTrialLevelInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MoonfinTrialActivityDetailInfo.level_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.MoonfinTrialLevelInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, com.midnights.game.MoonfinTrialLevelInfo> level_info_map = 5; */
        for (let k of Object.keys(message.levelInfoMap)) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.MoonfinTrialLevelInfo.internalBinaryWrite(message.levelInfoMap[k], writer, options);
            writer.join().join();
        }
        /* optional uint32 special_fish_count = 11; */
        if (message.specialFishCount !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.specialFishCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MoonfinTrialActivityDetailInfo
 */
exports.MoonfinTrialActivityDetailInfo = new MoonfinTrialActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FishingGallerySettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FishingGallerySettleNotify", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "settle_info", kind: "message", T: () => cmd_gallery_8.FishingGallerySettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional com.midnights.game.FishingGallerySettleInfo settle_info */ 13:
                    message.settleInfo = cmd_gallery_8.FishingGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional com.midnights.game.FishingGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            cmd_gallery_8.FishingGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishingGallerySettleNotify
 */
exports.FishingGallerySettleNotify = new FishingGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPoint$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteHintPoint", [
            { no: 11, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintPointType", define_6.LunaRiteHintPointType] },
            { no: 10, name: "pos", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 11:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 7:
                    message.index = reader.uint32();
                    break;
                case /* optional com.midnights.game.LunaRiteHintPointType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 11; */
        if (message.areaId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 7; */
        if (message.index !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.index);
        /* optional com.midnights.game.LunaRiteHintPointType type = 2; */
        if (message.type !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.type);
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPoint
 */
exports.LunaRiteHintPoint = new LunaRiteHintPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteAreaInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteAreaInfo", [
            { no: 11, name: "sacrifice_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "hint_status", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintStatusType", define_5.LunaRiteHintStatusType] },
            { no: 4, name: "sacrifice_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { sacrificeList: [], sacrificeRewardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 sacrifice_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeList.push(reader.uint32());
                    else
                        message.sacrificeList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.LunaRiteHintStatusType hint_status */ 7:
                    message.hintStatus = reader.int32();
                    break;
                case /* repeated uint32 sacrifice_reward_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeRewardList.push(reader.uint32());
                    else
                        message.sacrificeRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 area_id */ 8:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 6:
                    message.challengeIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 sacrifice_list = 11; */
        if (message.sacrificeList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sacrificeList.length; i++)
                writer.uint32(message.sacrificeList[i]);
            writer.join();
        }
        /* optional com.midnights.game.LunaRiteHintStatusType hint_status = 7; */
        if (message.hintStatus !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.hintStatus);
        /* repeated uint32 sacrifice_reward_list = 4; */
        if (message.sacrificeRewardList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sacrificeRewardList.length; i++)
                writer.uint32(message.sacrificeRewardList[i]);
            writer.join();
        }
        /* optional uint32 area_id = 8; */
        if (message.areaId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional uint32 challenge_index = 6; */
        if (message.challengeIndex !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.challengeIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteAreaInfo
 */
exports.LunaRiteAreaInfo = new LunaRiteAreaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteDetailInfo", [
            { no: 3, name: "hint_point", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LunaRiteHintPoint },
            { no: 13, name: "area_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LunaRiteAreaInfo }
        ]);
    }
    create(value) {
        const message = { hintPoint: [], areaInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LunaRiteHintPoint hint_point */ 3:
                    message.hintPoint.push(exports.LunaRiteHintPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.LunaRiteAreaInfo area_info_list */ 13:
                    message.areaInfoList.push(exports.LunaRiteAreaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.LunaRiteHintPoint hint_point = 3; */
        for (let i = 0; i < message.hintPoint.length; i++)
            exports.LunaRiteHintPoint.internalBinaryWrite(message.hintPoint[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.LunaRiteAreaInfo area_info_list = 13; */
        for (let i = 0; i < message.areaInfoList.length; i++)
            exports.LunaRiteAreaInfo.internalBinaryWrite(message.areaInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteDetailInfo
 */
exports.LunaRiteDetailInfo = new LunaRiteDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteSacrificeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteSacrificeReq", [
            { no: 15, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 15:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 14:
                    message.index = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 15; */
        if (message.areaId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 14; */
        if (message.index !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteSacrificeReq
 */
exports.LunaRiteSacrificeReq = new LunaRiteSacrificeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteSacrificeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteSacrificeRsp", [
            { no: 13, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "sacrifice_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { sacrificeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 13:
                    message.areaId = reader.uint32();
                    break;
                case /* repeated uint32 sacrifice_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeList.push(reader.uint32());
                    else
                        message.sacrificeList.push(reader.uint32());
                    break;
                case /* optional uint32 index */ 8:
                    message.index = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 13; */
        if (message.areaId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.areaId);
        /* repeated uint32 sacrifice_list = 14; */
        if (message.sacrificeList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sacrificeList.length; i++)
                writer.uint32(message.sacrificeList[i]);
            writer.join();
        }
        /* optional uint32 index = 8; */
        if (message.index !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.index);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteSacrificeRsp
 */
exports.LunaRiteSacrificeRsp = new LunaRiteSacrificeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteTakeSacrificeRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteTakeSacrificeRewardReq", [
            { no: 11, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 11:
                    message.areaId = reader.uint32();
                    break;
                case /* optional uint32 index */ 3:
                    message.index = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 11; */
        if (message.areaId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional uint32 index = 3; */
        if (message.index !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardReq
 */
exports.LunaRiteTakeSacrificeRewardReq = new LunaRiteTakeSacrificeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteTakeSacrificeRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteTakeSacrificeRewardRsp", [
            { no: 11, name: "index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "sacrifice_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "sacrifice_reward_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { sacrificeRewardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 index */ 11:
                    message.index = reader.uint32();
                    break;
                case /* repeated uint32 sacrifice_reward_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.sacrificeRewardList.push(reader.uint32());
                    else
                        message.sacrificeRewardList.push(reader.uint32());
                    break;
                case /* optional uint32 sacrifice_reward_index */ 14:
                    message.sacrificeRewardIndex = reader.uint32();
                    break;
                case /* optional uint32 area_id */ 6:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 index = 11; */
        if (message.index !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.index);
        /* repeated uint32 sacrifice_reward_list = 2; */
        if (message.sacrificeRewardList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.sacrificeRewardList.length; i++)
                writer.uint32(message.sacrificeRewardList[i]);
            writer.join();
        }
        /* optional uint32 sacrifice_reward_index = 14; */
        if (message.sacrificeRewardIndex !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.sacrificeRewardIndex);
        /* optional uint32 area_id = 6; */
        if (message.areaId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteTakeSacrificeRewardRsp
 */
exports.LunaRiteTakeSacrificeRewardRsp = new LunaRiteTakeSacrificeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointReq", [
            { no: 13, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 13:
                    message.areaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 13; */
        if (message.areaId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointReq
 */
exports.LunaRiteHintPointReq = new LunaRiteHintPointReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointRsp", [
            { no: 4, name: "hint_status", kind: "enum", opt: true, T: () => ["com.midnights.game.LunaRiteHintStatusType", define_5.LunaRiteHintStatusType] },
            { no: 5, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "hint_point", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LunaRiteHintPoint }
        ]);
    }
    create(value) {
        const message = { hintPoint: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LunaRiteHintStatusType hint_status */ 4:
                    message.hintStatus = reader.int32();
                    break;
                case /* optional uint32 area_id */ 5:
                    message.areaId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.LunaRiteHintPoint hint_point */ 9:
                    message.hintPoint.push(exports.LunaRiteHintPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.LunaRiteHintStatusType hint_status = 4; */
        if (message.hintStatus !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.hintStatus);
        /* optional uint32 area_id = 5; */
        if (message.areaId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.areaId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.LunaRiteHintPoint hint_point = 9; */
        for (let i = 0; i < message.hintPoint.length; i++)
            exports.LunaRiteHintPoint.internalBinaryWrite(message.hintPoint[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointRsp
 */
exports.LunaRiteHintPointRsp = new LunaRiteHintPointRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteHintPointRemoveNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteHintPointRemoveNotify", [
            { no: 14, name: "hint_point_index", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { hintPointIndex: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 hint_point_index */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hintPointIndex.push(reader.uint32());
                    else
                        message.hintPointIndex.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 hint_point_index = 14; */
        if (message.hintPointIndex.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hintPointIndex.length; i++)
                writer.uint32(message.hintPointIndex[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteHintPointRemoveNotify
 */
exports.LunaRiteHintPointRemoveNotify = new LunaRiteHintPointRemoveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteGroupBundleRegisterNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteGroupBundleRegisterNotify", [
            { no: 11, name: "group_link_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_link_bundle_id */ 11:
                    message.groupLinkBundleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_link_bundle_id = 11; */
        if (message.groupLinkBundleId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.groupLinkBundleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteGroupBundleRegisterNotify
 */
exports.LunaRiteGroupBundleRegisterNotify = new LunaRiteGroupBundleRegisterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LunaRiteAreaFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LunaRiteAreaFinishNotify", [
            { no: 2, name: "area_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 area_id */ 2:
                    message.areaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 area_id = 2; */
        if (message.areaId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.areaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LunaRiteAreaFinishNotify
 */
exports.LunaRiteAreaFinishNotify = new LunaRiteAreaFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerActivityDetailInfo", [
            { no: 3, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "wish_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "today_seed_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "day_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_today_has_awarded", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "used_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { wishFlowerNumMap: {}, usedFlowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 3:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, uint32> wish_flower_num_map */ 10:
                    this.binaryReadMap10(message.wishFlowerNumMap, reader, options);
                    break;
                case /* optional uint32 today_seed_reward_id */ 11:
                    message.todaySeedRewardId = reader.uint32();
                    break;
                case /* optional uint32 day_index */ 1:
                    message.dayIndex = reader.uint32();
                    break;
                case /* optional bool is_today_has_awarded */ 13:
                    message.isTodayHasAwarded = reader.bool();
                    break;
                case /* map<uint32, uint32> used_flower_num_map */ 7:
                    this.binaryReadMap7(message.usedFlowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerActivityDetailInfo.wish_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerActivityDetailInfo.used_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_content_closed = 3; */
        if (message.isContentClosed !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, uint32> wish_flower_num_map = 10; */
        for (let k of Object.keys(message.wishFlowerNumMap))
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.wishFlowerNumMap[k]).join();
        /* optional uint32 today_seed_reward_id = 11; */
        if (message.todaySeedRewardId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.todaySeedRewardId);
        /* optional uint32 day_index = 1; */
        if (message.dayIndex !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.dayIndex);
        /* optional bool is_today_has_awarded = 13; */
        if (message.isTodayHasAwarded !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isTodayHasAwarded);
        /* map<uint32, uint32> used_flower_num_map = 7; */
        for (let k of Object.keys(message.usedFlowerNumMap))
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.usedFlowerNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerActivityDetailInfo
 */
exports.PlantFlowerActivityDetailInfo = new PlantFlowerActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetSeedInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetSeedInfoReq", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetSeedInfoReq
 */
exports.PlantFlowerGetSeedInfoReq = new PlantFlowerGetSeedInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetSeedInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetSeedInfoRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "seed_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 seed_reward_id */ 5:
                    message.seedRewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 seed_reward_id = 5; */
        if (message.seedRewardId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.seedRewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetSeedInfoRsp
 */
exports.PlantFlowerGetSeedInfoRsp = new PlantFlowerGetSeedInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerTakeSeedRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerTakeSeedRewardReq", [
            { no: 12, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 12:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 12; */
        if (message.scheduleId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerTakeSeedRewardReq
 */
exports.PlantFlowerTakeSeedRewardReq = new PlantFlowerTakeSeedRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerTakeSeedRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerTakeSeedRewardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerTakeSeedRewardRsp
 */
exports.PlantFlowerTakeSeedRewardRsp = new PlantFlowerTakeSeedRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerSetFlowerWishReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerSetFlowerWishReq", [
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 5:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerSetFlowerWishReq.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.flowerNumMap[k]).join();
        /* optional uint32 schedule_id = 5; */
        if (message.scheduleId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerSetFlowerWishReq
 */
exports.PlantFlowerSetFlowerWishReq = new PlantFlowerSetFlowerWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerSetFlowerWishRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerSetFlowerWishRsp", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerSetFlowerWishRsp
 */
exports.PlantFlowerSetFlowerWishRsp = new PlantFlowerSetFlowerWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetFriendFlowerWishListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetFriendFlowerWishListReq", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListReq
 */
exports.PlantFlowerGetFriendFlowerWishListReq = new PlantFlowerGetFriendFlowerWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerFriendFlowerWishData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerFriendFlowerWishData", [
            { no: 3, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 3:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerFriendFlowerWishData.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ProfilePicture profile_picture = 3; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.flowerNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerFriendFlowerWishData
 */
exports.PlantFlowerFriendFlowerWishData = new PlantFlowerFriendFlowerWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetFriendFlowerWishListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "friend_flower_wish_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PlantFlowerFriendFlowerWishData }
        ]);
    }
    create(value) {
        const message = { friendFlowerWishList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerFriendFlowerWishData friend_flower_wish_list */ 9:
                    message.friendFlowerWishList.push(exports.PlantFlowerFriendFlowerWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* repeated com.midnights.game.PlantFlowerFriendFlowerWishData friend_flower_wish_list = 9; */
        for (let i = 0; i < message.friendFlowerWishList.length; i++)
            exports.PlantFlowerFriendFlowerWishData.internalBinaryWrite(message.friendFlowerWishList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetFriendFlowerWishListRsp
 */
exports.PlantFlowerGetFriendFlowerWishListRsp = new PlantFlowerGetFriendFlowerWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGiveFriendFlowerReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGiveFriendFlowerReq", [
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 13:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 12:
                    this.binaryReadMap12(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerGiveFriendFlowerReq.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 13; */
        if (message.uid !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> flower_num_map = 12; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.flowerNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerReq
 */
exports.PlantFlowerGiveFriendFlowerReq = new PlantFlowerGiveFriendFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGiveFriendFlowerRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGiveFriendFlowerRsp", [
            { no: 5, name: "limit_flower_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { limitFlowerList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_flower_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitFlowerList.push(reader.uint32());
                    else
                        message.limitFlowerList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 limit_flower_list = 5; */
        if (message.limitFlowerList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.limitFlowerList.length; i++)
                writer.uint32(message.limitFlowerList[i]);
            writer.join();
        }
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGiveFriendFlowerRsp
 */
exports.PlantFlowerGiveFriendFlowerRsp = new PlantFlowerGiveFriendFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetRecvFlowerListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetRecvFlowerListReq", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListReq
 */
exports.PlantFlowerGetRecvFlowerListReq = new PlantFlowerGetRecvFlowerListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerRecvFlowerData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerRecvFlowerData", [
            { no: 13, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 5, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 13:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                case /* optional uint32 uid */ 9:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> flower_num_map */ 14:
                    this.binaryReadMap14(message.flowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerRecvFlowerData.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ProfilePicture profile_picture = 13; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional string nickname = 5; */
        if (message.nickname !== undefined)
            writer.tag(5, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional uint32 uid = 9; */
        if (message.uid !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> flower_num_map = 14; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.flowerNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerRecvFlowerData
 */
exports.PlantFlowerRecvFlowerData = new PlantFlowerRecvFlowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetRecvFlowerListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetRecvFlowerListRsp", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "recv_flower_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PlantFlowerRecvFlowerData }
        ]);
    }
    create(value) {
        const message = { recvFlowerList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerRecvFlowerData recv_flower_list */ 4:
                    message.recvFlowerList.push(exports.PlantFlowerRecvFlowerData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.PlantFlowerRecvFlowerData recv_flower_list = 4; */
        for (let i = 0; i < message.recvFlowerList.length; i++)
            exports.PlantFlowerRecvFlowerData.internalBinaryWrite(message.recvFlowerList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetRecvFlowerListRsp
 */
exports.PlantFlowerGetRecvFlowerListRsp = new PlantFlowerGetRecvFlowerListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerHaveRecvFlowerNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerHaveRecvFlowerNotify", [
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerHaveRecvFlowerNotify
 */
exports.PlantFlowerHaveRecvFlowerNotify = new PlantFlowerHaveRecvFlowerNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptGiveFlowerReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptGiveFlowerReq", [
            { no: 2, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 2:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 2; */
        if (message.scheduleId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerReq
 */
exports.PlantFlowerAcceptGiveFlowerReq = new PlantFlowerAcceptGiveFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptFlowerResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptFlowerResultInfo", [
            { no: 4, name: "unaccept_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "accept_flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { unacceptFlowerNumMap: {}, acceptFlowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> unaccept_flower_num_map */ 4:
                    this.binaryReadMap4(message.unacceptFlowerNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 7:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> accept_flower_num_map */ 10:
                    this.binaryReadMap10(message.acceptFlowerNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerAcceptFlowerResultInfo.unaccept_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerAcceptFlowerResultInfo.accept_flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> unaccept_flower_num_map = 4; */
        for (let k of Object.keys(message.unacceptFlowerNumMap))
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.unacceptFlowerNumMap[k]).join();
        /* optional uint32 uid = 7; */
        if (message.uid !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> accept_flower_num_map = 10; */
        for (let k of Object.keys(message.acceptFlowerNumMap))
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.acceptFlowerNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptFlowerResultInfo
 */
exports.PlantFlowerAcceptFlowerResultInfo = new PlantFlowerAcceptFlowerResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptGiveFlowerRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptGiveFlowerRsp", [
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "accept_flower_result_info", kind: "message", T: () => exports.PlantFlowerAcceptFlowerResultInfo },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info */ 15:
                    message.acceptFlowerResultInfo = exports.PlantFlowerAcceptFlowerResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptFlowerResultInfo);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info = 15; */
        if (message.acceptFlowerResultInfo)
            exports.PlantFlowerAcceptFlowerResultInfo.internalBinaryWrite(message.acceptFlowerResultInfo, writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptGiveFlowerRsp
 */
exports.PlantFlowerAcceptGiveFlowerRsp = new PlantFlowerAcceptGiveFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptAllGiveFlowerReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq", [
            { no: 11, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 11:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 11; */
        if (message.scheduleId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerReq
 */
exports.PlantFlowerAcceptAllGiveFlowerReq = new PlantFlowerAcceptAllGiveFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerAcceptAllGiveFlowerRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp", [
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "accept_flower_result_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PlantFlowerAcceptFlowerResultInfo }
        ]);
    }
    create(value) {
        const message = { acceptFlowerResultInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list */ 13:
                    message.acceptFlowerResultInfoList.push(exports.PlantFlowerAcceptFlowerResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.PlantFlowerAcceptFlowerResultInfo accept_flower_result_info_list = 13; */
        for (let i = 0; i < message.acceptFlowerResultInfoList.length; i++)
            exports.PlantFlowerAcceptFlowerResultInfo.internalBinaryWrite(message.acceptFlowerResultInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerAcceptAllGiveFlowerRsp
 */
exports.PlantFlowerAcceptAllGiveFlowerRsp = new PlantFlowerAcceptAllGiveFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetCanGiveFriendFlowerReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerReq
 */
exports.PlantFlowerGetCanGiveFriendFlowerReq = new PlantFlowerGetCanGiveFriendFlowerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerGetCanGiveFriendFlowerRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp", [
            { no: 6, name: "flower_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { flowerNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> flower_num_map */ 6:
                    this.binaryReadMap6(message.flowerNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp.flower_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> flower_num_map = 6; */
        for (let k of Object.keys(message.flowerNumMap))
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.flowerNumMap[k]).join();
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerGetCanGiveFriendFlowerRsp
 */
exports.PlantFlowerGetCanGiveFriendFlowerRsp = new PlantFlowerGetCanGiveFriendFlowerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerEditFlowerCombinationReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerEditFlowerCombinationReq", [
            { no: 10, name: "flower_combination_info", kind: "message", T: () => define_4.CustomGadgetTreeInfo },
            { no: 14, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CustomGadgetTreeInfo flower_combination_info */ 10:
                    message.flowerCombinationInfo = define_4.CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.flowerCombinationInfo);
                    break;
                case /* optional uint32 entity_id */ 14:
                    message.entityId = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 9:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.CustomGadgetTreeInfo flower_combination_info = 10; */
        if (message.flowerCombinationInfo)
            define_4.CustomGadgetTreeInfo.internalBinaryWrite(message.flowerCombinationInfo, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 entity_id = 14; */
        if (message.entityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional uint32 schedule_id = 9; */
        if (message.scheduleId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationReq
 */
exports.PlantFlowerEditFlowerCombinationReq = new PlantFlowerEditFlowerCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerEditFlowerCombinationRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PlantFlowerEditFlowerCombinationRsp", [
            { no: 13, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 13:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 13; */
        if (message.scheduleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlantFlowerEditFlowerCombinationRsp
 */
exports.PlantFlowerEditFlowerCombinationRsp = new PlantFlowerEditFlowerCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameRecord", [
            { no: 9, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_unlock */ 9:
                    message.isUnlock = reader.bool();
                    break;
                case /* optional uint32 max_score */ 11:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 max_combo */ 6:
                    message.maxCombo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_unlock = 9; */
        if (message.isUnlock !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isUnlock);
        /* optional uint32 max_score = 11; */
        if (message.maxScore !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional uint32 max_combo = 6; */
        if (message.maxCombo !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.maxCombo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameRecord
 */
exports.MusicGameRecord = new MusicGameRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameActivityDetailInfo", [
            { no: 4, name: "ugc_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => cmd_ugc_1.UgcMusicBriefInfo },
            { no: 7, name: "ugc_search_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => cmd_ugc_1.UgcMusicBriefInfo },
            { no: 8, name: "music_game_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.MusicGameRecord } }
        ]);
    }
    create(value) {
        const message = { ugcRecordList: [], ugcSearchList: [], musicGameRecordMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.UgcMusicBriefInfo ugc_record_list */ 4:
                    message.ugcRecordList.push(cmd_ugc_1.UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.UgcMusicBriefInfo ugc_search_list */ 7:
                    message.ugcSearchList.push(cmd_ugc_1.UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, com.midnights.game.MusicGameRecord> music_game_record_map */ 8:
                    this.binaryReadMap8(message.musicGameRecordMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap8(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.MusicGameRecord.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MusicGameActivityDetailInfo.music_game_record_map");
            }
        }
        map[key ?? 0] = val ?? exports.MusicGameRecord.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.UgcMusicBriefInfo ugc_record_list = 4; */
        for (let i = 0; i < message.ugcRecordList.length; i++)
            cmd_ugc_1.UgcMusicBriefInfo.internalBinaryWrite(message.ugcRecordList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.UgcMusicBriefInfo ugc_search_list = 7; */
        for (let i = 0; i < message.ugcSearchList.length; i++)
            cmd_ugc_1.UgcMusicBriefInfo.internalBinaryWrite(message.ugcSearchList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.MusicGameRecord> music_game_record_map = 8; */
        for (let k of Object.keys(message.musicGameRecordMap)) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.MusicGameRecord.internalBinaryWrite(message.musicGameRecordMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameActivityDetailInfo
 */
exports.MusicGameActivityDetailInfo = new MusicGameActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameSettleReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameSettleReq", [
            { no: 384, name: "button_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 795, name: "delay", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "note_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "score_rating", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "restart_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 422, name: "is_custom_delay", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1058, name: "is_full_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 409, name: "speed", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 3, name: "is_save_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "star_rating", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1953, name: "volume", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "correct_hit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1285, name: "is_custom_speed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { buttonList: [], noteList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 button_list */ 384:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buttonList.push(reader.uint32());
                    else
                        message.buttonList.push(reader.uint32());
                    break;
                case /* optional uint32 delay */ 795:
                    message.delay = reader.uint32();
                    break;
                case /* repeated uint32 note_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.noteList.push(reader.uint32());
                    else
                        message.noteList.push(reader.uint32());
                    break;
                case /* optional uint32 score_rating */ 15:
                    message.scoreRating = reader.uint32();
                    break;
                case /* optional uint32 score */ 9:
                    message.score = reader.uint32();
                    break;
                case /* optional uint64 ugc_guid */ 6:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 restart_times */ 13:
                    message.restartTimes = reader.uint32();
                    break;
                case /* optional bool is_custom_delay */ 422:
                    message.isCustomDelay = reader.bool();
                    break;
                case /* optional uint32 max_combo */ 5:
                    message.maxCombo = reader.uint32();
                    break;
                case /* optional uint32 is_full_combo */ 1058:
                    message.isFullCombo = reader.uint32();
                    break;
                case /* optional float speed */ 409:
                    message.speed = reader.float();
                    break;
                case /* optional bool is_save_score */ 3:
                    message.isSaveScore = reader.bool();
                    break;
                case /* optional uint32 combo */ 1:
                    message.combo = reader.uint32();
                    break;
                case /* optional uint32 music_basic_id */ 7:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional uint32 star_rating */ 2:
                    message.starRating = reader.uint32();
                    break;
                case /* optional uint32 volume */ 1953:
                    message.volume = reader.uint32();
                    break;
                case /* optional uint32 correct_hit */ 14:
                    message.correctHit = reader.uint32();
                    break;
                case /* optional bool is_custom_speed */ 1285:
                    message.isCustomSpeed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 button_list = 384; */
        if (message.buttonList.length) {
            writer.tag(384, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.buttonList.length; i++)
                writer.uint32(message.buttonList[i]);
            writer.join();
        }
        /* optional uint32 delay = 795; */
        if (message.delay !== undefined)
            writer.tag(795, runtime_1.WireType.Varint).uint32(message.delay);
        /* repeated uint32 note_list = 4; */
        if (message.noteList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.noteList.length; i++)
                writer.uint32(message.noteList[i]);
            writer.join();
        }
        /* optional uint32 score_rating = 15; */
        if (message.scoreRating !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.scoreRating);
        /* optional uint32 score = 9; */
        if (message.score !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.score);
        /* optional uint64 ugc_guid = 6; */
        if (message.ugcGuid !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint64(message.ugcGuid);
        /* optional uint32 restart_times = 13; */
        if (message.restartTimes !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.restartTimes);
        /* optional bool is_custom_delay = 422; */
        if (message.isCustomDelay !== undefined)
            writer.tag(422, runtime_1.WireType.Varint).bool(message.isCustomDelay);
        /* optional uint32 max_combo = 5; */
        if (message.maxCombo !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.maxCombo);
        /* optional uint32 is_full_combo = 1058; */
        if (message.isFullCombo !== undefined)
            writer.tag(1058, runtime_1.WireType.Varint).uint32(message.isFullCombo);
        /* optional float speed = 409; */
        if (message.speed !== undefined)
            writer.tag(409, runtime_1.WireType.Bit32).float(message.speed);
        /* optional bool is_save_score = 3; */
        if (message.isSaveScore !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isSaveScore);
        /* optional uint32 combo = 1; */
        if (message.combo !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.combo);
        /* optional uint32 music_basic_id = 7; */
        if (message.musicBasicId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        /* optional uint32 star_rating = 2; */
        if (message.starRating !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.starRating);
        /* optional uint32 volume = 1953; */
        if (message.volume !== undefined)
            writer.tag(1953, runtime_1.WireType.Varint).uint32(message.volume);
        /* optional uint32 correct_hit = 14; */
        if (message.correctHit !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.correctHit);
        /* optional bool is_custom_speed = 1285; */
        if (message.isCustomSpeed !== undefined)
            writer.tag(1285, runtime_1.WireType.Varint).bool(message.isCustomSpeed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameSettleReq
 */
exports.MusicGameSettleReq = new MusicGameSettleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameSettleRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameSettleRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_unlock_next_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 music_basic_id */ 5:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 6:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_unlock_next_level */ 2:
                    message.isUnlockNextLevel = reader.bool();
                    break;
                case /* optional uint64 ugc_guid */ 10:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 music_basic_id = 5; */
        if (message.musicBasicId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        /* optional bool is_new_record = 6; */
        if (message.isNewRecord !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_unlock_next_level = 2; */
        if (message.isUnlockNextLevel !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isUnlockNextLevel);
        /* optional uint64 ugc_guid = 10; */
        if (message.ugcGuid !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameSettleRsp
 */
exports.MusicGameSettleRsp = new MusicGameSettleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameStartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameStartReq", [
            { no: 2, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_save_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 2:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional bool is_save_score */ 11:
                    message.isSaveScore = reader.bool();
                    break;
                case /* optional uint64 ugc_guid */ 3:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 music_basic_id = 2; */
        if (message.musicBasicId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        /* optional bool is_save_score = 11; */
        if (message.isSaveScore !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isSaveScore);
        /* optional uint64 ugc_guid = 3; */
        if (message.ugcGuid !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameStartReq
 */
exports.MusicGameStartReq = new MusicGameStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MusicGameStartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MusicGameStartRsp", [
            { no: 4, name: "music_basic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 music_basic_id */ 4:
                    message.musicBasicId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 ugc_guid */ 15:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 music_basic_id = 4; */
        if (message.musicBasicId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.musicBasicId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint64 ugc_guid = 15; */
        if (message.ugcGuid !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MusicGameStartRsp
 */
exports.MusicGameStartRsp = new MusicGameStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueAvatarInfo", [
            { no: 5, name: "is_onstage", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_alive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_onstage */ 5:
                    message.isOnstage = reader.bool();
                    break;
                case /* optional bool is_alive */ 3:
                    message.isAlive = reader.bool();
                    break;
                case /* optional uint32 avatar_id */ 14:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_onstage = 5; */
        if (message.isOnstage !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isOnstage);
        /* optional bool is_alive = 3; */
        if (message.isAlive !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isAlive);
        /* optional uint32 avatar_id = 14; */
        if (message.avatarId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueAvatarInfo
 */
exports.RogueAvatarInfo = new RogueAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueShowAvatarTeamInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueShowAvatarTeamInfo", [
            { no: 12, name: "avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueAvatarInfo }
        ]);
    }
    create(value) {
        const message = { avatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueAvatarInfo avatar_list */ 12:
                    message.avatarList.push(exports.RogueAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueAvatarInfo avatar_list = 12; */
        for (let i = 0; i < message.avatarList.length; i++)
            exports.RogueAvatarInfo.internalBinaryWrite(message.avatarList[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueShowAvatarTeamInfo
 */
exports.RogueShowAvatarTeamInfo = new RogueShowAvatarTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeShikigamiRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeShikigamiRecord", [
            { no: 6, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 6:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 level */ 3:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 6; */
        if (message.id !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.id);
        /* optional uint32 level = 3; */
        if (message.level !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeShikigamiRecord
 */
exports.RoguelikeShikigamiRecord = new RoguelikeShikigamiRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueEffectRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueEffectRecord", [
            { no: 6, name: "source_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "extra_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { extraParamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 source_id */ 6:
                    message.sourceId = reader.uint32();
                    break;
                case /* repeated uint32 extra_param_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.extraParamList.push(reader.uint32());
                    else
                        message.extraParamList.push(reader.uint32());
                    break;
                case /* optional uint32 count */ 10:
                    message.count = reader.uint32();
                    break;
                case /* optional bool is_new */ 5:
                    message.isNew = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 source_id = 6; */
        if (message.sourceId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.sourceId);
        /* repeated uint32 extra_param_list = 9; */
        if (message.extraParamList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.extraParamList.length; i++)
                writer.uint32(message.extraParamList[i]);
            writer.join();
        }
        /* optional uint32 count = 10; */
        if (message.count !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.count);
        /* optional bool is_new = 5; */
        if (message.isNew !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isNew);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueEffectRecord
 */
exports.RogueEffectRecord = new RogueEffectRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRuneRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeRuneRecord", [
            { no: 14, name: "left_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "max_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_count */ 14:
                    message.leftCount = reader.uint32();
                    break;
                case /* optional uint32 rune_id */ 6:
                    message.runeId = reader.uint32();
                    break;
                case /* optional uint32 max_count */ 4:
                    message.maxCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 left_count = 14; */
        if (message.leftCount !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.leftCount);
        /* optional uint32 rune_id = 6; */
        if (message.runeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.runeId);
        /* optional uint32 max_count = 4; */
        if (message.maxCount !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.maxCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRuneRecord
 */
exports.RoguelikeRuneRecord = new RoguelikeRuneRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueStageInfo", [
            { no: 2, name: "avatar_team", kind: "message", T: () => exports.RogueShowAvatarTeamInfo },
            { no: 5, name: "is_passed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 205, name: "revise_monster_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RoguelikeRuneRecord },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1409, name: "cached_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_taken_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_in_combat", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "cached_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "explore_cell_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_explored", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "max_passed_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { runeRecordList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueShowAvatarTeamInfo avatar_team */ 2:
                    message.avatarTeam = exports.RogueShowAvatarTeamInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarTeam);
                    break;
                case /* optional bool is_passed */ 5:
                    message.isPassed = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 revise_monster_level */ 205:
                    message.reviseMonsterLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 6:
                    message.runeRecordList.push(exports.RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 cur_level */ 4:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional uint32 cached_coin_c_num */ 1409:
                    message.cachedCoinCNum = reader.uint32();
                    break;
                case /* optional bool is_taken_reward */ 11:
                    message.isTakenReward = reader.bool();
                    break;
                case /* optional bool is_in_combat */ 12:
                    message.isInCombat = reader.bool();
                    break;
                case /* optional uint32 cached_coin_b_num */ 14:
                    message.cachedCoinBNum = reader.uint32();
                    break;
                case /* optional uint32 explore_cell_num */ 15:
                    message.exploreCellNum = reader.uint32();
                    break;
                case /* optional uint32 coin_c_num */ 8:
                    message.coinCNum = reader.uint32();
                    break;
                case /* optional bool is_explored */ 9:
                    message.isExplored = reader.bool();
                    break;
                case /* optional uint32 max_passed_level */ 3:
                    message.maxPassedLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.RogueShowAvatarTeamInfo avatar_team = 2; */
        if (message.avatarTeam)
            exports.RogueShowAvatarTeamInfo.internalBinaryWrite(message.avatarTeam, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_passed = 5; */
        if (message.isPassed !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isPassed);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 revise_monster_level = 205; */
        if (message.reviseMonsterLevel !== undefined)
            writer.tag(205, runtime_1.WireType.Varint).uint32(message.reviseMonsterLevel);
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            exports.RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 cur_level = 4; */
        if (message.curLevel !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.curLevel);
        /* optional uint32 cached_coin_c_num = 1409; */
        if (message.cachedCoinCNum !== undefined)
            writer.tag(1409, runtime_1.WireType.Varint).uint32(message.cachedCoinCNum);
        /* optional bool is_taken_reward = 11; */
        if (message.isTakenReward !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isTakenReward);
        /* optional bool is_in_combat = 12; */
        if (message.isInCombat !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isInCombat);
        /* optional uint32 cached_coin_b_num = 14; */
        if (message.cachedCoinBNum !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.cachedCoinBNum);
        /* optional uint32 explore_cell_num = 15; */
        if (message.exploreCellNum !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.exploreCellNum);
        /* optional uint32 coin_c_num = 8; */
        if (message.coinCNum !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.coinCNum);
        /* optional bool is_explored = 9; */
        if (message.isExplored !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isExplored);
        /* optional uint32 max_passed_level = 3; */
        if (message.maxPassedLevel !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.maxPassedLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueStageInfo
 */
exports.RogueStageInfo = new RogueStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeDungeonActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeDungeonActivityDetailInfo", [
            { no: 8, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueStageInfo },
            { no: 5, name: "shikigami_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RoguelikeShikigamiRecord },
            { no: 14, name: "equipped_rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "content_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { stageList: [], shikigamiList: [], equippedRuneList: [], runeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueStageInfo stage_list */ 8:
                    message.stageList.push(exports.RogueStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RoguelikeShikigamiRecord shikigami_list */ 5:
                    message.shikigamiList.push(exports.RoguelikeShikigamiRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 equipped_rune_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equippedRuneList.push(reader.uint32());
                    else
                        message.equippedRuneList.push(reader.uint32());
                    break;
                case /* optional uint32 content_close_time */ 6:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 10:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated uint32 rune_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueStageInfo stage_list = 8; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.RogueStageInfo.internalBinaryWrite(message.stageList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RoguelikeShikigamiRecord shikigami_list = 5; */
        for (let i = 0; i < message.shikigamiList.length; i++)
            exports.RoguelikeShikigamiRecord.internalBinaryWrite(message.shikigamiList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 equipped_rune_list = 14; */
        if (message.equippedRuneList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.equippedRuneList.length; i++)
                writer.uint32(message.equippedRuneList[i]);
            writer.join();
        }
        /* optional uint32 content_close_time = 6; */
        if (message.contentCloseTime !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.contentCloseTime);
        /* optional bool is_content_closed = 10; */
        if (message.isContentClosed !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated uint32 rune_list = 2; */
        if (message.runeList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.runeList.length; i++)
                writer.uint32(message.runeList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeDungeonActivityDetailInfo
 */
exports.RoguelikeDungeonActivityDetailInfo = new RoguelikeDungeonActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoRoguelikeDungeonCardGachaReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DoRoguelikeDungeonCardGachaReq", [
            { no: 13, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 13:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 6:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 13; */
        if (message.dungeonId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 6; */
        if (message.cellId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaReq
 */
exports.DoRoguelikeDungeonCardGachaReq = new DoRoguelikeDungeonCardGachaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoRoguelikeDungeonCardGachaRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DoRoguelikeDungeonCardGachaRsp", [
            { no: 8, name: "is_can_refresh", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_can_refresh */ 8:
                    message.isCanRefresh = reader.bool();
                    break;
                case /* repeated uint32 card_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cardList.push(reader.uint32());
                    else
                        message.cardList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_can_refresh = 8; */
        if (message.isCanRefresh !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isCanRefresh);
        /* repeated uint32 card_list = 15; */
        if (message.cardList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.cardList.length; i++)
                writer.uint32(message.cardList[i]);
            writer.join();
        }
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoRoguelikeDungeonCardGachaRsp
 */
exports.DoRoguelikeDungeonCardGachaRsp = new DoRoguelikeDungeonCardGachaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRoguelikeDungeonCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RefreshRoguelikeDungeonCardReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRoguelikeDungeonCardReq
 */
exports.RefreshRoguelikeDungeonCardReq = new RefreshRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRoguelikeDungeonCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RefreshRoguelikeDungeonCardRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "res_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { resCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 res_card_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.resCardList.push(reader.uint32());
                    else
                        message.resCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 res_card_list = 9; */
        if (message.resCardList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.resCardList.length; i++)
                writer.uint32(message.resCardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRoguelikeDungeonCardRsp
 */
exports.RefreshRoguelikeDungeonCardRsp = new RefreshRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRoguelikeDungeonCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectRoguelikeDungeonCardReq", [
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectRoguelikeDungeonCardReq
 */
exports.SelectRoguelikeDungeonCardReq = new SelectRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SelectRoguelikeDungeonCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SelectRoguelikeDungeonCardRsp", [
            { no: 9, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 9:
                    message.cardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 card_id = 9; */
        if (message.cardId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.cardId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SelectRoguelikeDungeonCardRsp
 */
exports.SelectRoguelikeDungeonCardRsp = new SelectRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipRoguelikeRuneReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EquipRoguelikeRuneReq", [
            { no: 3, name: "rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { runeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 rune_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 rune_list = 3; */
        if (message.runeList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.runeList.length; i++)
                writer.uint32(message.runeList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EquipRoguelikeRuneReq
 */
exports.EquipRoguelikeRuneReq = new EquipRoguelikeRuneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EquipRoguelikeRuneRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EquipRoguelikeRuneRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { runeList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 rune_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 rune_list = 1; */
        if (message.runeList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.runeList.length; i++)
                writer.uint32(message.runeList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EquipRoguelikeRuneRsp
 */
exports.EquipRoguelikeRuneRsp = new EquipRoguelikeRuneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeRuneReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeRuneReq", [
            { no: 8, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rune_id */ 8:
                    message.runeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 rune_id = 8; */
        if (message.runeId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.runeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeRuneReq
 */
exports.TriggerRoguelikeRuneReq = new TriggerRoguelikeRuneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeRuneRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeRuneRsp", [
            { no: 4, name: "available_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "rune_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 available_count */ 4:
                    message.availableCount = reader.uint32();
                    break;
                case /* optional uint32 rune_id */ 14:
                    message.runeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 available_count = 4; */
        if (message.availableCount !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.availableCount);
        /* optional uint32 rune_id = 14; */
        if (message.runeId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.runeId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeRuneRsp
 */
exports.TriggerRoguelikeRuneRsp = new TriggerRoguelikeRuneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TriggerRoguelikeCurseNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TriggerRoguelikeCurseNotify", [
            { no: 14, name: "effect_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "curse_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_trigger_curse", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "curse_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { effectParamList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 effect_param_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.effectParamList.push(reader.uint32());
                    else
                        message.effectParamList.push(reader.uint32());
                    break;
                case /* optional uint32 curse_group_id */ 9:
                    message.curseGroupId = reader.uint32();
                    break;
                case /* optional bool is_trigger_curse */ 13:
                    message.isTriggerCurse = reader.bool();
                    break;
                case /* optional uint32 curse_level */ 3:
                    message.curseLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 effect_param_list = 14; */
        if (message.effectParamList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.effectParamList.length; i++)
                writer.uint32(message.effectParamList[i]);
            writer.join();
        }
        /* optional uint32 curse_group_id = 9; */
        if (message.curseGroupId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.curseGroupId);
        /* optional bool is_trigger_curse = 13; */
        if (message.isTriggerCurse !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isTriggerCurse);
        /* optional uint32 curse_level = 3; */
        if (message.curseLevel !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.curseLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TriggerRoguelikeCurseNotify
 */
exports.TriggerRoguelikeCurseNotify = new TriggerRoguelikeCurseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeRoguelikeShikigamiReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.UpgradeRoguelikeShikigamiReq", [
            { no: 6, name: "upgrade_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "shikigami_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 upgrade_level */ 6:
                    message.upgradeLevel = reader.uint32();
                    break;
                case /* optional uint32 shikigami_group_id */ 15:
                    message.shikigamiGroupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 upgrade_level = 6; */
        if (message.upgradeLevel !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.upgradeLevel);
        /* optional uint32 shikigami_group_id = 15; */
        if (message.shikigamiGroupId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.shikigamiGroupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpgradeRoguelikeShikigamiReq
 */
exports.UpgradeRoguelikeShikigamiReq = new UpgradeRoguelikeShikigamiReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpgradeRoguelikeShikigamiRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.UpgradeRoguelikeShikigamiRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "shikigami_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 shikigami_group_id */ 14:
                    message.shikigamiGroupId = reader.uint32();
                    break;
                case /* optional uint32 cur_level */ 4:
                    message.curLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 shikigami_group_id = 14; */
        if (message.shikigamiGroupId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.shikigamiGroupId);
        /* optional uint32 cur_level = 4; */
        if (message.curLevel !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.curLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpgradeRoguelikeShikigamiRsp
 */
exports.UpgradeRoguelikeShikigamiRsp = new UpgradeRoguelikeShikigamiRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSelectAvatarAndEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq", [
            { no: 14, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { onstageAvatarGuidList: [], backstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 onstage_avatar_guid_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint64 onstage_avatar_guid_list = 14; */
        if (message.onstageAvatarGuidList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
                writer.uint64(message.onstageAvatarGuidList[i]);
            writer.join();
        }
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated uint64 backstage_avatar_guid_list = 11; */
        if (message.backstageAvatarGuidList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
                writer.uint64(message.backstageAvatarGuidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonReq
 */
exports.RoguelikeSelectAvatarAndEnterDungeonReq = new RoguelikeSelectAvatarAndEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSelectAvatarAndEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSelectAvatarAndEnterDungeonRsp
 */
exports.RoguelikeSelectAvatarAndEnterDungeonRsp = new RoguelikeSelectAvatarAndEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeGiveUpReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeGiveUpReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeGiveUpReq
 */
exports.RoguelikeGiveUpReq = new RoguelikeGiveUpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeGiveUpRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeGiveUpRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "settle_info", kind: "message", oneof: "info", T: () => exports.RoguelikeDungeonSettleInfo }
        ]);
    }
    create(value) {
        const message = { info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* com.midnights.game.RoguelikeDungeonSettleInfo settle_info */ 8:
                    message.info = {
                        oneofKind: "settleInfo",
                        settleInfo: exports.RoguelikeDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.info.settleInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* com.midnights.game.RoguelikeDungeonSettleInfo settle_info = 8; */
        if (message.info.oneofKind === "settleInfo")
            exports.RoguelikeDungeonSettleInfo.internalBinaryWrite(message.info.settleInfo, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeGiveUpRsp
 */
exports.RoguelikeGiveUpRsp = new RoguelikeGiveUpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeTakeStageFirstPassRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeTakeStageFirstPassRewardReq", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardReq
 */
exports.RoguelikeTakeStageFirstPassRewardReq = new RoguelikeTakeStageFirstPassRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeTakeStageFirstPassRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeTakeStageFirstPassRewardRsp
 */
exports.RoguelikeTakeStageFirstPassRewardRsp = new RoguelikeTakeStageFirstPassRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiveUpRoguelikeDungeonCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GiveUpRoguelikeDungeonCardReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardReq
 */
exports.GiveUpRoguelikeDungeonCardReq = new GiveUpRoguelikeDungeonCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GiveUpRoguelikeDungeonCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GiveUpRoguelikeDungeonCardRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GiveUpRoguelikeDungeonCardRsp
 */
exports.GiveUpRoguelikeDungeonCardRsp = new GiveUpRoguelikeDungeonCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueCellInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueCellInfo", [
            { no: 14, name: "cell_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "cell_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.RogueCellState", RogueCellState] }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cell_config_id */ 14:
                    message.cellConfigId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 9:
                    message.cellId = reader.uint32();
                    break;
                case /* optional uint32 cell_type */ 13:
                    message.cellType = reader.uint32();
                    break;
                case /* optional com.midnights.game.RogueCellState state */ 10:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cell_config_id = 14; */
        if (message.cellConfigId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.cellConfigId);
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 9; */
        if (message.cellId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.cellId);
        /* optional uint32 cell_type = 13; */
        if (message.cellType !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.cellType);
        /* optional com.midnights.game.RogueCellState state = 10; */
        if (message.state !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueCellInfo
 */
exports.RogueCellInfo = new RogueCellInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRoguelikeDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterRoguelikeDungeonNotify", [
            { no: 14, name: "is_mist_clear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "dungeon_weight_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rune_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RoguelikeRuneRecord },
            { no: 9, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 205, name: "is_first_enter", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "explored_cell_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cell_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.RogueCellInfo } },
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1999, name: "refresh_cost_item_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "bonus_resource_prop", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 1541, name: "revise_monster_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "cur_cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "refresh_cost_item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { runeRecordList: [], onstageAvatarGuidList: [], exploredCellList: [], cellInfoMap: {}, backstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_mist_clear */ 14:
                    message.isMistClear = reader.bool();
                    break;
                case /* optional uint32 dungeon_weight_config_id */ 2:
                    message.dungeonWeightConfigId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 6:
                    message.runeRecordList.push(exports.RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional bool is_first_enter */ 205:
                    message.isFirstEnter = reader.bool();
                    break;
                case /* repeated uint32 explored_cell_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploredCellList.push(reader.uint32());
                    else
                        message.exploredCellList.push(reader.uint32());
                    break;
                case /* map<uint32, com.midnights.game.RogueCellInfo> cell_info_map */ 11:
                    this.binaryReadMap11(message.cellInfoMap, reader, options);
                    break;
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 refresh_cost_item_count */ 1999:
                    message.refreshCostItemCount = reader.uint32();
                    break;
                case /* optional float bonus_resource_prop */ 13:
                    message.bonusResourceProp = reader.float();
                    break;
                case /* optional uint32 revise_monster_level */ 1541:
                    message.reviseMonsterLevel = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 cur_cell_id */ 12:
                    message.curCellId = reader.uint32();
                    break;
                case /* optional uint32 refresh_cost_item_id */ 7:
                    message.refreshCostItemId = reader.uint32();
                    break;
                case /* optional uint32 cur_level */ 8:
                    message.curLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap11(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.RogueCellInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.EnterRoguelikeDungeonNotify.cell_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.RogueCellInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_mist_clear = 14; */
        if (message.isMistClear !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isMistClear);
        /* optional uint32 dungeon_weight_config_id = 2; */
        if (message.dungeonWeightConfigId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.dungeonWeightConfigId);
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 6; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            exports.RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint64 onstage_avatar_guid_list = 9; */
        if (message.onstageAvatarGuidList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
                writer.uint64(message.onstageAvatarGuidList[i]);
            writer.join();
        }
        /* optional bool is_first_enter = 205; */
        if (message.isFirstEnter !== undefined)
            writer.tag(205, runtime_1.WireType.Varint).bool(message.isFirstEnter);
        /* repeated uint32 explored_cell_list = 3; */
        if (message.exploredCellList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exploredCellList.length; i++)
                writer.uint32(message.exploredCellList[i]);
            writer.join();
        }
        /* map<uint32, com.midnights.game.RogueCellInfo> cell_info_map = 11; */
        for (let k of Object.keys(message.cellInfoMap)) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.RogueCellInfo.internalBinaryWrite(message.cellInfoMap[k], writer, options);
            writer.join().join();
        }
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 refresh_cost_item_count = 1999; */
        if (message.refreshCostItemCount !== undefined)
            writer.tag(1999, runtime_1.WireType.Varint).uint32(message.refreshCostItemCount);
        /* optional float bonus_resource_prop = 13; */
        if (message.bonusResourceProp !== undefined)
            writer.tag(13, runtime_1.WireType.Bit32).float(message.bonusResourceProp);
        /* optional uint32 revise_monster_level = 1541; */
        if (message.reviseMonsterLevel !== undefined)
            writer.tag(1541, runtime_1.WireType.Varint).uint32(message.reviseMonsterLevel);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated uint64 backstage_avatar_guid_list = 10; */
        if (message.backstageAvatarGuidList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
                writer.uint64(message.backstageAvatarGuidList[i]);
            writer.join();
        }
        /* optional uint32 cur_cell_id = 12; */
        if (message.curCellId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.curCellId);
        /* optional uint32 refresh_cost_item_id = 7; */
        if (message.refreshCostItemId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.refreshCostItemId);
        /* optional uint32 cur_level = 8; */
        if (message.curLevel !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.curLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRoguelikeDungeonNotify
 */
exports.EnterRoguelikeDungeonNotify = new EnterRoguelikeDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueEliteCellChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueEliteCellChallengeReq", [
            { no: 1, name: "difficulty", kind: "enum", opt: true, T: () => ["com.midnights.game.RogueEliteCellDifficultyType", RogueEliteCellDifficultyType] },
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueEliteCellDifficultyType difficulty */ 1:
                    message.difficulty = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 4:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.RogueEliteCellDifficultyType difficulty = 1; */
        if (message.difficulty !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.difficulty);
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 4; */
        if (message.cellId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueEliteCellChallengeReq
 */
exports.StartRogueEliteCellChallengeReq = new StartRogueEliteCellChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueEliteCellChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueEliteCellChallengeRsp", [
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 9:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 9; */
        if (message.cellId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueEliteCellChallengeRsp
 */
exports.StartRogueEliteCellChallengeRsp = new StartRogueEliteCellChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueNormalCellChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueNormalCellChallengeReq", [
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 8:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 8; */
        if (message.cellId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueNormalCellChallengeReq
 */
exports.StartRogueNormalCellChallengeReq = new StartRogueNormalCellChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueNormalCellChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueNormalCellChallengeRsp", [
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 2:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 2; */
        if (message.cellId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueNormalCellChallengeRsp
 */
exports.StartRogueNormalCellChallengeRsp = new StartRogueNormalCellChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueCellUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueCellUpdateNotify", [
            { no: 7, name: "cell_info", kind: "message", T: () => exports.RogueCellInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueCellInfo cell_info */ 7:
                    message.cellInfo = exports.RogueCellInfo.internalBinaryRead(reader, reader.uint32(), options, message.cellInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.RogueCellInfo cell_info = 7; */
        if (message.cellInfo)
            exports.RogueCellInfo.internalBinaryWrite(message.cellInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueCellUpdateNotify
 */
exports.RogueCellUpdateNotify = new RogueCellUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDungeonPlayerCellChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDungeonPlayerCellChangeNotify", [
            { no: 10, name: "old_cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 old_cell_id */ 10:
                    message.oldCellId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 7:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 old_cell_id = 10; */
        if (message.oldCellId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.oldCellId);
        /* optional uint32 cell_id = 7; */
        if (message.cellId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDungeonPlayerCellChangeNotify
 */
exports.RogueDungeonPlayerCellChangeNotify = new RogueDungeonPlayerCellChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueHealAvatarsReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueHealAvatarsReq", [
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 3:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 3; */
        if (message.cellId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueHealAvatarsReq
 */
exports.RogueHealAvatarsReq = new RogueHealAvatarsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueHealAvatarsRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueHealAvatarsRsp", [
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cell_id */ 14:
                    message.cellId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 cell_id = 14; */
        if (message.cellId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.cellId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueHealAvatarsRsp
 */
exports.RogueHealAvatarsRsp = new RogueHealAvatarsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueResumeDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueResumeDungeonReq", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueResumeDungeonReq
 */
exports.RogueResumeDungeonReq = new RogueResumeDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueResumeDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueResumeDungeonRsp", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueResumeDungeonRsp
 */
exports.RogueResumeDungeonRsp = new RogueResumeDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClearRoguelikeCurseNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ClearRoguelikeCurseNotify", [
            { no: 10, name: "clear_curse_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 11, name: "is_clear_all", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_curse_all_clear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { clearCurseMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> clear_curse_map */ 10:
                    this.binaryReadMap10(message.clearCurseMap, reader, options);
                    break;
                case /* optional bool is_clear_all */ 11:
                    message.isClearAll = reader.bool();
                    break;
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional bool is_curse_all_clear */ 1:
                    message.isCurseAllClear = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap10(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ClearRoguelikeCurseNotify.clear_curse_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> clear_curse_map = 10; */
        for (let k of Object.keys(message.clearCurseMap))
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.clearCurseMap[k]).join();
        /* optional bool is_clear_all = 11; */
        if (message.isClearAll !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isClearAll);
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.cardId);
        /* optional bool is_curse_all_clear = 1; */
        if (message.isCurseAllClear !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isCurseAllClear);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClearRoguelikeCurseNotify
 */
exports.ClearRoguelikeCurseNotify = new ClearRoguelikeCurseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeCardGachaNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeCardGachaNotify", [
            { no: 10, name: "card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_can_refresh", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 card_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.cardList.push(reader.uint32());
                    else
                        message.cardList.push(reader.uint32());
                    break;
                case /* optional bool is_can_refresh */ 11:
                    message.isCanRefresh = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 card_list = 10; */
        if (message.cardList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.cardList.length; i++)
                writer.uint32(message.cardList[i]);
            writer.join();
        }
        /* optional bool is_can_refresh = 11; */
        if (message.isCanRefresh !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isCanRefresh);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeCardGachaNotify
 */
exports.RoguelikeCardGachaNotify = new RoguelikeCardGachaNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueSwitchAvatarReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueSwitchAvatarReq", [
            { no: 15, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "cur_avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { onstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cell_id */ 15:
                    message.cellId = reader.uint32();
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint64 cur_avatar_guid */ 11:
                    message.curAvatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cell_id = 15; */
        if (message.cellId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.cellId);
        /* repeated uint64 onstage_avatar_guid_list = 3; */
        if (message.onstageAvatarGuidList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
                writer.uint64(message.onstageAvatarGuidList[i]);
            writer.join();
        }
        /* optional uint64 cur_avatar_guid = 11; */
        if (message.curAvatarGuid !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint64(message.curAvatarGuid);
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueSwitchAvatarReq
 */
exports.RogueSwitchAvatarReq = new RogueSwitchAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueSwitchAvatarRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueSwitchAvatarRsp", [
            { no: 4, name: "cur_avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "backstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cell_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "onstage_avatar_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = { backstageAvatarGuidList: [], onstageAvatarGuidList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 cur_avatar_guid */ 4:
                    message.curAvatarGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint64 backstage_avatar_guid_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.backstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 cell_id */ 3:
                    message.cellId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint64 onstage_avatar_guid_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.onstageAvatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint64 cur_avatar_guid = 4; */
        if (message.curAvatarGuid !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint64(message.curAvatarGuid);
        /* repeated uint64 backstage_avatar_guid_list = 8; */
        if (message.backstageAvatarGuidList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backstageAvatarGuidList.length; i++)
                writer.uint64(message.backstageAvatarGuidList[i]);
            writer.join();
        }
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 cell_id = 3; */
        if (message.cellId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.cellId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint64 onstage_avatar_guid_list = 9; */
        if (message.onstageAvatarGuidList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.onstageAvatarGuidList.length; i++)
                writer.uint64(message.onstageAvatarGuidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueSwitchAvatarRsp
 */
exports.RogueSwitchAvatarRsp = new RogueSwitchAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DisableRoguelikeTrapNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DisableRoguelikeTrapNotify", [
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DisableRoguelikeTrapNotify
 */
exports.DisableRoguelikeTrapNotify = new DisableRoguelikeTrapNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRuneRecordUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeRuneRecordUpdateNotify", [
            { no: 11, name: "rune_record_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RoguelikeRuneRecord }
        ]);
    }
    create(value) {
        const message = { runeRecordList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list */ 11:
                    message.runeRecordList.push(exports.RoguelikeRuneRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RoguelikeRuneRecord rune_record_list = 11; */
        for (let i = 0; i < message.runeRecordList.length; i++)
            exports.RoguelikeRuneRecord.internalBinaryWrite(message.runeRecordList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRuneRecordUpdateNotify
 */
exports.RoguelikeRuneRecordUpdateNotify = new RoguelikeRuneRecordUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeMistClearNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeMistClearNotify", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeMistClearNotify
 */
exports.RoguelikeMistClearNotify = new RoguelikeMistClearNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectDataNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeEffectDataNotify", [
            { no: 7, name: "curse_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueEffectRecord },
            { no: 4, name: "card_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueEffectRecord }
        ]);
    }
    create(value) {
        const message = { curseList: [], cardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueEffectRecord curse_list */ 7:
                    message.curseList.push(exports.RogueEffectRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RogueEffectRecord card_list */ 4:
                    message.cardList.push(exports.RogueEffectRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueEffectRecord curse_list = 7; */
        for (let i = 0; i < message.curseList.length; i++)
            exports.RogueEffectRecord.internalBinaryWrite(message.curseList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RogueEffectRecord card_list = 4; */
        for (let i = 0; i < message.cardList.length; i++)
            exports.RogueEffectRecord.internalBinaryWrite(message.cardList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectDataNotify
 */
exports.RoguelikeEffectDataNotify = new RoguelikeEffectDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectViewReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeEffectViewReq", [
            { no: 10, name: "view_curse_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "view_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { viewCurseList: [], viewCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 view_curse_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewCurseList.push(reader.uint32());
                    else
                        message.viewCurseList.push(reader.uint32());
                    break;
                case /* repeated uint32 view_card_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewCardList.push(reader.uint32());
                    else
                        message.viewCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 view_curse_list = 10; */
        if (message.viewCurseList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.viewCurseList.length; i++)
                writer.uint32(message.viewCurseList[i]);
            writer.join();
        }
        /* repeated uint32 view_card_list = 2; */
        if (message.viewCardList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.viewCardList.length; i++)
                writer.uint32(message.viewCardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectViewReq
 */
exports.RoguelikeEffectViewReq = new RoguelikeEffectViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeEffectViewRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeEffectViewRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeEffectViewRsp
 */
exports.RoguelikeEffectViewRsp = new RoguelikeEffectViewRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeResourceBonusPropUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeResourceBonusPropUpdateNotify", [
            { no: 12, name: "bonus_resource_prop", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional float bonus_resource_prop */ 12:
                    message.bonusResourceProp = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional float bonus_resource_prop = 12; */
        if (message.bonusResourceProp !== undefined)
            writer.tag(12, runtime_1.WireType.Bit32).float(message.bonusResourceProp);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeResourceBonusPropUpdateNotify
 */
exports.RoguelikeResourceBonusPropUpdateNotify = new RoguelikeResourceBonusPropUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeSettleCoinInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeSettleCoinInfo", [
            { no: 8, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "cell_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin_c */ 8:
                    message.coinC = reader.uint32();
                    break;
                case /* optional uint32 coin_b */ 10:
                    message.coinB = reader.uint32();
                    break;
                case /* optional uint32 cell_num */ 1:
                    message.cellNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 coin_c = 8; */
        if (message.coinC !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.coinC);
        /* optional uint32 coin_b = 10; */
        if (message.coinB !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.coinB);
        /* optional uint32 cell_num = 1; */
        if (message.cellNum !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.cellNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeSettleCoinInfo
 */
exports.RoguelikeSettleCoinInfo = new RoguelikeSettleCoinInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeDungeonSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeDungeonSettleInfo", [
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_final_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "finished_challenge_cell_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.RoguelikeSettleCoinInfo } },
            { no: 13, name: "is_coin_c_reach_limit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "total_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { finishedChallengeCellNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_final_level */ 15:
                    message.isFinalLevel = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.RoguelikeSettleCoinInfo> finished_challenge_cell_num_map */ 3:
                    this.binaryReadMap3(message.finishedChallengeCellNumMap, reader, options);
                    break;
                case /* optional bool is_coin_c_reach_limit */ 13:
                    message.isCoinCReachLimit = reader.bool();
                    break;
                case /* optional uint32 cur_level */ 9:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional uint32 total_coin_b_num */ 6:
                    message.totalCoinBNum = reader.uint32();
                    break;
                case /* optional uint32 total_coin_c_num */ 10:
                    message.totalCoinCNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.RoguelikeSettleCoinInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.RoguelikeDungeonSettleInfo.finished_challenge_cell_num_map");
            }
        }
        map[key ?? 0] = val ?? exports.RoguelikeSettleCoinInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_final_level = 15; */
        if (message.isFinalLevel !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isFinalLevel);
        /* map<uint32, com.midnights.game.RoguelikeSettleCoinInfo> finished_challenge_cell_num_map = 3; */
        for (let k of Object.keys(message.finishedChallengeCellNumMap)) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.RoguelikeSettleCoinInfo.internalBinaryWrite(message.finishedChallengeCellNumMap[k], writer, options);
            writer.join().join();
        }
        /* optional bool is_coin_c_reach_limit = 13; */
        if (message.isCoinCReachLimit !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isCoinCReachLimit);
        /* optional uint32 cur_level = 9; */
        if (message.curLevel !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.curLevel);
        /* optional uint32 total_coin_b_num = 6; */
        if (message.totalCoinBNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.totalCoinBNum);
        /* optional uint32 total_coin_c_num = 10; */
        if (message.totalCoinCNum !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.totalCoinCNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeDungeonSettleInfo
 */
exports.RoguelikeDungeonSettleInfo = new RoguelikeDungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeRefreshCardCostUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RoguelikeRefreshCardCostUpdateNotify", [
            { no: 5, name: "item_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_count */ 5:
                    message.itemCount = reader.uint32();
                    break;
                case /* optional uint32 item_id */ 1:
                    message.itemId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 item_count = 5; */
        if (message.itemCount !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.itemCount);
        /* optional uint32 item_id = 1; */
        if (message.itemId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.itemId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RoguelikeRefreshCardCostUpdateNotify
 */
exports.RoguelikeRefreshCardCostUpdateNotify = new RoguelikeRefreshCardCostUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigMarkPoint$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DigMarkPoint", [
            { no: 1, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 13, name: "bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rot", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 1:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 bundle_id */ 13:
                    message.bundleId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector rot */ 3:
                    message.rot = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.rot);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector pos = 1; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 bundle_id = 13; */
        if (message.bundleId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.bundleId);
        /* optional com.midnights.game.Vector rot = 3; */
        if (message.rot)
            define_12.Vector.internalBinaryWrite(message.rot, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigMarkPoint
 */
exports.DigMarkPoint = new DigMarkPoint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DigActivityDetailInfo", [
            { no: 15, name: "stage_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "dig_mark_point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.DigMarkPoint },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { stageIdList: [], digMarkPointList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 stage_id_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.stageIdList.push(reader.uint32());
                    else
                        message.stageIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list */ 11:
                    message.digMarkPointList.push(exports.DigMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 stage_id_list = 15; */
        if (message.stageIdList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.stageIdList.length; i++)
                writer.uint32(message.stageIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11; */
        for (let i = 0; i < message.digMarkPointList.length; i++)
            exports.DigMarkPoint.internalBinaryWrite(message.digMarkPointList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityDetailInfo
 */
exports.DigActivityDetailInfo = new DigActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityMarkPointChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DigActivityMarkPointChangeNotify", [
            { no: 11, name: "dig_mark_point_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.DigMarkPoint }
        ]);
    }
    create(value) {
        const message = { digMarkPointList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list */ 11:
                    message.digMarkPointList.push(exports.DigMarkPoint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.DigMarkPoint dig_mark_point_list = 11; */
        for (let i = 0; i < message.digMarkPointList.length; i++)
            exports.DigMarkPoint.internalBinaryWrite(message.digMarkPointList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityMarkPointChangeNotify
 */
exports.DigActivityMarkPointChangeNotify = new DigActivityMarkPointChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityChangeGadgetStateReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DigActivityChangeGadgetStateReq", [
            { no: 10, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 10; */
        if (message.entityId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityChangeGadgetStateReq
 */
exports.DigActivityChangeGadgetStateReq = new DigActivityChangeGadgetStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DigActivityChangeGadgetStateRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.DigActivityChangeGadgetStateRsp", [
            { no: 15, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 15:
                    message.entityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 15; */
        if (message.entityId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DigActivityChangeGadgetStateRsp
 */
exports.DigActivityChangeGadgetStateRsp = new DigActivityChangeGadgetStateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HachiActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HachiActivityDetailInfo", [
            { no: 6, name: "stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.HachiStageInfo } }
        ]);
    }
    create(value) {
        const message = { stageMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.HachiStageInfo> stage_map */ 6:
                    this.binaryReadMap6(message.stageMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.HachiStageInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.HachiActivityDetailInfo.stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.HachiStageInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, com.midnights.game.HachiStageInfo> stage_map = 6; */
        for (let k of Object.keys(message.stageMap)) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.HachiStageInfo.internalBinaryWrite(message.stageMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HachiActivityDetailInfo
 */
exports.HachiActivityDetailInfo = new HachiActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HachiStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.HachiStageInfo", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* optional bool is_finished */ 12:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional bool is_finished = 12; */
        if (message.isFinished !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HachiStageInfo
 */
exports.HachiStageInfo = new HachiStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampStageInfo", [
            { no: 12, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "total_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "pos", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_progress */ 12:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 id */ 6:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finished */ 10:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 total_progress */ 9:
                    message.totalProgress = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 5:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_progress = 12; */
        if (message.curProgress !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.curProgress);
        /* optional uint32 id = 6; */
        if (message.id !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.id);
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_finished = 10; */
        if (message.isFinished !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 total_progress = 9; */
        if (message.totalProgress !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.totalProgress);
        /* optional com.midnights.game.Vector pos = 5; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampStageInfo
 */
exports.WinterCampStageInfo = new WinterCampStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRaceStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampRaceStageInfo", [
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 2, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 14:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 max_score */ 2:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.id);
        /* optional com.midnights.game.Vector pos = 14; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 max_score = 2; */
        if (message.maxScore !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRaceStageInfo
 */
exports.WinterCampRaceStageInfo = new WinterCampRaceStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampActivityDetailInfo", [
            { no: 9, name: "race_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.WinterCampRaceStageInfo },
            { no: 10, name: "battle_info", kind: "message", T: () => exports.WinterCampStageInfo },
            { no: 8, name: "wish_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "battle_taken_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "explore_taken_reward_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "explore_info", kind: "message", T: () => exports.WinterCampStageInfo },
            { no: 2, name: "used_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { raceInfoList: [], wishIdList: [], battleTakenRewardList: [], exploreTakenRewardList: [], usedItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WinterCampRaceStageInfo race_info_list */ 9:
                    message.raceInfoList.push(exports.WinterCampRaceStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo battle_info */ 10:
                    message.battleInfo = exports.WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                case /* repeated uint32 wish_id_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.wishIdList.push(reader.uint32());
                    else
                        message.wishIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 battle_taken_reward_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.battleTakenRewardList.push(reader.uint32());
                    else
                        message.battleTakenRewardList.push(reader.uint32());
                    break;
                case /* repeated uint32 explore_taken_reward_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exploreTakenRewardList.push(reader.uint32());
                    else
                        message.exploreTakenRewardList.push(reader.uint32());
                    break;
                case /* optional bool is_content_closed */ 15:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo explore_info */ 11:
                    message.exploreInfo = exports.WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                case /* repeated com.midnights.game.ItemParam used_item_list */ 2:
                    message.usedItemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.WinterCampRaceStageInfo race_info_list = 9; */
        for (let i = 0; i < message.raceInfoList.length; i++)
            exports.WinterCampRaceStageInfo.internalBinaryWrite(message.raceInfoList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.WinterCampStageInfo battle_info = 10; */
        if (message.battleInfo)
            exports.WinterCampStageInfo.internalBinaryWrite(message.battleInfo, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 wish_id_list = 8; */
        if (message.wishIdList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.wishIdList.length; i++)
                writer.uint32(message.wishIdList[i]);
            writer.join();
        }
        /* repeated uint32 battle_taken_reward_list = 14; */
        if (message.battleTakenRewardList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.battleTakenRewardList.length; i++)
                writer.uint32(message.battleTakenRewardList[i]);
            writer.join();
        }
        /* repeated uint32 explore_taken_reward_list = 6; */
        if (message.exploreTakenRewardList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exploreTakenRewardList.length; i++)
                writer.uint32(message.exploreTakenRewardList[i]);
            writer.join();
        }
        /* optional bool is_content_closed = 15; */
        if (message.isContentClosed !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.WinterCampStageInfo explore_info = 11; */
        if (message.exploreInfo)
            exports.WinterCampStageInfo.internalBinaryWrite(message.exploreInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam used_item_list = 2; */
        for (let i = 0; i < message.usedItemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.usedItemList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampActivityDetailInfo
 */
exports.WinterCampActivityDetailInfo = new WinterCampActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampStageInfoChangeNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampStageInfoChangeNotify", [
            { no: 12, name: "explore_info", kind: "message", T: () => exports.WinterCampStageInfo },
            { no: 4, name: "battle_info", kind: "message", T: () => exports.WinterCampStageInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WinterCampStageInfo explore_info */ 12:
                    message.exploreInfo = exports.WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.exploreInfo);
                    break;
                case /* optional com.midnights.game.WinterCampStageInfo battle_info */ 4:
                    message.battleInfo = exports.WinterCampStageInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.WinterCampStageInfo explore_info = 12; */
        if (message.exploreInfo)
            exports.WinterCampStageInfo.internalBinaryWrite(message.exploreInfo, writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.WinterCampStageInfo battle_info = 4; */
        if (message.battleInfo)
            exports.WinterCampStageInfo.internalBinaryWrite(message.battleInfo, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampStageInfoChangeNotify
 */
exports.WinterCampStageInfoChangeNotify = new WinterCampStageInfoChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRaceScoreNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampRaceScoreNotify", [
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 14:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.id);
        /* optional uint32 max_score = 14; */
        if (message.maxScore !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRaceScoreNotify
 */
exports.WinterCampRaceScoreNotify = new WinterCampRaceScoreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGiveFriendItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGiveFriendItemReq", [
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 11:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.uid);
        /* repeated com.midnights.game.ItemParam item_list = 11; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGiveFriendItemReq
 */
exports.WinterCampGiveFriendItemReq = new WinterCampGiveFriendItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGiveFriendItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGiveFriendItemRsp", [
            { no: 11, name: "limit_item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { limitItemIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_item_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitItemIdList.push(reader.uint32());
                    else
                        message.limitItemIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 limit_item_id_list = 11; */
        if (message.limitItemIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.limitItemIdList.length; i++)
                writer.uint32(message.limitItemIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGiveFriendItemRsp
 */
exports.WinterCampGiveFriendItemRsp = new WinterCampGiveFriendItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampSetWishListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampSetWishListReq", [
            { no: 4, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 item_id_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 item_id_list = 4; */
        if (message.itemIdList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampSetWishListReq
 */
exports.WinterCampSetWishListReq = new WinterCampSetWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampSetWishListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampSetWishListRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 item_id_list */ 7:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 item_id_list = 7; */
        if (message.itemIdList.length) {
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampSetWishListRsp
 */
exports.WinterCampSetWishListRsp = new WinterCampSetWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampFriendWishData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampFriendWishData", [
            { no: 14, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 9, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 14:
                    message.nickname = reader.string();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 5:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* repeated uint32 item_id_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string nickname = 14; */
        if (message.nickname !== undefined)
            writer.tag(14, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional com.midnights.game.ProfilePicture profile_picture = 5; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 item_id_list = 9; */
        if (message.itemIdList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampFriendWishData
 */
exports.WinterCampFriendWishData = new WinterCampFriendWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetFriendWishListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetFriendWishListReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetFriendWishListReq
 */
exports.WinterCampGetFriendWishListReq = new WinterCampGetFriendWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetFriendWishListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetFriendWishListRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "wish_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.WinterCampFriendWishData }
        ]);
    }
    create(value) {
        const message = { wishDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.WinterCampFriendWishData wish_data_list */ 5:
                    message.wishDataList.push(exports.WinterCampFriendWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.WinterCampFriendWishData wish_data_list = 5; */
        for (let i = 0; i < message.wishDataList.length; i++)
            exports.WinterCampFriendWishData.internalBinaryWrite(message.wishDataList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetFriendWishListRsp
 */
exports.WinterCampGetFriendWishListRsp = new WinterCampGetFriendWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRecvItemNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampRecvItemNotify", [
            { no: 14, name: "recv_item_data", kind: "message", T: () => exports.WinterCampRecvItemData }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.WinterCampRecvItemData recv_item_data */ 14:
                    message.recvItemData = exports.WinterCampRecvItemData.internalBinaryRead(reader, reader.uint32(), options, message.recvItemData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.WinterCampRecvItemData recv_item_data = 14; */
        if (message.recvItemData)
            exports.WinterCampRecvItemData.internalBinaryWrite(message.recvItemData, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRecvItemNotify
 */
exports.WinterCampRecvItemNotify = new WinterCampRecvItemNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptItemResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampAcceptItemResultInfo", [
            { no: 2, name: "accept_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 6, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "unaccept_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { acceptItemList: [], unacceptItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam accept_item_list */ 2:
                    message.acceptItemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 6:
                    message.uid = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam unaccept_item_list */ 9:
                    message.unacceptItemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam accept_item_list = 2; */
        for (let i = 0; i < message.acceptItemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.acceptItemList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 6; */
        if (message.uid !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.uid);
        /* repeated com.midnights.game.ItemParam unaccept_item_list = 9; */
        for (let i = 0; i < message.unacceptItemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.unacceptItemList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptItemResultInfo
 */
exports.WinterCampAcceptItemResultInfo = new WinterCampAcceptItemResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptGiveItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampAcceptGiveItemReq", [
            { no: 11, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 11:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 11; */
        if (message.uid !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptGiveItemReq
 */
exports.WinterCampAcceptGiveItemReq = new WinterCampAcceptGiveItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptGiveItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampAcceptGiveItemRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "accept_item_result_info", kind: "message", T: () => exports.WinterCampAcceptItemResultInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info */ 3:
                    message.acceptItemResultInfo = exports.WinterCampAcceptItemResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptItemResultInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 3; */
        if (message.acceptItemResultInfo)
            exports.WinterCampAcceptItemResultInfo.internalBinaryWrite(message.acceptItemResultInfo, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptGiveItemRsp
 */
exports.WinterCampAcceptGiveItemRsp = new WinterCampAcceptGiveItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptAllGiveItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampAcceptAllGiveItemReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptAllGiveItemReq
 */
exports.WinterCampAcceptAllGiveItemReq = new WinterCampAcceptAllGiveItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampAcceptAllGiveItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampAcceptAllGiveItemRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "accept_item_result_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.WinterCampAcceptItemResultInfo }
        ]);
    }
    create(value) {
        const message = { acceptItemResultInfo: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info */ 14:
                    message.acceptItemResultInfo.push(exports.WinterCampAcceptItemResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.WinterCampAcceptItemResultInfo accept_item_result_info = 14; */
        for (let i = 0; i < message.acceptItemResultInfo.length; i++)
            exports.WinterCampAcceptItemResultInfo.internalBinaryWrite(message.acceptItemResultInfo[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampAcceptAllGiveItemRsp
 */
exports.WinterCampAcceptAllGiveItemRsp = new WinterCampAcceptAllGiveItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetCanGiveFriendItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetCanGiveFriendItemReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemReq
 */
exports.WinterCampGetCanGiveFriendItemReq = new WinterCampGetCanGiveFriendItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetCanGiveFriendItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetCanGiveFriendItemRsp", [
            { no: 8, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 8:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam item_list = 8; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetCanGiveFriendItemRsp
 */
exports.WinterCampGetCanGiveFriendItemRsp = new WinterCampGetCanGiveFriendItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampRecvItemData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampRecvItemData", [
            { no: 2, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 12, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value) {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 2:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 1:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional string nickname */ 12:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam item_list = 2; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional com.midnights.game.ProfilePicture profile_picture = 1; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional string nickname = 12; */
        if (message.nickname !== undefined)
            writer.tag(12, runtime_1.WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampRecvItemData
 */
exports.WinterCampRecvItemData = new WinterCampRecvItemData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetRecvItemListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetRecvItemListReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetRecvItemListReq
 */
exports.WinterCampGetRecvItemListReq = new WinterCampGetRecvItemListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampGetRecvItemListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampGetRecvItemListRsp", [
            { no: 8, name: "recv_item_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.WinterCampRecvItemData },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { recvItemDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WinterCampRecvItemData recv_item_data_list */ 8:
                    message.recvItemDataList.push(exports.WinterCampRecvItemData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.WinterCampRecvItemData recv_item_data_list = 8; */
        for (let i = 0; i < message.recvItemDataList.length; i++)
            exports.WinterCampRecvItemData.internalBinaryWrite(message.recvItemDataList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampGetRecvItemListRsp
 */
exports.WinterCampGetRecvItemListRsp = new WinterCampGetRecvItemListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampEditSnowmanCombinationReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampEditSnowmanCombinationReq", [
            { no: 9, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "combination_info", kind: "message", T: () => define_4.CustomGadgetTreeInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 9:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 6:
                    message.combinationInfo = define_4.CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 9; */
        if (message.entityId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 6; */
        if (message.combinationInfo)
            define_4.CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampEditSnowmanCombinationReq
 */
exports.WinterCampEditSnowmanCombinationReq = new WinterCampEditSnowmanCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampEditSnowmanCombinationRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampEditSnowmanCombinationRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampEditSnowmanCombinationRsp
 */
exports.WinterCampEditSnowmanCombinationRsp = new WinterCampEditSnowmanCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonSettleNotify", [
            { no: 9, name: "limited_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "normal_coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "remain_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "race_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 limited_coin */ 9:
                    message.limitedCoin = reader.uint32();
                    break;
                case /* optional uint32 normal_coin */ 2:
                    message.normalCoin = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 7:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 remain_time */ 4:
                    message.remainTime = reader.uint32();
                    break;
                case /* optional uint32 score */ 11:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 race_id */ 15:
                    message.raceId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 limited_coin = 9; */
        if (message.limitedCoin !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.limitedCoin);
        /* optional uint32 normal_coin = 2; */
        if (message.normalCoin !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.normalCoin);
        /* optional bool is_new_record = 7; */
        if (message.isNewRecord !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_success = 3; */
        if (message.isSuccess !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional uint32 remain_time = 4; */
        if (message.remainTime !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.remainTime);
        /* optional uint32 score = 11; */
        if (message.score !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.score);
        /* optional uint32 race_id = 15; */
        if (message.raceId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.raceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonSettleNotify
 */
exports.WinterCampTriathlonSettleNotify = new WinterCampTriathlonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeExploreRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTakeExploreRewardReq", [
            { no: 8, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 8:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 8; */
        if (message.id !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeExploreRewardReq
 */
exports.WinterCampTakeExploreRewardReq = new WinterCampTakeExploreRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeExploreRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTakeExploreRewardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeExploreRewardRsp
 */
exports.WinterCampTakeExploreRewardRsp = new WinterCampTakeExploreRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeBattleRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTakeBattleRewardReq", [
            { no: 2, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeBattleRewardReq
 */
exports.WinterCampTakeBattleRewardReq = new WinterCampTakeBattleRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTakeBattleRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTakeBattleRewardRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 id */ 15:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 id = 15; */
        if (message.id !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTakeBattleRewardRsp
 */
exports.WinterCampTakeBattleRewardRsp = new WinterCampTakeBattleRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonRestartReq", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonRestartReq
 */
exports.WinterCampTriathlonRestartReq = new WinterCampTriathlonRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WinterCampTriathlonRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WinterCampTriathlonRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WinterCampTriathlonRestartRsp
 */
exports.WinterCampTriathlonRestartRsp = new WinterCampTriathlonRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialSettleNotify", [
            { no: 15, name: "exhibition_list_data_record_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 14, name: "exhibition_list_data_result_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "dungeon_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { exhibitionListDataRecordMap: {}, exhibitionListDataResultMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> exhibition_list_data_record_map */ 15:
                    this.binaryReadMap15(message.exhibitionListDataRecordMap, reader, options);
                    break;
                case /* map<uint32, uint32> exhibition_list_data_result_map */ 14:
                    this.binaryReadMap14(message.exhibitionListDataResultMap, reader, options);
                    break;
                case /* optional uint32 dungeon_scene_id */ 5:
                    message.dungeonSceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap15(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MistTrialSettleNotify.exhibition_list_data_record_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MistTrialSettleNotify.exhibition_list_data_result_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> exhibition_list_data_record_map = 15; */
        for (let k of Object.keys(message.exhibitionListDataRecordMap))
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.exhibitionListDataRecordMap[k]).join();
        /* map<uint32, uint32> exhibition_list_data_result_map = 14; */
        for (let k of Object.keys(message.exhibitionListDataResultMap))
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.exhibitionListDataResultMap[k]).join();
        /* optional uint32 dungeon_scene_id = 5; */
        if (message.dungeonSceneId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.dungeonSceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialSettleNotify
 */
exports.MistTrialSettleNotify = new MistTrialSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetDungeonExhibitionDataReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialGetDungeonExhibitionDataReq", [
            { no: 13, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 13:
                    message.trialId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 13; */
        if (message.trialId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.trialId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataReq
 */
exports.MistTrialGetDungeonExhibitionDataReq = new MistTrialGetDungeonExhibitionDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialGetDungeonExhibitionDataRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MistTrialGetDungeonExhibitionDataRsp", [
            { no: 12, name: "trial_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trial_id */ 12:
                    message.trialId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trial_id = 12; */
        if (message.trialId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.trialId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialGetDungeonExhibitionDataRsp
 */
exports.MistTrialGetDungeonExhibitionDataRsp = new MistTrialGetDungeonExhibitionDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionLevelData", [
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 5:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 2:
                    message.difficultyLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.score);
        /* optional uint32 mode_id = 5; */
        if (message.modeId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.modeId);
        /* optional uint32 difficulty_level = 2; */
        if (message.difficultyLevel !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.difficultyLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionLevelData
 */
exports.PotionLevelData = new PotionLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionStageData", [
            { no: 11, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cool_down_buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PotionLevelData },
            { no: 13, name: "cool_down_avatar_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { coolDownBuffIdList: [], levelList: [], coolDownAvatarIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 11:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 cool_down_buff_id_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.coolDownBuffIdList.push(reader.uint32());
                    else
                        message.coolDownBuffIdList.push(reader.uint32());
                    break;
                case /* optional bool is_open */ 15:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.PotionLevelData level_list */ 14:
                    message.levelList.push(exports.PotionLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 cool_down_avatar_id_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.coolDownAvatarIdList.push(reader.uint32());
                    else
                        message.coolDownAvatarIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 11; */
        if (message.stageId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated uint32 cool_down_buff_id_list = 2; */
        if (message.coolDownBuffIdList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.coolDownBuffIdList.length; i++)
                writer.uint32(message.coolDownBuffIdList[i]);
            writer.join();
        }
        /* optional bool is_open = 15; */
        if (message.isOpen !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.PotionLevelData level_list = 14; */
        for (let i = 0; i < message.levelList.length; i++)
            exports.PotionLevelData.internalBinaryWrite(message.levelList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 cool_down_avatar_id_list = 13; */
        if (message.coolDownAvatarIdList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.coolDownAvatarIdList.length; i++)
                writer.uint32(message.coolDownAvatarIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionStageData
 */
exports.PotionStageData = new PotionStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionActivityDetailInfo", [
            { no: 10, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PotionStageData }
        ]);
    }
    create(value) {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PotionStageData stage_list */ 10:
                    message.stageList.push(exports.PotionStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.PotionStageData stage_list = 10; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.PotionStageData.internalBinaryWrite(message.stageList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionActivityDetailInfo
 */
exports.PotionActivityDetailInfo = new PotionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionResetChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionResetChallengeReq", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionResetChallengeReq
 */
exports.PotionResetChallengeReq = new PotionResetChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionResetChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionResetChallengeRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "stage_data", kind: "message", T: () => exports.PotionStageData }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.PotionStageData stage_data */ 14:
                    message.stageData = exports.PotionStageData.internalBinaryRead(reader, reader.uint32(), options, message.stageData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.PotionStageData stage_data = 14; */
        if (message.stageData)
            exports.PotionStageData.internalBinaryWrite(message.stageData, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionResetChallengeRsp
 */
exports.PotionResetChallengeRsp = new PotionResetChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionAvatarInfo", [
            { no: 6, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 6:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 8:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_trial = 6; */
        if (message.isTrial !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 8; */
        if (message.avatarId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionAvatarInfo
 */
exports.PotionAvatarInfo = new PotionAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonReq", [
            { no: 15, name: "buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PotionAvatarInfo },
            { no: 2, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { buffIdList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 buff_id_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PotionAvatarInfo avatar_info_list */ 14:
                    message.avatarInfoList.push(exports.PotionAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 mode_id */ 2:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 buff_id_list = 15; */
        if (message.buffIdList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.buffIdList.length; i++)
                writer.uint32(message.buffIdList[i]);
            writer.join();
        }
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        /* repeated com.midnights.game.PotionAvatarInfo avatar_info_list = 14; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.PotionAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 mode_id = 2; */
        if (message.modeId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.modeId);
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonReq
 */
exports.PotionEnterDungeonReq = new PotionEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonRsp
 */
exports.PotionEnterDungeonRsp = new PotionEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionDungeonAvatar$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionDungeonAvatar", [
            { no: 8, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 8:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_trial */ 2:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint64 avatar_guid = 8; */
        if (message.avatarGuid !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint64(message.avatarGuid);
        /* optional bool is_trial = 2; */
        if (message.isTrial !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionDungeonAvatar
 */
exports.PotionDungeonAvatar = new PotionDungeonAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionEnterDungeonNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionEnterDungeonNotify", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "dungeon_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PotionDungeonAvatar },
            { no: 8, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { dungeonAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 7:
                    message.difficultyLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.PotionDungeonAvatar dungeon_avatar_list */ 6:
                    message.dungeonAvatarList.push(exports.PotionDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 8:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 5:
                    message.modeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty_level = 7; */
        if (message.difficultyLevel !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.difficultyLevel);
        /* repeated com.midnights.game.PotionDungeonAvatar dungeon_avatar_list = 6; */
        for (let i = 0; i < message.dungeonAvatarList.length; i++)
            exports.PotionDungeonAvatar.internalBinaryWrite(message.dungeonAvatarList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 8; */
        if (message.levelId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 mode_id = 5; */
        if (message.modeId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.modeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionEnterDungeonNotify
 */
exports.PotionEnterDungeonNotify = new PotionEnterDungeonNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionSaveDungeonResultReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionSaveDungeonResultReq", [
            { no: 8, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 8:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 8; */
        if (message.levelId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionSaveDungeonResultReq
 */
exports.PotionSaveDungeonResultReq = new PotionSaveDungeonResultReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionSaveDungeonResultRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionSaveDungeonResultRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionSaveDungeonResultRsp
 */
exports.PotionSaveDungeonResultRsp = new PotionSaveDungeonResultRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionRestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionRestartDungeonReq
 */
exports.PotionRestartDungeonReq = new PotionRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionRestartDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionRestartDungeonRsp
 */
exports.PotionRestartDungeonRsp = new PotionRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PotionDungeonResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PotionDungeonResultInfo", [
            { no: 8, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "mode_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 8:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 left_time */ 9:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional uint32 difficulty_level */ 14:
                    message.difficultyLevel = reader.uint32();
                    break;
                case /* optional uint32 mode_id */ 11:
                    message.modeId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 4:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 final_score = 8; */
        if (message.finalScore !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.finalScore);
        /* optional uint32 left_time = 9; */
        if (message.leftTime !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.leftTime);
        /* optional uint32 difficulty_level = 14; */
        if (message.difficultyLevel !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.difficultyLevel);
        /* optional uint32 mode_id = 11; */
        if (message.modeId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.modeId);
        /* optional uint32 level_id = 4; */
        if (message.levelId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PotionDungeonResultInfo
 */
exports.PotionDungeonResultInfo = new PotionDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TanukiTravelLevelData", [
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "route_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 route_id */ 9:
                    message.routeId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 15:
                    message.isFinish = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 route_id = 9; */
        if (message.routeId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.routeId);
        /* optional bool is_finish = 15; */
        if (message.isFinish !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelLevelData
 */
exports.TanukiTravelLevelData = new TanukiTravelLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TanukiTravelActivityDetailInfo", [
            { no: 4, name: "tanuki_travel_level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TanukiTravelLevelData },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "finished_level_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { tanukiTravelLevelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TanukiTravelLevelData tanuki_travel_level_data_list */ 4:
                    message.tanukiTravelLevelDataList.push(exports.TanukiTravelLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 finished_level_index */ 10:
                    message.finishedLevelIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.TanukiTravelLevelData tanuki_travel_level_data_list = 4; */
        for (let i = 0; i < message.tanukiTravelLevelDataList.length; i++)
            exports.TanukiTravelLevelData.internalBinaryWrite(message.tanukiTravelLevelDataList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 finished_level_index = 10; */
        if (message.finishedLevelIndex !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.finishedLevelIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelActivityDetailInfo
 */
exports.TanukiTravelActivityDetailInfo = new TanukiTravelActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TanukiTravelFinishGuideQuestNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TanukiTravelFinishGuideQuestNotify", [
            { no: 14, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 14:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 14; */
        if (message.activityId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TanukiTravelFinishGuideQuestNotify
 */
exports.TanukiTravelFinishGuideQuestNotify = new TanukiTravelFinishGuideQuestNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternProjectionLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternProjectionLevelInfo", [
            { no: 1, name: "min_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_can_start", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_show_tips", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 min_finish_time */ 1:
                    message.minFinishTime = reader.uint32();
                    break;
                case /* optional uint32 id */ 2:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_finished */ 7:
                    message.isFinished = reader.bool();
                    break;
                case /* optional bool is_can_start */ 9:
                    message.isCanStart = reader.bool();
                    break;
                case /* optional bool is_show_tips */ 10:
                    message.isShowTips = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 min_finish_time = 1; */
        if (message.minFinishTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.minFinishTime);
        /* optional uint32 id = 2; */
        if (message.id !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.id);
        /* optional bool is_finished = 7; */
        if (message.isFinished !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional bool is_can_start = 9; */
        if (message.isCanStart !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isCanStart);
        /* optional bool is_show_tips = 10; */
        if (message.isShowTips !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isShowTips);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternProjectionLevelInfo
 */
exports.LanternProjectionLevelInfo = new LanternProjectionLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternProjectionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternProjectionInfo", [
            { no: 12, name: "view_switch_tips_list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["com.midnights.game.ClientInputType", define_3.ClientInputType] },
            { no: 6, name: "level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternProjectionLevelInfo },
            { no: 10, name: "open_stage_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "view_input_tips_list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["com.midnights.game.ClientInputType", define_3.ClientInputType] }
        ]);
    }
    create(value) {
        const message = { viewSwitchTipsList: [], levelList: [], openStageList: [], viewInputTipsList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ClientInputType view_switch_tips_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewSwitchTipsList.push(reader.int32());
                    else
                        message.viewSwitchTipsList.push(reader.int32());
                    break;
                case /* repeated com.midnights.game.LanternProjectionLevelInfo level_list */ 6:
                    message.levelList.push(exports.LanternProjectionLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 open_stage_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.openStageList.push(reader.uint32());
                    else
                        message.openStageList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ClientInputType view_input_tips_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewInputTipsList.push(reader.int32());
                    else
                        message.viewInputTipsList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ClientInputType view_switch_tips_list = 12; */
        if (message.viewSwitchTipsList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.viewSwitchTipsList.length; i++)
                writer.int32(message.viewSwitchTipsList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.LanternProjectionLevelInfo level_list = 6; */
        for (let i = 0; i < message.levelList.length; i++)
            exports.LanternProjectionLevelInfo.internalBinaryWrite(message.levelList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 open_stage_list = 10; */
        if (message.openStageList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.openStageList.length; i++)
                writer.uint32(message.openStageList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ClientInputType view_input_tips_list = 13; */
        if (message.viewInputTipsList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.viewInputTipsList.length; i++)
                writer.int32(message.viewInputTipsList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternProjectionInfo
 */
exports.LanternProjectionInfo = new LanternProjectionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageBundleChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageBundleChallengeInfo", [
            { no: 13, name: "finished_bundle_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { finishedBundleList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 finished_bundle_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedBundleList.push(reader.uint32());
                    else
                        message.finishedBundleList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 finished_bundle_list = 13; */
        if (message.finishedBundleList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedBundleList.length; i++)
                writer.uint32(message.finishedBundleList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageBundleChallengeInfo
 */
exports.SalvageBundleChallengeInfo = new SalvageBundleChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageScoreChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageScoreChallengeInfo", [
            { no: 13, name: "salvage_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 salvage_challenge_id */ 13:
                    message.salvageChallengeId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 7:
                    message.maxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 salvage_challenge_id = 13; */
        if (message.salvageChallengeId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.salvageChallengeId);
        /* optional uint32 max_score = 7; */
        if (message.maxScore !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.maxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageScoreChallengeInfo
 */
exports.SalvageScoreChallengeInfo = new SalvageScoreChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageChallengeInfo", [
            { no: 5, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "bundle_info", kind: "message", oneof: "challengeDetail", T: () => exports.SalvageBundleChallengeInfo },
            { no: 13, name: "score_challenge_info", kind: "message", oneof: "challengeDetail", T: () => exports.SalvageScoreChallengeInfo },
            { no: 2, name: "boss_challenge_id", kind: "scalar", oneof: "challengeDetail", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { challengeDetail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_type */ 5:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 12:
                    message.isUnlock = reader.bool();
                    break;
                case /* com.midnights.game.SalvageBundleChallengeInfo bundle_info */ 11:
                    message.challengeDetail = {
                        oneofKind: "bundleInfo",
                        bundleInfo: exports.SalvageBundleChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, message.challengeDetail.bundleInfo)
                    };
                    break;
                case /* com.midnights.game.SalvageScoreChallengeInfo score_challenge_info */ 13:
                    message.challengeDetail = {
                        oneofKind: "scoreChallengeInfo",
                        scoreChallengeInfo: exports.SalvageScoreChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, message.challengeDetail.scoreChallengeInfo)
                    };
                    break;
                case /* uint32 boss_challenge_id */ 2:
                    message.challengeDetail = {
                        oneofKind: "bossChallengeId",
                        bossChallengeId: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_type = 5; */
        if (message.challengeType !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.challengeType);
        /* optional bool is_unlock = 12; */
        if (message.isUnlock !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isUnlock);
        /* com.midnights.game.SalvageBundleChallengeInfo bundle_info = 11; */
        if (message.challengeDetail.oneofKind === "bundleInfo")
            exports.SalvageBundleChallengeInfo.internalBinaryWrite(message.challengeDetail.bundleInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SalvageScoreChallengeInfo score_challenge_info = 13; */
        if (message.challengeDetail.oneofKind === "scoreChallengeInfo")
            exports.SalvageScoreChallengeInfo.internalBinaryWrite(message.challengeDetail.scoreChallengeInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* uint32 boss_challenge_id = 2; */
        if (message.challengeDetail.oneofKind === "bossChallengeId")
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.challengeDetail.bossChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageChallengeInfo
 */
exports.SalvageChallengeInfo = new SalvageChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageStageInfo", [
            { no: 9, name: "challenge_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SalvageChallengeInfo },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { challengeInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SalvageChallengeInfo challenge_info_list */ 9:
                    message.challengeInfoList.push(exports.SalvageChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.SalvageChallengeInfo challenge_info_list = 9; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            exports.SalvageChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageStageInfo
 */
exports.SalvageStageInfo = new SalvageStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksChallengeInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksChallengeInfo", [
            { no: 13, name: "is_full_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_full_score */ 13:
                    message.isFullScore = reader.bool();
                    break;
                case /* optional uint32 best_score */ 7:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 3:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_full_score = 13; */
        if (message.isFullScore !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isFullScore);
        /* optional uint32 best_score = 7; */
        if (message.bestScore !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.bestScore);
        /* optional uint32 challenge_id = 3; */
        if (message.challengeId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksChallengeInfo
 */
exports.LanternRiteFireworksChallengeInfo = new LanternRiteFireworksChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksStageInfo", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "challenge_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternRiteFireworksChallengeInfo },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { challengeInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksChallengeInfo challenge_info_list */ 9:
                    message.challengeInfoList.push(exports.LanternRiteFireworksChallengeInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.LanternRiteFireworksChallengeInfo challenge_info_list = 9; */
        for (let i = 0; i < message.challengeInfoList.length; i++)
            exports.LanternRiteFireworksChallengeInfo.internalBinaryWrite(message.challengeInfoList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksStageInfo
 */
exports.LanternRiteFireworksStageInfo = new LanternRiteFireworksStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksInfo", [
            { no: 6, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternRiteFireworksStageInfo }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LanternRiteFireworksStageInfo stage_info_list */ 6:
                    message.stageInfoList.push(exports.LanternRiteFireworksStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.LanternRiteFireworksStageInfo stage_info_list = 6; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.LanternRiteFireworksStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksInfo
 */
exports.LanternRiteFireworksInfo = new LanternRiteFireworksInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteActivityDetailInfo", [
            { no: 13, name: "projection_info", kind: "message", T: () => exports.LanternProjectionInfo },
            { no: 5, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SalvageStageInfo },
            { no: 8, name: "fireworks_info", kind: "message", T: () => exports.LanternRiteFireworksInfo },
            { no: 2, name: "is_mini_eldritch_dungeon_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_taken_skin_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LanternProjectionInfo projection_info */ 13:
                    message.projectionInfo = exports.LanternProjectionInfo.internalBinaryRead(reader, reader.uint32(), options, message.projectionInfo);
                    break;
                case /* repeated com.midnights.game.SalvageStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(exports.SalvageStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.LanternRiteFireworksInfo fireworks_info */ 8:
                    message.fireworksInfo = exports.LanternRiteFireworksInfo.internalBinaryRead(reader, reader.uint32(), options, message.fireworksInfo);
                    break;
                case /* optional bool is_mini_eldritch_dungeon_open */ 2:
                    message.isMiniEldritchDungeonOpen = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 14:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional bool is_taken_skin_reward */ 6:
                    message.isTakenSkinReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.LanternProjectionInfo projection_info = 13; */
        if (message.projectionInfo)
            exports.LanternProjectionInfo.internalBinaryWrite(message.projectionInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.SalvageStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.SalvageStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.LanternRiteFireworksInfo fireworks_info = 8; */
        if (message.fireworksInfo)
            exports.LanternRiteFireworksInfo.internalBinaryWrite(message.fireworksInfo, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_mini_eldritch_dungeon_open = 2; */
        if (message.isMiniEldritchDungeonOpen !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isMiniEldritchDungeonOpen);
        /* optional bool is_content_closed = 14; */
        if (message.isContentClosed !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional bool is_taken_skin_reward = 6; */
        if (message.isTakenSkinReward !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isTakenSkinReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteActivityDetailInfo
 */
exports.LanternRiteActivityDetailInfo = new LanternRiteActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishLanternProjectionReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FinishLanternProjectionReq", [
            { no: 3, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_time */ 3:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 finish_time = 3; */
        if (message.finishTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.finishTime);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishLanternProjectionReq
 */
exports.FinishLanternProjectionReq = new FinishLanternProjectionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FinishLanternProjectionRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FinishLanternProjectionRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FinishLanternProjectionRsp
 */
exports.FinishLanternProjectionRsp = new FinishLanternProjectionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionTipsReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionTipsReq", [
            { no: 9, name: "is_input_tips", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "input_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ClientInputType", define_3.ClientInputType] }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_input_tips */ 9:
                    message.isInputTips = reader.bool();
                    break;
                case /* optional com.midnights.game.ClientInputType input_type */ 10:
                    message.inputType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_input_tips = 9; */
        if (message.isInputTips !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isInputTips);
        /* optional com.midnights.game.ClientInputType input_type = 10; */
        if (message.inputType !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.inputType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionTipsReq
 */
exports.ViewLanternProjectionTipsReq = new ViewLanternProjectionTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionTipsRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionTipsRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionTipsRsp
 */
exports.ViewLanternProjectionTipsRsp = new ViewLanternProjectionTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionLevelTipsReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionLevelTipsReq", [
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionLevelTipsReq
 */
exports.ViewLanternProjectionLevelTipsReq = new ViewLanternProjectionLevelTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ViewLanternProjectionLevelTipsRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ViewLanternProjectionLevelTipsRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ViewLanternProjectionLevelTipsRsp
 */
exports.ViewLanternProjectionLevelTipsRsp = new ViewLanternProjectionLevelTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvagePreventSettleInfo", [
            { no: 8, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "settle_info", kind: "message", T: () => cmd_gallery_7.SalvagePreventGallerySettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 8:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.SalvagePreventGallerySettleInfo settle_info */ 14:
                    message.settleInfo = cmd_gallery_7.SalvagePreventGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 8; */
        if (message.isNewRecord !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.SalvagePreventGallerySettleInfo settle_info = 14; */
        if (message.settleInfo)
            cmd_gallery_7.SalvagePreventGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventSettleInfo
 */
exports.SalvagePreventSettleInfo = new SalvagePreventSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvagePreventSettleNotify", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "settle_info", kind: "message", T: () => exports.SalvagePreventSettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvagePreventSettleInfo settle_info */ 12:
                    message.settleInfo = exports.SalvagePreventSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.SalvagePreventSettleInfo settle_info = 12; */
        if (message.settleInfo)
            exports.SalvagePreventSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventSettleNotify
 */
exports.SalvagePreventSettleNotify = new SalvagePreventSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageEscortSettleInfo", [
            { no: 3, name: "settle_info", kind: "message", T: () => cmd_gallery_6.SalvageEscortGallerySettleInfo },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SalvageEscortGallerySettleInfo settle_info */ 3:
                    message.settleInfo = cmd_gallery_6.SalvageEscortGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.SalvageEscortGallerySettleInfo settle_info = 3; */
        if (message.settleInfo)
            cmd_gallery_6.SalvageEscortGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortSettleInfo
 */
exports.SalvageEscortSettleInfo = new SalvageEscortSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageEscortSettleNotify", [
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_info", kind: "message", T: () => exports.SalvageEscortSettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvageEscortSettleInfo settle_info */ 15:
                    message.settleInfo = exports.SalvageEscortSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.SalvageEscortSettleInfo settle_info = 15; */
        if (message.settleInfo)
            exports.SalvageEscortSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortSettleNotify
 */
exports.SalvageEscortSettleNotify = new SalvageEscortSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteTakeSkinRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteTakeSkinRewardReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteTakeSkinRewardReq
 */
exports.LanternRiteTakeSkinRewardReq = new LanternRiteTakeSkinRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteTakeSkinRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteTakeSkinRewardRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteTakeSkinRewardRsp
 */
exports.LanternRiteTakeSkinRewardRsp = new LanternRiteTakeSkinRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvagePreventRestartReq", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventRestartReq
 */
exports.SalvagePreventRestartReq = new SalvagePreventRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvagePreventRestartRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 12:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 12; */
        if (message.galleryId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventRestartRsp
 */
exports.SalvagePreventRestartRsp = new SalvagePreventRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageEscortRestartReq", [
            { no: 4, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 4:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 4; */
        if (message.galleryId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortRestartReq
 */
exports.SalvageEscortRestartReq = new SalvageEscortRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SalvageEscortRestartRsp", [
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortRestartRsp
 */
exports.SalvageEscortRestartRsp = new SalvageEscortRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteStartFireworksReformReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteStartFireworksReformReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 7:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 7; */
        if (message.challengeId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteStartFireworksReformReq
 */
exports.LanternRiteStartFireworksReformReq = new LanternRiteStartFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksReformFactorInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksReformFactorInfo", [
            { no: 5, name: "factor_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 factor_value */ 5:
                    message.factorValue = reader.uint32();
                    break;
                case /* optional uint32 factor_id */ 13:
                    message.factorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 factor_value = 5; */
        if (message.factorValue !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.factorValue);
        /* optional uint32 factor_id = 13; */
        if (message.factorId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.factorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksReformFactorInfo
 */
exports.LanternRiteFireworksReformFactorInfo = new LanternRiteFireworksReformFactorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteFireworksReformSkillInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteFireworksReformSkillInfo", [
            { no: 2, name: "skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_unlock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "unlock_challenge_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "unlock_challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 skill_id */ 2:
                    message.skillId = reader.uint32();
                    break;
                case /* optional bool is_unlock */ 11:
                    message.isUnlock = reader.bool();
                    break;
                case /* optional uint32 unlock_challenge_time */ 1:
                    message.unlockChallengeTime = reader.uint32();
                    break;
                case /* optional uint32 unlock_challenge_id */ 14:
                    message.unlockChallengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 skill_id = 2; */
        if (message.skillId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.skillId);
        /* optional bool is_unlock = 11; */
        if (message.isUnlock !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isUnlock);
        /* optional uint32 unlock_challenge_time = 1; */
        if (message.unlockChallengeTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.unlockChallengeTime);
        /* optional uint32 unlock_challenge_id = 14; */
        if (message.unlockChallengeId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.unlockChallengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteFireworksReformSkillInfo
 */
exports.LanternRiteFireworksReformSkillInfo = new LanternRiteFireworksReformSkillInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteStartFireworksReformRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteStartFireworksReformRsp", [
            { no: 15, name: "factor_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternRiteFireworksReformFactorInfo },
            { no: 13, name: "fire_element_addition_ratio", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "stamina_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "skill_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternRiteFireworksReformSkillInfo },
            { no: 6, name: "reform_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "fire_element_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { factorInfoList: [], skillInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list */ 15:
                    message.factorInfoList.push(exports.LanternRiteFireworksReformFactorInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 fire_element_addition_ratio */ 13:
                    message.fireElementAdditionRatio = reader.uint32();
                    break;
                case /* optional uint32 stamina_value */ 2:
                    message.staminaValue = reader.uint32();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksReformSkillInfo skill_info_list */ 8:
                    message.skillInfoList.push(exports.LanternRiteFireworksReformSkillInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 reform_score */ 6:
                    message.reformScore = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 fire_element_value */ 14:
                    message.fireElementValue = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 15; */
        for (let i = 0; i < message.factorInfoList.length; i++)
            exports.LanternRiteFireworksReformFactorInfo.internalBinaryWrite(message.factorInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 fire_element_addition_ratio = 13; */
        if (message.fireElementAdditionRatio !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.fireElementAdditionRatio);
        /* optional uint32 stamina_value = 2; */
        if (message.staminaValue !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.staminaValue);
        /* repeated com.midnights.game.LanternRiteFireworksReformSkillInfo skill_info_list = 8; */
        for (let i = 0; i < message.skillInfoList.length; i++)
            exports.LanternRiteFireworksReformSkillInfo.internalBinaryWrite(message.skillInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reform_score = 6; */
        if (message.reformScore !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.reformScore);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 fire_element_value = 14; */
        if (message.fireElementValue !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.fireElementValue);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteStartFireworksReformRsp
 */
exports.LanternRiteStartFireworksReformRsp = new LanternRiteStartFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteDoFireworksReformReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteDoFireworksReformReq", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "factor_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 skill_id */ 11:
                    message.skillId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 10:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 factor_id */ 13:
                    message.factorId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 skill_id = 11; */
        if (message.skillId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.skillId);
        /* optional uint32 challenge_id = 10; */
        if (message.challengeId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional uint32 factor_id = 13; */
        if (message.factorId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.factorId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteDoFireworksReformReq
 */
exports.LanternRiteDoFireworksReformReq = new LanternRiteDoFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteDoFireworksReformRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteDoFireworksReformRsp", [
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_lucky", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "factor_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.LanternRiteFireworksReformFactorInfo },
            { no: 10, name: "stamina_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "reform_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fire_element_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "fire_element_addition_ratio", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { factorInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_lucky */ 13:
                    message.isLucky = reader.bool();
                    break;
                case /* optional uint32 challenge_id */ 8:
                    message.challengeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list */ 2:
                    message.factorInfoList.push(exports.LanternRiteFireworksReformFactorInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 stamina_value */ 10:
                    message.staminaValue = reader.uint32();
                    break;
                case /* optional uint32 reform_score */ 15:
                    message.reformScore = reader.uint32();
                    break;
                case /* optional uint32 fire_element_value */ 11:
                    message.fireElementValue = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 fire_element_addition_ratio */ 12:
                    message.fireElementAdditionRatio = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_lucky = 13; */
        if (message.isLucky !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isLucky);
        /* optional uint32 challenge_id = 8; */
        if (message.challengeId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* repeated com.midnights.game.LanternRiteFireworksReformFactorInfo factor_info_list = 2; */
        for (let i = 0; i < message.factorInfoList.length; i++)
            exports.LanternRiteFireworksReformFactorInfo.internalBinaryWrite(message.factorInfoList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stamina_value = 10; */
        if (message.staminaValue !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.staminaValue);
        /* optional uint32 reform_score = 15; */
        if (message.reformScore !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.reformScore);
        /* optional uint32 fire_element_value = 11; */
        if (message.fireElementValue !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.fireElementValue);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 fire_element_addition_ratio = 12; */
        if (message.fireElementAdditionRatio !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.fireElementAdditionRatio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteDoFireworksReformRsp
 */
exports.LanternRiteDoFireworksReformRsp = new LanternRiteDoFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteEndFireworksReformReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteEndFireworksReformReq", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteEndFireworksReformReq
 */
exports.LanternRiteEndFireworksReformReq = new LanternRiteEndFireworksReformReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LanternRiteEndFireworksReformRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LanternRiteEndFireworksReformRsp", [
            { no: 10, name: "is_full_score", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_unlock_fireworks", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_unlock_new_skill", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "is_stamina_up", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_full_score */ 10:
                    message.isFullScore = reader.bool();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_unlock_fireworks */ 6:
                    message.isUnlockFireworks = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_unlock_new_skill */ 12:
                    message.isUnlockNewSkill = reader.bool();
                    break;
                case /* optional bool is_stamina_up */ 4:
                    message.isStaminaUp = reader.bool();
                    break;
                case /* optional uint32 final_score */ 13:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 5:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 9:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_full_score = 10; */
        if (message.isFullScore !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFullScore);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_unlock_fireworks = 6; */
        if (message.isUnlockFireworks !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isUnlockFireworks);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_unlock_new_skill = 12; */
        if (message.isUnlockNewSkill !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isUnlockNewSkill);
        /* optional bool is_stamina_up = 4; */
        if (message.isStaminaUp !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isStaminaUp);
        /* optional uint32 final_score = 13; */
        if (message.finalScore !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.finalScore);
        /* optional uint32 challenge_id = 5; */
        if (message.challengeId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.challengeId);
        /* optional bool is_new_record = 9; */
        if (message.isNewRecord !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LanternRiteEndFireworksReformRsp
 */
exports.LanternRiteEndFireworksReformRsp = new LanternRiteEndFireworksReformRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSalvageBundleMarkReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.UpdateSalvageBundleMarkReq", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 challenge_type */ 13:
                    message.challengeType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 challenge_type = 13; */
        if (message.challengeType !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.challengeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateSalvageBundleMarkReq
 */
exports.UpdateSalvageBundleMarkReq = new UpdateSalvageBundleMarkReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateSalvageBundleMarkRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.UpdateSalvageBundleMarkRsp", [
            { no: 1, name: "challenge_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_type */ 1:
                    message.challengeType = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_type = 1; */
        if (message.challengeType !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeType);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateSalvageBundleMarkRsp
 */
exports.UpdateSalvageBundleMarkRsp = new UpdateSalvageBundleMarkRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStage$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStage", [
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 5:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 5; */
        if (message.openTime !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStage
 */
exports.MichiaeMatsuriStage = new MichiaeMatsuriStage$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriChestPositionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriChestPositionInfo", [
            { no: 10, name: "pos", kind: "message", T: () => define_12.Vector },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 10:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 11:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector pos = 10; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 config_id = 11; */
        if (message.configId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriChestPositionInfo
 */
exports.MichiaeMatsuriChestPositionInfo = new MichiaeMatsuriChestPositionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriChallengePositionInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriChallengePositionInfo", [
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "pos", kind: "message", T: () => define_12.Vector }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 gadget_id */ 7:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 8:
                    message.pos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.groupId);
        /* optional uint32 gadget_id = 7; */
        if (message.gadgetId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.gadgetId);
        /* optional com.midnights.game.Vector pos = 8; */
        if (message.pos)
            define_12.Vector.internalBinaryWrite(message.pos, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriChallengePositionInfo
 */
exports.MichiaeMatsuriChallengePositionInfo = new MichiaeMatsuriChallengePositionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriActivityDetailInfo", [
            { no: 6, name: "challenge_pos_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MichiaeMatsuriChallengePositionInfo },
            { no: 13, name: "gain_crystal_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unlocked_crystal_skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "chest_pos_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MichiaeMatsuriChestPositionInfo },
            { no: 14, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MichiaeMatsuriStage }
        ]);
    }
    create(value) {
        const message = { challengePosList: [], unlockedCrystalSkillList: [], chestPosList: [], stageList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MichiaeMatsuriChallengePositionInfo challenge_pos_list */ 6:
                    message.challengePosList.push(exports.MichiaeMatsuriChallengePositionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 gain_crystal_exp */ 13:
                    message.gainCrystalExp = reader.uint32();
                    break;
                case /* repeated uint32 unlocked_crystal_skill_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockedCrystalSkillList.push(reader.uint32());
                    else
                        message.unlockedCrystalSkillList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.MichiaeMatsuriChestPositionInfo chest_pos_list */ 10:
                    message.chestPosList.push(exports.MichiaeMatsuriChestPositionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.MichiaeMatsuriStage stage_list */ 14:
                    message.stageList.push(exports.MichiaeMatsuriStage.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.MichiaeMatsuriChallengePositionInfo challenge_pos_list = 6; */
        for (let i = 0; i < message.challengePosList.length; i++)
            exports.MichiaeMatsuriChallengePositionInfo.internalBinaryWrite(message.challengePosList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gain_crystal_exp = 13; */
        if (message.gainCrystalExp !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.gainCrystalExp);
        /* repeated uint32 unlocked_crystal_skill_list = 2; */
        if (message.unlockedCrystalSkillList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockedCrystalSkillList.length; i++)
                writer.uint32(message.unlockedCrystalSkillList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.MichiaeMatsuriChestPositionInfo chest_pos_list = 10; */
        for (let i = 0; i < message.chestPosList.length; i++)
            exports.MichiaeMatsuriChestPositionInfo.internalBinaryWrite(message.chestPosList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.MichiaeMatsuriStage stage_list = 14; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.MichiaeMatsuriStage.internalBinaryWrite(message.stageList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriActivityDetailInfo
 */
exports.MichiaeMatsuriActivityDetailInfo = new MichiaeMatsuriActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriDarkPressureLevelUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify", [
            { no: 8, name: "dark_pressure_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dark_pressure_level */ 8:
                    message.darkPressureLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dark_pressure_level = 8; */
        if (message.darkPressureLevel !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.darkPressureLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriDarkPressureLevelUpdateNotify
 */
exports.MichiaeMatsuriDarkPressureLevelUpdateNotify = new MichiaeMatsuriDarkPressureLevelUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriInteractStatueReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriInteractStatueReq", [
            { no: 7, name: "statue_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 statue_entity_id */ 7:
                    message.statueEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 statue_entity_id = 7; */
        if (message.statueEntityId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.statueEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriInteractStatueReq
 */
exports.MichiaeMatsuriInteractStatueReq = new MichiaeMatsuriInteractStatueReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriInteractStatueRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriInteractStatueRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriInteractStatueRsp
 */
exports.MichiaeMatsuriInteractStatueRsp = new MichiaeMatsuriInteractStatueRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriUnlockCrystalSkillReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq", [
            { no: 1, name: "crystal_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crystal_skill_id */ 1:
                    message.crystalSkillId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 crystal_skill_id = 1; */
        if (message.crystalSkillId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.crystalSkillId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillReq
 */
exports.MichiaeMatsuriUnlockCrystalSkillReq = new MichiaeMatsuriUnlockCrystalSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriUnlockCrystalSkillRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp", [
            { no: 1, name: "crystal_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 crystal_skill_id */ 1:
                    message.crystalSkillId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 crystal_skill_id = 1; */
        if (message.crystalSkillId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.crystalSkillId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriUnlockCrystalSkillRsp
 */
exports.MichiaeMatsuriUnlockCrystalSkillRsp = new MichiaeMatsuriUnlockCrystalSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartBossChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartBossChallengeReq", [
            { no: 5, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "gadget_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 5:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 gadget_entity_id */ 15:
                    message.gadgetEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty = 5; */
        if (message.difficulty !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.difficulty);
        /* optional uint32 gadget_entity_id = 15; */
        if (message.gadgetEntityId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.gadgetEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeReq
 */
exports.MichiaeMatsuriStartBossChallengeReq = new MichiaeMatsuriStartBossChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartBossChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartBossChallengeRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartBossChallengeRsp
 */
exports.MichiaeMatsuriStartBossChallengeRsp = new MichiaeMatsuriStartBossChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartDarkChallengeReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartDarkChallengeReq", [
            { no: 2, name: "worktop_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 worktop_entity_id */ 2:
                    message.worktopEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 worktop_entity_id = 2; */
        if (message.worktopEntityId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.worktopEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeReq
 */
exports.MichiaeMatsuriStartDarkChallengeReq = new MichiaeMatsuriStartDarkChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriStartDarkChallengeRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriStartDarkChallengeRsp
 */
exports.MichiaeMatsuriStartDarkChallengeRsp = new MichiaeMatsuriStartDarkChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriRemoveChestMarkNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify", [
            { no: 9, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 config_id */ 9:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 11:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 config_id = 9; */
        if (message.configId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.configId);
        /* optional uint32 group_id = 11; */
        if (message.groupId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriRemoveChestMarkNotify
 */
exports.MichiaeMatsuriRemoveChestMarkNotify = new MichiaeMatsuriRemoveChestMarkNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriRemoveChallengeMarkNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify", [
            { no: 9, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gadget_id */ 9:
                    message.gadgetId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gadget_id = 9; */
        if (message.gadgetId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.gadgetId);
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.groupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriRemoveChallengeMarkNotify
 */
exports.MichiaeMatsuriRemoveChallengeMarkNotify = new MichiaeMatsuriRemoveChallengeMarkNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MichiaeMatsuriGainCrystalExpUpdateNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify", [
            { no: 2, name: "gain_crystal_exp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gain_crystal_exp */ 2:
                    message.gainCrystalExp = reader.uint32();
                    break;
                case /* optional uint32 activity_id */ 3:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gain_crystal_exp = 2; */
        if (message.gainCrystalExp !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.gainCrystalExp);
        /* optional uint32 activity_id = 3; */
        if (message.activityId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MichiaeMatsuriGainCrystalExpUpdateNotify
 */
exports.MichiaeMatsuriGainCrystalExpUpdateNotify = new MichiaeMatsuriGainCrystalExpUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderTaskInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderTaskInfo", [
            { no: 1, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* optional bool is_finish */ 14:
                    message.isFinish = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 id = 1; */
        if (message.id !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.id);
        /* optional bool is_finish = 14; */
        if (message.isFinish !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isFinish);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderTaskInfo
 */
exports.BartenderTaskInfo = new BartenderTaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderLevelInfo", [
            { no: 7, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 7:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 max_score */ 9:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 id */ 4:
                    message.id = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finish = 7; */
        if (message.isFinish !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 max_score = 9; */
        if (message.maxScore !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional uint32 id = 4; */
        if (message.id !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.id);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderLevelInfo
 */
exports.BartenderLevelInfo = new BartenderLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderActivityDetailInfo", [
            { no: 3, name: "unlock_item_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_develop_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "unlock_level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BartenderLevelInfo },
            { no: 14, name: "unlock_formula_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "unlock_task_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.BartenderTaskInfo }
        ]);
    }
    create(value) {
        const message = { unlockItemList: [], unlockLevelList: [], unlockFormulaList: [], unlockTaskList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlock_item_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockItemList.push(reader.uint32());
                    else
                        message.unlockItemList.push(reader.uint32());
                    break;
                case /* optional bool is_develop_module_open */ 13:
                    message.isDevelopModuleOpen = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 6:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.BartenderLevelInfo unlock_level_list */ 5:
                    message.unlockLevelList.push(exports.BartenderLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 unlock_formula_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockFormulaList.push(reader.uint32());
                    else
                        message.unlockFormulaList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.BartenderTaskInfo unlock_task_list */ 2:
                    message.unlockTaskList.push(exports.BartenderTaskInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 unlock_item_list = 3; */
        if (message.unlockItemList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockItemList.length; i++)
                writer.uint32(message.unlockItemList[i]);
            writer.join();
        }
        /* optional bool is_develop_module_open = 13; */
        if (message.isDevelopModuleOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isDevelopModuleOpen);
        /* optional bool is_content_closed = 6; */
        if (message.isContentClosed !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.BartenderLevelInfo unlock_level_list = 5; */
        for (let i = 0; i < message.unlockLevelList.length; i++)
            exports.BartenderLevelInfo.internalBinaryWrite(message.unlockLevelList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 unlock_formula_list = 14; */
        if (message.unlockFormulaList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockFormulaList.length; i++)
                writer.uint32(message.unlockFormulaList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.BartenderTaskInfo unlock_task_list = 2; */
        for (let i = 0; i < message.unlockTaskList.length; i++)
            exports.BartenderTaskInfo.internalBinaryWrite(message.unlockTaskList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderActivityDetailInfo
 */
exports.BartenderActivityDetailInfo = new BartenderActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCompleteOrderReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCompleteOrderReq", [
            { no: 14, name: "cup_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "qte_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 9, name: "is_view_formula", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "optional_order_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retry_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemList: [], optionalOrderList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cup_type */ 14:
                    message.cupType = reader.uint32();
                    break;
                case /* optional uint32 qte_count */ 7:
                    message.qteCount = reader.uint32();
                    break;
                case /* optional uint32 quest_id */ 11:
                    message.questId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 10:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_view_formula */ 9:
                    message.isViewFormula = reader.bool();
                    break;
                case /* repeated uint32 optional_order_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionalOrderList.push(reader.uint32());
                    else
                        message.optionalOrderList.push(reader.uint32());
                    break;
                case /* optional uint32 retry_count */ 3:
                    message.retryCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cup_type = 14; */
        if (message.cupType !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.cupType);
        /* optional uint32 qte_count = 7; */
        if (message.qteCount !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.qteCount);
        /* optional uint32 quest_id = 11; */
        if (message.questId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.questId);
        /* repeated com.midnights.game.ItemParam item_list = 10; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_view_formula = 9; */
        if (message.isViewFormula !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isViewFormula);
        /* repeated uint32 optional_order_list = 6; */
        if (message.optionalOrderList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.optionalOrderList.length; i++)
                writer.uint32(message.optionalOrderList[i]);
            writer.join();
        }
        /* optional uint32 retry_count = 3; */
        if (message.retryCount !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.retryCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCompleteOrderReq
 */
exports.BartenderCompleteOrderReq = new BartenderCompleteOrderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCompleteOrderRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCompleteOrderRsp", [
            { no: 10, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "finish_order_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "formula_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "affix_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 10:
                    message.isNew = reader.bool();
                    break;
                case /* optional uint32 finish_order_id */ 3:
                    message.finishOrderId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 formula_id */ 6:
                    message.formulaId = reader.uint32();
                    break;
                case /* optional uint32 quest_id */ 15:
                    message.questId = reader.uint32();
                    break;
                case /* repeated uint32 affix_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new = 10; */
        if (message.isNew !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isNew);
        /* optional uint32 finish_order_id = 3; */
        if (message.finishOrderId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.finishOrderId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 formula_id = 6; */
        if (message.formulaId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.formulaId);
        /* optional uint32 quest_id = 15; */
        if (message.questId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.questId);
        /* repeated uint32 affix_list = 2; */
        if (message.affixList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.affixList.length; i++)
                writer.uint32(message.affixList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCompleteOrderRsp
 */
exports.BartenderCompleteOrderRsp = new BartenderCompleteOrderRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelOrderReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCancelOrderReq", [
            { no: 3, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 quest_id = 3; */
        if (message.questId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelOrderReq
 */
exports.BartenderCancelOrderReq = new BartenderCancelOrderReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelOrderRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCancelOrderRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 quest_id = 3; */
        if (message.questId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelOrderRsp
 */
exports.BartenderCancelOrderRsp = new BartenderCancelOrderRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderGetFormulaReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderGetFormulaReq", [
            { no: 7, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 4, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 7:
                    message.itemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 quest_id */ 4:
                    message.questId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam item_list = 7; */
        for (let i = 0; i < message.itemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 quest_id = 4; */
        if (message.questId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.questId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderGetFormulaReq
 */
exports.BartenderGetFormulaReq = new BartenderGetFormulaReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderGetFormulaRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderGetFormulaRsp", [
            { no: 12, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "affix_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "formula_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new */ 12:
                    message.isNew = reader.bool();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 affix_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                case /* optional uint32 formula_id */ 11:
                    message.formulaId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new = 12; */
        if (message.isNew !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isNew);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 affix_list = 8; */
        if (message.affixList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.affixList.length; i++)
                writer.uint32(message.affixList[i]);
            writer.join();
        }
        /* optional uint32 formula_id = 11; */
        if (message.formulaId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.formulaId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderGetFormulaRsp
 */
exports.BartenderGetFormulaRsp = new BartenderGetFormulaRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderStartLevelReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderStartLevelReq", [
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderStartLevelReq
 */
exports.BartenderStartLevelReq = new BartenderStartLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderStartLevelRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderStartLevelRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "order_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { orderList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 order_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.orderList.push(reader.uint32());
                    else
                        message.orderList.push(reader.uint32());
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 time */ 8:
                    message.time = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 order_list = 13; */
        if (message.orderList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.orderList.length; i++)
                writer.uint32(message.orderList[i]);
            writer.join();
        }
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 time = 8; */
        if (message.time !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.time);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderStartLevelRsp
 */
exports.BartenderStartLevelRsp = new BartenderStartLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelLevelReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCancelLevelReq", [
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelLevelReq
 */
exports.BartenderCancelLevelReq = new BartenderCancelLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderCancelLevelRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderCancelLevelRsp", [
            { no: 2, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 2:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 2; */
        if (message.levelId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderCancelLevelRsp
 */
exports.BartenderCancelLevelRsp = new BartenderCancelLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderLevelProgressNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderLevelProgressNotify", [
            { no: 9, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 9:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 score */ 8:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 9; */
        if (message.isNewRecord !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 score = 8; */
        if (message.score !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderLevelProgressNotify
 */
exports.BartenderLevelProgressNotify = new BartenderLevelProgressNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderFinishLevelReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderFinishLevelReq", [
            { no: 6, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 6:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 6; */
        if (message.levelId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderFinishLevelReq
 */
exports.BartenderFinishLevelReq = new BartenderFinishLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BartenderFinishLevelRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.BartenderFinishLevelRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BartenderFinishLevelRsp
 */
exports.BartenderFinishLevelRsp = new BartenderFinishLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OfficialCustomDungeon$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.OfficialCustomDungeon", [
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "win_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 win_times */ 3:
                    message.winTimes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 win_times = 3; */
        if (message.winTimes !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.winTimes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OfficialCustomDungeon
 */
exports.OfficialCustomDungeon = new OfficialCustomDungeon$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.UgcActivityDetailInfo", [
            { no: 10, name: "is_ugc_feature_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "custom_dungeon_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "official_custom_dungeon_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.OfficialCustomDungeon },
            { no: 11, name: "is_enable_ugc", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { officialCustomDungeonList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_ugc_feature_closed */ 10:
                    message.isUgcFeatureClosed = reader.bool();
                    break;
                case /* optional uint32 custom_dungeon_group_id */ 12:
                    message.customDungeonGroupId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.OfficialCustomDungeon official_custom_dungeon_list */ 5:
                    message.officialCustomDungeonList.push(exports.OfficialCustomDungeon.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_enable_ugc */ 11:
                    message.isEnableUgc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_ugc_feature_closed = 10; */
        if (message.isUgcFeatureClosed !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isUgcFeatureClosed);
        /* optional uint32 custom_dungeon_group_id = 12; */
        if (message.customDungeonGroupId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.customDungeonGroupId);
        /* repeated com.midnights.game.OfficialCustomDungeon official_custom_dungeon_list = 5; */
        for (let i = 0; i < message.officialCustomDungeonList.length; i++)
            exports.OfficialCustomDungeon.internalBinaryWrite(message.officialCustomDungeonList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_enable_ugc = 11; */
        if (message.isEnableUgc !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isEnableUgc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcActivityDetailInfo
 */
exports.UgcActivityDetailInfo = new UgcActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkActivityDetailInfo", [
            { no: 3, name: "level_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkLevelInfo },
            { no: 7, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { levelInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkLevelInfo level_info_list */ 3:
                    message.levelInfoList.push(exports.CrystalLinkLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 7:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.CrystalLinkLevelInfo level_info_list = 3; */
        for (let i = 0; i < message.levelInfoList.length; i++)
            exports.CrystalLinkLevelInfo.internalBinaryWrite(message.levelInfoList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 7; */
        if (message.difficultyId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkActivityDetailInfo
 */
exports.CrystalLinkActivityDetailInfo = new CrystalLinkActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkLevelInfo", [
            { no: 10, name: "team_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkTeamInfo },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 10:
                    message.teamInfoList.push(exports.CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 5:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 10; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            exports.CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 best_score = 5; */
        if (message.bestScore !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkLevelInfo
 */
exports.CrystalLinkLevelInfo = new CrystalLinkLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkTeamInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkTeamInfo", [
            { no: 2, name: "buff_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkBuffInfo },
            { no: 11, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkAvatarInfo }
        ]);
    }
    create(value) {
        const message = { buffInfoList: [], avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list */ 2:
                    message.buffInfoList.push(exports.CrystalLinkBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.CrystalLinkAvatarInfo avatar_info_list */ 11:
                    message.avatarInfoList.push(exports.CrystalLinkAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 2; */
        for (let i = 0; i < message.buffInfoList.length; i++)
            exports.CrystalLinkBuffInfo.internalBinaryWrite(message.buffInfoList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.CrystalLinkAvatarInfo avatar_info_list = 11; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.CrystalLinkAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkTeamInfo
 */
exports.CrystalLinkTeamInfo = new CrystalLinkTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkAvatarInfo", [
            { no: 3, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_id */ 3:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_trial */ 13:
                    message.isTrial = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint64 avatar_id = 3; */
        if (message.avatarId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint64(message.avatarId);
        /* optional bool is_trial = 13; */
        if (message.isTrial !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isTrial);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkAvatarInfo
 */
exports.CrystalLinkAvatarInfo = new CrystalLinkAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkBuffInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkBuffInfo", [
            { no: 1, name: "effect_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "cond_buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 effect_buff_id */ 1:
                    message.effectBuffId = reader.uint32();
                    break;
                case /* optional uint32 cond_buff_id */ 10:
                    message.condBuffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 effect_buff_id = 1; */
        if (message.effectBuffId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.effectBuffId);
        /* optional uint32 cond_buff_id = 10; */
        if (message.condBuffId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.condBuffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkBuffInfo
 */
exports.CrystalLinkBuffInfo = new CrystalLinkBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkEnterDungeonReq", [
            { no: 7, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "team_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkTeamInfo },
            { no: 10, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 7:
                    message.levelId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 13:
                    message.teamInfoList.push(exports.CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 difficulty_id */ 10:
                    message.difficultyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 7; */
        if (message.levelId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.levelId);
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 13; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            exports.CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 difficulty_id = 10; */
        if (message.difficultyId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.difficultyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkEnterDungeonReq
 */
exports.CrystalLinkEnterDungeonReq = new CrystalLinkEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkEnterDungeonRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "team_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkTeamInfo }
        ]);
    }
    create(value) {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 difficulty_id */ 14:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list */ 8:
                    message.teamInfoList.push(exports.CrystalLinkTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 difficulty_id = 14; */
        if (message.difficultyId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.CrystalLinkTeamInfo team_info_list = 8; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            exports.CrystalLinkTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkEnterDungeonRsp
 */
exports.CrystalLinkEnterDungeonRsp = new CrystalLinkEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkDungeonAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkDungeonAvatarInfo", [
            { no: 8, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 8:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_guid */ 11:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_trial = 8; */
        if (message.isTrial !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_guid = 11; */
        if (message.avatarGuid !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkDungeonAvatarInfo
 */
exports.CrystalLinkDungeonAvatarInfo = new CrystalLinkDungeonAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkDungeonInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkDungeonInfoNotify", [
            { no: 8, name: "buff_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkBuffInfo },
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_upper_part", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "dungeon_avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CrystalLinkDungeonAvatarInfo },
            { no: 7, name: "init_gallery_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { buffInfoList: [], dungeonAvatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list */ 8:
                    message.buffInfoList.push(exports.CrystalLinkBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_upper_part */ 15:
                    message.isUpperPart = reader.bool();
                    break;
                case /* optional uint32 difficulty_id */ 11:
                    message.difficultyId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list */ 3:
                    message.dungeonAvatarInfoList.push(exports.CrystalLinkDungeonAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 init_gallery_progress */ 7:
                    message.initGalleryProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.CrystalLinkBuffInfo buff_info_list = 8; */
        for (let i = 0; i < message.buffInfoList.length; i++)
            exports.CrystalLinkBuffInfo.internalBinaryWrite(message.buffInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_upper_part = 15; */
        if (message.isUpperPart !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isUpperPart);
        /* optional uint32 difficulty_id = 11; */
        if (message.difficultyId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.difficultyId);
        /* repeated com.midnights.game.CrystalLinkDungeonAvatarInfo dungeon_avatar_info_list = 3; */
        for (let i = 0; i < message.dungeonAvatarInfoList.length; i++)
            exports.CrystalLinkDungeonAvatarInfo.internalBinaryWrite(message.dungeonAvatarInfoList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 init_gallery_progress = 7; */
        if (message.initGalleryProgress !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.initGalleryProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkDungeonInfoNotify
 */
exports.CrystalLinkDungeonInfoNotify = new CrystalLinkDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkRestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkRestartDungeonReq
 */
exports.CrystalLinkRestartDungeonReq = new CrystalLinkRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CrystalLinkRestartDungeonRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkRestartDungeonRsp
 */
exports.CrystalLinkRestartDungeonRsp = new CrystalLinkRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickOpenActivityReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.QuickOpenActivityReq", [
            { no: 1, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 activity_id */ 1:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 activity_id = 1; */
        if (message.activityId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickOpenActivityReq
 */
exports.QuickOpenActivityReq = new QuickOpenActivityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QuickOpenActivityRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.QuickOpenActivityRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 activity_id */ 4:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 activity_id = 4; */
        if (message.activityId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QuickOpenActivityRsp
 */
exports.QuickOpenActivityRsp = new QuickOpenActivityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessMapData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessMapData", [
            { no: 6, name: "map_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "entrance_detail_info", kind: "message", T: () => cmd_multistage_play_1.IrodoriChessEntranceDetailInfo },
            { no: 3, name: "equiped_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { equipedCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 map_id */ 6:
                    message.mapId = reader.uint32();
                    break;
                case /* optional com.midnights.game.IrodoriChessEntranceDetailInfo entrance_detail_info */ 7:
                    message.entranceDetailInfo = cmd_multistage_play_1.IrodoriChessEntranceDetailInfo.internalBinaryRead(reader, reader.uint32(), options, message.entranceDetailInfo);
                    break;
                case /* repeated uint32 equiped_card_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equipedCardList.push(reader.uint32());
                    else
                        message.equipedCardList.push(reader.uint32());
                    break;
                case /* optional uint32 best_score */ 8:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 map_id = 6; */
        if (message.mapId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.mapId);
        /* optional com.midnights.game.IrodoriChessEntranceDetailInfo entrance_detail_info = 7; */
        if (message.entranceDetailInfo)
            cmd_multistage_play_1.IrodoriChessEntranceDetailInfo.internalBinaryWrite(message.entranceDetailInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 equiped_card_list = 3; */
        if (message.equipedCardList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.equipedCardList.length; i++)
                writer.uint32(message.equipedCardList[i]);
            writer.join();
        }
        /* optional uint32 best_score = 8; */
        if (message.bestScore !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessMapData
 */
exports.IrodoriChessMapData = new IrodoriChessMapData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessLevelData", [
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "hard_map_data", kind: "message", T: () => exports.IrodoriChessMapData },
            { no: 11, name: "normal_map_data", kind: "message", T: () => exports.IrodoriChessMapData }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional com.midnights.game.IrodoriChessMapData hard_map_data */ 7:
                    message.hardMapData = exports.IrodoriChessMapData.internalBinaryRead(reader, reader.uint32(), options, message.hardMapData);
                    break;
                case /* optional com.midnights.game.IrodoriChessMapData normal_map_data */ 11:
                    message.normalMapData = exports.IrodoriChessMapData.internalBinaryRead(reader, reader.uint32(), options, message.normalMapData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional com.midnights.game.IrodoriChessMapData hard_map_data = 7; */
        if (message.hardMapData)
            exports.IrodoriChessMapData.internalBinaryWrite(message.hardMapData, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriChessMapData normal_map_data = 11; */
        if (message.normalMapData)
            exports.IrodoriChessMapData.internalBinaryWrite(message.normalMapData, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessLevelData
 */
exports.IrodoriChessLevelData = new IrodoriChessLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessData", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IrodoriChessLevelData }
        ]);
    }
    create(value) {
        const message = { levelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* repeated com.midnights.game.IrodoriChessLevelData level_data_list */ 1:
                    message.levelDataList.push(exports.IrodoriChessLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isOpen);
        /* repeated com.midnights.game.IrodoriChessLevelData level_data_list = 1; */
        for (let i = 0; i < message.levelDataList.length; i++)
            exports.IrodoriChessLevelData.internalBinaryWrite(message.levelDataList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessData
 */
exports.IrodoriChessData = new IrodoriChessData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFlowerData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriFlowerData", [
            { no: 1, name: "finished_theme_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "used_flower_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { finishedThemeList: [], usedFlowerList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 finished_theme_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedThemeList.push(reader.uint32());
                    else
                        message.finishedThemeList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.ItemParam used_flower_list */ 7:
                    message.usedFlowerList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 finished_theme_list = 1; */
        if (message.finishedThemeList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedThemeList.length; i++)
                writer.uint32(message.finishedThemeList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ItemParam used_flower_list = 7; */
        for (let i = 0; i < message.usedFlowerList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.usedFlowerList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFlowerData
 */
exports.IrodoriFlowerData = new IrodoriFlowerData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriPoetryThemeData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriPoetryThemeData", [
            { no: 1, name: "scanned_index_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "line_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "max_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "min_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "selected_line_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { scannedIndexList: [], lineIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 scanned_index_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scannedIndexList.push(reader.uint32());
                    else
                        message.scannedIndexList.push(reader.uint32());
                    break;
                case /* repeated uint32 line_id_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lineIdList.push(reader.uint32());
                    else
                        message.lineIdList.push(reader.uint32());
                    break;
                case /* optional uint32 max_progress */ 2:
                    message.maxProgress = reader.uint32();
                    break;
                case /* optional uint32 theme_id */ 13:
                    message.themeId = reader.uint32();
                    break;
                case /* optional uint32 progress */ 5:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 min_progress */ 12:
                    message.minProgress = reader.uint32();
                    break;
                case /* optional uint32 selected_line_id */ 9:
                    message.selectedLineId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 scanned_index_list = 1; */
        if (message.scannedIndexList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.scannedIndexList.length; i++)
                writer.uint32(message.scannedIndexList[i]);
            writer.join();
        }
        /* repeated uint32 line_id_list = 4; */
        if (message.lineIdList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lineIdList.length; i++)
                writer.uint32(message.lineIdList[i]);
            writer.join();
        }
        /* optional uint32 max_progress = 2; */
        if (message.maxProgress !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.maxProgress);
        /* optional uint32 theme_id = 13; */
        if (message.themeId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.themeId);
        /* optional uint32 progress = 5; */
        if (message.progress !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.progress);
        /* optional uint32 min_progress = 12; */
        if (message.minProgress !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.minProgress);
        /* optional uint32 selected_line_id = 9; */
        if (message.selectedLineId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.selectedLineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriPoetryThemeData
 */
exports.IrodoriPoetryThemeData = new IrodoriPoetryThemeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriPoetryData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriPoetryData", [
            { no: 3, name: "theme_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IrodoriPoetryThemeData },
            { no: 14, name: "cur_theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { themeDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriPoetryThemeData theme_data_list */ 3:
                    message.themeDataList.push(exports.IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_theme_id */ 14:
                    message.curThemeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.IrodoriPoetryThemeData theme_data_list = 3; */
        for (let i = 0; i < message.themeDataList.length; i++)
            exports.IrodoriPoetryThemeData.internalBinaryWrite(message.themeDataList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_theme_id = 14; */
        if (message.curThemeId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.curThemeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriPoetryData
 */
exports.IrodoriPoetryData = new IrodoriPoetryData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterLevelDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterLevelDetailInfo", [
            { no: 1, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "diffculty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "min_finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_have_try", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 1:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 diffculty */ 2:
                    message.diffculty = reader.uint32();
                    break;
                case /* optional uint32 min_finish_time */ 8:
                    message.minFinishTime = reader.uint32();
                    break;
                case /* optional bool is_have_try */ 7:
                    message.isHaveTry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finish = 1; */
        if (message.isFinish !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 diffculty = 2; */
        if (message.diffculty !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.diffculty);
        /* optional uint32 min_finish_time = 8; */
        if (message.minFinishTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.minFinishTime);
        /* optional bool is_have_try = 7; */
        if (message.isHaveTry !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isHaveTry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterLevelDetailInfo
 */
exports.IrodoriMasterLevelDetailInfo = new IrodoriMasterLevelDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterLevelInfo", [
            { no: 11, name: "detail_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IrodoriMasterLevelDetailInfo },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { detailInfo: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriMasterLevelDetailInfo detail_info */ 11:
                    message.detailInfo.push(exports.IrodoriMasterLevelDetailInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.IrodoriMasterLevelDetailInfo detail_info = 11; */
        for (let i = 0; i < message.detailInfo.length; i++)
            exports.IrodoriMasterLevelDetailInfo.internalBinaryWrite(message.detailInfo[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterLevelInfo
 */
exports.IrodoriMasterLevelInfo = new IrodoriMasterLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriActivityDetailInfo", [
            { no: 11, name: "master_level_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IrodoriMasterLevelInfo },
            { no: 6, name: "flower_data", kind: "message", T: () => exports.IrodoriFlowerData },
            { no: 8, name: "poetry_data", kind: "message", T: () => exports.IrodoriPoetryData },
            { no: 14, name: "chess_data", kind: "message", T: () => exports.IrodoriChessData }
        ]);
    }
    create(value) {
        const message = { masterLevelList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IrodoriMasterLevelInfo master_level_list */ 11:
                    message.masterLevelList.push(exports.IrodoriMasterLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.IrodoriFlowerData flower_data */ 6:
                    message.flowerData = exports.IrodoriFlowerData.internalBinaryRead(reader, reader.uint32(), options, message.flowerData);
                    break;
                case /* optional com.midnights.game.IrodoriPoetryData poetry_data */ 8:
                    message.poetryData = exports.IrodoriPoetryData.internalBinaryRead(reader, reader.uint32(), options, message.poetryData);
                    break;
                case /* optional com.midnights.game.IrodoriChessData chess_data */ 14:
                    message.chessData = exports.IrodoriChessData.internalBinaryRead(reader, reader.uint32(), options, message.chessData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.IrodoriMasterLevelInfo master_level_list = 11; */
        for (let i = 0; i < message.masterLevelList.length; i++)
            exports.IrodoriMasterLevelInfo.internalBinaryWrite(message.masterLevelList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriFlowerData flower_data = 6; */
        if (message.flowerData)
            exports.IrodoriFlowerData.internalBinaryWrite(message.flowerData, writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriPoetryData poetry_data = 8; */
        if (message.poetryData)
            exports.IrodoriPoetryData.internalBinaryWrite(message.poetryData, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.IrodoriChessData chess_data = 14; */
        if (message.chessData)
            exports.IrodoriChessData.internalBinaryWrite(message.chessData, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriActivityDetailInfo
 */
exports.IrodoriActivityDetailInfo = new IrodoriActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriEditFlowerCombinationReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriEditFlowerCombinationReq", [
            { no: 13, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "combination_info", kind: "message", T: () => define_4.CustomGadgetTreeInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 13:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 1:
                    message.combinationInfo = define_4.CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 13; */
        if (message.entityId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 1; */
        if (message.combinationInfo)
            define_4.CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriEditFlowerCombinationReq
 */
exports.IrodoriEditFlowerCombinationReq = new IrodoriEditFlowerCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriEditFlowerCombinationRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriEditFlowerCombinationRsp", [
            { no: 4, name: "is_already_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_can_take_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_already_finished */ 4:
                    message.isAlreadyFinished = reader.bool();
                    break;
                case /* optional bool is_can_take_reward */ 3:
                    message.isCanTakeReward = reader.bool();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_already_finished = 4; */
        if (message.isAlreadyFinished !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isAlreadyFinished);
        /* optional bool is_can_take_reward = 3; */
        if (message.isCanTakeReward !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isCanTakeReward);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriEditFlowerCombinationRsp
 */
exports.IrodoriEditFlowerCombinationRsp = new IrodoriEditFlowerCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriScanEntityReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriScanEntityReq", [
            { no: 11, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 11:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 11; */
        if (message.entityId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriScanEntityReq
 */
exports.IrodoriScanEntityReq = new IrodoriScanEntityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriScanEntityRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriScanEntityRsp", [
            { no: 10, name: "theme_data", kind: "message", T: () => exports.IrodoriPoetryThemeData },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "is_get_inspiration", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriPoetryThemeData theme_data */ 10:
                    message.themeData = exports.IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options, message.themeData);
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_get_inspiration */ 1:
                    message.isGetInspiration = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.IrodoriPoetryThemeData theme_data = 10; */
        if (message.themeData)
            exports.IrodoriPoetryThemeData.internalBinaryWrite(message.themeData, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_get_inspiration = 1; */
        if (message.isGetInspiration !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isGetInspiration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriScanEntityRsp
 */
exports.IrodoriScanEntityRsp = new IrodoriScanEntityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFillPoetryReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriFillPoetryReq", [
            { no: 9, name: "theme_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "line_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 theme_id */ 9:
                    message.themeId = reader.uint32();
                    break;
                case /* optional uint32 line_id */ 13:
                    message.lineId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 theme_id = 9; */
        if (message.themeId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.themeId);
        /* optional uint32 line_id = 13; */
        if (message.lineId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.lineId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFillPoetryReq
 */
exports.IrodoriFillPoetryReq = new IrodoriFillPoetryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriFillPoetryRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriFillPoetryRsp", [
            { no: 13, name: "theme_data", kind: "message", T: () => exports.IrodoriPoetryThemeData },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriPoetryThemeData theme_data */ 13:
                    message.themeData = exports.IrodoriPoetryThemeData.internalBinaryRead(reader, reader.uint32(), options, message.themeData);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.IrodoriPoetryThemeData theme_data = 13; */
        if (message.themeData)
            exports.IrodoriPoetryThemeData.internalBinaryWrite(message.themeData, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriFillPoetryRsp
 */
exports.IrodoriFillPoetryRsp = new IrodoriFillPoetryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessEquipCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessEquipCardReq", [
            { no: 2, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 2:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 card_id */ 9:
                    message.cardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_hard_map = 2; */
        if (message.isHardMap !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 card_id = 9; */
        if (message.cardId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.cardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessEquipCardReq
 */
exports.IrodoriChessEquipCardReq = new IrodoriChessEquipCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessEquipCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessEquipCardRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_hard_map */ 12:
                    message.isHardMap = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_hard_map = 12; */
        if (message.isHardMap !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isHardMap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessEquipCardRsp
 */
exports.IrodoriChessEquipCardRsp = new IrodoriChessEquipCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessUnequipCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessUnequipCardReq", [
            { no: 8, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 card_id */ 8:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_hard_map */ 10:
                    message.isHardMap = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 card_id = 8; */
        if (message.cardId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_hard_map = 10; */
        if (message.isHardMap !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isHardMap);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessUnequipCardReq
 */
exports.IrodoriChessUnequipCardReq = new IrodoriChessUnequipCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriChessUnequipCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriChessUnequipCardRsp", [
            { no: 10, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "card_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 10:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 card_id */ 13:
                    message.cardId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 14:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_hard_map = 10; */
        if (message.isHardMap !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isHardMap);
        /* optional uint32 card_id = 13; */
        if (message.cardId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.cardId);
        /* optional uint32 level_id = 14; */
        if (message.levelId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriChessUnequipCardRsp
 */
exports.IrodoriChessUnequipCardRsp = new IrodoriChessUnequipCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterIrodoriChessDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterIrodoriChessDungeonReq", [
            { no: 1, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hard_map */ 1:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_hard_map = 1; */
        if (message.isHardMap !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterIrodoriChessDungeonReq
 */
exports.EnterIrodoriChessDungeonReq = new EnterIrodoriChessDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterIrodoriChessDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterIrodoriChessDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "is_hard_map", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_hard_map */ 7:
                    message.isHardMap = reader.bool();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_hard_map = 7; */
        if (message.isHardMap !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isHardMap);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterIrodoriChessDungeonRsp
 */
exports.EnterIrodoriChessDungeonRsp = new EnterIrodoriChessDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterStartGalleryReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterStartGalleryReq", [
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 4:
                    message.difficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 difficulty = 4; */
        if (message.difficulty !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterStartGalleryReq
 */
exports.IrodoriMasterStartGalleryReq = new IrodoriMasterStartGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterStartGalleryRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterStartGalleryRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterStartGalleryRsp
 */
exports.IrodoriMasterStartGalleryRsp = new IrodoriMasterStartGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterGalleryCgEndNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterGalleryCgEndNotify", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 4:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 gallery_id = 4; */
        if (message.galleryId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterGalleryCgEndNotify
 */
exports.IrodoriMasterGalleryCgEndNotify = new IrodoriMasterGalleryCgEndNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterGallerySettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IrodoriMasterGallerySettleNotify", [
            { no: 13, name: "settle_info", kind: "message", T: () => cmd_gallery_5.IrodoriMasterGallerySettleInfo },
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.IrodoriMasterGallerySettleInfo settle_info */ 13:
                    message.settleInfo = cmd_gallery_5.IrodoriMasterGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.IrodoriMasterGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            cmd_gallery_5.IrodoriMasterGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterGallerySettleNotify
 */
exports.IrodoriMasterGallerySettleNotify = new IrodoriMasterGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoPosData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoPosData", [
            { no: 15, name: "center", kind: "message", T: () => define_12.Vector },
            { no: 2, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_view", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector center */ 15:
                    message.center = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional uint32 open_time */ 2:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_view */ 4:
                    message.isView = reader.bool();
                    break;
                case /* optional uint32 pos_id */ 9:
                    message.posId = reader.uint32();
                    break;
                case /* optional bool is_open */ 6:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.Vector center = 15; */
        if (message.center)
            define_12.Vector.internalBinaryWrite(message.center, writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 open_time = 2; */
        if (message.openTime !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_view = 4; */
        if (message.isView !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isView);
        /* optional uint32 pos_id = 9; */
        if (message.posId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.posId);
        /* optional bool is_open = 6; */
        if (message.isOpen !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoPosData
 */
exports.PhotoPosData = new PhotoPosData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoActivityDetailInfo", [
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "photo_pos_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.PhotoPosData }
        ]);
    }
    create(value) {
        const message = { photoPosDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.PhotoPosData photo_pos_data_list */ 12:
                    message.photoPosDataList.push(exports.PhotoPosData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.PhotoPosData photo_pos_data_list = 12; */
        for (let i = 0; i < message.photoPosDataList.length; i++)
            exports.PhotoPosData.internalBinaryWrite(message.photoPosDataList[i], writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityDetailInfo
 */
exports.PhotoActivityDetailInfo = new PhotoActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityFinishReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoActivityFinishReq", [
            { no: 15, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "check_root_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_succ", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pos_id */ 15:
                    message.posId = reader.uint32();
                    break;
                case /* optional uint32 check_root_id */ 2:
                    message.checkRootId = reader.uint32();
                    break;
                case /* optional bool is_succ */ 5:
                    message.isSucc = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 pos_id = 15; */
        if (message.posId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.posId);
        /* optional uint32 check_root_id = 2; */
        if (message.checkRootId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.checkRootId);
        /* optional bool is_succ = 5; */
        if (message.isSucc !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isSucc);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityFinishReq
 */
exports.PhotoActivityFinishReq = new PhotoActivityFinishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityFinishRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoActivityFinishRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 pos_id */ 8:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 pos_id = 8; */
        if (message.posId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityFinishRsp
 */
exports.PhotoActivityFinishRsp = new PhotoActivityFinishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityClientViewReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoActivityClientViewReq", [
            { no: 13, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pos_id */ 13:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 pos_id = 13; */
        if (message.posId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityClientViewReq
 */
exports.PhotoActivityClientViewReq = new PhotoActivityClientViewReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoActivityClientViewRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.PhotoActivityClientViewRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "pos_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 pos_id */ 8:
                    message.posId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 pos_id = 8; */
        if (message.posId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.posId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoActivityClientViewRsp
 */
exports.PhotoActivityClientViewRsp = new PhotoActivityClientViewRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceStageData", [
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "success_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 success_times */ 1:
                    message.successTimes = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 success_times = 1; */
        if (message.successTimes !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.successTimes);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceStageData
 */
exports.SpiceStageData = new SpiceStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityDetailInfo", [
            { no: 15, name: "current_increase_avatar_fetter_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "spice_stage_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SpiceStageData },
            { no: 13, name: "increase_avatar_fetter_limit_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { spiceStageDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_increase_avatar_fetter_times */ 15:
                    message.currentIncreaseAvatarFetterTimes = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SpiceStageData spice_stage_data_list */ 7:
                    message.spiceStageDataList.push(exports.SpiceStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 increase_avatar_fetter_limit_times */ 13:
                    message.increaseAvatarFetterLimitTimes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 current_increase_avatar_fetter_times = 15; */
        if (message.currentIncreaseAvatarFetterTimes !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.currentIncreaseAvatarFetterTimes);
        /* repeated com.midnights.game.SpiceStageData spice_stage_data_list = 7; */
        for (let i = 0; i < message.spiceStageDataList.length; i++)
            exports.SpiceStageData.internalBinaryWrite(message.spiceStageDataList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 increase_avatar_fetter_limit_times = 13; */
        if (message.increaseAvatarFetterLimitTimes !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.increaseAvatarFetterLimitTimes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityDetailInfo
 */
exports.SpiceActivityDetailInfo = new SpiceActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityFinishMakeSpiceReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityFinishMakeSpiceReq", [
            { no: 4, name: "left_turns", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "left_material_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { leftMaterialIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_turns */ 4:
                    message.leftTurns = reader.uint32();
                    break;
                case /* optional bool is_success */ 9:
                    message.isSuccess = reader.bool();
                    break;
                case /* repeated uint32 left_material_id_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.leftMaterialIdList.push(reader.uint32());
                    else
                        message.leftMaterialIdList.push(reader.uint32());
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 left_turns = 4; */
        if (message.leftTurns !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.leftTurns);
        /* optional bool is_success = 9; */
        if (message.isSuccess !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* repeated uint32 left_material_id_list = 12; */
        if (message.leftMaterialIdList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.leftMaterialIdList.length; i++)
                writer.uint32(message.leftMaterialIdList[i]);
            writer.join();
        }
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceReq
 */
exports.SpiceActivityFinishMakeSpiceReq = new SpiceActivityFinishMakeSpiceReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityFinishMakeSpiceRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityFinishMakeSpiceRsp", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 3; */
        if (message.isSuccess !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityFinishMakeSpiceRsp
 */
exports.SpiceActivityFinishMakeSpiceRsp = new SpiceActivityFinishMakeSpiceRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityProcessFoodReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityProcessFoodReq", [
            { no: 1, name: "normal_food_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { normalFoodList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam normal_food_list */ 1:
                    message.normalFoodList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam normal_food_list = 1; */
        for (let i = 0; i < message.normalFoodList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.normalFoodList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityProcessFoodReq
 */
exports.SpiceActivityProcessFoodReq = new SpiceActivityProcessFoodReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityProcessFoodRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityProcessFoodRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "special_food_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 1, name: "normal_food_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { specialFoodList: [], normalFoodList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam special_food_list */ 14:
                    message.specialFoodList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ItemParam normal_food_list */ 1:
                    message.normalFoodList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam special_food_list = 14; */
        for (let i = 0; i < message.specialFoodList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.specialFoodList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam normal_food_list = 1; */
        for (let i = 0; i < message.normalFoodList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.normalFoodList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityProcessFoodRsp
 */
exports.SpiceActivityProcessFoodRsp = new SpiceActivityProcessFoodRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SpiceActivityGivingRecordNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SpiceActivityGivingRecordNotify", [
            { no: 3, name: "current_increase_avatar_fetter_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "increase_avatar_fetter_limit_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_increase_avatar_fetter_times */ 3:
                    message.currentIncreaseAvatarFetterTimes = reader.uint32();
                    break;
                case /* optional uint32 increase_avatar_fetter_limit_times */ 7:
                    message.increaseAvatarFetterLimitTimes = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 11:
                    message.avatarId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 current_increase_avatar_fetter_times = 3; */
        if (message.currentIncreaseAvatarFetterTimes !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.currentIncreaseAvatarFetterTimes);
        /* optional uint32 increase_avatar_fetter_limit_times = 7; */
        if (message.increaseAvatarFetterLimitTimes !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.increaseAvatarFetterLimitTimes);
        /* optional uint32 avatar_id = 11; */
        if (message.avatarId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SpiceActivityGivingRecordNotify
 */
exports.SpiceActivityGivingRecordNotify = new SpiceActivityGivingRecordNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaStageData", [
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "target_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { targetNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* map<uint32, uint32> target_num_map */ 14:
                    this.binaryReadMap14(message.targetNumMap, reader, options);
                    break;
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaStageData.target_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* map<uint32, uint32> target_num_map = 14; */
        for (let k of Object.keys(message.targetNumMap))
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.targetNumMap[k]).join();
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaStageData
 */
exports.GachaStageData = new GachaStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityDetailInfo", [
            { no: 6, name: "have_get_robot_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gacha_stage_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GachaStageData },
            { no: 8, name: "have_reward_robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 3, name: "tech_create_robot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "robot_finish_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { haveGetRobotList: [], gachaStageDataList: [], haveRewardRobotNumMap: {}, robotNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 have_get_robot_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.haveGetRobotList.push(reader.uint32());
                    else
                        message.haveGetRobotList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.GachaStageData gacha_stage_data_list */ 4:
                    message.gachaStageDataList.push(exports.GachaStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* map<uint32, uint32> have_reward_robot_num_map */ 8:
                    this.binaryReadMap8(message.haveRewardRobotNumMap, reader, options);
                    break;
                case /* optional uint32 tech_create_robot_id */ 3:
                    message.techCreateRobotId = reader.uint32();
                    break;
                case /* map<uint32, uint32> robot_num_map */ 5:
                    this.binaryReadMap5(message.robotNumMap, reader, options);
                    break;
                case /* optional uint32 robot_finish_num */ 12:
                    message.robotFinishNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap8(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityDetailInfo.have_reward_robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap5(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityDetailInfo.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 have_get_robot_list = 6; */
        if (message.haveGetRobotList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.haveGetRobotList.length; i++)
                writer.uint32(message.haveGetRobotList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.GachaStageData gacha_stage_data_list = 4; */
        for (let i = 0; i < message.gachaStageDataList.length; i++)
            exports.GachaStageData.internalBinaryWrite(message.gachaStageDataList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> have_reward_robot_num_map = 8; */
        for (let k of Object.keys(message.haveRewardRobotNumMap))
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.haveRewardRobotNumMap[k]).join();
        /* optional uint32 tech_create_robot_id = 3; */
        if (message.techCreateRobotId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.techCreateRobotId);
        /* map<uint32, uint32> robot_num_map = 5; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.robotNumMap[k]).join();
        /* optional uint32 robot_finish_num = 12; */
        if (message.robotFinishNum !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.robotFinishNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityDetailInfo
 */
exports.GachaActivityDetailInfo = new GachaActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityPercentNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityPercentNotify", [
            { no: 14, name: "item_stage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "target_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "sub_item_stage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "percent", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { targetNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_stage */ 14:
                    message.itemStage = reader.uint32();
                    break;
                case /* map<uint32, uint32> target_num_map */ 6:
                    this.binaryReadMap6(message.targetNumMap, reader, options);
                    break;
                case /* optional uint32 sub_item_stage */ 2:
                    message.subItemStage = reader.uint32();
                    break;
                case /* optional uint32 percent */ 13:
                    message.percent = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityPercentNotify.target_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 item_stage = 14; */
        if (message.itemStage !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.itemStage);
        /* map<uint32, uint32> target_num_map = 6; */
        for (let k of Object.keys(message.targetNumMap))
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.targetNumMap[k]).join();
        /* optional uint32 sub_item_stage = 2; */
        if (message.subItemStage !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.subItemStage);
        /* optional uint32 percent = 13; */
        if (message.percent !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.percent);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityPercentNotify
 */
exports.GachaActivityPercentNotify = new GachaActivityPercentNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityUpdateElemNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityUpdateElemNotify", [
            { no: 10, name: "elem_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 elem_type */ 10:
                    message.elemType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 elem_type = 10; */
        if (message.elemType !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.elemType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityUpdateElemNotify
 */
exports.GachaActivityUpdateElemNotify = new GachaActivityUpdateElemNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityCreateRobotReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityCreateRobotReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityCreateRobotReq
 */
exports.GachaActivityCreateRobotReq = new GachaActivityCreateRobotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityCreateRobotRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityCreateRobotRsp", [
            { no: 1, name: "robot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 robot_id */ 1:
                    message.robotId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 robot_id = 1; */
        if (message.robotId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.robotId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityCreateRobotRsp
 */
exports.GachaActivityCreateRobotRsp = new GachaActivityCreateRobotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityTakeRewardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityTakeRewardReq", [
            { no: 12, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { robotNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> robot_num_map */ 12:
                    this.binaryReadMap12(message.robotNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap12(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityTakeRewardReq.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> robot_num_map = 12; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.robotNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityTakeRewardReq
 */
exports.GachaActivityTakeRewardReq = new GachaActivityTakeRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityTakeRewardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityTakeRewardRsp", [
            { no: 3, name: "robot_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { robotNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> robot_num_map */ 3:
                    this.binaryReadMap3(message.robotNumMap, reader, options);
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GachaActivityTakeRewardRsp.robot_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> robot_num_map = 3; */
        for (let k of Object.keys(message.robotNumMap))
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.robotNumMap[k]).join();
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityTakeRewardRsp
 */
exports.GachaActivityTakeRewardRsp = new GachaActivityTakeRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityResetReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityResetReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityResetReq
 */
exports.GachaActivityResetReq = new GachaActivityResetReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityResetRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityResetRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityResetRsp
 */
exports.GachaActivityResetRsp = new GachaActivityResetRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityNextStageReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityNextStageReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityNextStageReq
 */
exports.GachaActivityNextStageReq = new GachaActivityNextStageReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GachaActivityNextStageRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GachaActivityNextStageRsp", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GachaActivityNextStageRsp
 */
exports.GachaActivityNextStageRsp = new GachaActivityNextStageRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGiveFriendGiftReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGiveFriendGiftReq", [
            { no: 5, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 5:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 schedule_id */ 1:
                    message.scheduleId = reader.uint32();
                    break;
                case /* map<uint32, uint32> gift_num_map */ 4:
                    this.binaryReadMap4(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityGiveFriendGiftReq.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 5; */
        if (message.uid !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional uint32 schedule_id = 1; */
        if (message.scheduleId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* map<uint32, uint32> gift_num_map = 4; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.giftNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGiveFriendGiftReq
 */
exports.ActivityGiveFriendGiftReq = new ActivityGiveFriendGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGiveFriendGiftRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGiveFriendGiftRsp", [
            { no: 3, name: "limit_gift_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { limitGiftList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 limit_gift_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.limitGiftList.push(reader.uint32());
                    else
                        message.limitGiftList.push(reader.uint32());
                    break;
                case /* optional uint32 schedule_id */ 4:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 limit_gift_list = 3; */
        if (message.limitGiftList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.limitGiftList.length; i++)
                writer.uint32(message.limitGiftList[i]);
            writer.join();
        }
        /* optional uint32 schedule_id = 4; */
        if (message.scheduleId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGiveFriendGiftRsp
 */
exports.ActivityGiveFriendGiftRsp = new ActivityGiveFriendGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityRecvGiftData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityRecvGiftData", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 8, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 3:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 10:
                    message.remarkName = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 14:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* map<uint32, uint32> gift_num_map */ 8:
                    this.binaryReadMap8(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap8(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityRecvGiftData.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.uid);
        /* optional string nickname = 3; */
        if (message.nickname !== undefined)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 10; */
        if (message.remarkName !== undefined)
            writer.tag(10, runtime_1.WireType.LengthDelimited).string(message.remarkName);
        /* optional com.midnights.game.ProfilePicture profile_picture = 14; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> gift_num_map = 8; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.giftNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityRecvGiftData
 */
exports.ActivityRecvGiftData = new ActivityRecvGiftData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetRecvGiftListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetRecvGiftListReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetRecvGiftListReq
 */
exports.ActivityGetRecvGiftListReq = new ActivityGetRecvGiftListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetRecvGiftListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetRecvGiftListRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "recv_gift_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityRecvGiftData },
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { recvGiftList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityRecvGiftData recv_gift_list */ 11:
                    message.recvGiftList.push(exports.ActivityRecvGiftData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityRecvGiftData recv_gift_list = 11; */
        for (let i = 0; i < message.recvGiftList.length; i++)
            exports.ActivityRecvGiftData.internalBinaryWrite(message.recvGiftList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetRecvGiftListRsp
 */
exports.ActivityGetRecvGiftListRsp = new ActivityGetRecvGiftListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityHaveRecvGiftNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityHaveRecvGiftNotify", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityHaveRecvGiftNotify
 */
exports.ActivityHaveRecvGiftNotify = new ActivityHaveRecvGiftNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiftResultInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiftResultInfo", [
            { no: 3, name: "unaccept_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 6, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "accept_gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { unacceptGiftNumMap: {}, acceptGiftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> unaccept_gift_num_map */ 3:
                    this.binaryReadMap3(message.unacceptGiftNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 6:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> accept_gift_num_map */ 13:
                    this.binaryReadMap13(message.acceptGiftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityAcceptGiftResultInfo.unaccept_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityAcceptGiftResultInfo.accept_gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> unaccept_gift_num_map = 3; */
        for (let k of Object.keys(message.unacceptGiftNumMap))
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.unacceptGiftNumMap[k]).join();
        /* optional uint32 uid = 6; */
        if (message.uid !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> accept_gift_num_map = 13; */
        for (let k of Object.keys(message.acceptGiftNumMap))
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.acceptGiftNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiftResultInfo
 */
exports.ActivityAcceptGiftResultInfo = new ActivityAcceptGiftResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiveGiftReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiveGiftReq", [
            { no: 3, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 3:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 12:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 3; */
        if (message.scheduleId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional uint32 uid = 12; */
        if (message.uid !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiveGiftReq
 */
exports.ActivityAcceptGiveGiftReq = new ActivityAcceptGiveGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptGiveGiftRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityAcceptGiveGiftRsp", [
            { no: 4, name: "accept_gift_result_info", kind: "message", T: () => exports.ActivityAcceptGiftResultInfo },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info */ 4:
                    message.acceptGiftResultInfo = exports.ActivityAcceptGiftResultInfo.internalBinaryRead(reader, reader.uint32(), options, message.acceptGiftResultInfo);
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info = 4; */
        if (message.acceptGiftResultInfo)
            exports.ActivityAcceptGiftResultInfo.internalBinaryWrite(message.acceptGiftResultInfo, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptGiveGiftRsp
 */
exports.ActivityAcceptGiveGiftRsp = new ActivityAcceptGiveGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptAllGiveGiftReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityAcceptAllGiveGiftReq", [
            { no: 3, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 3:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 3; */
        if (message.scheduleId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptAllGiveGiftReq
 */
exports.ActivityAcceptAllGiveGiftReq = new ActivityAcceptAllGiveGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityAcceptAllGiveGiftRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityAcceptAllGiveGiftRsp", [
            { no: 5, name: "accept_gift_result_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityAcceptGiftResultInfo },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { acceptGiftResultInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info_list */ 5:
                    message.acceptGiftResultInfoList.push(exports.ActivityAcceptGiftResultInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ActivityAcceptGiftResultInfo accept_gift_result_info_list = 5; */
        for (let i = 0; i < message.acceptGiftResultInfoList.length; i++)
            exports.ActivityAcceptGiftResultInfo.internalBinaryWrite(message.acceptGiftResultInfoList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityAcceptAllGiveGiftRsp
 */
exports.ActivityAcceptAllGiveGiftRsp = new ActivityAcceptAllGiveGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetCanGiveFriendGiftReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetCanGiveFriendGiftReq", [
            { no: 8, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 8:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 8; */
        if (message.scheduleId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftReq
 */
exports.ActivityGetCanGiveFriendGiftReq = new ActivityGetCanGiveFriendGiftReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetCanGiveFriendGiftRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetCanGiveFriendGiftRsp", [
            { no: 7, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value) {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 7:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* map<uint32, uint32> gift_num_map */ 14:
                    this.binaryReadMap14(message.giftNumMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap14(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityGetCanGiveFriendGiftRsp.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 7; */
        if (message.scheduleId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        /* map<uint32, uint32> gift_num_map = 14; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.giftNumMap[k]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetCanGiveFriendGiftRsp
 */
exports.ActivityGetCanGiveFriendGiftRsp = new ActivityGetCanGiveFriendGiftRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySetGiftWishReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivitySetGiftWishReq", [
            { no: 2, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> gift_num_map */ 2:
                    this.binaryReadMap2(message.giftNumMap, reader, options);
                    break;
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivitySetGiftWishReq.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> gift_num_map = 2; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.giftNumMap[k]).join();
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySetGiftWishReq
 */
exports.ActivitySetGiftWishReq = new ActivitySetGiftWishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivitySetGiftWishRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivitySetGiftWishRsp", [
            { no: 15, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 15:
                    message.scheduleId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 15; */
        if (message.scheduleId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivitySetGiftWishRsp
 */
exports.ActivitySetGiftWishRsp = new ActivitySetGiftWishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityFriendGiftWishData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityFriendGiftWishData", [
            { no: 7, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "remark_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "profile_picture", kind: "message", T: () => define_9.ProfilePicture },
            { no: 9, name: "gift_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 8, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { giftNumMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 7:
                    message.nickname = reader.string();
                    break;
                case /* optional string remark_name */ 3:
                    message.remarkName = reader.string();
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 11:
                    message.profilePicture = define_9.ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* map<uint32, uint32> gift_num_map */ 9:
                    this.binaryReadMap9(message.giftNumMap, reader, options);
                    break;
                case /* optional uint32 uid */ 8:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap9(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ActivityFriendGiftWishData.gift_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional string nickname = 7; */
        if (message.nickname !== undefined)
            writer.tag(7, runtime_1.WireType.LengthDelimited).string(message.nickname);
        /* optional string remark_name = 3; */
        if (message.remarkName !== undefined)
            writer.tag(3, runtime_1.WireType.LengthDelimited).string(message.remarkName);
        /* optional com.midnights.game.ProfilePicture profile_picture = 11; */
        if (message.profilePicture)
            define_9.ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, uint32> gift_num_map = 9; */
        for (let k of Object.keys(message.giftNumMap))
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.giftNumMap[k]).join();
        /* optional uint32 uid = 8; */
        if (message.uid !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityFriendGiftWishData
 */
exports.ActivityFriendGiftWishData = new ActivityFriendGiftWishData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetFriendGiftWishListReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetFriendGiftWishListReq", [
            { no: 6, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 6:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 6; */
        if (message.scheduleId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetFriendGiftWishListReq
 */
exports.ActivityGetFriendGiftWishListReq = new ActivityGetFriendGiftWishListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityGetFriendGiftWishListRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityGetFriendGiftWishListRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "friend_gift_wish_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityFriendGiftWishData },
            { no: 10, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { friendGiftWishList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ActivityFriendGiftWishData friend_gift_wish_list */ 11:
                    message.friendGiftWishList.push(exports.ActivityFriendGiftWishData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 schedule_id */ 10:
                    message.scheduleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ActivityFriendGiftWishData friend_gift_wish_list = 11; */
        for (let i = 0; i < message.friendGiftWishList.length; i++)
            exports.ActivityFriendGiftWishData.internalBinaryWrite(message.friendGiftWishList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 schedule_id = 10; */
        if (message.scheduleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.scheduleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityGetFriendGiftWishListRsp
 */
exports.ActivityGetFriendGiftWishListRsp = new ActivityGetFriendGiftWishListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeActivityDetailInfo", [
            { no: 11, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "is_final_gallery_complete", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "current_stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 best_score */ 11:
                    message.bestScore = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 6:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional bool is_final_gallery_complete */ 12:
                    message.isFinalGalleryComplete = reader.bool();
                    break;
                case /* optional uint32 current_stage_id */ 15:
                    message.currentStageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 best_score = 11; */
        if (message.bestScore !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.bestScore);
        /* optional bool is_content_closed = 6; */
        if (message.isContentClosed !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional bool is_final_gallery_complete = 12; */
        if (message.isFinalGalleryComplete !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isFinalGalleryComplete);
        /* optional uint32 current_stage_id = 15; */
        if (message.currentStageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.currentStageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeActivityDetailInfo
 */
exports.LuminanceStoneChallengeActivityDetailInfo = new LuminanceStoneChallengeActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeSettleInfo", [
            { no: 13, name: "settle_info", kind: "message", T: () => cmd_gallery_4.LuminanceStoneChallengeGallerySettleInfo },
            { no: 12, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LuminanceStoneChallengeGallerySettleInfo settle_info */ 13:
                    message.settleInfo = cmd_gallery_4.LuminanceStoneChallengeGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional bool is_new_record */ 12:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.LuminanceStoneChallengeGallerySettleInfo settle_info = 13; */
        if (message.settleInfo)
            cmd_gallery_4.LuminanceStoneChallengeGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_new_record = 12; */
        if (message.isNewRecord !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeSettleInfo
 */
exports.LuminanceStoneChallengeSettleInfo = new LuminanceStoneChallengeSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeSettleNotify", [
            { no: 10, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "settle_info", kind: "message", T: () => exports.LuminanceStoneChallengeSettleInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 10:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.LuminanceStoneChallengeSettleInfo settle_info */ 13:
                    message.settleInfo = exports.LuminanceStoneChallengeSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 10; */
        if (message.galleryId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.LuminanceStoneChallengeSettleInfo settle_info = 13; */
        if (message.settleInfo)
            exports.LuminanceStoneChallengeSettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeSettleNotify
 */
exports.LuminanceStoneChallengeSettleNotify = new LuminanceStoneChallengeSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonRecord$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonRecord", [
            { no: 10, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "max_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 10:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 max_round */ 5:
                    message.maxRound = reader.uint32();
                    break;
                case /* optional uint32 finish_time */ 15:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 13:
                    message.difficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finish = 10; */
        if (message.isFinish !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 max_round = 5; */
        if (message.maxRound !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.maxRound);
        /* optional uint32 finish_time = 15; */
        if (message.finishTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.finishTime);
        /* optional uint32 difficulty = 13; */
        if (message.difficulty !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonRecord
 */
exports.RogueDiaryDungeonRecord = new RogueDiaryDungeonRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryStageInfo", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "best_record", kind: "message", T: () => exports.RogueDiaryDungeonRecord },
            { no: 10, name: "is_have_try", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                case /* optional com.midnights.game.RogueDiaryDungeonRecord best_record */ 12:
                    message.bestRecord = exports.RogueDiaryDungeonRecord.internalBinaryRead(reader, reader.uint32(), options, message.bestRecord);
                    break;
                case /* optional bool is_have_try */ 10:
                    message.isHaveTry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional com.midnights.game.RogueDiaryDungeonRecord best_record = 12; */
        if (message.bestRecord)
            exports.RogueDiaryDungeonRecord.internalBinaryWrite(message.bestRecord, writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_have_try = 10; */
        if (message.isHaveTry !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isHaveTry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryStageInfo
 */
exports.RogueDiaryStageInfo = new RogueDiaryStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryProgress$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryProgress", [
            { no: 7, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "optional_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_enter_dungeon", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { optionalCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 7:
                    message.difficulty = reader.uint32();
                    break;
                case /* repeated uint32 optional_card_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.optionalCardList.push(reader.uint32());
                    else
                        message.optionalCardList.push(reader.uint32());
                    break;
                case /* optional bool is_enter_dungeon */ 9:
                    message.isEnterDungeon = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 cur_round */ 3:
                    message.curRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty = 7; */
        if (message.difficulty !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.difficulty);
        /* repeated uint32 optional_card_list = 4; */
        if (message.optionalCardList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.optionalCardList.length; i++)
                writer.uint32(message.optionalCardList[i]);
            writer.join();
        }
        /* optional bool is_enter_dungeon = 9; */
        if (message.isEnterDungeon !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isEnterDungeon);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 cur_round = 3; */
        if (message.curRound !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.curRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryProgress
 */
exports.RogueDiaryProgress = new RogueDiaryProgress$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryActivityDetailInfo", [
            { no: 11, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryStageInfo },
            { no: 10, name: "is_have_progress", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "cur_progress", kind: "message", T: () => exports.RogueDiaryProgress }
        ]);
    }
    create(value) {
        const message = { stageList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryStageInfo stage_list */ 11:
                    message.stageList.push(exports.RogueDiaryStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_have_progress */ 10:
                    message.isHaveProgress = reader.bool();
                    break;
                case /* optional bool is_content_closed */ 2:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.RogueDiaryProgress cur_progress */ 7:
                    message.curProgress = exports.RogueDiaryProgress.internalBinaryRead(reader, reader.uint32(), options, message.curProgress);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueDiaryStageInfo stage_list = 11; */
        for (let i = 0; i < message.stageList.length; i++)
            exports.RogueDiaryStageInfo.internalBinaryWrite(message.stageList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_have_progress = 10; */
        if (message.isHaveProgress !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isHaveProgress);
        /* optional bool is_content_closed = 2; */
        if (message.isContentClosed !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.RogueDiaryProgress cur_progress = 7; */
        if (message.curProgress)
            exports.RogueDiaryProgress.internalBinaryWrite(message.curProgress, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryActivityDetailInfo
 */
exports.RogueDiaryActivityDetailInfo = new RogueDiaryActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryAvatar$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryAvatar", [
            { no: 2, name: "avatar", kind: "message", T: () => define_2.ActivityDungeonAvatar },
            { no: 14, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "tired_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "disable_status_list", kind: "enum", repeat: 1 /*RepeatType.PACKED*/, T: () => ["com.midnights.game.RogueDiaryAvatarDisableStatus", RogueDiaryAvatarDisableStatus] }
        ]);
    }
    create(value) {
        const message = { disableStatusList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityDungeonAvatar avatar */ 2:
                    message.avatar = define_2.ActivityDungeonAvatar.internalBinaryRead(reader, reader.uint32(), options, message.avatar);
                    break;
                case /* optional uint32 level */ 14:
                    message.level = reader.uint32();
                    break;
                case /* optional uint32 tired_round */ 13:
                    message.tiredRound = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatarDisableStatus disable_status_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.disableStatusList.push(reader.int32());
                    else
                        message.disableStatusList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ActivityDungeonAvatar avatar = 2; */
        if (message.avatar)
            define_2.ActivityDungeonAvatar.internalBinaryWrite(message.avatar, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level = 14; */
        if (message.level !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.level);
        /* optional uint32 tired_round = 13; */
        if (message.tiredRound !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.tiredRound);
        /* repeated com.midnights.game.RogueDiaryAvatarDisableStatus disable_status_list = 9; */
        if (message.disableStatusList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.disableStatusList.length; i++)
                writer.int32(message.disableStatusList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryAvatar
 */
exports.RogueDiaryAvatar = new RogueDiaryAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryRoomInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryRoomInfo", [
            { no: 1, name: "monster_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_13.Uint32Pair },
            { no: 3, name: "is_boss", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { monsterList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Uint32Pair monster_list */ 1:
                    message.monsterList.push(define_13.Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_boss */ 3:
                    message.isBoss = reader.bool();
                    break;
                case /* optional uint32 config_id */ 7:
                    message.configId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.Uint32Pair monster_list = 1; */
        for (let i = 0; i < message.monsterList.length; i++)
            define_13.Uint32Pair.internalBinaryWrite(message.monsterList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_boss = 3; */
        if (message.isBoss !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isBoss);
        /* optional uint32 config_id = 7; */
        if (message.configId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.configId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryRoomInfo
 */
exports.RogueDiaryRoomInfo = new RogueDiaryRoomInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryPlayReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueDiaryPlayReq", [
            { no: 1, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficulty */ 1:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 difficulty = 1; */
        if (message.difficulty !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.difficulty);
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryPlayReq
 */
exports.StartRogueDiaryPlayReq = new StartRogueDiaryPlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryPlayRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueDiaryPlayRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "trial_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar },
            { no: 12, name: "rand_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = { trialAvatarList: [], randCardList: [], avatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list */ 13:
                    message.trialAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 rand_card_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar avatar_list */ 9:
                    message.avatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 13; */
        for (let i = 0; i < message.trialAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.trialAvatarList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 rand_card_list = 12; */
        if (message.randCardList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.randCardList.length; i++)
                writer.uint32(message.randCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar avatar_list = 9; */
        for (let i = 0; i < message.avatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryPlayRsp
 */
exports.StartRogueDiaryPlayRsp = new StartRogueDiaryPlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRogueDiaryPlayReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ResetRogueDiaryPlayReq", [
            { no: 5, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 5:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 5; */
        if (message.stageId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResetRogueDiaryPlayReq
 */
exports.ResetRogueDiaryPlayReq = new ResetRogueDiaryPlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResetRogueDiaryPlayRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ResetRogueDiaryPlayRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResetRogueDiaryPlayRsp
 */
exports.ResetRogueDiaryPlayRsp = new ResetRogueDiaryPlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRogueDiaryDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterRogueDiaryDungeonReq", [
            { no: 9, name: "chosen_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "chosen_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = { chosenCardList: [], chosenAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 chosen_card_list */ 9:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list */ 11:
                    message.chosenAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 chosen_card_list = 9; */
        if (message.chosenCardList.length) {
            writer.tag(9, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenCardList.length; i++)
                writer.uint32(message.chosenCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 11; */
        for (let i = 0; i < message.chosenAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.chosenAvatarList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRogueDiaryDungeonReq
 */
exports.EnterRogueDiaryDungeonReq = new EnterRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterRogueDiaryDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterRogueDiaryDungeonRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterRogueDiaryDungeonRsp
 */
exports.EnterRogueDiaryDungeonRsp = new EnterRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeRogueDiaryDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ResumeRogueDiaryDungeonReq", [
            { no: 2, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 2:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 2; */
        if (message.stageId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResumeRogueDiaryDungeonReq
 */
exports.ResumeRogueDiaryDungeonReq = new ResumeRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResumeRogueDiaryDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ResumeRogueDiaryDungeonRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResumeRogueDiaryDungeonRsp
 */
exports.ResumeRogueDiaryDungeonRsp = new ResumeRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonInfoNotify", [
            { no: 12, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "round_monster_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "cur_room", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "room_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryRoomInfo },
            { no: 10, name: "round_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { roundMonsterList: [], roomList: [], roundCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 12:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 round_monster_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundMonsterList.push(reader.uint32());
                    else
                        message.roundMonsterList.push(reader.uint32());
                    break;
                case /* optional uint32 time */ 4:
                    message.time = reader.uint32();
                    break;
                case /* optional uint32 cur_room */ 5:
                    message.curRoom = reader.uint32();
                    break;
                case /* optional uint32 cur_round */ 6:
                    message.curRound = reader.uint32();
                    break;
                case /* optional uint32 coin */ 11:
                    message.coin = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 8:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.RogueDiaryRoomInfo room_list */ 7:
                    message.roomList.push(exports.RogueDiaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 round_card_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.roundCardList.push(reader.uint32());
                    else
                        message.roundCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 12; */
        if (message.stageId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated uint32 round_monster_list = 15; */
        if (message.roundMonsterList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roundMonsterList.length; i++)
                writer.uint32(message.roundMonsterList[i]);
            writer.join();
        }
        /* optional uint32 time = 4; */
        if (message.time !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.time);
        /* optional uint32 cur_room = 5; */
        if (message.curRoom !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.curRoom);
        /* optional uint32 cur_round = 6; */
        if (message.curRound !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.curRound);
        /* optional uint32 coin = 11; */
        if (message.coin !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.coin);
        /* optional uint32 difficulty = 8; */
        if (message.difficulty !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.difficulty);
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* repeated com.midnights.game.RogueDiaryRoomInfo room_list = 7; */
        for (let i = 0; i < message.roomList.length; i++)
            exports.RogueDiaryRoomInfo.internalBinaryWrite(message.roomList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 round_card_list = 10; */
        if (message.roundCardList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.roundCardList.length; i++)
                writer.uint32(message.roundCardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonInfoNotify
 */
exports.RogueDiaryDungeonInfoNotify = new RogueDiaryDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryDungeonSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryDungeonSettleNotify", [
            { no: 1, name: "explore_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 explore_time */ 1:
                    message.exploreTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 cur_round */ 2:
                    message.curRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 explore_time = 1; */
        if (message.exploreTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.exploreTime);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 cur_round = 2; */
        if (message.curRound !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.curRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryDungeonSettleNotify
 */
exports.RogueDiaryDungeonSettleNotify = new RogueDiaryDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryRoomReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueDiaryRoomReq", [
            { no: 13, name: "room_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_select_hard", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 room_difficulty */ 13:
                    message.roomDifficulty = reader.uint32();
                    break;
                case /* optional bool is_select_hard */ 1:
                    message.isSelectHard = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 room_difficulty = 13; */
        if (message.roomDifficulty !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.roomDifficulty);
        /* optional bool is_select_hard = 1; */
        if (message.isSelectHard !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isSelectHard);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryRoomReq
 */
exports.StartRogueDiaryRoomReq = new StartRogueDiaryRoomReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StartRogueDiaryRoomRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.StartRogueDiaryRoomRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StartRogueDiaryRoomRsp
 */
exports.StartRogueDiaryRoomRsp = new StartRogueDiaryRoomRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryTiredAvatarNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryTiredAvatarNotify", [
            { no: 10, name: "optianal_tired_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar },
            { no: 6, name: "reserve_avatar_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "tired_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_need_show", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { optianalTiredAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryAvatar optianal_tired_avatar_list */ 10:
                    message.optianalTiredAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 reserve_avatar_num */ 6:
                    message.reserveAvatarNum = reader.uint32();
                    break;
                case /* optional uint32 tired_type */ 8:
                    message.tiredType = reader.uint32();
                    break;
                case /* optional bool is_need_show */ 7:
                    message.isNeedShow = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueDiaryAvatar optianal_tired_avatar_list = 10; */
        for (let i = 0; i < message.optianalTiredAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.optianalTiredAvatarList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 reserve_avatar_num = 6; */
        if (message.reserveAvatarNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.reserveAvatarNum);
        /* optional uint32 tired_type = 8; */
        if (message.tiredType !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.tiredType);
        /* optional bool is_need_show = 7; */
        if (message.isNeedShow !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isNeedShow);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryTiredAvatarNotify
 */
exports.RogueDiaryTiredAvatarNotify = new RogueDiaryTiredAvatarNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveRogueDiaryAvatarReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ReserveRogueDiaryAvatarReq", [
            { no: 6, name: "reserve_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = { reserveAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RogueDiaryAvatar reserve_avatar_list */ 6:
                    message.reserveAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RogueDiaryAvatar reserve_avatar_list = 6; */
        for (let i = 0; i < message.reserveAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.reserveAvatarList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReserveRogueDiaryAvatarReq
 */
exports.ReserveRogueDiaryAvatarReq = new ReserveRogueDiaryAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReserveRogueDiaryAvatarRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ReserveRogueDiaryAvatarRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReserveRogueDiaryAvatarRsp
 */
exports.ReserveRogueDiaryAvatarRsp = new ReserveRogueDiaryAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRogueDairyRepairInfoReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetRogueDairyRepairInfoReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetRogueDairyRepairInfoReq
 */
exports.GetRogueDairyRepairInfoReq = new GetRogueDairyRepairInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetRogueDairyRepairInfoRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GetRogueDairyRepairInfoRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetRogueDairyRepairInfoRsp
 */
exports.GetRogueDairyRepairInfoRsp = new GetRogueDairyRepairInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRogueDiaryCardReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RefreshRogueDiaryCardReq", [
            { no: 8, name: "refresh_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { refreshCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 refresh_card_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.refreshCardList.push(reader.uint32());
                    else
                        message.refreshCardList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 refresh_card_list = 8; */
        if (message.refreshCardList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.refreshCardList.length; i++)
                writer.uint32(message.refreshCardList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRogueDiaryCardReq
 */
exports.RefreshRogueDiaryCardReq = new RefreshRogueDiaryCardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RefreshRogueDiaryCardRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RefreshRogueDiaryCardRsp", [
            { no: 15, name: "rand_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = { randCardList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 rand_card_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 rand_card_list = 15; */
        if (message.randCardList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.randCardList.length; i++)
                writer.uint32(message.randCardList[i]);
            writer.join();
        }
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RefreshRogueDiaryCardRsp
 */
exports.RefreshRogueDiaryCardRsp = new RefreshRogueDiaryCardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueFinishRepairReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueFinishRepairReq", [
            { no: 1, name: "chosen_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "chosen_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = { chosenCardList: [], chosenAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 chosen_card_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list */ 8:
                    message.chosenAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 chosen_card_list = 1; */
        if (message.chosenCardList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenCardList.length; i++)
                writer.uint32(message.chosenCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar chosen_avatar_list = 8; */
        for (let i = 0; i < message.chosenAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.chosenAvatarList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueFinishRepairReq
 */
exports.RogueFinishRepairReq = new RogueFinishRepairReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueFinishRepairRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueFinishRepairRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueFinishRepairRsp
 */
exports.RogueFinishRepairRsp = new RogueFinishRepairRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryInterruptRogueDiaryDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TryInterruptRogueDiaryDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonReq
 */
exports.TryInterruptRogueDiaryDungeonReq = new TryInterruptRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryInterruptRogueDiaryDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TryInterruptRogueDiaryDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryInterruptRogueDiaryDungeonRsp
 */
exports.TryInterruptRogueDiaryDungeonRsp = new TryInterruptRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryRepairInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryRepairInfoNotify", [
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "select_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar },
            { no: 2, name: "room_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryRoomInfo },
            { no: 10, name: "rand_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "select_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar },
            { no: 15, name: "chosen_card_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "trial_avatar_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = { selectCardList: [], avatarList: [], roomList: [], randCardList: [], selectAvatarList: [], chosenCardList: [], trialAvatarList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 select_card_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.selectCardList.push(reader.uint32());
                    else
                        message.selectCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar avatar_list */ 13:
                    message.avatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.RogueDiaryRoomInfo room_list */ 2:
                    message.roomList.push(exports.RogueDiaryRoomInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 rand_card_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.randCardList.push(reader.uint32());
                    else
                        message.randCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar select_avatar_list */ 9:
                    message.selectAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 chosen_card_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.chosenCardList.push(reader.uint32());
                    else
                        message.chosenCardList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list */ 11:
                    message.trialAvatarList.push(exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated uint32 select_card_list = 14; */
        if (message.selectCardList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.selectCardList.length; i++)
                writer.uint32(message.selectCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar avatar_list = 13; */
        for (let i = 0; i < message.avatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.RogueDiaryRoomInfo room_list = 2; */
        for (let i = 0; i < message.roomList.length; i++)
            exports.RogueDiaryRoomInfo.internalBinaryWrite(message.roomList[i], writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 rand_card_list = 10; */
        if (message.randCardList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.randCardList.length; i++)
                writer.uint32(message.randCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar select_avatar_list = 9; */
        for (let i = 0; i < message.selectAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.selectAvatarList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 chosen_card_list = 15; */
        if (message.chosenCardList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.chosenCardList.length; i++)
                writer.uint32(message.chosenCardList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.RogueDiaryAvatar trial_avatar_list = 11; */
        for (let i = 0; i < message.trialAvatarList.length; i++)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.trialAvatarList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryRepairInfoNotify
 */
exports.RogueDiaryRepairInfoNotify = new RogueDiaryRepairInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryCurRogueDiaryDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RetryCurRogueDiaryDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RetryCurRogueDiaryDungeonReq
 */
exports.RetryCurRogueDiaryDungeonReq = new RetryCurRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RetryCurRogueDiaryDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RetryCurRogueDiaryDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RetryCurRogueDiaryDungeonRsp
 */
exports.RetryCurRogueDiaryDungeonRsp = new RetryCurRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryReviveAvatarReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryReviveAvatarReq", [
            { no: 2, name: "revive_avatar", kind: "message", T: () => exports.RogueDiaryAvatar }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.RogueDiaryAvatar revive_avatar */ 2:
                    message.reviveAvatar = exports.RogueDiaryAvatar.internalBinaryRead(reader, reader.uint32(), options, message.reviveAvatar);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.RogueDiaryAvatar revive_avatar = 2; */
        if (message.reviveAvatar)
            exports.RogueDiaryAvatar.internalBinaryWrite(message.reviveAvatar, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryReviveAvatarReq
 */
exports.RogueDiaryReviveAvatarReq = new RogueDiaryReviveAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryReviveAvatarRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryReviveAvatarRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryReviveAvatarRsp
 */
exports.RogueDiaryReviveAvatarRsp = new RogueDiaryReviveAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryEnterNextRogueDiaryDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TryEnterNextRogueDiaryDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonReq
 */
exports.TryEnterNextRogueDiaryDungeonReq = new TryEnterNextRogueDiaryDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TryEnterNextRogueDiaryDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TryEnterNextRogueDiaryDungeonRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TryEnterNextRogueDiaryDungeonRsp
 */
exports.TryEnterNextRogueDiaryDungeonRsp = new TryEnterNextRogueDiaryDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryCoinAddNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RogueDiaryCoinAddNotify", [
            { no: 10, name: "num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 num */ 10:
                    message.num = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 num = 10; */
        if (message.num !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.num);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RogueDiaryCoinAddNotify
 */
exports.RogueDiaryCoinAddNotify = new RogueDiaryCoinAddNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2DetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2DetailInfo", [
            { no: 13, name: "dungeon_stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SummerTimeV2DungeonStageInfo },
            { no: 10, name: "cur_dungeon_reward_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "taken_reward_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "boat_stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.SummerTimeV2BoatStageInfo }
        ]);
    }
    create(value) {
        const message = { dungeonStageInfoList: [], boatStageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SummerTimeV2DungeonStageInfo dungeon_stage_info_list */ 13:
                    message.dungeonStageInfoList.push(exports.SummerTimeV2DungeonStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cur_dungeon_reward_limit */ 10:
                    message.curDungeonRewardLimit = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 4:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional uint32 taken_reward_count */ 5:
                    message.takenRewardCount = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SummerTimeV2BoatStageInfo boat_stage_info_list */ 15:
                    message.boatStageInfoList.push(exports.SummerTimeV2BoatStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.SummerTimeV2DungeonStageInfo dungeon_stage_info_list = 13; */
        for (let i = 0; i < message.dungeonStageInfoList.length; i++)
            exports.SummerTimeV2DungeonStageInfo.internalBinaryWrite(message.dungeonStageInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_dungeon_reward_limit = 10; */
        if (message.curDungeonRewardLimit !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.curDungeonRewardLimit);
        /* optional bool is_content_closed = 4; */
        if (message.isContentClosed !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional uint32 taken_reward_count = 5; */
        if (message.takenRewardCount !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.takenRewardCount);
        /* repeated com.midnights.game.SummerTimeV2BoatStageInfo boat_stage_info_list = 15; */
        for (let i = 0; i < message.boatStageInfoList.length; i++)
            exports.SummerTimeV2BoatStageInfo.internalBinaryWrite(message.boatStageInfoList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2DetailInfo
 */
exports.SummerTimeV2DetailInfo = new SummerTimeV2DetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2DungeonStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2DungeonStageInfo", [
            { no: 10, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_prev_dungeon_succeed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 10:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 12:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_prev_dungeon_succeed */ 15:
                    message.isPrevDungeonSucceed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 10; */
        if (message.stageId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 12; */
        if (message.openTime !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_prev_dungeon_succeed = 15; */
        if (message.isPrevDungeonSucceed !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isPrevDungeonSucceed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2DungeonStageInfo
 */
exports.SummerTimeV2DungeonStageInfo = new SummerTimeV2DungeonStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2BoatStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2BoatStageInfo", [
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 14:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 10:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 13:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 14; */
        if (message.isOpen !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 10; */
        if (message.stageId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 best_score = 13; */
        if (message.bestScore !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2BoatStageInfo
 */
exports.SummerTimeV2BoatStageInfo = new SummerTimeV2BoatStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2BoatSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2BoatSettleNotify", [
            { no: 11, name: "settle_info", kind: "message", T: () => cmd_gallery_3.SummerTimeV2BoatGallerySettleInfo },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SummerTimeV2BoatGallerySettleInfo settle_info */ 11:
                    message.settleInfo = cmd_gallery_3.SummerTimeV2BoatGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.settleInfo);
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 1:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.SummerTimeV2BoatGallerySettleInfo settle_info = 11; */
        if (message.settleInfo)
            cmd_gallery_3.SummerTimeV2BoatGallerySettleInfo.internalBinaryWrite(message.settleInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 gallery_id = 1; */
        if (message.galleryId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2BoatSettleNotify
 */
exports.SummerTimeV2BoatSettleNotify = new SummerTimeV2BoatSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPushTipsData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityPushTipsData", [
            { no: 10, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.ActivityPushTipsState", ActivityPushTipsState, "ACTIVITY_PUSH_TIPS_STATE_"] },
            { no: 4, name: "activity_push_tips_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ActivityPushTipsState state */ 10:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 activity_push_tips_id */ 4:
                    message.activityPushTipsId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.ActivityPushTipsState state = 10; */
        if (message.state !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.state);
        /* optional uint32 activity_push_tips_id = 4; */
        if (message.activityPushTipsId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.activityPushTipsId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPushTipsData
 */
exports.ActivityPushTipsData = new ActivityPushTipsData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityPushTipsInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityPushTipsInfoNotify", [
            { no: 14, name: "schedule_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "activity_push_tips_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.ActivityPushTipsData },
            { no: 10, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activityPushTipsDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 schedule_id */ 14:
                    message.scheduleId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list */ 3:
                    message.activityPushTipsDataList.push(exports.ActivityPushTipsData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 activity_id */ 10:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 schedule_id = 14; */
        if (message.scheduleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.scheduleId);
        /* repeated com.midnights.game.ActivityPushTipsData activity_push_tips_data_list = 3; */
        for (let i = 0; i < message.activityPushTipsDataList.length; i++)
            exports.ActivityPushTipsData.internalBinaryWrite(message.activityPushTipsDataList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 activity_id = 10; */
        if (message.activityId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityPushTipsInfoNotify
 */
exports.ActivityPushTipsInfoNotify = new ActivityPushTipsInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityReadPushTipsReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityReadPushTipsReq", [
            { no: 14, name: "activity_push_tips_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "activity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { activityPushTipsIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 activity_push_tips_id_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityPushTipsIdList.push(reader.uint32());
                    else
                        message.activityPushTipsIdList.push(reader.uint32());
                    break;
                case /* optional uint32 activity_id */ 7:
                    message.activityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 activity_push_tips_id_list = 14; */
        if (message.activityPushTipsIdList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.activityPushTipsIdList.length; i++)
                writer.uint32(message.activityPushTipsIdList[i]);
            writer.join();
        }
        /* optional uint32 activity_id = 7; */
        if (message.activityId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.activityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityReadPushTipsReq
 */
exports.ActivityReadPushTipsReq = new ActivityReadPushTipsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ActivityReadPushTipsRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.ActivityReadPushTipsRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ActivityReadPushTipsRsp
 */
exports.ActivityReadPushTipsRsp = new ActivityReadPushTipsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartBoatGalleryReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartBoatGalleryReq", [
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryReq
 */
exports.SummerTimeV2RestartBoatGalleryReq = new SummerTimeV2RestartBoatGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartBoatGalleryRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartBoatGalleryRsp", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartBoatGalleryRsp
 */
exports.SummerTimeV2RestartBoatGalleryRsp = new SummerTimeV2RestartBoatGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartDungeonReq
 */
exports.SummerTimeV2RestartDungeonReq = new SummerTimeV2RestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2RestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SummerTimeV2RestartDungeonRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2RestartDungeonRsp
 */
exports.SummerTimeV2RestartDungeonRsp = new SummerTimeV2RestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IslandPartyStageData", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 14:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 best_score */ 4:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 14; */
        if (message.isOpen !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 best_score = 4; */
        if (message.bestScore !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyStageData
 */
exports.IslandPartyStageData = new IslandPartyStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IslandPartyDetailInfo", [
            { no: 15, name: "stage_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.IslandPartyStageData }
        ]);
    }
    create(value) {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.IslandPartyStageData stage_data_list */ 15:
                    message.stageDataList.push(exports.IslandPartyStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.IslandPartyStageData stage_data_list = 15; */
        for (let i = 0; i < message.stageDataList.length; i++)
            exports.IslandPartyStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyDetailInfo
 */
exports.IslandPartyDetailInfo = new IslandPartyDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartySettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.IslandPartySettleNotify", [
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", cmd_gallery_2.GalleryStopReason] },
            { no: 8, name: "settle_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => cmd_gallery_1.IslandPartyGallerySettleInfo },
            { no: 6, name: "score_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_1.ExhibitionDisplayInfo },
            { no: 15, name: "time_remain", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { settleInfoList: [], scoreList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* repeated com.midnights.game.IslandPartyGallerySettleInfo settle_info_list */ 8:
                    message.settleInfoList.push(cmd_gallery_1.IslandPartyGallerySettleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ExhibitionDisplayInfo score_list */ 6:
                    message.scoreList.push(define_1.ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 time_remain */ 15:
                    message.timeRemain = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional com.midnights.game.GalleryStopReason reason = 1; */
        if (message.reason !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.reason);
        /* repeated com.midnights.game.IslandPartyGallerySettleInfo settle_info_list = 8; */
        for (let i = 0; i < message.settleInfoList.length; i++)
            cmd_gallery_1.IslandPartyGallerySettleInfo.internalBinaryWrite(message.settleInfoList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ExhibitionDisplayInfo score_list = 6; */
        for (let i = 0; i < message.scoreList.length; i++)
            define_1.ExhibitionDisplayInfo.internalBinaryWrite(message.scoreList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 time_remain = 15; */
        if (message.timeRemain !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.timeRemain);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartySettleNotify
 */
exports.IslandPartySettleNotify = new IslandPartySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearLevelData", [
            { no: 8, name: "shortest_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "last_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 shortest_time */ 8:
                    message.shortestTime = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 11:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 last_duration */ 5:
                    message.lastDuration = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_finished */ 9:
                    message.isFinished = reader.bool();
                    break;
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 shortest_time = 8; */
        if (message.shortestTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.shortestTime);
        /* optional uint32 open_time = 11; */
        if (message.openTime !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 last_duration = 5; */
        if (message.lastDuration !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.lastDuration);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_finished = 9; */
        if (message.isFinished !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearLevelData
 */
exports.GearLevelData = new GearLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class JigsawPictureData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.JigsawPictureData", [
            { no: 7, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "shortest_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "last_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 7:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 shortest_time */ 10:
                    message.shortestTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 last_duration */ 6:
                    message.lastDuration = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finished = 7; */
        if (message.isFinished !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 shortest_time = 10; */
        if (message.shortestTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.shortestTime);
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 last_duration = 6; */
        if (message.lastDuration !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.lastDuration);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.JigsawPictureData
 */
exports.JigsawPictureData = new JigsawPictureData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityDetailInfo", [
            { no: 14, name: "gear_level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GearLevelData },
            { no: 8, name: "jigsaw_picture_data", kind: "message", T: () => exports.JigsawPictureData }
        ]);
    }
    create(value) {
        const message = { gearLevelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GearLevelData gear_level_data_list */ 14:
                    message.gearLevelDataList.push(exports.GearLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.JigsawPictureData jigsaw_picture_data */ 8:
                    message.jigsawPictureData = exports.JigsawPictureData.internalBinaryRead(reader, reader.uint32(), options, message.jigsawPictureData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.GearLevelData gear_level_data_list = 14; */
        for (let i = 0; i < message.gearLevelDataList.length; i++)
            exports.GearLevelData.internalBinaryWrite(message.gearLevelDataList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.JigsawPictureData jigsaw_picture_data = 8; */
        if (message.jigsawPictureData)
            exports.JigsawPictureData.internalBinaryWrite(message.jigsawPictureData, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityDetailInfo
 */
exports.GearActivityDetailInfo = new GearActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayGearReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayGearReq", [
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayGearReq
 */
exports.GearActivityStartPlayGearReq = new GearActivityStartPlayGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayGearRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayGearRsp", [
            { no: 9, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 9:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 9; */
        if (message.levelId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayGearRsp
 */
exports.GearActivityStartPlayGearRsp = new GearActivityStartPlayGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearColumnInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearColumnInfo", [
            { no: 7, name: "gear_column_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_overturn", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "has_gear", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "placement_layer", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gear_column_index */ 7:
                    message.gearColumnIndex = reader.uint32();
                    break;
                case /* optional bool is_overturn */ 3:
                    message.isOverturn = reader.bool();
                    break;
                case /* optional bool has_gear */ 2:
                    message.hasGear = reader.bool();
                    break;
                case /* optional uint32 gear_id */ 11:
                    message.gearId = reader.uint32();
                    break;
                case /* optional uint32 placement_layer */ 6:
                    message.placementLayer = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gear_column_index = 7; */
        if (message.gearColumnIndex !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.gearColumnIndex);
        /* optional bool is_overturn = 3; */
        if (message.isOverturn !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isOverturn);
        /* optional bool has_gear = 2; */
        if (message.hasGear !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.hasGear);
        /* optional uint32 gear_id = 11; */
        if (message.gearId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.gearId);
        /* optional uint32 placement_layer = 6; */
        if (message.placementLayer !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.placementLayer);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearColumnInfo
 */
exports.GearColumnInfo = new GearColumnInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayGearReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayGearReq", [
            { no: 4, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "use_clue", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "gear_column_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GearColumnInfo },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { gearColumnInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional bool use_clue */ 12:
                    message.useClue = reader.bool();
                    break;
                case /* repeated com.midnights.game.GearColumnInfo gear_column_info_list */ 9:
                    message.gearColumnInfoList.push(exports.GearColumnInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_success = 4; */
        if (message.isSuccess !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional bool use_clue = 12; */
        if (message.useClue !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.useClue);
        /* repeated com.midnights.game.GearColumnInfo gear_column_info_list = 9; */
        for (let i = 0; i < message.gearColumnInfoList.length; i++)
            exports.GearColumnInfo.internalBinaryWrite(message.gearColumnInfoList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayGearReq
 */
exports.GearActivityFinishPlayGearReq = new GearActivityFinishPlayGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayGearRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayGearRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 15:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 3:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 15; */
        if (message.isSuccess !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 3; */
        if (message.levelId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayGearRsp
 */
exports.GearActivityFinishPlayGearRsp = new GearActivityFinishPlayGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayPictureReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayPictureReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayPictureReq
 */
exports.GearActivityStartPlayPictureReq = new GearActivityStartPlayPictureReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityStartPlayPictureRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityStartPlayPictureRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityStartPlayPictureRsp
 */
exports.GearActivityStartPlayPictureRsp = new GearActivityStartPlayPictureRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayPictureReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayPictureReq", [
            { no: 8, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 8:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_success = 8; */
        if (message.isSuccess !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayPictureReq
 */
exports.GearActivityFinishPlayPictureReq = new GearActivityFinishPlayPictureReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GearActivityFinishPlayPictureRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GearActivityFinishPlayPictureRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_success */ 6:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional bool is_success = 6; */
        if (message.isSuccess !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GearActivityFinishPlayPictureRsp
 */
exports.GearActivityFinishPlayPictureRsp = new GearActivityFinishPlayPictureRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoStageInfo", [
            { no: 11, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 11:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finished = 11; */
        if (message.isFinished !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoStageInfo
 */
exports.GravenInnocencePhotoStageInfo = new GravenInnocencePhotoStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoObjectInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoObjectInfo", [
            { no: 1, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 object_id */ 1:
                    message.objectId = reader.uint32();
                    break;
                case /* optional uint32 finish_time */ 4:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 param */ 14:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 object_id = 1; */
        if (message.objectId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.objectId);
        /* optional uint32 finish_time = 4; */
        if (message.finishTime !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.finishTime);
        /* optional uint32 param = 14; */
        if (message.param !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoObjectInfo
 */
exports.GravenInnocencePhotoObjectInfo = new GravenInnocencePhotoObjectInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoInfo", [
            { no: 5, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GravenInnocencePhotoStageInfo },
            { no: 7, name: "object_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GravenInnocencePhotoObjectInfo }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [], objectInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocencePhotoStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(exports.GravenInnocencePhotoStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.GravenInnocencePhotoObjectInfo object_info_list */ 7:
                    message.objectInfoList.push(exports.GravenInnocencePhotoObjectInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.GravenInnocencePhotoStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.GravenInnocencePhotoStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.GravenInnocencePhotoObjectInfo object_info_list = 7; */
        for (let i = 0; i < message.objectInfoList.length; i++)
            exports.GravenInnocencePhotoObjectInfo.internalBinaryWrite(message.objectInfoList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoInfo
 */
exports.GravenInnocencePhotoInfo = new GravenInnocencePhotoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCampStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceCampStageInfo", [
            { no: 15, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 15:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_finished */ 3:
                    message.isFinished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 15; */
        if (message.isOpen !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_finished = 3; */
        if (message.isFinished !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isFinished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCampStageInfo
 */
exports.GravenInnocenceCampStageInfo = new GravenInnocenceCampStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCampInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceCampInfo", [
            { no: 5, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GravenInnocenceCampStageInfo }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceCampStageInfo stage_info_list */ 5:
                    message.stageInfoList.push(exports.GravenInnocenceCampStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.GravenInnocenceCampStageInfo stage_info_list = 5; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.GravenInnocenceCampStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCampInfo
 */
exports.GravenInnocenceCampInfo = new GravenInnocenceCampInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceLevelInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceLevelInfo", [
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 14:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 max_score = 14; */
        if (message.maxScore !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceLevelInfo
 */
exports.GravenInnocenceRaceLevelInfo = new GravenInnocenceRaceLevelInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceInfo", [
            { no: 11, name: "level_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GravenInnocenceRaceLevelInfo }
        ]);
    }
    create(value) {
        const message = { levelInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceRaceLevelInfo level_info_list */ 11:
                    message.levelInfoList.push(exports.GravenInnocenceRaceLevelInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.GravenInnocenceRaceLevelInfo level_info_list = 11; */
        for (let i = 0; i < message.levelInfoList.length; i++)
            exports.GravenInnocenceRaceLevelInfo.internalBinaryWrite(message.levelInfoList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceInfo
 */
exports.GravenInnocenceRaceInfo = new GravenInnocenceRaceInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCarveStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceCarveStageInfo", [
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_open */ 1:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_open = 1; */
        if (message.isOpen !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCarveStageInfo
 */
exports.GravenInnocenceCarveStageInfo = new GravenInnocenceCarveStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceCarveInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceCarveInfo", [
            { no: 10, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.GravenInnocenceCarveStageInfo },
            { no: 7, name: "can_edit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "has_edit_config_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [], hasEditConfigIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GravenInnocenceCarveStageInfo stage_info_list */ 10:
                    message.stageInfoList.push(exports.GravenInnocenceCarveStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 can_edit_count */ 7:
                    message.canEditCount = reader.uint32();
                    break;
                case /* repeated uint32 has_edit_config_id_list */ 6:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.hasEditConfigIdList.push(reader.uint32());
                    else
                        message.hasEditConfigIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.GravenInnocenceCarveStageInfo stage_info_list = 10; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.GravenInnocenceCarveStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 can_edit_count = 7; */
        if (message.canEditCount !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.canEditCount);
        /* repeated uint32 has_edit_config_id_list = 6; */
        if (message.hasEditConfigIdList.length) {
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.hasEditConfigIdList.length; i++)
                writer.uint32(message.hasEditConfigIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceCarveInfo
 */
exports.GravenInnocenceCarveInfo = new GravenInnocenceCarveInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceDetailInfo", [
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "race_info", kind: "message", T: () => exports.GravenInnocenceRaceInfo },
            { no: 7, name: "photo_info", kind: "message", T: () => exports.GravenInnocencePhotoInfo },
            { no: 13, name: "carve_info", kind: "message", T: () => exports.GravenInnocenceCarveInfo },
            { no: 12, name: "camp_info", kind: "message", T: () => exports.GravenInnocenceCampInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* optional com.midnights.game.GravenInnocenceRaceInfo race_info */ 10:
                    message.raceInfo = exports.GravenInnocenceRaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.raceInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocencePhotoInfo photo_info */ 7:
                    message.photoInfo = exports.GravenInnocencePhotoInfo.internalBinaryRead(reader, reader.uint32(), options, message.photoInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocenceCarveInfo carve_info */ 13:
                    message.carveInfo = exports.GravenInnocenceCarveInfo.internalBinaryRead(reader, reader.uint32(), options, message.carveInfo);
                    break;
                case /* optional com.midnights.game.GravenInnocenceCampInfo camp_info */ 12:
                    message.campInfo = exports.GravenInnocenceCampInfo.internalBinaryRead(reader, reader.uint32(), options, message.campInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* optional com.midnights.game.GravenInnocenceRaceInfo race_info = 10; */
        if (message.raceInfo)
            exports.GravenInnocenceRaceInfo.internalBinaryWrite(message.raceInfo, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocencePhotoInfo photo_info = 7; */
        if (message.photoInfo)
            exports.GravenInnocencePhotoInfo.internalBinaryWrite(message.photoInfo, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocenceCarveInfo carve_info = 13; */
        if (message.carveInfo)
            exports.GravenInnocenceCarveInfo.internalBinaryWrite(message.carveInfo, writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.GravenInnocenceCampInfo camp_info = 12; */
        if (message.campInfo)
            exports.GravenInnocenceCampInfo.internalBinaryWrite(message.campInfo, writer.tag(12, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceDetailInfo
 */
exports.GravenInnocenceDetailInfo = new GravenInnocenceDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceSettleNotify", [
            { no: 4, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", cmd_gallery_2.GalleryStopReason] },
            { no: 13, name: "total_coint_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "remain_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "coin_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 4:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 score */ 5:
                    message.score = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 2:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 total_coint_count */ 13:
                    message.totalCointCount = reader.uint32();
                    break;
                case /* optional uint32 remain_time */ 10:
                    message.remainTime = reader.uint32();
                    break;
                case /* optional uint32 challenge_progress */ 1:
                    message.challengeProgress = reader.uint32();
                    break;
                case /* optional uint32 coin_count */ 8:
                    message.coinCount = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 4; */
        if (message.isNewRecord !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.galleryId);
        /* optional uint32 score = 5; */
        if (message.score !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.score);
        /* optional com.midnights.game.GalleryStopReason reason = 2; */
        if (message.reason !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.reason);
        /* optional uint32 total_coint_count = 13; */
        if (message.totalCointCount !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.totalCointCount);
        /* optional uint32 remain_time = 10; */
        if (message.remainTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.remainTime);
        /* optional uint32 challenge_progress = 1; */
        if (message.challengeProgress !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeProgress);
        /* optional uint32 coin_count = 8; */
        if (message.coinCount !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.coinCount);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceSettleNotify
 */
exports.GravenInnocenceRaceSettleNotify = new GravenInnocenceRaceSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceRestartReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceRestartReq", [
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceRestartReq
 */
exports.GravenInnocenceRaceRestartReq = new GravenInnocenceRaceRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceRaceRestartRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceRaceRestartRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 6:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 6; */
        if (message.galleryId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceRaceRestartRsp
 */
exports.GravenInnocenceRaceRestartRsp = new GravenInnocenceRaceRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceEditCarveCombinationReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceEditCarveCombinationReq", [
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combination_info", kind: "message", T: () => define_4.CustomGadgetTreeInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 11:
                    message.combinationInfo = define_4.CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11; */
        if (message.combinationInfo)
            define_4.CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationReq
 */
exports.GravenInnocenceEditCarveCombinationReq = new GravenInnocenceEditCarveCombinationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocenceEditCarveCombinationRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocenceEditCarveCombinationRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocenceEditCarveCombinationRsp
 */
exports.GravenInnocenceEditCarveCombinationRsp = new GravenInnocenceEditCarveCombinationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoFinishReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoFinishReq", [
            { no: 1, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 1:
                    message.param = reader.uint32();
                    break;
                case /* optional uint32 object_id */ 4:
                    message.objectId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 param = 1; */
        if (message.param !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.param);
        /* optional uint32 object_id = 4; */
        if (message.objectId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.objectId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoFinishReq
 */
exports.GravenInnocencePhotoFinishReq = new GravenInnocencePhotoFinishReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoFinishRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoFinishRsp", [
            { no: 6, name: "object_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 object_id */ 6:
                    message.objectId = reader.uint32();
                    break;
                case /* optional uint32 param */ 11:
                    message.param = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 object_id = 6; */
        if (message.objectId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.objectId);
        /* optional uint32 param = 11; */
        if (message.param !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.param);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoFinishRsp
 */
exports.GravenInnocencePhotoFinishRsp = new GravenInnocencePhotoFinishRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GravenInnocencePhotoReminderNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.GravenInnocencePhotoReminderNotify", [
            { no: 14, name: "group_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "reminder_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_bundle_id */ 14:
                    message.groupBundleId = reader.uint32();
                    break;
                case /* optional uint32 reminder_id */ 6:
                    message.reminderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_bundle_id = 14; */
        if (message.groupBundleId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.groupBundleId);
        /* optional uint32 reminder_id = 6; */
        if (message.reminderId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.reminderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GravenInnocencePhotoReminderNotify
 */
exports.GravenInnocencePhotoReminderNotify = new GravenInnocencePhotoReminderNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayTeamInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayTeamInfo", [
            { no: 13, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayAvatarInfo }
        ]);
    }
    create(value) {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 13:
                    message.avatarInfoList.push(exports.InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayTeamInfo
 */
exports.InstableSprayTeamInfo = new InstableSprayTeamInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayStageInfo", [
            { no: 10, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "team_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayTeamInfo }
        ]);
    }
    create(value) {
        const message = { teamInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 10:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 max_score */ 3:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.InstableSprayTeamInfo team_info_list */ 6:
                    message.teamInfoList.push(exports.InstableSprayTeamInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finished = 10; */
        if (message.isFinished !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFinished);
        /* optional uint32 max_score = 3; */
        if (message.maxScore !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.stageId);
        /* repeated com.midnights.game.InstableSprayTeamInfo team_info_list = 6; */
        for (let i = 0; i < message.teamInfoList.length; i++)
            exports.InstableSprayTeamInfo.internalBinaryWrite(message.teamInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayStageInfo
 */
exports.InstableSprayStageInfo = new InstableSprayStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayDetailInfo", [
            { no: 9, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayStageInfo }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayStageInfo stage_info_list */ 9:
                    message.stageInfoList.push(exports.InstableSprayStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.InstableSprayStageInfo stage_info_list = 9; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.InstableSprayStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayDetailInfo
 */
exports.InstableSprayDetailInfo = new InstableSprayDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayAvatarInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayAvatarInfo", [
            { no: 8, name: "is_trial", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "avatar_id", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trial */ 8:
                    message.isTrial = reader.bool();
                    break;
                case /* optional uint64 avatar_id */ 2:
                    message.avatarId = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_trial = 8; */
        if (message.isTrial !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isTrial);
        /* optional uint64 avatar_id = 2; */
        if (message.avatarId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint64(message.avatarId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayAvatarInfo
 */
exports.InstableSprayAvatarInfo = new InstableSprayAvatarInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayEnterDungeonReq", [
            { no: 13, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayAvatarInfo }
        ]);
    }
    create(value) {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 13:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 2:
                    message.difficulty = reader.uint32();
                    break;
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 7:
                    message.avatarInfoList.push(exports.InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 13; */
        if (message.stageId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 difficulty = 2; */
        if (message.difficulty !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.difficulty);
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 7; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayEnterDungeonReq
 */
exports.InstableSprayEnterDungeonReq = new InstableSprayEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayEnterDungeonRsp", [
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayEnterDungeonRsp
 */
exports.InstableSprayEnterDungeonRsp = new InstableSprayEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSpraySwitchTeamReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSpraySwitchTeamReq", [
            { no: 13, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayAvatarInfo }
        ]);
    }
    create(value) {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 13:
                    message.avatarInfoList.push(exports.InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 13; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(13, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSpraySwitchTeamReq
 */
exports.InstableSpraySwitchTeamReq = new InstableSpraySwitchTeamReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSpraySwitchTeamRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSpraySwitchTeamRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSpraySwitchTeamRsp
 */
exports.InstableSpraySwitchTeamRsp = new InstableSpraySwitchTeamRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayLevelFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayLevelFinishNotify", [
            { no: 11, name: "is_need_switch_team", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "is_skip_black_screen", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_need_switch_team */ 11:
                    message.isNeedSwitchTeam = reader.bool();
                    break;
                case /* optional bool is_skip_black_screen */ 7:
                    message.isSkipBlackScreen = reader.bool();
                    break;
                case /* optional uint32 round */ 15:
                    message.round = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_need_switch_team = 11; */
        if (message.isNeedSwitchTeam !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isNeedSwitchTeam);
        /* optional bool is_skip_black_screen = 7; */
        if (message.isSkipBlackScreen !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isSkipBlackScreen);
        /* optional uint32 round = 15; */
        if (message.round !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.round);
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayLevelFinishNotify
 */
exports.InstableSprayLevelFinishNotify = new InstableSprayLevelFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayRestartDungeonReq", [
            { no: 6, name: "avatar_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.InstableSprayAvatarInfo }
        ]);
    }
    create(value) {
        const message = { avatarInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list */ 6:
                    message.avatarInfoList.push(exports.InstableSprayAvatarInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.InstableSprayAvatarInfo avatar_info_list = 6; */
        for (let i = 0; i < message.avatarInfoList.length; i++)
            exports.InstableSprayAvatarInfo.internalBinaryWrite(message.avatarInfoList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayRestartDungeonReq
 */
exports.InstableSprayRestartDungeonReq = new InstableSprayRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.InstableSprayRestartDungeonRsp", [
            { no: 1, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 1:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 1; */
        if (message.levelId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayRestartDungeonRsp
 */
exports.InstableSprayRestartDungeonRsp = new InstableSprayRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionLevelData", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 9:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 max_score = 9; */
        if (message.maxScore !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.maxScore);
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionLevelData
 */
exports.MuqadasPotionLevelData = new MuqadasPotionLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityDetailInfo", [
            { no: 8, name: "muqadas_potion_level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.MuqadasPotionLevelData }
        ]);
    }
    create(value) {
        const message = { muqadasPotionLevelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MuqadasPotionLevelData muqadas_potion_level_data_list */ 8:
                    message.muqadasPotionLevelDataList.push(exports.MuqadasPotionLevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.MuqadasPotionLevelData muqadas_potion_level_data_list = 8; */
        for (let i = 0; i < message.muqadasPotionLevelDataList.length; i++)
            exports.MuqadasPotionLevelData.internalBinaryWrite(message.muqadasPotionLevelDataList[i], writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityDetailInfo
 */
exports.MuqadasPotionActivityDetailInfo = new MuqadasPotionActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityEnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityEnterDungeonReq", [
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonReq
 */
exports.MuqadasPotionActivityEnterDungeonReq = new MuqadasPotionActivityEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionActivityEnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionActivityEnterDungeonRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level_id */ 9:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 level_id = 9; */
        if (message.levelId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionActivityEnterDungeonRsp
 */
exports.MuqadasPotionActivityEnterDungeonRsp = new MuqadasPotionActivityEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionDungeonSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionDungeonSettleNotify", [
            { no: 11, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "capture_weakness_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 final_score */ 11:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 capture_weakness_count */ 15:
                    message.captureWeaknessCount = reader.uint32();
                    break;
                case /* optional bool is_success */ 6:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 level_id */ 10:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 final_score = 11; */
        if (message.finalScore !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.finalScore);
        /* optional uint32 capture_weakness_count = 15; */
        if (message.captureWeaknessCount !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.captureWeaknessCount);
        /* optional bool is_success = 6; */
        if (message.isSuccess !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isSuccess);
        /* optional uint32 level_id = 10; */
        if (message.levelId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionDungeonSettleNotify
 */
exports.MuqadasPotionDungeonSettleNotify = new MuqadasPotionDungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionRestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionRestartDungeonReq
 */
exports.MuqadasPotionRestartDungeonReq = new MuqadasPotionRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionRestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionRestartDungeonRsp
 */
exports.MuqadasPotionRestartDungeonRsp = new MuqadasPotionRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionCaptureWeaknessReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionCaptureWeaknessReq", [
            { no: 10, name: "capture_weakness_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 capture_weakness_count */ 10:
                    message.captureWeaknessCount = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 capture_weakness_count = 10; */
        if (message.captureWeaknessCount !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.captureWeaknessCount);
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessReq
 */
exports.MuqadasPotionCaptureWeaknessReq = new MuqadasPotionCaptureWeaknessReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MuqadasPotionCaptureWeaknessRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.MuqadasPotionCaptureWeaknessRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MuqadasPotionCaptureWeaknessRsp
 */
exports.MuqadasPotionCaptureWeaknessRsp = new MuqadasPotionCaptureWeaknessRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieRegionData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureSeelieRegionData", [
            { no: 12, name: "is_done", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "open_day", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "opened_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "region_radius", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "region_center_pos", kind: "message", T: () => define_12.Vector },
            { no: 13, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "total_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_done */ 12:
                    message.isDone = reader.bool();
                    break;
                case /* optional uint32 open_day */ 6:
                    message.openDay = reader.uint32();
                    break;
                case /* optional uint32 opened_chest_num */ 10:
                    message.openedChestNum = reader.uint32();
                    break;
                case /* optional float region_radius */ 7:
                    message.regionRadius = reader.float();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 8:
                    message.openTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector region_center_pos */ 11:
                    message.regionCenterPos = define_12.Vector.internalBinaryRead(reader, reader.uint32(), options, message.regionCenterPos);
                    break;
                case /* optional uint32 scene_id */ 13:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 total_chest_num */ 15:
                    message.totalChestNum = reader.uint32();
                    break;
                case /* optional uint32 region_id */ 1:
                    message.regionId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_done = 12; */
        if (message.isDone !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isDone);
        /* optional uint32 open_day = 6; */
        if (message.openDay !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.openDay);
        /* optional uint32 opened_chest_num = 10; */
        if (message.openedChestNum !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.openedChestNum);
        /* optional float region_radius = 7; */
        if (message.regionRadius !== undefined)
            writer.tag(7, runtime_1.WireType.Bit32).float(message.regionRadius);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 8; */
        if (message.openTime !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional com.midnights.game.Vector region_center_pos = 11; */
        if (message.regionCenterPos)
            define_12.Vector.internalBinaryWrite(message.regionCenterPos, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 13; */
        if (message.sceneId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.sceneId);
        /* optional uint32 total_chest_num = 15; */
        if (message.totalChestNum !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.totalChestNum);
        /* optional uint32 region_id = 1; */
        if (message.regionId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.regionId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieRegionData
 */
exports.TreasureSeelieRegionData = new TreasureSeelieRegionData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureSeelieActivityDetailInfo", [
            { no: 10, name: "treasure_close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "region_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.TreasureSeelieRegionData }
        ]);
    }
    create(value) {
        const message = { regionDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 treasure_close_time */ 10:
                    message.treasureCloseTime = reader.uint32();
                    break;
                case /* optional bool is_content_closed */ 8:
                    message.isContentClosed = reader.bool();
                    break;
                case /* repeated com.midnights.game.TreasureSeelieRegionData region_data_list */ 14:
                    message.regionDataList.push(exports.TreasureSeelieRegionData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 treasure_close_time = 10; */
        if (message.treasureCloseTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.treasureCloseTime);
        /* optional bool is_content_closed = 8; */
        if (message.isContentClosed !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isContentClosed);
        /* repeated com.midnights.game.TreasureSeelieRegionData region_data_list = 14; */
        for (let i = 0; i < message.regionDataList.length; i++)
            exports.TreasureSeelieRegionData.internalBinaryWrite(message.regionDataList[i], writer.tag(14, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieActivityDetailInfo
 */
exports.TreasureSeelieActivityDetailInfo = new TreasureSeelieActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TreasureSeelieCollectOrbsNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.TreasureSeelieCollectOrbsNotify", [
            { no: 11, name: "current_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 current_num */ 11:
                    message.currentNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 5:
                    message.totalNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 current_num = 11; */
        if (message.currentNum !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.currentNum);
        /* optional uint32 total_num = 5; */
        if (message.totalNum !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.totalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TreasureSeelieCollectOrbsNotify
 */
exports.TreasureSeelieCollectOrbsNotify = new TreasureSeelieCollectOrbsNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RockBoardExploreStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RockBoardExploreStageData", [
            { no: 6, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finish */ 6:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 open_time */ 7:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 3:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_finish = 6; */
        if (message.isFinish !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 open_time = 7; */
        if (message.openTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 3; */
        if (message.stageId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RockBoardExploreStageData
 */
exports.RockBoardExploreStageData = new RockBoardExploreStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RockBoardExploreDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.RockBoardExploreDetailInfo", [
            { no: 9, name: "stage_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.RockBoardExploreStageData }
        ]);
    }
    create(value) {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RockBoardExploreStageData stage_data_list */ 9:
                    message.stageDataList.push(exports.RockBoardExploreStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.RockBoardExploreStageData stage_data_list = 9; */
        for (let i = 0; i < message.stageDataList.length; i++)
            exports.RockBoardExploreStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RockBoardExploreDetailInfo
 */
exports.RockBoardExploreDetailInfo = new RockBoardExploreDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingStageData", [
            { no: 10, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "record_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 10:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 3:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 record_value */ 12:
                    message.recordValue = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 10; */
        if (message.openTime !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_finish = 3; */
        if (message.isFinish !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 record_value = 12; */
        if (message.recordValue !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.recordValue);
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStageData
 */
exports.VintageHuntingStageData = new VintageHuntingStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintagePresentLevelData", [
            { no: 10, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 10:
                    message.presentId = reader.uint32();
                    break;
                case /* optional bool is_open */ 11:
                    message.isOpen = reader.bool();
                    break;
                case /* optional bool is_finish */ 5:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 present_id = 10; */
        if (message.presentId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.presentId);
        /* optional bool is_open = 11; */
        if (message.isOpen !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional bool is_finish = 5; */
        if (message.isFinish !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentLevelData
 */
exports.VintagePresentLevelData = new VintagePresentLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintagePresentStageData", [
            { no: 1, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "present_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintagePresentLevelData } }
        ]);
    }
    create(value) {
        const message = { presentLevelMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 open_time */ 1:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 13:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 10:
                    message.isOpen = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.VintagePresentLevelData> present_level_map */ 2:
                    this.binaryReadMap2(message.presentLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintagePresentLevelData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintagePresentStageData.present_level_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintagePresentLevelData.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 open_time = 1; */
        if (message.openTime !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional bool is_finish = 13; */
        if (message.isFinish !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 10; */
        if (message.isOpen !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isOpen);
        /* map<uint32, com.midnights.game.VintagePresentLevelData> present_level_map = 2; */
        for (let k of Object.keys(message.presentLevelMap)) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintagePresentLevelData.internalBinaryWrite(message.presentLevelMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentStageData
 */
exports.VintagePresentStageData = new VintagePresentStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageBoothUsedItemData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageBoothUsedItemData", [
            { no: 7, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "gadget_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 7:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 gadget_id */ 8:
                    message.gadgetId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 7; */
        if (message.isOpen !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 gadget_id = 8; */
        if (message.gadgetId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageBoothUsedItemData
 */
exports.VintageBoothUsedItemData = new VintageBoothUsedItemData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampChallengeLevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageCampChallengeLevelData", [
            { no: 14, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 14:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 11:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_finish */ 8:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_open */ 6:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 14; */
        if (message.stageId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 level_id = 11; */
        if (message.levelId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional bool is_finish = 8; */
        if (message.isFinish !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional bool is_open = 6; */
        if (message.isOpen !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampChallengeLevelData
 */
exports.VintageCampChallengeLevelData = new VintageCampChallengeLevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampChallengeStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageCampChallengeStageData", [
            { no: 5, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "max_finished_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "camp_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintageCampChallengeLevelData } }
        ]);
    }
    create(value) {
        const message = { campLevelMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 5:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 max_finished_level */ 11:
                    message.maxFinishedLevel = reader.uint32();
                    break;
                case /* optional uint32 open_time */ 3:
                    message.openTime = reader.uint32();
                    break;
                case /* optional bool is_finish */ 10:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 4:
                    message.stageId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.VintageCampChallengeLevelData> camp_level_map */ 2:
                    this.binaryReadMap2(message.campLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap2(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintageCampChallengeLevelData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageCampChallengeStageData.camp_level_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintageCampChallengeLevelData.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 5; */
        if (message.isOpen !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 max_finished_level = 11; */
        if (message.maxFinishedLevel !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.maxFinishedLevel);
        /* optional uint32 open_time = 3; */
        if (message.openTime !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional bool is_finish = 10; */
        if (message.isFinish !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFinish);
        /* optional uint32 stage_id = 4; */
        if (message.stageId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.stageId);
        /* map<uint32, com.midnights.game.VintageCampChallengeLevelData> camp_level_map = 2; */
        for (let k of Object.keys(message.campLevelMap)) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintageCampChallengeLevelData.internalBinaryWrite(message.campLevelMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampChallengeStageData
 */
exports.VintageCampChallengeStageData = new VintageCampChallengeStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketTraderInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketTraderInfo", [
            { no: 7, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "available_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam }
        ]);
    }
    create(value) {
        const message = { availableItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trader_id */ 7:
                    message.traderId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam available_item_list */ 9:
                    message.availableItemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 trader_id = 7; */
        if (message.traderId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.traderId);
        /* repeated com.midnights.game.ItemParam available_item_list = 9; */
        for (let i = 0; i < message.availableItemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.availableItemList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketTraderInfo
 */
exports.VintageMarketTraderInfo = new VintageMarketTraderInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDealInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketDealInfo", [
            { no: 13, name: "trader_item_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintageMarketTraderInfo } }
        ]);
    }
    create(value) {
        const message = { traderItemInfoMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.VintageMarketTraderInfo> trader_item_info_map */ 13:
                    this.binaryReadMap13(message.traderItemInfoMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintageMarketTraderInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketDealInfo.trader_item_info_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintageMarketTraderInfo.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, com.midnights.game.VintageMarketTraderInfo> trader_item_info_map = 13; */
        for (let k of Object.keys(message.traderItemInfoMap)) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintageMarketTraderInfo.internalBinaryWrite(message.traderItemInfoMap[k], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDealInfo
 */
exports.VintageMarketDealInfo = new VintageMarketDealInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreInfo", [
            { no: 5, name: "cur_attr_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "next_aim_attr_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "slot_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { curAttrList: [], nextAimAttrList: [], strategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 cur_attr_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curAttrList.push(reader.uint32());
                    else
                        message.curAttrList.push(reader.uint32());
                    break;
                case /* repeated uint32 next_aim_attr_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.nextAimAttrList.push(reader.uint32());
                    else
                        message.nextAimAttrList.push(reader.uint32());
                    break;
                case /* repeated uint32 strategy_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 slot_count */ 3:
                    message.slotCount = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 cur_attr_list = 5; */
        if (message.curAttrList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.curAttrList.length; i++)
                writer.uint32(message.curAttrList[i]);
            writer.join();
        }
        /* repeated uint32 next_aim_attr_list = 14; */
        if (message.nextAimAttrList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.nextAimAttrList.length; i++)
                writer.uint32(message.nextAimAttrList[i]);
            writer.join();
        }
        /* repeated uint32 strategy_list = 2; */
        if (message.strategyList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        /* optional uint32 slot_count = 3; */
        if (message.slotCount !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.slotCount);
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreInfo
 */
exports.VintageMarketStoreInfo = new VintageMarketStoreInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreOpInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreOpInfo", [
            { no: 5, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "help_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "help_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "add_attr_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { strategyList: [], addAttrList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 strategy_list */ 5:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 help_uid */ 9:
                    message.helpUid = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 2:
                    message.storeId = reader.uint32();
                    break;
                case /* optional uint32 help_skill_id */ 7:
                    message.helpSkillId = reader.uint32();
                    break;
                case /* repeated uint32 add_attr_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.addAttrList.push(reader.uint32());
                    else
                        message.addAttrList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 strategy_list = 5; */
        if (message.strategyList.length) {
            writer.tag(5, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        /* optional uint32 help_uid = 9; */
        if (message.helpUid !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.helpUid);
        /* optional uint32 store_id = 2; */
        if (message.storeId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.storeId);
        /* optional uint32 help_skill_id = 7; */
        if (message.helpSkillId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.helpSkillId);
        /* repeated uint32 add_attr_list = 15; */
        if (message.addAttrList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.addAttrList.length; i++)
                writer.uint32(message.addAttrList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreOpInfo
 */
exports.VintageMarketStoreOpInfo = new VintageMarketStoreOpInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketInfo", [
            { no: 1485, name: "is_help_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "is_store_content_interrupt", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "deal_info", kind: "message", T: () => exports.VintageMarketDealInfo },
            { no: 7, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 207, name: "store_round_income_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_store_content_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "cur_env_event_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_market_content_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1800, name: "next_can_use_help_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_market_content_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "viewed_strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "prev_coin_c_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "bargain_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 8 /*ScalarType.BOOL*/ } },
            { no: 1798, name: "dividend_reward_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_npc_event_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 366, name: "is_help_in_cd", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "prev_coin_b_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "open_store_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.VintageMarketStoreInfo },
            { no: 760, name: "help_skill_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_round_tips_view", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 876, name: "is_strategy_module_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "unlock_strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { storeRoundIncomeList: [], curEnvEventList: [], viewedStrategyList: [], bargainInfoMap: {}, curNpcEventList: [], openStoreList: [], unlockStrategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_help_module_open */ 1485:
                    message.isHelpModuleOpen = reader.bool();
                    break;
                case /* optional bool is_store_content_interrupt */ 15:
                    message.isStoreContentInterrupt = reader.bool();
                    break;
                case /* optional com.midnights.game.VintageMarketDealInfo deal_info */ 11:
                    message.dealInfo = exports.VintageMarketDealInfo.internalBinaryRead(reader, reader.uint32(), options, message.dealInfo);
                    break;
                case /* optional uint32 store_round */ 7:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated uint32 store_round_income_list */ 207:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.storeRoundIncomeList.push(reader.uint32());
                    else
                        message.storeRoundIncomeList.push(reader.uint32());
                    break;
                case /* optional bool is_store_content_finish */ 5:
                    message.isStoreContentFinish = reader.bool();
                    break;
                case /* repeated uint32 cur_env_event_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curEnvEventList.push(reader.uint32());
                    else
                        message.curEnvEventList.push(reader.uint32());
                    break;
                case /* optional bool is_market_content_open */ 10:
                    message.isMarketContentOpen = reader.bool();
                    break;
                case /* optional uint32 next_can_use_help_round */ 1800:
                    message.nextCanUseHelpRound = reader.uint32();
                    break;
                case /* optional bool is_market_content_finish */ 2:
                    message.isMarketContentFinish = reader.bool();
                    break;
                case /* repeated uint32 viewed_strategy_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.viewedStrategyList.push(reader.uint32());
                    else
                        message.viewedStrategyList.push(reader.uint32());
                    break;
                case /* optional uint32 prev_coin_c_num */ 3:
                    message.prevCoinCNum = reader.uint32();
                    break;
                case /* map<uint32, bool> bargain_info_map */ 6:
                    this.binaryReadMap6(message.bargainInfoMap, reader, options);
                    break;
                case /* optional uint32 dividend_reward_count */ 1798:
                    message.dividendRewardCount = reader.uint32();
                    break;
                case /* repeated uint32 cur_npc_event_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curNpcEventList.push(reader.uint32());
                    else
                        message.curNpcEventList.push(reader.uint32());
                    break;
                case /* optional bool is_help_in_cd */ 366:
                    message.isHelpInCd = reader.bool();
                    break;
                case /* optional uint32 prev_coin_b_num */ 1:
                    message.prevCoinBNum = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreInfo open_store_list */ 9:
                    message.openStoreList.push(exports.VintageMarketStoreInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 help_skill_id */ 760:
                    message.helpSkillId = reader.uint32();
                    break;
                case /* optional bool is_round_tips_view */ 12:
                    message.isRoundTipsView = reader.bool();
                    break;
                case /* optional bool is_strategy_module_open */ 876:
                    message.isStrategyModuleOpen = reader.bool();
                    break;
                case /* repeated uint32 unlock_strategy_list */ 13:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockStrategyList.push(reader.uint32());
                    else
                        message.unlockStrategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.bool();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketInfo.bargain_info_map");
            }
        }
        map[key ?? 0] = val ?? false;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_help_module_open = 1485; */
        if (message.isHelpModuleOpen !== undefined)
            writer.tag(1485, runtime_1.WireType.Varint).bool(message.isHelpModuleOpen);
        /* optional bool is_store_content_interrupt = 15; */
        if (message.isStoreContentInterrupt !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).bool(message.isStoreContentInterrupt);
        /* optional com.midnights.game.VintageMarketDealInfo deal_info = 11; */
        if (message.dealInfo)
            exports.VintageMarketDealInfo.internalBinaryWrite(message.dealInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 store_round = 7; */
        if (message.storeRound !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.storeRound);
        /* repeated uint32 store_round_income_list = 207; */
        if (message.storeRoundIncomeList.length) {
            writer.tag(207, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.storeRoundIncomeList.length; i++)
                writer.uint32(message.storeRoundIncomeList[i]);
            writer.join();
        }
        /* optional bool is_store_content_finish = 5; */
        if (message.isStoreContentFinish !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isStoreContentFinish);
        /* repeated uint32 cur_env_event_list = 8; */
        if (message.curEnvEventList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.curEnvEventList.length; i++)
                writer.uint32(message.curEnvEventList[i]);
            writer.join();
        }
        /* optional bool is_market_content_open = 10; */
        if (message.isMarketContentOpen !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isMarketContentOpen);
        /* optional uint32 next_can_use_help_round = 1800; */
        if (message.nextCanUseHelpRound !== undefined)
            writer.tag(1800, runtime_1.WireType.Varint).uint32(message.nextCanUseHelpRound);
        /* optional bool is_market_content_finish = 2; */
        if (message.isMarketContentFinish !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isMarketContentFinish);
        /* repeated uint32 viewed_strategy_list = 14; */
        if (message.viewedStrategyList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.viewedStrategyList.length; i++)
                writer.uint32(message.viewedStrategyList[i]);
            writer.join();
        }
        /* optional uint32 prev_coin_c_num = 3; */
        if (message.prevCoinCNum !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.prevCoinCNum);
        /* map<uint32, bool> bargain_info_map = 6; */
        for (let k of Object.keys(message.bargainInfoMap))
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).bool(message.bargainInfoMap[k]).join();
        /* optional uint32 dividend_reward_count = 1798; */
        if (message.dividendRewardCount !== undefined)
            writer.tag(1798, runtime_1.WireType.Varint).uint32(message.dividendRewardCount);
        /* repeated uint32 cur_npc_event_list = 4; */
        if (message.curNpcEventList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.curNpcEventList.length; i++)
                writer.uint32(message.curNpcEventList[i]);
            writer.join();
        }
        /* optional bool is_help_in_cd = 366; */
        if (message.isHelpInCd !== undefined)
            writer.tag(366, runtime_1.WireType.Varint).bool(message.isHelpInCd);
        /* optional uint32 prev_coin_b_num = 1; */
        if (message.prevCoinBNum !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.prevCoinBNum);
        /* repeated com.midnights.game.VintageMarketStoreInfo open_store_list = 9; */
        for (let i = 0; i < message.openStoreList.length; i++)
            exports.VintageMarketStoreInfo.internalBinaryWrite(message.openStoreList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 help_skill_id = 760; */
        if (message.helpSkillId !== undefined)
            writer.tag(760, runtime_1.WireType.Varint).uint32(message.helpSkillId);
        /* optional bool is_round_tips_view = 12; */
        if (message.isRoundTipsView !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isRoundTipsView);
        /* optional bool is_strategy_module_open = 876; */
        if (message.isStrategyModuleOpen !== undefined)
            writer.tag(876, runtime_1.WireType.Varint).bool(message.isStrategyModuleOpen);
        /* repeated uint32 unlock_strategy_list = 13; */
        if (message.unlockStrategyList.length) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockStrategyList.length; i++)
                writer.uint32(message.unlockStrategyList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketInfo
 */
exports.VintageMarketInfo = new VintageMarketInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageActivityDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageActivityDetailInfo", [
            { no: 2, name: "market_info", kind: "message", T: () => exports.VintageMarketInfo },
            { no: 7, name: "hunting_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintageHuntingStageData } },
            { no: 5, name: "booth_data", kind: "message", T: () => exports.VintageBoothUsedItemData },
            { no: 13, name: "camp_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintageCampChallengeStageData } },
            { no: 4, name: "present_stage_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => exports.VintagePresentStageData } },
            { no: 11, name: "is_content_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = { huntingStageMap: {}, campStageMap: {}, presentStageMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.VintageMarketInfo market_info */ 2:
                    message.marketInfo = exports.VintageMarketInfo.internalBinaryRead(reader, reader.uint32(), options, message.marketInfo);
                    break;
                case /* map<uint32, com.midnights.game.VintageHuntingStageData> hunting_stage_map */ 7:
                    this.binaryReadMap7(message.huntingStageMap, reader, options);
                    break;
                case /* optional com.midnights.game.VintageBoothUsedItemData booth_data */ 5:
                    message.boothData = exports.VintageBoothUsedItemData.internalBinaryRead(reader, reader.uint32(), options, message.boothData);
                    break;
                case /* map<uint32, com.midnights.game.VintageCampChallengeStageData> camp_stage_map */ 13:
                    this.binaryReadMap13(message.campStageMap, reader, options);
                    break;
                case /* map<uint32, com.midnights.game.VintagePresentStageData> present_stage_map */ 4:
                    this.binaryReadMap4(message.presentStageMap, reader, options);
                    break;
                case /* optional bool is_content_closed */ 11:
                    message.isContentClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap7(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintageHuntingStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.hunting_stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintageHuntingStageData.create();
    }
    binaryReadMap13(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintageCampChallengeStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.camp_stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintageCampChallengeStageData.create();
    }
    binaryReadMap4(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = exports.VintagePresentStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageActivityDetailInfo.present_stage_map");
            }
        }
        map[key ?? 0] = val ?? exports.VintagePresentStageData.create();
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.VintageMarketInfo market_info = 2; */
        if (message.marketInfo)
            exports.VintageMarketInfo.internalBinaryWrite(message.marketInfo, writer.tag(2, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.VintageHuntingStageData> hunting_stage_map = 7; */
        for (let k of Object.keys(message.huntingStageMap)) {
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintageHuntingStageData.internalBinaryWrite(message.huntingStageMap[k], writer, options);
            writer.join().join();
        }
        /* optional com.midnights.game.VintageBoothUsedItemData booth_data = 5; */
        if (message.boothData)
            exports.VintageBoothUsedItemData.internalBinaryWrite(message.boothData, writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, com.midnights.game.VintageCampChallengeStageData> camp_stage_map = 13; */
        for (let k of Object.keys(message.campStageMap)) {
            writer.tag(13, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintageCampChallengeStageData.internalBinaryWrite(message.campStageMap[k], writer, options);
            writer.join().join();
        }
        /* map<uint32, com.midnights.game.VintagePresentStageData> present_stage_map = 4; */
        for (let k of Object.keys(message.presentStageMap)) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k));
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            exports.VintagePresentStageData.internalBinaryWrite(message.presentStageMap[k], writer, options);
            writer.join().join();
        }
        /* optional bool is_content_closed = 11; */
        if (message.isContentClosed !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.isContentClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageActivityDetailInfo
 */
exports.VintageActivityDetailInfo = new VintageActivityDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDeliverItemReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketDeliverItemReq", [
            { no: 3, name: "deliver_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => define_11.ItemParam },
            { no: 5, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { deliverItemList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam deliver_item_list */ 3:
                    message.deliverItemList.push(define_11.ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 trader_id */ 5:
                    message.traderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.ItemParam deliver_item_list = 3; */
        for (let i = 0; i < message.deliverItemList.length; i++)
            define_11.ItemParam.internalBinaryWrite(message.deliverItemList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 trader_id = 5; */
        if (message.traderId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.traderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDeliverItemReq
 */
exports.VintageMarketDeliverItemReq = new VintageMarketDeliverItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDeliverItemRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketDeliverItemRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "trader_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 trader_id */ 3:
                    message.traderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 trader_id = 3; */
        if (message.traderId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.traderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDeliverItemRsp
 */
exports.VintageMarketDeliverItemRsp = new VintageMarketDeliverItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingFirstStageSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingFirstStageSettleInfo", [
            { no: 10, name: "elite_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "timid_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "brutal_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 elite_cnt */ 10:
                    message.eliteCnt = reader.uint32();
                    break;
                case /* optional uint32 timid_cnt */ 2:
                    message.timidCnt = reader.uint32();
                    break;
                case /* optional uint32 brutal_cnt */ 6:
                    message.brutalCnt = reader.uint32();
                    break;
                case /* optional uint32 score */ 14:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 elite_cnt = 10; */
        if (message.eliteCnt !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.eliteCnt);
        /* optional uint32 timid_cnt = 2; */
        if (message.timidCnt !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.timidCnt);
        /* optional uint32 brutal_cnt = 6; */
        if (message.brutalCnt !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.brutalCnt);
        /* optional uint32 score = 14; */
        if (message.score !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingFirstStageSettleInfo
 */
exports.VintageHuntingFirstStageSettleInfo = new VintageHuntingFirstStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingSecondStageSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingSecondStageSettleInfo", [
            { no: 6, name: "animal_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "capture_animal_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { animalCountMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> animal_count_map */ 6:
                    this.binaryReadMap6(message.animalCountMap, reader, options);
                    break;
                case /* optional uint32 capture_animal_num */ 7:
                    message.captureAnimalNum = reader.uint32();
                    break;
                case /* optional uint32 total_num */ 15:
                    message.totalNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap6(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageHuntingSecondStageSettleInfo.animal_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* map<uint32, uint32> animal_count_map = 6; */
        for (let k of Object.keys(message.animalCountMap))
            writer.tag(6, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.animalCountMap[k]).join();
        /* optional uint32 capture_animal_num = 7; */
        if (message.captureAnimalNum !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.captureAnimalNum);
        /* optional uint32 total_num = 15; */
        if (message.totalNum !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.totalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingSecondStageSettleInfo
 */
exports.VintageHuntingSecondStageSettleInfo = new VintageHuntingSecondStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingThirdStageSettleInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingThirdStageSettleInfo", [
            { no: 13, name: "left_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 left_time */ 13:
                    message.leftTime = reader.uint32();
                    break;
                case /* optional bool is_success */ 9:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 left_time = 13; */
        if (message.leftTime !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.leftTime);
        /* optional bool is_success = 9; */
        if (message.isSuccess !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingThirdStageSettleInfo
 */
exports.VintageHuntingThirdStageSettleInfo = new VintageHuntingThirdStageSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryVintageHuntingSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.SceneGalleryVintageHuntingSettleNotify", [
            { no: 11, name: "has_new_watcher", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_watcher_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "finished_watcher_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "first_stage_info", kind: "message", oneof: "info", T: () => exports.VintageHuntingFirstStageSettleInfo },
            { no: 10, name: "second_stage_info", kind: "message", oneof: "info", T: () => exports.VintageHuntingSecondStageSettleInfo },
            { no: 8, name: "third_stage_info", kind: "message", oneof: "info", T: () => exports.VintageHuntingThirdStageSettleInfo }
        ]);
    }
    create(value) {
        const message = { info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool has_new_watcher */ 11:
                    message.hasNewWatcher = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 9:
                    message.stageId = reader.uint32();
                    break;
                case /* optional uint32 total_watcher_num */ 12:
                    message.totalWatcherNum = reader.uint32();
                    break;
                case /* optional uint32 finished_watcher_num */ 6:
                    message.finishedWatcherNum = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 1:
                    message.isNewRecord = reader.bool();
                    break;
                case /* com.midnights.game.VintageHuntingFirstStageSettleInfo first_stage_info */ 4:
                    message.info = {
                        oneofKind: "firstStageInfo",
                        firstStageInfo: exports.VintageHuntingFirstStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.info.firstStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingSecondStageSettleInfo second_stage_info */ 10:
                    message.info = {
                        oneofKind: "secondStageInfo",
                        secondStageInfo: exports.VintageHuntingSecondStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.info.secondStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingThirdStageSettleInfo third_stage_info */ 8:
                    message.info = {
                        oneofKind: "thirdStageInfo",
                        thirdStageInfo: exports.VintageHuntingThirdStageSettleInfo.internalBinaryRead(reader, reader.uint32(), options, message.info.thirdStageInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool has_new_watcher = 11; */
        if (message.hasNewWatcher !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).bool(message.hasNewWatcher);
        /* optional uint32 stage_id = 9; */
        if (message.stageId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.stageId);
        /* optional uint32 total_watcher_num = 12; */
        if (message.totalWatcherNum !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.totalWatcherNum);
        /* optional uint32 finished_watcher_num = 6; */
        if (message.finishedWatcherNum !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.finishedWatcherNum);
        /* optional bool is_new_record = 1; */
        if (message.isNewRecord !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* com.midnights.game.VintageHuntingFirstStageSettleInfo first_stage_info = 4; */
        if (message.info.oneofKind === "firstStageInfo")
            exports.VintageHuntingFirstStageSettleInfo.internalBinaryWrite(message.info.firstStageInfo, writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingSecondStageSettleInfo second_stage_info = 10; */
        if (message.info.oneofKind === "secondStageInfo")
            exports.VintageHuntingSecondStageSettleInfo.internalBinaryWrite(message.info.secondStageInfo, writer.tag(10, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingThirdStageSettleInfo third_stage_info = 8; */
        if (message.info.oneofKind === "thirdStageInfo")
            exports.VintageHuntingThirdStageSettleInfo.internalBinaryWrite(message.info.thirdStageInfo, writer.tag(8, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryVintageHuntingSettleNotify
 */
exports.SceneGalleryVintageHuntingSettleNotify = new SceneGalleryVintageHuntingSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentFinishNoify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintagePresentFinishNoify", [
            { no: 7, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 7:
                    message.presentId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 present_id = 7; */
        if (message.presentId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.presentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentFinishNoify
 */
exports.VintagePresentFinishNoify = new VintagePresentFinishNoify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageDecorateBoothReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageDecorateBoothReq", [
            { no: 6, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combination_info", kind: "message", T: () => define_4.CustomGadgetTreeInfo }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 6:
                    message.entityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.CustomGadgetTreeInfo combination_info */ 11:
                    message.combinationInfo = define_4.CustomGadgetTreeInfo.internalBinaryRead(reader, reader.uint32(), options, message.combinationInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 entity_id = 6; */
        if (message.entityId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.entityId);
        /* optional com.midnights.game.CustomGadgetTreeInfo combination_info = 11; */
        if (message.combinationInfo)
            define_4.CustomGadgetTreeInfo.internalBinaryWrite(message.combinationInfo, writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageDecorateBoothReq
 */
exports.VintageDecorateBoothReq = new VintageDecorateBoothReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageDecorateBoothRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageDecorateBoothRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageDecorateBoothRsp
 */
exports.VintageDecorateBoothRsp = new VintageDecorateBoothRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStartGalleryReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingStartGalleryReq", [
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStartGalleryReq
 */
exports.VintageHuntingStartGalleryReq = new VintageHuntingStartGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingStartGalleryRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageHuntingStartGalleryRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingStartGalleryRsp
 */
exports.VintageHuntingStartGalleryRsp = new VintageHuntingStartGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampGroupBundleRegisterNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageCampGroupBundleRegisterNotify", [
            { no: 10, name: "group_bundle_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_bundle_id */ 10:
                    message.groupBundleId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 group_bundle_id = 10; */
        if (message.groupBundleId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.groupBundleId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampGroupBundleRegisterNotify
 */
exports.VintageCampGroupBundleRegisterNotify = new VintageCampGroupBundleRegisterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageCampStageFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageCampStageFinishNotify", [
            { no: 11, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 11:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 stage_id = 11; */
        if (message.stageId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageCampStageFinishNotify
 */
exports.VintageCampStageFinishNotify = new VintageCampStageFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStartStorePlayReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStartStorePlayReq", [
            { no: 5, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_round */ 5:
                    message.storeRound = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 store_round = 5; */
        if (message.storeRound !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.storeRound);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStartStorePlayReq
 */
exports.VintageMarketStartStorePlayReq = new VintageMarketStartStorePlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStartStorePlayRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStartStorePlayRsp", [
            { no: 7, name: "prev_round_coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "prev_round_coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 prev_round_coin_b */ 7:
                    message.prevRoundCoinB = reader.uint32();
                    break;
                case /* optional uint32 store_round */ 2:
                    message.storeRound = reader.uint32();
                    break;
                case /* optional uint32 prev_round_coin_c */ 5:
                    message.prevRoundCoinC = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 prev_round_coin_b = 7; */
        if (message.prevRoundCoinB !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.prevRoundCoinB);
        /* optional uint32 store_round = 2; */
        if (message.storeRound !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.storeRound);
        /* optional uint32 prev_round_coin_c = 5; */
        if (message.prevRoundCoinC !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.prevRoundCoinC);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStartStorePlayRsp
 */
exports.VintageMarketStartStorePlayRsp = new VintageMarketStartStorePlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketFinishStorePlayReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketFinishStorePlayReq", [
            { no: 9, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "store_op_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.VintageMarketStoreOpInfo }
        ]);
    }
    create(value) {
        const message = { storeOpList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_round */ 9:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list */ 3:
                    message.storeOpList.push(exports.VintageMarketStoreOpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 store_round = 9; */
        if (message.storeRound !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.storeRound);
        /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 3; */
        for (let i = 0; i < message.storeOpList.length; i++)
            exports.VintageMarketStoreOpInfo.internalBinaryWrite(message.storeOpList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketFinishStorePlayReq
 */
exports.VintageMarketFinishStorePlayReq = new VintageMarketFinishStorePlayReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketFinishStorePlayRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketFinishStorePlayRsp", [
            { no: 8, name: "trigger_env_event_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "store_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "trigger_npc_event_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "low_attr_store_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "round_coin_b_income", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "round_delta_coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "store_income_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "round_total_income", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "display_return_coin_b", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { triggerEnvEventList: [], triggerNpcEventList: [], lowAttrStoreList: [], storeIncomeMap: {} };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 trigger_env_event_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.triggerEnvEventList.push(reader.uint32());
                    else
                        message.triggerEnvEventList.push(reader.uint32());
                    break;
                case /* optional uint32 store_round */ 12:
                    message.storeRound = reader.uint32();
                    break;
                case /* repeated uint32 trigger_npc_event_list */ 10:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.triggerNpcEventList.push(reader.uint32());
                    else
                        message.triggerNpcEventList.push(reader.uint32());
                    break;
                case /* repeated uint32 low_attr_store_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.lowAttrStoreList.push(reader.uint32());
                    else
                        message.lowAttrStoreList.push(reader.uint32());
                    break;
                case /* optional uint32 round_coin_b_income */ 9:
                    message.roundCoinBIncome = reader.uint32();
                    break;
                case /* optional uint32 round_delta_coin_c */ 1:
                    message.roundDeltaCoinC = reader.uint32();
                    break;
                case /* map<uint32, uint32> store_income_map */ 3:
                    this.binaryReadMap3(message.storeIncomeMap, reader, options);
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 round_total_income */ 14:
                    message.roundTotalIncome = reader.uint32();
                    break;
                case /* optional uint32 display_return_coin_b */ 15:
                    message.displayReturnCoinB = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    binaryReadMap3(map, reader, options) {
        let len = reader.uint32(), end = reader.pos + len, key, val;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.VintageMarketFinishStorePlayRsp.store_income_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 trigger_env_event_list = 8; */
        if (message.triggerEnvEventList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.triggerEnvEventList.length; i++)
                writer.uint32(message.triggerEnvEventList[i]);
            writer.join();
        }
        /* optional uint32 store_round = 12; */
        if (message.storeRound !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.storeRound);
        /* repeated uint32 trigger_npc_event_list = 10; */
        if (message.triggerNpcEventList.length) {
            writer.tag(10, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.triggerNpcEventList.length; i++)
                writer.uint32(message.triggerNpcEventList[i]);
            writer.join();
        }
        /* repeated uint32 low_attr_store_list = 11; */
        if (message.lowAttrStoreList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.lowAttrStoreList.length; i++)
                writer.uint32(message.lowAttrStoreList[i]);
            writer.join();
        }
        /* optional uint32 round_coin_b_income = 9; */
        if (message.roundCoinBIncome !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.roundCoinBIncome);
        /* optional uint32 round_delta_coin_c = 1; */
        if (message.roundDeltaCoinC !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.roundDeltaCoinC);
        /* map<uint32, uint32> store_income_map = 3; */
        for (let k of Object.keys(message.storeIncomeMap))
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork().tag(1, runtime_1.WireType.Varint).uint32(parseInt(k)).tag(2, runtime_1.WireType.Varint).uint32(message.storeIncomeMap[k]).join();
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 round_total_income = 14; */
        if (message.roundTotalIncome !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.roundTotalIncome);
        /* optional uint32 display_return_coin_b = 15; */
        if (message.displayReturnCoinB !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.displayReturnCoinB);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketFinishStorePlayRsp
 */
exports.VintageMarketFinishStorePlayRsp = new VintageMarketFinishStorePlayRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintagePresentFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintagePresentFinishNotify", [
            { no: 3, name: "present_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 present_id */ 3:
                    message.presentId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 present_id = 3; */
        if (message.presentId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.presentId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintagePresentFinishNotify
 */
exports.VintagePresentFinishNotify = new VintagePresentFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreUnlockSlotReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreUnlockSlotReq", [
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreUnlockSlotReq
 */
exports.VintageMarketStoreUnlockSlotReq = new VintageMarketStoreUnlockSlotReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreUnlockSlotRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreUnlockSlotRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "slot_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 slot_count */ 6:
                    message.slotCount = reader.uint32();
                    break;
                case /* optional uint32 store_id */ 10:
                    message.storeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 slot_count = 6; */
        if (message.slotCount !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.slotCount);
        /* optional uint32 store_id = 10; */
        if (message.storeId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.storeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreUnlockSlotRsp
 */
exports.VintageMarketStoreUnlockSlotRsp = new VintageMarketStoreUnlockSlotRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreChooseStrategyReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreChooseStrategyReq", [
            { no: 6, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "store_op_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.VintageMarketStoreOpInfo },
            { no: 8, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { storeOpList: [], strategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 6:
                    message.storeId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list */ 9:
                    message.storeOpList.push(exports.VintageMarketStoreOpInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 strategy_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 store_id = 6; */
        if (message.storeId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.storeId);
        /* repeated com.midnights.game.VintageMarketStoreOpInfo store_op_list = 9; */
        for (let i = 0; i < message.storeOpList.length; i++)
            exports.VintageMarketStoreOpInfo.internalBinaryWrite(message.storeOpList[i], writer.tag(9, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 strategy_list = 8; */
        if (message.strategyList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreChooseStrategyReq
 */
exports.VintageMarketStoreChooseStrategyReq = new VintageMarketStoreChooseStrategyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreChooseStrategyRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreChooseStrategyRsp", [
            { no: 15, name: "store_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 store_id */ 15:
                    message.storeId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 strategy_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 store_id = 15; */
        if (message.storeId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.storeId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 strategy_list = 2; */
        if (message.strategyList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreChooseStrategyRsp
 */
exports.VintageMarketStoreChooseStrategyRsp = new VintageMarketStoreChooseStrategyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreViewStrategyReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreViewStrategyReq", [
            { no: 1, name: "strategy_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 strategy_id */ 1:
                    message.strategyId = reader.uint32();
                    break;
                case /* repeated uint32 strategy_list */ 14:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 strategy_id = 1; */
        if (message.strategyId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.strategyId);
        /* repeated uint32 strategy_list = 14; */
        if (message.strategyList.length) {
            writer.tag(14, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreViewStrategyReq
 */
exports.VintageMarketStoreViewStrategyReq = new VintageMarketStoreViewStrategyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketStoreViewStrategyRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketStoreViewStrategyRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "strategy_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { strategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 strategy_list */ 3:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.strategyList.push(reader.uint32());
                    else
                        message.strategyList.push(reader.uint32());
                    break;
                case /* optional uint32 strategy_id */ 14:
                    message.strategyId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).int32(message.retcode);
        /* repeated uint32 strategy_list = 3; */
        if (message.strategyList.length) {
            writer.tag(3, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.strategyList.length; i++)
                writer.uint32(message.strategyList[i]);
            writer.join();
        }
        /* optional uint32 strategy_id = 14; */
        if (message.strategyId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.strategyId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketStoreViewStrategyRsp
 */
exports.VintageMarketStoreViewStrategyRsp = new VintageMarketStoreViewStrategyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketDividendFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketDividendFinishNotify", [
            { no: 5, name: "coin_a", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin_a */ 5:
                    message.coinA = reader.uint32();
                    break;
                case /* optional uint32 coin_c */ 11:
                    message.coinC = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 coin_a = 5; */
        if (message.coinA !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.coinA);
        /* optional uint32 coin_c = 11; */
        if (message.coinC !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.coinC);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketDividendFinishNotify
 */
exports.VintageMarketDividendFinishNotify = new VintageMarketDividendFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageMarketNpcEventFinishNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.VintageMarketNpcEventFinishNotify", [
            { no: 15, name: "unlock_strategy_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "coin_c", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "coin_a", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { unlockStrategyList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlock_strategy_list */ 15:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockStrategyList.push(reader.uint32());
                    else
                        message.unlockStrategyList.push(reader.uint32());
                    break;
                case /* optional uint32 coin_c */ 12:
                    message.coinC = reader.uint32();
                    break;
                case /* optional uint32 coin_a */ 4:
                    message.coinA = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 unlock_strategy_list = 15; */
        if (message.unlockStrategyList.length) {
            writer.tag(15, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockStrategyList.length; i++)
                writer.uint32(message.unlockStrategyList[i]);
            writer.join();
        }
        /* optional uint32 coin_c = 12; */
        if (message.coinC !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.coinC);
        /* optional uint32 coin_a = 4; */
        if (message.coinA !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.coinA);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageMarketNpcEventFinishNotify
 */
exports.VintageMarketNpcEventFinishNotify = new VintageMarketNpcEventFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WindFieldDetailInfo", [
            { no: 11, name: "stage_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.WindFieldStageInfo }
        ]);
    }
    create(value) {
        const message = { stageInfoList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.WindFieldStageInfo stage_info_list */ 11:
                    message.stageInfoList.push(exports.WindFieldStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.WindFieldStageInfo stage_info_list = 11; */
        for (let i = 0; i < message.stageInfoList.length; i++)
            exports.WindFieldStageInfo.internalBinaryWrite(message.stageInfoList[i], writer.tag(11, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldDetailInfo
 */
exports.WindFieldDetailInfo = new WindFieldDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldStageInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WindFieldStageInfo", [
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "open_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 open_time */ 14:
                    message.openTime = reader.uint32();
                    break;
                case /* optional uint32 stage_id */ 8:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 open_time = 14; */
        if (message.openTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.openTime);
        /* optional uint32 stage_id = 8; */
        if (message.stageId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldStageInfo
 */
exports.WindFieldStageInfo = new WindFieldStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldRestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WindFieldRestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldRestartDungeonReq
 */
exports.WindFieldRestartDungeonReq = new WindFieldRestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldRestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.WindFieldRestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldRestartDungeonRsp
 */
exports.WindFieldRestartDungeonRsp = new WindFieldRestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusDetail", [
            { no: 5, name: "is_cultivate", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "capture_order", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "min_cultivate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_cultivate */ 5:
                    message.isCultivate = reader.bool();
                    break;
                case /* optional uint32 capture_order */ 6:
                    message.captureOrder = reader.uint32();
                    break;
                case /* optional uint32 name_id */ 14:
                    message.nameId = reader.uint32();
                    break;
                case /* optional uint32 min_cultivate_step */ 1:
                    message.minCultivateStep = reader.uint32();
                    break;
                case /* optional uint32 fungus_id */ 9:
                    message.fungusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_cultivate = 5; */
        if (message.isCultivate !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).bool(message.isCultivate);
        /* optional uint32 capture_order = 6; */
        if (message.captureOrder !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.captureOrder);
        /* optional uint32 name_id = 14; */
        if (message.nameId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.nameId);
        /* optional uint32 min_cultivate_step = 1; */
        if (message.minCultivateStep !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.minCultivateStep);
        /* optional uint32 fungus_id = 9; */
        if (message.fungusId !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.fungusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusDetail
 */
exports.FungusDetail = new FungusDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusPlotStageDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusPlotStageDetail", [
            { no: 3, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 3:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 3; */
        if (message.isOpen !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 15; */
        if (message.stageId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusPlotStageDetail
 */
exports.FungusPlotStageDetail = new FungusPlotStageDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingDungeonDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusTrainingDungeonDetail", [
            { no: 13, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "best_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 13:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 dungeon_id */ 12:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 best_score */ 9:
                    message.bestScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_open = 13; */
        if (message.isOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 dungeon_id = 12; */
        if (message.dungeonId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 best_score = 9; */
        if (message.bestScore !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.bestScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingDungeonDetail
 */
exports.FungusTrainingDungeonDetail = new FungusTrainingDungeonDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterMonsterDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterMonsterDetail", [
            { no: 2, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "cur_hp_percentage", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 9, name: "is_alive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 fungus_id */ 2:
                    message.fungusId = reader.uint32();
                    break;
                case /* optional float cur_hp_percentage */ 7:
                    message.curHpPercentage = reader.float();
                    break;
                case /* optional bool is_alive */ 9:
                    message.isAlive = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 fungus_id = 2; */
        if (message.fungusId !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.fungusId);
        /* optional float cur_hp_percentage = 7; */
        if (message.curHpPercentage !== undefined)
            writer.tag(7, runtime_1.WireType.Bit32).float(message.curHpPercentage);
        /* optional bool is_alive = 9; */
        if (message.isAlive !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).bool(message.isAlive);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterMonsterDetail
 */
exports.FungusFighterMonsterDetail = new FungusFighterMonsterDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingMonsterPreviewDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusTrainingMonsterPreviewDetail", [
            { no: 8, name: "monster_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "affix_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { affixList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 monster_id */ 8:
                    message.monsterId = reader.uint32();
                    break;
                case /* optional uint32 level */ 10:
                    message.level = reader.uint32();
                    break;
                case /* repeated uint32 affix_list */ 7:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.affixList.push(reader.uint32());
                    else
                        message.affixList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 monster_id = 8; */
        if (message.monsterId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.monsterId);
        /* optional uint32 level = 10; */
        if (message.level !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.level);
        /* repeated uint32 affix_list = 7; */
        if (message.affixList.length) {
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.affixList.length; i++)
                writer.uint32(message.affixList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingMonsterPreviewDetail
 */
exports.FungusTrainingMonsterPreviewDetail = new FungusTrainingMonsterPreviewDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingPoolPreviewDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusTrainingPoolPreviewDetail", [
            { no: 8, name: "pool_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "monster_preview_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusTrainingMonsterPreviewDetail }
        ]);
    }
    create(value) {
        const message = { monsterPreviewDetailList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 pool_id */ 8:
                    message.poolId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FungusTrainingMonsterPreviewDetail monster_preview_detail_list */ 6:
                    message.monsterPreviewDetailList.push(exports.FungusTrainingMonsterPreviewDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 pool_id = 8; */
        if (message.poolId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.poolId);
        /* repeated com.midnights.game.FungusTrainingMonsterPreviewDetail monster_preview_detail_list = 6; */
        for (let i = 0; i < message.monsterPreviewDetailList.length; i++)
            exports.FungusTrainingMonsterPreviewDetail.internalBinaryWrite(message.monsterPreviewDetailList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingPoolPreviewDetail
 */
exports.FungusTrainingPoolPreviewDetail = new FungusTrainingPoolPreviewDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusTrainingProgressDetail$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusTrainingProgressDetail", [
            { no: 9, name: "cur_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "monster_pool_preview_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusTrainingPoolPreviewDetail },
            { no: 6, name: "monster_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusFighterMonsterDetail },
            { no: 7, name: "total_used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "backup_monster_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "choosen_monster_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { monsterPoolPreviewList: [], monsterDetailList: [], backupMonsterList: [], choosenMonsterList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_round */ 9:
                    message.curRound = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.FungusTrainingPoolPreviewDetail monster_pool_preview_list */ 5:
                    message.monsterPoolPreviewList.push(exports.FungusTrainingPoolPreviewDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusFighterMonsterDetail monster_detail_list */ 6:
                    message.monsterDetailList.push(exports.FungusFighterMonsterDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 total_used_time */ 7:
                    message.totalUsedTime = reader.uint32();
                    break;
                case /* repeated uint32 backup_monster_list */ 4:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupMonsterList.push(reader.uint32());
                    else
                        message.backupMonsterList.push(reader.uint32());
                    break;
                case /* repeated uint32 choosen_monster_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.choosenMonsterList.push(reader.uint32());
                    else
                        message.choosenMonsterList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cur_round = 9; */
        if (message.curRound !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.curRound);
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* repeated com.midnights.game.FungusTrainingPoolPreviewDetail monster_pool_preview_list = 5; */
        for (let i = 0; i < message.monsterPoolPreviewList.length; i++)
            exports.FungusTrainingPoolPreviewDetail.internalBinaryWrite(message.monsterPoolPreviewList[i], writer.tag(5, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusFighterMonsterDetail monster_detail_list = 6; */
        for (let i = 0; i < message.monsterDetailList.length; i++)
            exports.FungusFighterMonsterDetail.internalBinaryWrite(message.monsterDetailList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 total_used_time = 7; */
        if (message.totalUsedTime !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.totalUsedTime);
        /* repeated uint32 backup_monster_list = 4; */
        if (message.backupMonsterList.length) {
            writer.tag(4, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backupMonsterList.length; i++)
                writer.uint32(message.backupMonsterList[i]);
            writer.join();
        }
        /* repeated uint32 choosen_monster_list = 8; */
        if (message.choosenMonsterList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.choosenMonsterList.length; i++)
                writer.uint32(message.choosenMonsterList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusTrainingProgressDetail
 */
exports.FungusTrainingProgressDetail = new FungusTrainingProgressDetail$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterDetailInfo", [
            { no: 6, name: "plot_stage_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusPlotStageDetail },
            { no: 4, name: "fungus_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusDetail },
            { no: 12, name: "unlock_camp_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "training_dungeon_progress_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusTrainingProgressDetail },
            { no: 15, name: "training_dungeon_detail_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.FungusTrainingDungeonDetail },
            { no: 1, name: "finish_camp_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "unlock_cultivate_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { plotStageDetailList: [], fungusDetailList: [], unlockCampIdList: [], trainingDungeonProgressDetailList: [], trainingDungeonDetailList: [], finishCampIdList: [], unlockCultivateIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.FungusPlotStageDetail plot_stage_detail_list */ 6:
                    message.plotStageDetailList.push(exports.FungusPlotStageDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusDetail fungus_detail_list */ 4:
                    message.fungusDetailList.push(exports.FungusDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 unlock_camp_id_list */ 12:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCampIdList.push(reader.uint32());
                    else
                        message.unlockCampIdList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.FungusTrainingProgressDetail training_dungeon_progress_detail_list */ 3:
                    message.trainingDungeonProgressDetailList.push(exports.FungusTrainingProgressDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.FungusTrainingDungeonDetail training_dungeon_detail_list */ 15:
                    message.trainingDungeonDetailList.push(exports.FungusTrainingDungeonDetail.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 finish_camp_id_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishCampIdList.push(reader.uint32());
                    else
                        message.finishCampIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 unlock_cultivate_id_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCultivateIdList.push(reader.uint32());
                    else
                        message.unlockCultivateIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.FungusPlotStageDetail plot_stage_detail_list = 6; */
        for (let i = 0; i < message.plotStageDetailList.length; i++)
            exports.FungusPlotStageDetail.internalBinaryWrite(message.plotStageDetailList[i], writer.tag(6, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusDetail fungus_detail_list = 4; */
        for (let i = 0; i < message.fungusDetailList.length; i++)
            exports.FungusDetail.internalBinaryWrite(message.fungusDetailList[i], writer.tag(4, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 unlock_camp_id_list = 12; */
        if (message.unlockCampIdList.length) {
            writer.tag(12, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockCampIdList.length; i++)
                writer.uint32(message.unlockCampIdList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.FungusTrainingProgressDetail training_dungeon_progress_detail_list = 3; */
        for (let i = 0; i < message.trainingDungeonProgressDetailList.length; i++)
            exports.FungusTrainingProgressDetail.internalBinaryWrite(message.trainingDungeonProgressDetailList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FungusTrainingDungeonDetail training_dungeon_detail_list = 15; */
        for (let i = 0; i < message.trainingDungeonDetailList.length; i++)
            exports.FungusTrainingDungeonDetail.internalBinaryWrite(message.trainingDungeonDetailList[i], writer.tag(15, runtime_1.WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 finish_camp_id_list = 1; */
        if (message.finishCampIdList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishCampIdList.length; i++)
                writer.uint32(message.finishCampIdList[i]);
            writer.join();
        }
        /* repeated uint32 unlock_cultivate_id_list = 8; */
        if (message.unlockCultivateIdList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.unlockCultivateIdList.length; i++)
                writer.uint32(message.unlockCultivateIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterDetailInfo
 */
exports.FungusFighterDetailInfo = new FungusFighterDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterPlotDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterFungusFighterPlotDungeonReq", [
            { no: 14, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 14:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated uint32 fungus_id_list */ 8:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 14; */
        if (message.dungeonId !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* repeated uint32 fungus_id_list = 8; */
        if (message.fungusIdList.length) {
            writer.tag(8, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fungusIdList.length; i++)
                writer.uint32(message.fungusIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterPlotDungeonReq
 */
exports.EnterFungusFighterPlotDungeonReq = new EnterFungusFighterPlotDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterPlotDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterFungusFighterPlotDungeonRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 15:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated uint32 fungus_id_list */ 2:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 15; */
        if (message.dungeonId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.dungeonId);
        /* repeated uint32 fungus_id_list = 2; */
        if (message.fungusIdList.length) {
            writer.tag(2, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fungusIdList.length; i++)
                writer.uint32(message.fungusIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterPlotDungeonRsp
 */
exports.EnterFungusFighterPlotDungeonRsp = new EnterFungusFighterPlotDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterPlotInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterPlotInfoNotify", [
            { no: 11, name: "fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { fungusIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 fungus_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fungusIdList.push(reader.uint32());
                    else
                        message.fungusIdList.push(reader.uint32());
                    break;
                case /* optional uint32 dungeon_id */ 4:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 fungus_id_list = 11; */
        if (message.fungusIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fungusIdList.length; i++)
                writer.uint32(message.fungusIdList[i]);
            writer.join();
        }
        /* optional uint32 dungeon_id = 4; */
        if (message.dungeonId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterPlotInfoNotify
 */
exports.FungusFighterPlotInfoNotify = new FungusFighterPlotInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusCultivateReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusCultivateReq", [
            { no: 8, name: "cultivate_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "copy_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "exchange_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "cultivate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "rotate_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "undo_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "place_step", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cultivate_id */ 8:
                    message.cultivateId = reader.uint32();
                    break;
                case /* optional uint32 copy_step */ 7:
                    message.copyStep = reader.uint32();
                    break;
                case /* optional uint32 exchange_step */ 11:
                    message.exchangeStep = reader.uint32();
                    break;
                case /* optional uint32 cultivate_step */ 13:
                    message.cultivateStep = reader.uint32();
                    break;
                case /* optional uint32 rotate_step */ 15:
                    message.rotateStep = reader.uint32();
                    break;
                case /* optional uint32 undo_step */ 6:
                    message.undoStep = reader.uint32();
                    break;
                case /* optional uint32 time */ 2:
                    message.time = reader.uint32();
                    break;
                case /* optional uint32 place_step */ 10:
                    message.placeStep = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cultivate_id = 8; */
        if (message.cultivateId !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).uint32(message.cultivateId);
        /* optional uint32 copy_step = 7; */
        if (message.copyStep !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.copyStep);
        /* optional uint32 exchange_step = 11; */
        if (message.exchangeStep !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.exchangeStep);
        /* optional uint32 cultivate_step = 13; */
        if (message.cultivateStep !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.cultivateStep);
        /* optional uint32 rotate_step = 15; */
        if (message.rotateStep !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.rotateStep);
        /* optional uint32 undo_step = 6; */
        if (message.undoStep !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.undoStep);
        /* optional uint32 time = 2; */
        if (message.time !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.time);
        /* optional uint32 place_step = 10; */
        if (message.placeStep !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.placeStep);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusCultivateReq
 */
exports.FungusCultivateReq = new FungusCultivateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusCultivateRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusCultivateRsp", [
            { no: 4, name: "cultivate_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cultivate_id */ 4:
                    message.cultivateId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 cultivate_id = 4; */
        if (message.cultivateId !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.cultivateId);
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusCultivateRsp
 */
exports.FungusCultivateRsp = new FungusCultivateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusRenameReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusRenameReq", [
            { no: 1, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 name_id */ 1:
                    message.nameId = reader.uint32();
                    break;
                case /* optional uint32 fungus_id */ 11:
                    message.fungusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 name_id = 1; */
        if (message.nameId !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.nameId);
        /* optional uint32 fungus_id = 11; */
        if (message.fungusId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.fungusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusRenameReq
 */
exports.FungusRenameReq = new FungusRenameReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusRenameRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusRenameRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "fungus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "name_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 fungus_id */ 15:
                    message.fungusId = reader.uint32();
                    break;
                case /* optional uint32 name_id */ 12:
                    message.nameId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 fungus_id = 15; */
        if (message.fungusId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.fungusId);
        /* optional uint32 name_id = 12; */
        if (message.nameId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.nameId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusRenameRsp
 */
exports.FungusRenameRsp = new FungusRenameRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterTrainingDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterFungusFighterTrainingDungeonReq", [
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonReq
 */
exports.EnterFungusFighterTrainingDungeonReq = new EnterFungusFighterTrainingDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterFungusFighterTrainingDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EnterFungusFighterTrainingDungeonRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterFungusFighterTrainingDungeonRsp
 */
exports.EnterFungusFighterTrainingDungeonRsp = new EnterFungusFighterTrainingDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRuntimeDataNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterRuntimeDataNotify", [
            { no: 7, name: "progress_detail", kind: "message", T: () => exports.FungusTrainingProgressDetail }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FungusTrainingProgressDetail progress_detail */ 7:
                    message.progressDetail = exports.FungusTrainingProgressDetail.internalBinaryRead(reader, reader.uint32(), options, message.progressDetail);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional com.midnights.game.FungusTrainingProgressDetail progress_detail = 7; */
        if (message.progressDetail)
            exports.FungusTrainingProgressDetail.internalBinaryWrite(message.progressDetail, writer.tag(7, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRuntimeDataNotify
 */
exports.FungusFighterRuntimeDataNotify = new FungusFighterRuntimeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingSelectFungusReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingSelectFungusReq", [
            { no: 11, name: "backup_fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "fight_fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { backupFungusIdList: [], fightFungusIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 backup_fungus_id_list */ 11:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupFungusIdList.push(reader.uint32());
                    else
                        message.backupFungusIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 fight_fungus_id_list */ 7:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.fightFungusIdList.push(reader.uint32());
                    else
                        message.fightFungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 backup_fungus_id_list = 11; */
        if (message.backupFungusIdList.length) {
            writer.tag(11, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backupFungusIdList.length; i++)
                writer.uint32(message.backupFungusIdList[i]);
            writer.join();
        }
        /* repeated uint32 fight_fungus_id_list = 7; */
        if (message.fightFungusIdList.length) {
            writer.tag(7, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.fightFungusIdList.length; i++)
                writer.uint32(message.fightFungusIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingSelectFungusReq
 */
exports.FungusFighterTrainingSelectFungusReq = new FungusFighterTrainingSelectFungusReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingSelectFungusRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingSelectFungusRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingSelectFungusRsp
 */
exports.FungusFighterTrainingSelectFungusRsp = new FungusFighterTrainingSelectFungusRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingGallerySettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingGallerySettleNotify", [
            { no: 14, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "total_used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", cmd_gallery_2.GalleryStopReason] },
            { no: 1, name: "dead_fungus_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "settle_round", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_final_settle", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "gadget_life_percentage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_new_record */ 14:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 total_used_time */ 4:
                    message.totalUsedTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 5:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 dead_fungus_num */ 1:
                    message.deadFungusNum = reader.uint32();
                    break;
                case /* optional uint32 settle_round */ 15:
                    message.settleRound = reader.uint32();
                    break;
                case /* optional bool is_final_settle */ 10:
                    message.isFinalSettle = reader.bool();
                    break;
                case /* optional uint32 gadget_life_percentage */ 11:
                    message.gadgetLifePercentage = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 9:
                    message.finalScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_new_record = 14; */
        if (message.isNewRecord !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 total_used_time = 4; */
        if (message.totalUsedTime !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.totalUsedTime);
        /* optional com.midnights.game.GalleryStopReason reason = 5; */
        if (message.reason !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.reason);
        /* optional uint32 dead_fungus_num = 1; */
        if (message.deadFungusNum !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.deadFungusNum);
        /* optional uint32 settle_round = 15; */
        if (message.settleRound !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.settleRound);
        /* optional bool is_final_settle = 10; */
        if (message.isFinalSettle !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).bool(message.isFinalSettle);
        /* optional uint32 gadget_life_percentage = 11; */
        if (message.gadgetLifePercentage !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.gadgetLifePercentage);
        /* optional uint32 final_score = 9; */
        if (message.finalScore !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).uint32(message.finalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingGallerySettleNotify
 */
exports.FungusFighterTrainingGallerySettleNotify = new FungusFighterTrainingGallerySettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterClearTrainingRuntimeDataReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterClearTrainingRuntimeDataReq", [
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataReq
 */
exports.FungusFighterClearTrainingRuntimeDataReq = new FungusFighterClearTrainingRuntimeDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterClearTrainingRuntimeDataRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterClearTrainingRuntimeDataRsp
 */
exports.FungusFighterClearTrainingRuntimeDataRsp = new FungusFighterClearTrainingRuntimeDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterUseBackupFungusReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterUseBackupFungusReq", [
            { no: 1, name: "backup_fungus_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = { backupFungusIdList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 backup_fungus_id_list */ 1:
                    if (wireType === runtime_1.WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.backupFungusIdList.push(reader.uint32());
                    else
                        message.backupFungusIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated uint32 backup_fungus_id_list = 1; */
        if (message.backupFungusIdList.length) {
            writer.tag(1, runtime_1.WireType.LengthDelimited).fork();
            for (let i = 0; i < message.backupFungusIdList.length; i++)
                writer.uint32(message.backupFungusIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterUseBackupFungusReq
 */
exports.FungusFighterUseBackupFungusReq = new FungusFighterUseBackupFungusReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterUseBackupFungusRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterUseBackupFungusRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterUseBackupFungusRsp
 */
exports.FungusFighterUseBackupFungusRsp = new FungusFighterUseBackupFungusRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRestartTraningDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterRestartTraningDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRestartTraningDungeonReq
 */
exports.FungusFighterRestartTraningDungeonReq = new FungusFighterRestartTraningDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterRestartTraningDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.FungusFighterRestartTraningDungeonRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterRestartTraningDungeonRsp
 */
exports.FungusFighterRestartTraningDungeonRsp = new FungusFighterRestartTraningDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementStageData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CharAmusementStageData", [
            { no: 15, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_time */ 15:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional bool is_open */ 12:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 stage_id */ 6:
                    message.stageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 finish_time = 15; */
        if (message.finishTime !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.finishTime);
        /* optional bool is_open = 12; */
        if (message.isOpen !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).bool(message.isOpen);
        /* optional uint32 stage_id = 6; */
        if (message.stageId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.stageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementStageData
 */
exports.CharAmusementStageData = new CharAmusementStageData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementDetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CharAmusementDetailInfo", [
            { no: 1, name: "stage_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.CharAmusementStageData }
        ]);
    }
    create(value) {
        const message = { stageDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CharAmusementStageData stage_data_list */ 1:
                    message.stageDataList.push(exports.CharAmusementStageData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.CharAmusementStageData stage_data_list = 1; */
        for (let i = 0; i < message.stageDataList.length; i++)
            exports.CharAmusementStageData.internalBinaryWrite(message.stageDataList[i], writer.tag(1, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementDetailInfo
 */
exports.CharAmusementDetailInfo = new CharAmusementDetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CharAmusementSettleNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.CharAmusementSettleNotify", [
            { no: 3, name: "is_succ", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_succ */ 3:
                    message.isSucc = reader.bool();
                    break;
                case /* optional uint32 finish_time */ 14:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 2:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional bool is_succ = 3; */
        if (message.isSucc !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).bool(message.isSucc);
        /* optional uint32 finish_time = 14; */
        if (message.finishTime !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.finishTime);
        /* optional bool is_new_record = 2; */
        if (message.isNewRecord !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CharAmusementSettleNotify
 */
exports.CharAmusementSettleNotify = new CharAmusementSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2LevelData$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2LevelData", [
            { no: 1, name: "challenge_mode_difficulty_pass", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_mode_last_choose_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "best_cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_level_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "challenge_mode_difficulty_open", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty_pass */ 1:
                    message.challengeModeDifficultyPass = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 5:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_last_choose_skill_no */ 10:
                    message.challengeModeLastChooseSkillNo = reader.uint32();
                    break;
                case /* optional uint32 best_cost_time */ 12:
                    message.bestCostTime = reader.uint32();
                    break;
                case /* optional bool is_level_open */ 7:
                    message.isLevelOpen = reader.bool();
                    break;
                case /* optional uint32 challenge_mode_difficulty_open */ 13:
                    message.challengeModeDifficultyOpen = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_mode_difficulty_pass = 1; */
        if (message.challengeModeDifficultyPass !== undefined)
            writer.tag(1, runtime_1.WireType.Varint).uint32(message.challengeModeDifficultyPass);
        /* optional uint32 level_id = 5; */
        if (message.levelId !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_last_choose_skill_no = 10; */
        if (message.challengeModeLastChooseSkillNo !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).uint32(message.challengeModeLastChooseSkillNo);
        /* optional uint32 best_cost_time = 12; */
        if (message.bestCostTime !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.bestCostTime);
        /* optional bool is_level_open = 7; */
        if (message.isLevelOpen !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).bool(message.isLevelOpen);
        /* optional uint32 challenge_mode_difficulty_open = 13; */
        if (message.challengeModeDifficultyOpen !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.challengeModeDifficultyOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2LevelData
 */
exports.EffigyChallengeV2LevelData = new EffigyChallengeV2LevelData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2DetailInfo$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2DetailInfo", [
            { no: 3, name: "level_data_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => exports.EffigyChallengeV2LevelData }
        ]);
    }
    create(value) {
        const message = { levelDataList: [] };
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.EffigyChallengeV2LevelData level_data_list */ 3:
                    message.levelDataList.push(exports.EffigyChallengeV2LevelData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* repeated com.midnights.game.EffigyChallengeV2LevelData level_data_list = 3; */
        for (let i = 0; i < message.levelDataList.length; i++)
            exports.EffigyChallengeV2LevelData.internalBinaryWrite(message.levelDataList[i], writer.tag(3, runtime_1.WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2DetailInfo
 */
exports.EffigyChallengeV2DetailInfo = new EffigyChallengeV2DetailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2EnterDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2EnterDungeonReq", [
            { no: 7, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty */ 7:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 11:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_mode_difficulty = 7; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_skill_no = 11; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonReq
 */
exports.EffigyChallengeV2EnterDungeonReq = new EffigyChallengeV2EnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2EnterDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2EnterDungeonRsp", [
            { no: 11, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_skill_no */ 11:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_mode_difficulty */ 14:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_mode_skill_no = 11; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(11, runtime_1.WireType.Varint).uint32(message.challengeModeSkillNo);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_mode_difficulty = 14; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(14, runtime_1.WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2EnterDungeonRsp
 */
exports.EffigyChallengeV2EnterDungeonRsp = new EffigyChallengeV2EnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2RestartDungeonReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2RestartDungeonReq", []);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        return target ?? this.create();
    }
    internalBinaryWrite(message, writer, options) {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonReq
 */
exports.EffigyChallengeV2RestartDungeonReq = new EffigyChallengeV2RestartDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2RestartDungeonRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2RestartDungeonRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, runtime_1.WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2RestartDungeonRsp
 */
exports.EffigyChallengeV2RestartDungeonRsp = new EffigyChallengeV2RestartDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2ChooseSkillReq$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2ChooseSkillReq", [
            { no: 6, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 6:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 7:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 6; */
        if (message.levelId !== undefined)
            writer.tag(6, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional uint32 challenge_mode_skill_no = 7; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(7, runtime_1.WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillReq
 */
exports.EffigyChallengeV2ChooseSkillReq = new EffigyChallengeV2ChooseSkillReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2ChooseSkillRsp$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2ChooseSkillRsp", [
            { no: 15, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "challenge_mode_skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 15:
                    message.levelId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_mode_skill_no */ 3:
                    message.challengeModeSkillNo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 level_id = 15; */
        if (message.levelId !== undefined)
            writer.tag(15, runtime_1.WireType.Varint).uint32(message.levelId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, runtime_1.WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_mode_skill_no = 3; */
        if (message.challengeModeSkillNo !== undefined)
            writer.tag(3, runtime_1.WireType.Varint).uint32(message.challengeModeSkillNo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2ChooseSkillRsp
 */
exports.EffigyChallengeV2ChooseSkillRsp = new EffigyChallengeV2ChooseSkillRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2DungeonInfoNotify$Type extends runtime_5.MessageType {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2DungeonInfoNotify", [
            { no: 2, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "skill_no", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value) {
        const message = {};
        globalThis.Object.defineProperty(message, runtime_4.MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            (0, runtime_3.reflectionMergePartial)(this, message, value);
        return message;
    }
    internalBinaryRead(reader, length, options, target) {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_mode_difficulty */ 2:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional uint32 skill_no */ 4:
                    message.skillNo = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 13:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? runtime_2.UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message, writer, options) {
        /* optional uint32 challenge_mode_difficulty = 2; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(2, runtime_1.WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional uint32 skill_no = 4; */
        if (message.skillNo !== undefined)
            writer.tag(4, runtime_1.WireType.Varint).uint32(message.skillNo);
        /* optional uint32 level_id = 13; */
        if (message.levelId !== undefined)
            writer.tag(13, runtime_1.WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? runtime_2.UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2DungeonInfoNotify
 */
exports.EffigyChallengeV2DungeonInfoNotify = new EffigyChallengeV2DungeonInfoNotify$Type();
