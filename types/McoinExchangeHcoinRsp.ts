/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: McoinExchangeHcoinRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class McoinExchangeHcoinRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mcoin_cost?: number;
        hcoin?: number;
        retcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mcoin_cost" in data && data.mcoin_cost != undefined) {
                this.mcoin_cost = data.mcoin_cost;
            }
            if ("hcoin" in data && data.hcoin != undefined) {
                this.hcoin = data.hcoin;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
        }
    }
    get mcoin_cost() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set mcoin_cost(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get hcoin() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set hcoin(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        mcoin_cost?: number;
        hcoin?: number;
        retcode?: number;
    }): McoinExchangeHcoinRsp {
        const message = new McoinExchangeHcoinRsp({});
        if (data.mcoin_cost != null) {
            message.mcoin_cost = data.mcoin_cost;
        }
        if (data.hcoin != null) {
            message.hcoin = data.hcoin;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        return message;
    }
    toObject() {
        const data: {
            mcoin_cost?: number;
            hcoin?: number;
            retcode?: number;
        } = {};
        if (this.mcoin_cost != null) {
            data.mcoin_cost = this.mcoin_cost;
        }
        if (this.hcoin != null) {
            data.hcoin = this.hcoin;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mcoin_cost != 0)
            writer.writeUint32(8, this.mcoin_cost);
        if (this.hcoin != 0)
            writer.writeUint32(7, this.hcoin);
        if (this.retcode != 0)
            writer.writeInt32(4, this.retcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): McoinExchangeHcoinRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new McoinExchangeHcoinRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.mcoin_cost = reader.readUint32();
                    break;
                case 7:
                    message.hcoin = reader.readUint32();
                    break;
                case 4:
                    message.retcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): McoinExchangeHcoinRsp {
        return McoinExchangeHcoinRsp.deserialize(bytes);
    }
}
