/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BlessingRecvPicRecord.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ProfilePicture";
import * as pb_1 from "google-protobuf";
export class BlessingRecvPicRecord extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        nickname?: string;
        remark_name?: string;
        pic_id?: number;
        uid?: number;
        avatar_id?: number;
        signature?: string;
        index?: number;
        is_recv?: boolean;
        profile_picture?: dependency_1.ProfilePicture;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("remark_name" in data && data.remark_name != undefined) {
                this.remark_name = data.remark_name;
            }
            if ("pic_id" in data && data.pic_id != undefined) {
                this.pic_id = data.pic_id;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("index" in data && data.index != undefined) {
                this.index = data.index;
            }
            if ("is_recv" in data && data.is_recv != undefined) {
                this.is_recv = data.is_recv;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
        }
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set nickname(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get remark_name() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set remark_name(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get pic_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set pic_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get signature() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set signature(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get index() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set index(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_recv() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_recv(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_1.ProfilePicture, 9) as dependency_1.ProfilePicture;
    }
    set profile_picture(value: dependency_1.ProfilePicture) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        nickname?: string;
        remark_name?: string;
        pic_id?: number;
        uid?: number;
        avatar_id?: number;
        signature?: string;
        index?: number;
        is_recv?: boolean;
        profile_picture?: ReturnType<typeof dependency_1.ProfilePicture.prototype.toObject>;
    }): BlessingRecvPicRecord {
        const message = new BlessingRecvPicRecord({});
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.remark_name != null) {
            message.remark_name = data.remark_name;
        }
        if (data.pic_id != null) {
            message.pic_id = data.pic_id;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.signature != null) {
            message.signature = data.signature;
        }
        if (data.index != null) {
            message.index = data.index;
        }
        if (data.is_recv != null) {
            message.is_recv = data.is_recv;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_1.ProfilePicture.fromObject(data.profile_picture);
        }
        return message;
    }
    toObject() {
        const data: {
            nickname?: string;
            remark_name?: string;
            pic_id?: number;
            uid?: number;
            avatar_id?: number;
            signature?: string;
            index?: number;
            is_recv?: boolean;
            profile_picture?: ReturnType<typeof dependency_1.ProfilePicture.prototype.toObject>;
        } = {};
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.remark_name != null) {
            data.remark_name = this.remark_name;
        }
        if (this.pic_id != null) {
            data.pic_id = this.pic_id;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.signature != null) {
            data.signature = this.signature;
        }
        if (this.index != null) {
            data.index = this.index;
        }
        if (this.is_recv != null) {
            data.is_recv = this.is_recv;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.nickname.length)
            writer.writeString(1, this.nickname);
        if (this.remark_name.length)
            writer.writeString(2, this.remark_name);
        if (this.pic_id != 0)
            writer.writeUint32(3, this.pic_id);
        if (this.uid != 0)
            writer.writeUint32(5, this.uid);
        if (this.avatar_id != 0)
            writer.writeUint32(6, this.avatar_id);
        if (this.signature.length)
            writer.writeString(10, this.signature);
        if (this.index != 0)
            writer.writeUint32(14, this.index);
        if (this.is_recv != false)
            writer.writeBool(7, this.is_recv);
        if (this.has_profile_picture)
            writer.writeMessage(9, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BlessingRecvPicRecord {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BlessingRecvPicRecord();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.nickname = reader.readString();
                    break;
                case 2:
                    message.remark_name = reader.readString();
                    break;
                case 3:
                    message.pic_id = reader.readUint32();
                    break;
                case 5:
                    message.uid = reader.readUint32();
                    break;
                case 6:
                    message.avatar_id = reader.readUint32();
                    break;
                case 10:
                    message.signature = reader.readString();
                    break;
                case 14:
                    message.index = reader.readUint32();
                    break;
                case 7:
                    message.is_recv = reader.readBool();
                    break;
                case 9:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_1.ProfilePicture.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BlessingRecvPicRecord {
        return BlessingRecvPicRecord.deserialize(bytes);
    }
}
