// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "BlessingRecvPicRecord.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProfilePicture } from "./ProfilePicture";
/**
 * @generated from protobuf message BlessingRecvPicRecord
 */
export interface BlessingRecvPicRecord {
    /**
     * @generated from protobuf field: bool is_recv = 2;
     */
    isRecv: boolean;
    /**
     * @generated from protobuf field: string nickname = 5;
     */
    nickname: string;
    /**
     * @generated from protobuf field: uint32 avatar_id = 6;
     */
    avatarId: number;
    /**
     * @generated from protobuf field: ProfilePicture profile_picture = 9;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: string signature = 10;
     */
    signature: string;
    /**
     * @generated from protobuf field: string remark_name = 8;
     */
    remarkName: string;
    /**
     * @generated from protobuf field: uint32 uid = 3;
     */
    uid: number;
    /**
     * @generated from protobuf field: uint32 pic_id = 12;
     */
    picId: number;
    /**
     * @generated from protobuf field: uint32 index = 11;
     */
    index: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlessingRecvPicRecord$Type extends MessageType<BlessingRecvPicRecord> {
    constructor() {
        super("BlessingRecvPicRecord", [
            { no: 2, name: "is_recv", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 10, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "remark_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "pic_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BlessingRecvPicRecord>): BlessingRecvPicRecord {
        const message = { isRecv: false, nickname: "", avatarId: 0, signature: "", remarkName: "", uid: 0, picId: 0, index: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingRecvPicRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingRecvPicRecord): BlessingRecvPicRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_recv */ 2:
                    message.isRecv = reader.bool();
                    break;
                case /* string nickname */ 5:
                    message.nickname = reader.string();
                    break;
                case /* uint32 avatar_id */ 6:
                    message.avatarId = reader.uint32();
                    break;
                case /* ProfilePicture profile_picture */ 9:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* string signature */ 10:
                    message.signature = reader.string();
                    break;
                case /* string remark_name */ 8:
                    message.remarkName = reader.string();
                    break;
                case /* uint32 uid */ 3:
                    message.uid = reader.uint32();
                    break;
                case /* uint32 pic_id */ 12:
                    message.picId = reader.uint32();
                    break;
                case /* uint32 index */ 11:
                    message.index = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BlessingRecvPicRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_recv = 2; */
        if (message.isRecv !== false)
            writer.tag(2, WireType.Varint).bool(message.isRecv);
        /* string nickname = 5; */
        if (message.nickname !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.nickname);
        /* uint32 avatar_id = 6; */
        if (message.avatarId !== 0)
            writer.tag(6, WireType.Varint).uint32(message.avatarId);
        /* ProfilePicture profile_picture = 9; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* string signature = 10; */
        if (message.signature !== "")
            writer.tag(10, WireType.LengthDelimited).string(message.signature);
        /* string remark_name = 8; */
        if (message.remarkName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.remarkName);
        /* uint32 uid = 3; */
        if (message.uid !== 0)
            writer.tag(3, WireType.Varint).uint32(message.uid);
        /* uint32 pic_id = 12; */
        if (message.picId !== 0)
            writer.tag(12, WireType.Varint).uint32(message.picId);
        /* uint32 index = 11; */
        if (message.index !== 0)
            writer.tag(11, WireType.Varint).uint32(message.index);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlessingRecvPicRecord
 */
export const BlessingRecvPicRecord = new BlessingRecvPicRecord$Type();
