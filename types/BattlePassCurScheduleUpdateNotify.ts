/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BattlePassCurScheduleUpdateNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./BattlePassSchedule";
import * as pb_1 from "google-protobuf";
export class BattlePassCurScheduleUpdateNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        have_cur_schedule?: boolean;
        cur_schedule?: dependency_1.BattlePassSchedule;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("have_cur_schedule" in data && data.have_cur_schedule != undefined) {
                this.have_cur_schedule = data.have_cur_schedule;
            }
            if ("cur_schedule" in data && data.cur_schedule != undefined) {
                this.cur_schedule = data.cur_schedule;
            }
        }
    }
    get have_cur_schedule() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set have_cur_schedule(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get cur_schedule() {
        return pb_1.Message.getWrapperField(this, dependency_1.BattlePassSchedule, 1) as dependency_1.BattlePassSchedule;
    }
    set cur_schedule(value: dependency_1.BattlePassSchedule) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_cur_schedule() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        have_cur_schedule?: boolean;
        cur_schedule?: ReturnType<typeof dependency_1.BattlePassSchedule.prototype.toObject>;
    }): BattlePassCurScheduleUpdateNotify {
        const message = new BattlePassCurScheduleUpdateNotify({});
        if (data.have_cur_schedule != null) {
            message.have_cur_schedule = data.have_cur_schedule;
        }
        if (data.cur_schedule != null) {
            message.cur_schedule = dependency_1.BattlePassSchedule.fromObject(data.cur_schedule);
        }
        return message;
    }
    toObject() {
        const data: {
            have_cur_schedule?: boolean;
            cur_schedule?: ReturnType<typeof dependency_1.BattlePassSchedule.prototype.toObject>;
        } = {};
        if (this.have_cur_schedule != null) {
            data.have_cur_schedule = this.have_cur_schedule;
        }
        if (this.cur_schedule != null) {
            data.cur_schedule = this.cur_schedule.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.have_cur_schedule != false)
            writer.writeBool(11, this.have_cur_schedule);
        if (this.has_cur_schedule)
            writer.writeMessage(1, this.cur_schedule, () => this.cur_schedule.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BattlePassCurScheduleUpdateNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BattlePassCurScheduleUpdateNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.have_cur_schedule = reader.readBool();
                    break;
                case 1:
                    reader.readMessage(message.cur_schedule, () => message.cur_schedule = dependency_1.BattlePassSchedule.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BattlePassCurScheduleUpdateNotify {
        return BattlePassCurScheduleUpdateNotify.deserialize(bytes);
    }
}
