// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "MainCoop.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message MainCoop
 */
export interface MainCoop {
    /**
     * @generated from protobuf field: MainCoop.Status status = 6;
     */
    status: MainCoop_Status;
    /**
     * @generated from protobuf field: map<uint32, int32> normal_var_map = 5;
     */
    normalVarMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, int32> temp_var_map = 7;
     */
    tempVarMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 self_confidence = 9;
     */
    selfConfidence: number;
    /**
     * @generated from protobuf field: uint32 id = 1;
     */
    id: number;
    /**
     * @generated from protobuf field: repeated uint32 save_point_id_list = 10;
     */
    savePointIdList: number[];
    /**
     * @generated from protobuf field: map<uint32, uint32> seen_ending_map = 13;
     */
    seenEndingMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum MainCoop.Status
 */
export enum MainCoop_Status {
    /**
     * @generated from protobuf enum value: STATUS_INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: STATUS_RUNNING = 1;
     */
    RUNNING = 1,
    /**
     * @generated from protobuf enum value: STATUS_FINISHED = 2;
     */
    FINISHED = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class MainCoop$Type extends MessageType<MainCoop> {
    constructor() {
        super("MainCoop", [
            { no: 6, name: "status", kind: "enum", T: () => ["MainCoop.Status", MainCoop_Status, "STATUS_"] },
            { no: 5, name: "normal_var_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 7, name: "temp_var_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 9, name: "self_confidence", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "save_point_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "seen_ending_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<MainCoop>): MainCoop {
        const message = { status: 0, normalVarMap: {}, tempVarMap: {}, selfConfidence: 0, id: 0, savePointIdList: [], seenEndingMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MainCoop>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MainCoop): MainCoop {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* MainCoop.Status status */ 6:
                    message.status = reader.int32();
                    break;
                case /* map<uint32, int32> normal_var_map */ 5:
                    this.binaryReadMap5(message.normalVarMap, reader, options);
                    break;
                case /* map<uint32, int32> temp_var_map */ 7:
                    this.binaryReadMap7(message.tempVarMap, reader, options);
                    break;
                case /* uint32 self_confidence */ 9:
                    message.selfConfidence = reader.uint32();
                    break;
                case /* uint32 id */ 1:
                    message.id = reader.uint32();
                    break;
                case /* repeated uint32 save_point_id_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.savePointIdList.push(reader.uint32());
                    else
                        message.savePointIdList.push(reader.uint32());
                    break;
                case /* map<uint32, uint32> seen_ending_map */ 13:
                    this.binaryReadMap13(message.seenEndingMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: MainCoop["normalVarMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MainCoop["normalVarMap"] | undefined, val: MainCoop["normalVarMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MainCoop.normal_var_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap7(map: MainCoop["tempVarMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MainCoop["tempVarMap"] | undefined, val: MainCoop["tempVarMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MainCoop.temp_var_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap13(map: MainCoop["seenEndingMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MainCoop["seenEndingMap"] | undefined, val: MainCoop["seenEndingMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field MainCoop.seen_ending_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: MainCoop, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* MainCoop.Status status = 6; */
        if (message.status !== 0)
            writer.tag(6, WireType.Varint).int32(message.status);
        /* map<uint32, int32> normal_var_map = 5; */
        for (let k of Object.keys(message.normalVarMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).int32(message.normalVarMap[k as any]).join();
        /* map<uint32, int32> temp_var_map = 7; */
        for (let k of Object.keys(message.tempVarMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).int32(message.tempVarMap[k as any]).join();
        /* uint32 self_confidence = 9; */
        if (message.selfConfidence !== 0)
            writer.tag(9, WireType.Varint).uint32(message.selfConfidence);
        /* uint32 id = 1; */
        if (message.id !== 0)
            writer.tag(1, WireType.Varint).uint32(message.id);
        /* repeated uint32 save_point_id_list = 10; */
        if (message.savePointIdList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.savePointIdList.length; i++)
                writer.uint32(message.savePointIdList[i]);
            writer.join();
        }
        /* map<uint32, uint32> seen_ending_map = 13; */
        for (let k of Object.keys(message.seenEndingMap))
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.seenEndingMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MainCoop
 */
export const MainCoop = new MainCoop$Type();
