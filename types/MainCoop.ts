/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MainCoop.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class MainCoop extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        seen_ending_map?: Map<number, number>;
        normal_var_map?: Map<number, number>;
        self_confidence?: number;
        save_point_id_list?: number[];
        status?: MainCoop.Status;
        temp_var_map?: Map<number, number>;
        id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("seen_ending_map" in data && data.seen_ending_map != undefined) {
                this.seen_ending_map = data.seen_ending_map;
            }
            if ("normal_var_map" in data && data.normal_var_map != undefined) {
                this.normal_var_map = data.normal_var_map;
            }
            if ("self_confidence" in data && data.self_confidence != undefined) {
                this.self_confidence = data.self_confidence;
            }
            if ("save_point_id_list" in data && data.save_point_id_list != undefined) {
                this.save_point_id_list = data.save_point_id_list;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("temp_var_map" in data && data.temp_var_map != undefined) {
                this.temp_var_map = data.temp_var_map;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
        if (!this.seen_ending_map)
            this.seen_ending_map = new Map();
        if (!this.normal_var_map)
            this.normal_var_map = new Map();
        if (!this.temp_var_map)
            this.temp_var_map = new Map();
    }
    get seen_ending_map() {
        return pb_1.Message.getField(this, 13) as any as Map<number, number>;
    }
    set seen_ending_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 13, value as any);
    }
    get normal_var_map() {
        return pb_1.Message.getField(this, 4) as any as Map<number, number>;
    }
    set normal_var_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    get self_confidence() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set self_confidence(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get save_point_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set save_point_id_list(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 6, MainCoop.Status.STATUS_INVALID) as MainCoop.Status;
    }
    set status(value: MainCoop.Status) {
        pb_1.Message.setField(this, 6, value);
    }
    get temp_var_map() {
        return pb_1.Message.getField(this, 11) as any as Map<number, number>;
    }
    set temp_var_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 11, value as any);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        seen_ending_map?: {
            [key: number]: number;
        };
        normal_var_map?: {
            [key: number]: number;
        };
        self_confidence?: number;
        save_point_id_list?: number[];
        status?: MainCoop.Status;
        temp_var_map?: {
            [key: number]: number;
        };
        id?: number;
    }): MainCoop {
        const message = new MainCoop({});
        if (typeof data.seen_ending_map == "object") {
            message.seen_ending_map = new Map(Object.entries(data.seen_ending_map).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.normal_var_map == "object") {
            message.normal_var_map = new Map(Object.entries(data.normal_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.self_confidence != null) {
            message.self_confidence = data.self_confidence;
        }
        if (data.save_point_id_list != null) {
            message.save_point_id_list = data.save_point_id_list;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (typeof data.temp_var_map == "object") {
            message.temp_var_map = new Map(Object.entries(data.temp_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data: {
            seen_ending_map?: {
                [key: number]: number;
            };
            normal_var_map?: {
                [key: number]: number;
            };
            self_confidence?: number;
            save_point_id_list?: number[];
            status?: MainCoop.Status;
            temp_var_map?: {
                [key: number]: number;
            };
            id?: number;
        } = {};
        if (this.seen_ending_map.size > 0) {
            data.seen_ending_map = (Object.fromEntries)(this.seen_ending_map);
        }
        if (this.normal_var_map.size > 0) {
            data.normal_var_map = (Object.fromEntries)(this.normal_var_map);
        }
        if (this.self_confidence != null) {
            data.self_confidence = this.self_confidence;
        }
        if (this.save_point_id_list != null) {
            data.save_point_id_list = this.save_point_id_list;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.temp_var_map.size > 0) {
            data.temp_var_map = (Object.fromEntries)(this.temp_var_map);
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.seen_ending_map) {
            writer.writeMessage(13, this.seen_ending_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        for (const [key, value] of this.normal_var_map) {
            writer.writeMessage(4, this.normal_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.self_confidence != 0)
            writer.writeUint32(5, this.self_confidence);
        if (this.save_point_id_list.length)
            writer.writePackedUint32(1, this.save_point_id_list);
        if (this.status != MainCoop.Status.STATUS_INVALID)
            writer.writeEnum(6, this.status);
        for (const [key, value] of this.temp_var_map) {
            writer.writeMessage(11, this.temp_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.id != 0)
            writer.writeUint32(9, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MainCoop {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MainCoop();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.seen_ending_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.normal_var_map as any, reader, reader.readUint32, reader.readInt32));
                    break;
                case 5:
                    message.self_confidence = reader.readUint32();
                    break;
                case 1:
                    message.save_point_id_list = reader.readPackedUint32();
                    break;
                case 6:
                    message.status = reader.readEnum();
                    break;
                case 11:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.temp_var_map as any, reader, reader.readUint32, reader.readInt32));
                    break;
                case 9:
                    message.id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MainCoop {
        return MainCoop.deserialize(bytes);
    }
}
export namespace MainCoop {
    export enum Status {
        STATUS_INVALID = 0,
        STATUS_RUNNING = 1,
        STATUS_FINISHED = 2
    }
}
