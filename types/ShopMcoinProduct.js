"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ShopMcoinProduct_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ShopMcoinProduct = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ShopMcoinProduct.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class ShopMcoinProduct extends pb_1.Message {
    constructor(data) {
        super();
        _ShopMcoinProduct_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ShopMcoinProduct_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("product_id" in data && data.product_id != undefined) {
                this.product_id = data.product_id;
            }
            if ("price_tier" in data && data.price_tier != undefined) {
                this.price_tier = data.price_tier;
            }
            if ("mcoin_base" in data && data.mcoin_base != undefined) {
                this.mcoin_base = data.mcoin_base;
            }
            if ("mcoin_non_first" in data && data.mcoin_non_first != undefined) {
                this.mcoin_non_first = data.mcoin_non_first;
            }
            if ("mcoin_first" in data && data.mcoin_first != undefined) {
                this.mcoin_first = data.mcoin_first;
            }
            if ("bought_num" in data && data.bought_num != undefined) {
                this.bought_num = data.bought_num;
            }
            if ("is_audit" in data && data.is_audit != undefined) {
                this.is_audit = data.is_audit;
            }
        }
    }
    get product_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, "");
    }
    set product_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get price_tier() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set price_tier(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get mcoin_base() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set mcoin_base(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get mcoin_non_first() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set mcoin_non_first(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get mcoin_first() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set mcoin_first(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get bought_num() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set bought_num(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_audit() {
        return pb_1.Message.getFieldWithDefault(this, 7, false);
    }
    set is_audit(value) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data) {
        const message = new ShopMcoinProduct({});
        if (data.product_id != null) {
            message.product_id = data.product_id;
        }
        if (data.price_tier != null) {
            message.price_tier = data.price_tier;
        }
        if (data.mcoin_base != null) {
            message.mcoin_base = data.mcoin_base;
        }
        if (data.mcoin_non_first != null) {
            message.mcoin_non_first = data.mcoin_non_first;
        }
        if (data.mcoin_first != null) {
            message.mcoin_first = data.mcoin_first;
        }
        if (data.bought_num != null) {
            message.bought_num = data.bought_num;
        }
        if (data.is_audit != null) {
            message.is_audit = data.is_audit;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.product_id != null) {
            data.product_id = this.product_id;
        }
        if (this.price_tier != null) {
            data.price_tier = this.price_tier;
        }
        if (this.mcoin_base != null) {
            data.mcoin_base = this.mcoin_base;
        }
        if (this.mcoin_non_first != null) {
            data.mcoin_non_first = this.mcoin_non_first;
        }
        if (this.mcoin_first != null) {
            data.mcoin_first = this.mcoin_first;
        }
        if (this.bought_num != null) {
            data.bought_num = this.bought_num;
        }
        if (this.is_audit != null) {
            data.is_audit = this.is_audit;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.product_id.length)
            writer.writeString(1, this.product_id);
        if (this.price_tier.length)
            writer.writeString(2, this.price_tier);
        if (this.mcoin_base != 0)
            writer.writeUint32(3, this.mcoin_base);
        if (this.mcoin_non_first != 0)
            writer.writeUint32(4, this.mcoin_non_first);
        if (this.mcoin_first != 0)
            writer.writeUint32(5, this.mcoin_first);
        if (this.bought_num != 0)
            writer.writeUint32(6, this.bought_num);
        if (this.is_audit != false)
            writer.writeBool(7, this.is_audit);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShopMcoinProduct();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.product_id = reader.readString();
                    break;
                case 2:
                    message.price_tier = reader.readString();
                    break;
                case 3:
                    message.mcoin_base = reader.readUint32();
                    break;
                case 4:
                    message.mcoin_non_first = reader.readUint32();
                    break;
                case 5:
                    message.mcoin_first = reader.readUint32();
                    break;
                case 6:
                    message.bought_num = reader.readUint32();
                    break;
                case 7:
                    message.is_audit = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ShopMcoinProduct.deserialize(bytes);
    }
}
exports.ShopMcoinProduct = ShopMcoinProduct;
_ShopMcoinProduct_one_of_decls = new WeakMap();
