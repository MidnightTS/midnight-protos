/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FishingGallerySettleInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./FishInfo";
import * as dependency_2 from "./FishingScore";
import * as pb_1 from "google-protobuf";
export class FishingGallerySettleInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fish_map?: Map<number, dependency_1.FishInfo>;
        fishing_score_list?: dependency_2.FishingScore[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fish_map" in data && data.fish_map != undefined) {
                this.fish_map = data.fish_map;
            }
            if ("fishing_score_list" in data && data.fishing_score_list != undefined) {
                this.fishing_score_list = data.fishing_score_list;
            }
        }
        if (!this.fish_map)
            this.fish_map = new Map();
    }
    get fish_map() {
        return pb_1.Message.getField(this, 11) as any as Map<number, dependency_1.FishInfo>;
    }
    set fish_map(value: Map<number, dependency_1.FishInfo>) {
        pb_1.Message.setField(this, 11, value as any);
    }
    get fishing_score_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.FishingScore, 15) as dependency_2.FishingScore[];
    }
    set fishing_score_list(value: dependency_2.FishingScore[]) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    static fromObject(data: {
        fish_map?: {
            [key: number]: ReturnType<typeof dependency_1.FishInfo.prototype.toObject>;
        };
        fishing_score_list?: ReturnType<typeof dependency_2.FishingScore.prototype.toObject>[];
    }): FishingGallerySettleInfo {
        const message = new FishingGallerySettleInfo({});
        if (typeof data.fish_map == "object") {
            message.fish_map = new Map(Object.entries(data.fish_map).map(([key, value]) => [Number(key), dependency_1.FishInfo.fromObject(value)]));
        }
        if (data.fishing_score_list != null) {
            message.fishing_score_list = data.fishing_score_list.map(item => dependency_2.FishingScore.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            fish_map?: {
                [key: number]: ReturnType<typeof dependency_1.FishInfo.prototype.toObject>;
            };
            fishing_score_list?: ReturnType<typeof dependency_2.FishingScore.prototype.toObject>[];
        } = {};
        if (this.fish_map.size > 0) {
            data.fish_map = (Object.fromEntries)((Array.from)(this.fish_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.fishing_score_list != null) {
            data.fishing_score_list = this.fishing_score_list.map((item: dependency_2.FishingScore) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.fish_map) {
            writer.writeMessage(11, this.fish_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.fishing_score_list.length)
            writer.writeRepeatedMessage(15, this.fishing_score_list, (item: dependency_2.FishingScore) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FishingGallerySettleInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FishingGallerySettleInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fish_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.FishInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                case 15:
                    reader.readMessage(message.fishing_score_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_2.FishingScore.deserialize(reader), dependency_2.FishingScore));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FishingGallerySettleInfo {
        return FishingGallerySettleInfo.deserialize(bytes);
    }
}
