// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_hunting.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./define";
import { HuntingOfferState } from "./define";
/**
 * @generated from protobuf message com.midnights.game.HuntingPair
 */
export interface HuntingPair {
    /**
     * @generated from protobuf field: optional uint32 refresh_id = 9;
     */
    refreshId?: number;
    /**
     * @generated from protobuf field: optional uint32 monster_config_id = 4;
     */
    monsterConfigId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.TakeHuntingOfferReq
 */
export interface TakeHuntingOfferReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 14;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 city_id = 4;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeHuntingOfferReq.CmdId
 */
export enum TakeHuntingOfferReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4326;
     */
    CMD_ID = 4326,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeHuntingOfferRsp
 */
export interface TakeHuntingOfferRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 13;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 city_id = 14;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeHuntingOfferRsp.CmdId
 */
export enum TakeHuntingOfferRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4318;
     */
    CMD_ID = 4318,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingOfferData
 */
export interface HuntingOfferData {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 4;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 city_id = 8;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingOfferState state = 1;
     */
    state?: HuntingOfferState;
}
/**
 * @generated from protobuf message com.midnights.game.GetCityHuntingOfferReq
 */
export interface GetCityHuntingOfferReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 9;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityHuntingOfferReq.CmdId
 */
export enum GetCityHuntingOfferReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4325;
     */
    CMD_ID = 4325,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCityHuntingOfferRsp
 */
export interface GetCityHuntingOfferRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.HuntingOfferData hunting_offer_list = 13;
     */
    huntingOfferList: HuntingOfferData[];
    /**
     * @generated from protobuf field: optional uint32 city_id = 2;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair ongoing_hunting_pair = 8;
     */
    ongoingHuntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 cur_week_finished_count = 1;
     */
    curWeekFinishedCount?: number;
    /**
     * @generated from protobuf field: optional uint32 next_refresh_time = 4;
     */
    nextRefreshTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetCityHuntingOfferRsp.CmdId
 */
export enum GetCityHuntingOfferRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4307;
     */
    CMD_ID = 4307,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetHuntingOfferRewardReq
 */
export interface GetHuntingOfferRewardReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 6;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 4;
     */
    huntingPair?: HuntingPair;
}
/**
 * @generated from protobuf enum com.midnights.game.GetHuntingOfferRewardReq.CmdId
 */
export enum GetHuntingOfferRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4302;
     */
    CMD_ID = 4302,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetHuntingOfferRewardRsp
 */
export interface GetHuntingOfferRewardRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 14;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 city_id = 3;
     */
    cityId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetHuntingOfferRewardRsp.CmdId
 */
export enum GetHuntingOfferRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4331;
     */
    CMD_ID = 4331,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingStartNotify
 */
export interface HuntingStartNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector clue_position = 4;
     */
    cluePosition?: Vector;
    /**
     * @generated from protobuf field: optional uint32 fail_time = 15;
     */
    failTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 3;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional bool is_final = 8;
     */
    isFinal?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingStartNotify.CmdId
 */
export enum HuntingStartNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4329;
     */
    CMD_ID = 4329,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingRevealClueNotify
 */
export interface HuntingRevealClueNotify {
    /**
     * @generated from protobuf field: optional uint32 finish_clue_count = 5;
     */
    finishClueCount?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector clue_position = 4;
     */
    cluePosition?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 12;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional uint32 finished_group_id = 7;
     */
    finishedGroupId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingRevealClueNotify.CmdId
 */
export enum HuntingRevealClueNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4322;
     */
    CMD_ID = 4322,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingRevealFinalNotify
 */
export interface HuntingRevealFinalNotify {
    /**
     * @generated from protobuf field: optional uint32 finished_group_id = 5;
     */
    finishedGroupId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 11;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector final_position = 2;
     */
    finalPosition?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingRevealFinalNotify.CmdId
 */
export enum HuntingRevealFinalNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4344;
     */
    CMD_ID = 4344,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingSuccessNotify
 */
export interface HuntingSuccessNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 4;
     */
    huntingPair?: HuntingPair;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingSuccessNotify.CmdId
 */
export enum HuntingSuccessNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4349;
     */
    CMD_ID = 4349,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingFailNotify
 */
export interface HuntingFailNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 12;
     */
    huntingPair?: HuntingPair;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingFailNotify.CmdId
 */
export enum HuntingFailNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4320;
     */
    CMD_ID = 4320,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingOngoingNotify
 */
export interface HuntingOngoingNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 15;
     */
    huntingPair?: HuntingPair;
    /**
     * @generated from protobuf field: optional bool is_started = 8;
     */
    isStarted?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector next_position = 3;
     */
    nextPosition?: Vector;
    /**
     * @generated from protobuf field: optional uint32 finish_clue_count = 10;
     */
    finishClueCount?: number;
    /**
     * @generated from protobuf field: optional bool is_final = 14;
     */
    isFinal?: boolean;
    /**
     * @generated from protobuf field: optional uint32 fail_time = 7;
     */
    failTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingOngoingNotify.CmdId
 */
export enum HuntingOngoingNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4345;
     */
    CMD_ID = 4345,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingGiveUpReq
 */
export interface HuntingGiveUpReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 1;
     */
    huntingPair?: HuntingPair;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingGiveUpReq.CmdId
 */
export enum HuntingGiveUpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4341;
     */
    CMD_ID = 4341,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.HuntingGiveUpRsp
 */
export interface HuntingGiveUpRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.HuntingPair hunting_pair = 4;
     */
    huntingPair?: HuntingPair;
}
/**
 * @generated from protobuf enum com.midnights.game.HuntingGiveUpRsp.CmdId
 */
export enum HuntingGiveUpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4342;
     */
    CMD_ID = 4342,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class HuntingPair$Type extends MessageType<HuntingPair> {
    constructor() {
        super("com.midnights.game.HuntingPair", [
            { no: 9, name: "refresh_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "monster_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HuntingPair>): HuntingPair {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingPair): HuntingPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 refresh_id */ 9:
                    message.refreshId = reader.uint32();
                    break;
                case /* optional uint32 monster_config_id */ 4:
                    message.monsterConfigId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 refresh_id = 9; */
        if (message.refreshId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.refreshId);
        /* optional uint32 monster_config_id = 4; */
        if (message.monsterConfigId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.monsterConfigId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingPair
 */
export const HuntingPair = new HuntingPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeHuntingOfferReq$Type extends MessageType<TakeHuntingOfferReq> {
    constructor() {
        super("com.midnights.game.TakeHuntingOfferReq", [
            { no: 14, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 4, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeHuntingOfferReq>): TakeHuntingOfferReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeHuntingOfferReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeHuntingOfferReq): TakeHuntingOfferReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 14:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional uint32 city_id */ 4:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeHuntingOfferReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 14; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 city_id = 4; */
        if (message.cityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeHuntingOfferReq
 */
export const TakeHuntingOfferReq = new TakeHuntingOfferReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeHuntingOfferRsp$Type extends MessageType<TakeHuntingOfferRsp> {
    constructor() {
        super("com.midnights.game.TakeHuntingOfferRsp", [
            { no: 13, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 14, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeHuntingOfferRsp>): TakeHuntingOfferRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeHuntingOfferRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeHuntingOfferRsp): TakeHuntingOfferRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 13:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional uint32 city_id */ 14:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeHuntingOfferRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 13; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 city_id = 14; */
        if (message.cityId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeHuntingOfferRsp
 */
export const TakeHuntingOfferRsp = new TakeHuntingOfferRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingOfferData$Type extends MessageType<HuntingOfferData> {
    constructor() {
        super("com.midnights.game.HuntingOfferData", [
            { no: 4, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 8, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.HuntingOfferState", HuntingOfferState, "HUNTING_OFFER_STATE_"] }
        ]);
    }
    create(value?: PartialMessage<HuntingOfferData>): HuntingOfferData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingOfferData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingOfferData): HuntingOfferData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 4:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional uint32 city_id */ 8:
                    message.cityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.HuntingOfferState state */ 1:
                    message.state = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingOfferData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 4; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 city_id = 8; */
        if (message.cityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cityId);
        /* optional com.midnights.game.HuntingOfferState state = 1; */
        if (message.state !== undefined)
            writer.tag(1, WireType.Varint).int32(message.state);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingOfferData
 */
export const HuntingOfferData = new HuntingOfferData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityHuntingOfferReq$Type extends MessageType<GetCityHuntingOfferReq> {
    constructor() {
        super("com.midnights.game.GetCityHuntingOfferReq", [
            { no: 9, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCityHuntingOfferReq>): GetCityHuntingOfferReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityHuntingOfferReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityHuntingOfferReq): GetCityHuntingOfferReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 9:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityHuntingOfferReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 9; */
        if (message.cityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityHuntingOfferReq
 */
export const GetCityHuntingOfferReq = new GetCityHuntingOfferReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCityHuntingOfferRsp$Type extends MessageType<GetCityHuntingOfferRsp> {
    constructor() {
        super("com.midnights.game.GetCityHuntingOfferRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "hunting_offer_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => HuntingOfferData },
            { no: 2, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "ongoing_hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 1, name: "cur_week_finished_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetCityHuntingOfferRsp>): GetCityHuntingOfferRsp {
        const message = { huntingOfferList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCityHuntingOfferRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCityHuntingOfferRsp): GetCityHuntingOfferRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.HuntingOfferData hunting_offer_list */ 13:
                    message.huntingOfferList.push(HuntingOfferData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 city_id */ 2:
                    message.cityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.HuntingPair ongoing_hunting_pair */ 8:
                    message.ongoingHuntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.ongoingHuntingPair);
                    break;
                case /* optional uint32 cur_week_finished_count */ 1:
                    message.curWeekFinishedCount = reader.uint32();
                    break;
                case /* optional uint32 next_refresh_time */ 4:
                    message.nextRefreshTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCityHuntingOfferRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.HuntingOfferData hunting_offer_list = 13; */
        for (let i = 0; i < message.huntingOfferList.length; i++)
            HuntingOfferData.internalBinaryWrite(message.huntingOfferList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 city_id = 2; */
        if (message.cityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cityId);
        /* optional com.midnights.game.HuntingPair ongoing_hunting_pair = 8; */
        if (message.ongoingHuntingPair)
            HuntingPair.internalBinaryWrite(message.ongoingHuntingPair, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cur_week_finished_count = 1; */
        if (message.curWeekFinishedCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.curWeekFinishedCount);
        /* optional uint32 next_refresh_time = 4; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.nextRefreshTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCityHuntingOfferRsp
 */
export const GetCityHuntingOfferRsp = new GetCityHuntingOfferRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHuntingOfferRewardReq$Type extends MessageType<GetHuntingOfferRewardReq> {
    constructor() {
        super("com.midnights.game.GetHuntingOfferRewardReq", [
            { no: 6, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "hunting_pair", kind: "message", T: () => HuntingPair }
        ]);
    }
    create(value?: PartialMessage<GetHuntingOfferRewardReq>): GetHuntingOfferRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHuntingOfferRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHuntingOfferRewardReq): GetHuntingOfferRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 6:
                    message.cityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 4:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHuntingOfferRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 6; */
        if (message.cityId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.cityId);
        /* optional com.midnights.game.HuntingPair hunting_pair = 4; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetHuntingOfferRewardReq
 */
export const GetHuntingOfferRewardReq = new GetHuntingOfferRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetHuntingOfferRewardRsp$Type extends MessageType<GetHuntingOfferRewardRsp> {
    constructor() {
        super("com.midnights.game.GetHuntingOfferRewardRsp", [
            { no: 14, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 3, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetHuntingOfferRewardRsp>): GetHuntingOfferRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetHuntingOfferRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetHuntingOfferRewardRsp): GetHuntingOfferRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 14:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional uint32 city_id */ 3:
                    message.cityId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetHuntingOfferRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 14; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 city_id = 3; */
        if (message.cityId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.cityId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetHuntingOfferRewardRsp
 */
export const GetHuntingOfferRewardRsp = new GetHuntingOfferRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingStartNotify$Type extends MessageType<HuntingStartNotify> {
    constructor() {
        super("com.midnights.game.HuntingStartNotify", [
            { no: 4, name: "clue_position", kind: "message", T: () => Vector },
            { no: 15, name: "fail_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 8, name: "is_final", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<HuntingStartNotify>): HuntingStartNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingStartNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingStartNotify): HuntingStartNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector clue_position */ 4:
                    message.cluePosition = Vector.internalBinaryRead(reader, reader.uint32(), options, message.cluePosition);
                    break;
                case /* optional uint32 fail_time */ 15:
                    message.failTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 3:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional bool is_final */ 8:
                    message.isFinal = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingStartNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector clue_position = 4; */
        if (message.cluePosition)
            Vector.internalBinaryWrite(message.cluePosition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 fail_time = 15; */
        if (message.failTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.failTime);
        /* optional com.midnights.game.HuntingPair hunting_pair = 3; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_final = 8; */
        if (message.isFinal !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isFinal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingStartNotify
 */
export const HuntingStartNotify = new HuntingStartNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingRevealClueNotify$Type extends MessageType<HuntingRevealClueNotify> {
    constructor() {
        super("com.midnights.game.HuntingRevealClueNotify", [
            { no: 5, name: "finish_clue_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "clue_position", kind: "message", T: () => Vector },
            { no: 12, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 7, name: "finished_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HuntingRevealClueNotify>): HuntingRevealClueNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingRevealClueNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingRevealClueNotify): HuntingRevealClueNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_clue_count */ 5:
                    message.finishClueCount = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector clue_position */ 4:
                    message.cluePosition = Vector.internalBinaryRead(reader, reader.uint32(), options, message.cluePosition);
                    break;
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 12:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional uint32 finished_group_id */ 7:
                    message.finishedGroupId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingRevealClueNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finish_clue_count = 5; */
        if (message.finishClueCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.finishClueCount);
        /* optional com.midnights.game.Vector clue_position = 4; */
        if (message.cluePosition)
            Vector.internalBinaryWrite(message.cluePosition, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.HuntingPair hunting_pair = 12; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 finished_group_id = 7; */
        if (message.finishedGroupId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.finishedGroupId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingRevealClueNotify
 */
export const HuntingRevealClueNotify = new HuntingRevealClueNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingRevealFinalNotify$Type extends MessageType<HuntingRevealFinalNotify> {
    constructor() {
        super("com.midnights.game.HuntingRevealFinalNotify", [
            { no: 5, name: "finished_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 2, name: "final_position", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<HuntingRevealFinalNotify>): HuntingRevealFinalNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingRevealFinalNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingRevealFinalNotify): HuntingRevealFinalNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finished_group_id */ 5:
                    message.finishedGroupId = reader.uint32();
                    break;
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 11:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional com.midnights.game.Vector final_position */ 2:
                    message.finalPosition = Vector.internalBinaryRead(reader, reader.uint32(), options, message.finalPosition);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingRevealFinalNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finished_group_id = 5; */
        if (message.finishedGroupId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.finishedGroupId);
        /* optional com.midnights.game.HuntingPair hunting_pair = 11; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector final_position = 2; */
        if (message.finalPosition)
            Vector.internalBinaryWrite(message.finalPosition, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingRevealFinalNotify
 */
export const HuntingRevealFinalNotify = new HuntingRevealFinalNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingSuccessNotify$Type extends MessageType<HuntingSuccessNotify> {
    constructor() {
        super("com.midnights.game.HuntingSuccessNotify", [
            { no: 4, name: "hunting_pair", kind: "message", T: () => HuntingPair }
        ]);
    }
    create(value?: PartialMessage<HuntingSuccessNotify>): HuntingSuccessNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingSuccessNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingSuccessNotify): HuntingSuccessNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 4:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingSuccessNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 4; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingSuccessNotify
 */
export const HuntingSuccessNotify = new HuntingSuccessNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingFailNotify$Type extends MessageType<HuntingFailNotify> {
    constructor() {
        super("com.midnights.game.HuntingFailNotify", [
            { no: 12, name: "hunting_pair", kind: "message", T: () => HuntingPair }
        ]);
    }
    create(value?: PartialMessage<HuntingFailNotify>): HuntingFailNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingFailNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingFailNotify): HuntingFailNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 12:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingFailNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 12; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingFailNotify
 */
export const HuntingFailNotify = new HuntingFailNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingOngoingNotify$Type extends MessageType<HuntingOngoingNotify> {
    constructor() {
        super("com.midnights.game.HuntingOngoingNotify", [
            { no: 15, name: "hunting_pair", kind: "message", T: () => HuntingPair },
            { no: 8, name: "is_started", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "next_position", kind: "message", T: () => Vector },
            { no: 10, name: "finish_clue_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_final", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "fail_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HuntingOngoingNotify>): HuntingOngoingNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingOngoingNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingOngoingNotify): HuntingOngoingNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 15:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                case /* optional bool is_started */ 8:
                    message.isStarted = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector next_position */ 3:
                    message.nextPosition = Vector.internalBinaryRead(reader, reader.uint32(), options, message.nextPosition);
                    break;
                case /* optional uint32 finish_clue_count */ 10:
                    message.finishClueCount = reader.uint32();
                    break;
                case /* optional bool is_final */ 14:
                    message.isFinal = reader.bool();
                    break;
                case /* optional uint32 fail_time */ 7:
                    message.failTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingOngoingNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 15; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_started = 8; */
        if (message.isStarted !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isStarted);
        /* optional com.midnights.game.Vector next_position = 3; */
        if (message.nextPosition)
            Vector.internalBinaryWrite(message.nextPosition, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 finish_clue_count = 10; */
        if (message.finishClueCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.finishClueCount);
        /* optional bool is_final = 14; */
        if (message.isFinal !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isFinal);
        /* optional uint32 fail_time = 7; */
        if (message.failTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.failTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingOngoingNotify
 */
export const HuntingOngoingNotify = new HuntingOngoingNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingGiveUpReq$Type extends MessageType<HuntingGiveUpReq> {
    constructor() {
        super("com.midnights.game.HuntingGiveUpReq", [
            { no: 1, name: "hunting_pair", kind: "message", T: () => HuntingPair }
        ]);
    }
    create(value?: PartialMessage<HuntingGiveUpReq>): HuntingGiveUpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingGiveUpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingGiveUpReq): HuntingGiveUpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 1:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingGiveUpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.HuntingPair hunting_pair = 1; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingGiveUpReq
 */
export const HuntingGiveUpReq = new HuntingGiveUpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HuntingGiveUpRsp$Type extends MessageType<HuntingGiveUpRsp> {
    constructor() {
        super("com.midnights.game.HuntingGiveUpRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "hunting_pair", kind: "message", T: () => HuntingPair }
        ]);
    }
    create(value?: PartialMessage<HuntingGiveUpRsp>): HuntingGiveUpRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HuntingGiveUpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HuntingGiveUpRsp): HuntingGiveUpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.HuntingPair hunting_pair */ 4:
                    message.huntingPair = HuntingPair.internalBinaryRead(reader, reader.uint32(), options, message.huntingPair);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HuntingGiveUpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.HuntingPair hunting_pair = 4; */
        if (message.huntingPair)
            HuntingPair.internalBinaryWrite(message.huntingPair, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HuntingGiveUpRsp
 */
export const HuntingGiveUpRsp = new HuntingGiveUpRsp$Type();
