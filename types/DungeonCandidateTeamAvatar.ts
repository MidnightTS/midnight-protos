/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DungeonCandidateTeamAvatar.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarInfo";
import * as pb_1 from "google-protobuf";
export class DungeonCandidateTeamAvatar extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        player_uid?: number;
        avatar_info?: dependency_1.AvatarInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("player_uid" in data && data.player_uid != undefined) {
                this.player_uid = data.player_uid;
            }
            if ("avatar_info" in data && data.avatar_info != undefined) {
                this.avatar_info = data.avatar_info;
            }
        }
    }
    get player_uid() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set player_uid(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get avatar_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AvatarInfo, 6) as dependency_1.AvatarInfo;
    }
    set avatar_info(value: dependency_1.AvatarInfo) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_avatar_info() {
        return pb_1.Message.getField(this, 6) != null;
    }
    static fromObject(data: {
        player_uid?: number;
        avatar_info?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>;
    }): DungeonCandidateTeamAvatar {
        const message = new DungeonCandidateTeamAvatar({});
        if (data.player_uid != null) {
            message.player_uid = data.player_uid;
        }
        if (data.avatar_info != null) {
            message.avatar_info = dependency_1.AvatarInfo.fromObject(data.avatar_info);
        }
        return message;
    }
    toObject() {
        const data: {
            player_uid?: number;
            avatar_info?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>;
        } = {};
        if (this.player_uid != null) {
            data.player_uid = this.player_uid;
        }
        if (this.avatar_info != null) {
            data.avatar_info = this.avatar_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.player_uid != 0)
            writer.writeUint32(2, this.player_uid);
        if (this.has_avatar_info)
            writer.writeMessage(6, this.avatar_info, () => this.avatar_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DungeonCandidateTeamAvatar {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DungeonCandidateTeamAvatar();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 2:
                    message.player_uid = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.avatar_info, () => message.avatar_info = dependency_1.AvatarInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DungeonCandidateTeamAvatar {
        return DungeonCandidateTeamAvatar.deserialize(bytes);
    }
}
