// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "MultistagePlayInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { CoinCollectStageInfo } from "./CoinCollectStageInfo";
import { BrickBreakerStageInfo } from "./BrickBreakerStageInfo";
import { CharAmusementInfo } from "./CharAmusementInfo";
import { InBattleIrodoriChessInfo } from "./InBattleIrodoriChessInfo";
import { InBattleChessInfo } from "./InBattleChessInfo";
import { HideAndSeekStageInfo } from "./HideAndSeekStageInfo";
import { InBattleFleurFairInfo } from "./InBattleFleurFairInfo";
import { InBattleMechanicusInfo } from "./InBattleMechanicusInfo";
/**
 * @generated from protobuf message MultistagePlayInfo
 */
export interface MultistagePlayInfo {
    /**
     * @generated from protobuf field: uint32 play_index = 13;
     */
    playIndex: number;
    /**
     * @generated from protobuf field: uint32 duration = 2;
     */
    duration: number;
    /**
     * @generated from protobuf field: uint32 stage_type = 5;
     */
    stageType: number;
    /**
     * @generated from protobuf field: uint32 group_id = 1;
     */
    groupId: number;
    /**
     * @generated from protobuf field: uint32 stage_index = 10;
     */
    stageIndex: number;
    /**
     * @generated from protobuf field: uint32 begin_time = 9;
     */
    beginTime: number;
    /**
     * @generated from protobuf field: uint32 play_type = 15;
     */
    playType: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "mechanicusInfo";
        /**
         * @generated from protobuf field: InBattleMechanicusInfo mechanicus_info = 1303;
         */
        mechanicusInfo: InBattleMechanicusInfo;
    } | {
        oneofKind: "fleurFairInfo";
        /**
         * @generated from protobuf field: InBattleFleurFairInfo fleur_fair_info = 1502;
         */
        fleurFairInfo: InBattleFleurFairInfo;
    } | {
        oneofKind: "hideAndSeekInfo";
        /**
         * @generated from protobuf field: HideAndSeekStageInfo hide_and_seek_info = 1725;
         */
        hideAndSeekInfo: HideAndSeekStageInfo;
    } | {
        oneofKind: "chessInfo";
        /**
         * @generated from protobuf field: InBattleChessInfo chess_info = 1756;
         */
        chessInfo: InBattleChessInfo;
    } | {
        oneofKind: "irodoriChessInfo";
        /**
         * @generated from protobuf field: InBattleIrodoriChessInfo irodori_chess_info = 1835;
         */
        irodoriChessInfo: InBattleIrodoriChessInfo;
    } | {
        oneofKind: "charAmusementInfo";
        /**
         * @generated from protobuf field: CharAmusementInfo char_amusement_info = 1015;
         */
        charAmusementInfo: CharAmusementInfo;
    } | {
        oneofKind: "brickBreakerInfo";
        /**
         * @generated from protobuf field: BrickBreakerStageInfo brick_breaker_info = 547;
         */
        brickBreakerInfo: BrickBreakerStageInfo;
    } | {
        oneofKind: "coinCollectInfo";
        /**
         * @generated from protobuf field: CoinCollectStageInfo coin_collect_info = 1263;
         */
        coinCollectInfo: CoinCollectStageInfo;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class MultistagePlayInfo$Type extends MessageType<MultistagePlayInfo> {
    constructor() {
        super("MultistagePlayInfo", [
            { no: 13, name: "play_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "duration", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "stage_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "group_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "stage_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "begin_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "play_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1303, name: "mechanicus_info", kind: "message", oneof: "detail", T: () => InBattleMechanicusInfo },
            { no: 1502, name: "fleur_fair_info", kind: "message", oneof: "detail", T: () => InBattleFleurFairInfo },
            { no: 1725, name: "hide_and_seek_info", kind: "message", oneof: "detail", T: () => HideAndSeekStageInfo },
            { no: 1756, name: "chess_info", kind: "message", oneof: "detail", T: () => InBattleChessInfo },
            { no: 1835, name: "irodori_chess_info", kind: "message", oneof: "detail", T: () => InBattleIrodoriChessInfo },
            { no: 1015, name: "char_amusement_info", kind: "message", oneof: "detail", T: () => CharAmusementInfo },
            { no: 547, name: "brick_breaker_info", kind: "message", oneof: "detail", T: () => BrickBreakerStageInfo },
            { no: 1263, name: "coin_collect_info", kind: "message", oneof: "detail", T: () => CoinCollectStageInfo }
        ]);
    }
    create(value?: PartialMessage<MultistagePlayInfo>): MultistagePlayInfo {
        const message = { playIndex: 0, duration: 0, stageType: 0, groupId: 0, stageIndex: 0, beginTime: 0, playType: 0, detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MultistagePlayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MultistagePlayInfo): MultistagePlayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 play_index */ 13:
                    message.playIndex = reader.uint32();
                    break;
                case /* uint32 duration */ 2:
                    message.duration = reader.uint32();
                    break;
                case /* uint32 stage_type */ 5:
                    message.stageType = reader.uint32();
                    break;
                case /* uint32 group_id */ 1:
                    message.groupId = reader.uint32();
                    break;
                case /* uint32 stage_index */ 10:
                    message.stageIndex = reader.uint32();
                    break;
                case /* uint32 begin_time */ 9:
                    message.beginTime = reader.uint32();
                    break;
                case /* uint32 play_type */ 15:
                    message.playType = reader.uint32();
                    break;
                case /* InBattleMechanicusInfo mechanicus_info */ 1303:
                    message.detail = {
                        oneofKind: "mechanicusInfo",
                        mechanicusInfo: InBattleMechanicusInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).mechanicusInfo)
                    };
                    break;
                case /* InBattleFleurFairInfo fleur_fair_info */ 1502:
                    message.detail = {
                        oneofKind: "fleurFairInfo",
                        fleurFairInfo: InBattleFleurFairInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).fleurFairInfo)
                    };
                    break;
                case /* HideAndSeekStageInfo hide_and_seek_info */ 1725:
                    message.detail = {
                        oneofKind: "hideAndSeekInfo",
                        hideAndSeekInfo: HideAndSeekStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).hideAndSeekInfo)
                    };
                    break;
                case /* InBattleChessInfo chess_info */ 1756:
                    message.detail = {
                        oneofKind: "chessInfo",
                        chessInfo: InBattleChessInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).chessInfo)
                    };
                    break;
                case /* InBattleIrodoriChessInfo irodori_chess_info */ 1835:
                    message.detail = {
                        oneofKind: "irodoriChessInfo",
                        irodoriChessInfo: InBattleIrodoriChessInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).irodoriChessInfo)
                    };
                    break;
                case /* CharAmusementInfo char_amusement_info */ 1015:
                    message.detail = {
                        oneofKind: "charAmusementInfo",
                        charAmusementInfo: CharAmusementInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).charAmusementInfo)
                    };
                    break;
                case /* BrickBreakerStageInfo brick_breaker_info */ 547:
                    message.detail = {
                        oneofKind: "brickBreakerInfo",
                        brickBreakerInfo: BrickBreakerStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).brickBreakerInfo)
                    };
                    break;
                case /* CoinCollectStageInfo coin_collect_info */ 1263:
                    message.detail = {
                        oneofKind: "coinCollectInfo",
                        coinCollectInfo: CoinCollectStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).coinCollectInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MultistagePlayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 play_index = 13; */
        if (message.playIndex !== 0)
            writer.tag(13, WireType.Varint).uint32(message.playIndex);
        /* uint32 duration = 2; */
        if (message.duration !== 0)
            writer.tag(2, WireType.Varint).uint32(message.duration);
        /* uint32 stage_type = 5; */
        if (message.stageType !== 0)
            writer.tag(5, WireType.Varint).uint32(message.stageType);
        /* uint32 group_id = 1; */
        if (message.groupId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.groupId);
        /* uint32 stage_index = 10; */
        if (message.stageIndex !== 0)
            writer.tag(10, WireType.Varint).uint32(message.stageIndex);
        /* uint32 begin_time = 9; */
        if (message.beginTime !== 0)
            writer.tag(9, WireType.Varint).uint32(message.beginTime);
        /* uint32 play_type = 15; */
        if (message.playType !== 0)
            writer.tag(15, WireType.Varint).uint32(message.playType);
        /* InBattleMechanicusInfo mechanicus_info = 1303; */
        if (message.detail.oneofKind === "mechanicusInfo")
            InBattleMechanicusInfo.internalBinaryWrite(message.detail.mechanicusInfo, writer.tag(1303, WireType.LengthDelimited).fork(), options).join();
        /* InBattleFleurFairInfo fleur_fair_info = 1502; */
        if (message.detail.oneofKind === "fleurFairInfo")
            InBattleFleurFairInfo.internalBinaryWrite(message.detail.fleurFairInfo, writer.tag(1502, WireType.LengthDelimited).fork(), options).join();
        /* HideAndSeekStageInfo hide_and_seek_info = 1725; */
        if (message.detail.oneofKind === "hideAndSeekInfo")
            HideAndSeekStageInfo.internalBinaryWrite(message.detail.hideAndSeekInfo, writer.tag(1725, WireType.LengthDelimited).fork(), options).join();
        /* InBattleChessInfo chess_info = 1756; */
        if (message.detail.oneofKind === "chessInfo")
            InBattleChessInfo.internalBinaryWrite(message.detail.chessInfo, writer.tag(1756, WireType.LengthDelimited).fork(), options).join();
        /* InBattleIrodoriChessInfo irodori_chess_info = 1835; */
        if (message.detail.oneofKind === "irodoriChessInfo")
            InBattleIrodoriChessInfo.internalBinaryWrite(message.detail.irodoriChessInfo, writer.tag(1835, WireType.LengthDelimited).fork(), options).join();
        /* CharAmusementInfo char_amusement_info = 1015; */
        if (message.detail.oneofKind === "charAmusementInfo")
            CharAmusementInfo.internalBinaryWrite(message.detail.charAmusementInfo, writer.tag(1015, WireType.LengthDelimited).fork(), options).join();
        /* BrickBreakerStageInfo brick_breaker_info = 547; */
        if (message.detail.oneofKind === "brickBreakerInfo")
            BrickBreakerStageInfo.internalBinaryWrite(message.detail.brickBreakerInfo, writer.tag(547, WireType.LengthDelimited).fork(), options).join();
        /* CoinCollectStageInfo coin_collect_info = 1263; */
        if (message.detail.oneofKind === "coinCollectInfo")
            CoinCollectStageInfo.internalBinaryWrite(message.detail.coinCollectInfo, writer.tag(1263, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message MultistagePlayInfo
 */
export const MultistagePlayInfo = new MultistagePlayInfo$Type();
