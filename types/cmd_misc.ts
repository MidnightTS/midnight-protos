// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_misc.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RedPointData } from "./define";
import { OnlinePlayerInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.KeepAliveNotify
 */
export interface KeepAliveNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.KeepAliveNotify.CmdId
 */
export enum KeepAliveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 72;
     */
    CMD_ID = 72,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GmTalkReq
 */
export interface GmTalkReq {
    /**
     * @generated from protobuf field: optional string msg = 13;
     */
    msg?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.GmTalkReq.CmdId
 */
export enum GmTalkReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 98;
     */
    CMD_ID = 98,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GmTalkRsp
 */
export interface GmTalkRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional string retmsg = 3;
     */
    retmsg?: string;
    /**
     * @generated from protobuf field: optional string msg = 13;
     */
    msg?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.GmTalkRsp.CmdId
 */
export enum GmTalkRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 12;
     */
    CMD_ID = 12,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MsgParam
 */
export interface MsgParam {
    /**
     * @generated from protobuf oneof: param
     */
    param: {
        oneofKind: "intParam";
        /**
         * @generated from protobuf field: uint32 int_param = 9;
         */
        intParam: number;
    } | {
        oneofKind: "fltParam";
        /**
         * @generated from protobuf field: float flt_param = 7;
         */
        fltParam: number;
    } | {
        oneofKind: "strParam";
        /**
         * @generated from protobuf field: string str_param = 4;
         */
        strParam: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.ShowMessageNotify
 */
export interface ShowMessageNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.SvrMsgId msg_id = 14;
     */
    msgId?: SvrMsgId;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MsgParam params = 13;
     */
    params: MsgParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.ShowMessageNotify.CmdId
 */
export enum ShowMessageNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 35;
     */
    CMD_ID = 35,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PingReq
 */
export interface PingReq {
    /**
     * @generated from protobuf field: optional uint32 client_time = 12;
     */
    clientTime?: number;
    /**
     * @generated from protobuf field: optional float ue_time = 14;
     */
    ueTime?: number;
    /**
     * @generated from protobuf field: optional double total_tick_time = 6;
     */
    totalTickTime?: number;
    /**
     * @generated from protobuf field: optional bytes sc_data = 10;
     */
    scData?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 seq = 3;
     */
    seq?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PingReq.CmdId
 */
export enum PingReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 7;
     */
    CMD_ID = 7,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PingRsp
 */
export interface PingRsp {
    /**
     * @generated from protobuf field: optional uint32 client_time = 15;
     */
    clientTime?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 seq = 13;
     */
    seq?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PingRsp.CmdId
 */
export enum PingRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 21;
     */
    CMD_ID = 21,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetOnlinePlayerListReq
 */
export interface GetOnlinePlayerListReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetOnlinePlayerListReq.CmdId
 */
export enum GetOnlinePlayerListReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 90;
     */
    CMD_ID = 90,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetOnlinePlayerListRsp
 */
export interface GetOnlinePlayerListRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 11;
     */
    param?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.OnlinePlayerInfo player_info_list = 5;
     */
    playerInfoList: OnlinePlayerInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetOnlinePlayerListRsp.CmdId
 */
export enum GetOnlinePlayerListRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 73;
     */
    CMD_ID = 73,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerTimeNotify
 */
export interface ServerTimeNotify {
    /**
     * @generated from protobuf field: optional uint64 server_time = 5;
     */
    serverTime?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerTimeNotify.CmdId
 */
export enum ServerTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 99;
     */
    CMD_ID = 99,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerLogNotify
 */
export interface ServerLogNotify {
    /**
     * @generated from protobuf field: optional string server_log = 7;
     */
    serverLog?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ServerLogType log_type = 9;
     */
    logType?: ServerLogType;
    /**
     * @generated from protobuf field: optional com.midnights.game.ServerLogLevel log_level = 15;
     */
    logLevel?: ServerLogLevel;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerLogNotify.CmdId
 */
export enum ServerLogNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 31;
     */
    CMD_ID = 31,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_CHANNEL_ID = 1,
    /**
     * @generated from protobuf enum value: ENET_CHANNEL_ID = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientReconnectNotify
 */
export interface ClientReconnectNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ClientReconnectReason reason = 6;
     */
    reason?: ClientReconnectReason;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientReconnectNotify.CmdId
 */
export enum ClientReconnectNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 75;
     */
    CMD_ID = 75,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RobotPushPlayerDataNotify
 */
export interface RobotPushPlayerDataNotify {
    /**
     * @generated from protobuf field: optional bytes bin = 6;
     */
    bin?: Uint8Array;
}
/**
 * @generated from protobuf enum com.midnights.game.RobotPushPlayerDataNotify.CmdId
 */
export enum RobotPushPlayerDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 97;
     */
    CMD_ID = 97,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientReportNotify
 */
export interface ClientReportNotify {
    /**
     * @generated from protobuf field: optional string report_type = 1;
     */
    reportType?: string;
    /**
     * @generated from protobuf field: optional string report_value = 4;
     */
    reportValue?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientReportNotify.CmdId
 */
export enum ClientReportNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 81;
     */
    CMD_ID = 81,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UnionCmd
 */
export interface UnionCmd {
    /**
     * @generated from protobuf field: optional bytes body = 14;
     */
    body?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 message_id = 8;
     */
    messageId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.UnionCmdNotify
 */
export interface UnionCmdNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.UnionCmd cmd_list = 1;
     */
    cmdList: UnionCmd[];
}
/**
 * @generated from protobuf enum com.midnights.game.UnionCmdNotify.CmdId
 */
export enum UnionCmdNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5;
     */
    CMD_ID = 5,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetOnlinePlayerInfoReq
 */
export interface GetOnlinePlayerInfoReq {
    /**
     * @generated from protobuf field: optional bool is_online_id = 15;
     */
    isOnlineId?: boolean;
    /**
     * @generated from protobuf oneof: player_id
     */
    playerId: {
        oneofKind: "targetUid";
        /**
         * @generated from protobuf field: uint32 target_uid = 9;
         */
        targetUid: number;
    } | {
        oneofKind: "onlineId";
        /**
         * @generated from protobuf field: string online_id = 7;
         */
        onlineId: string;
    } | {
        oneofKind: "psnId";
        /**
         * @generated from protobuf field: string psn_id = 2;
         */
        psnId: string;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GetOnlinePlayerInfoReq.CmdId
 */
export enum GetOnlinePlayerInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 82;
     */
    CMD_ID = 82,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetOnlinePlayerInfoRsp
 */
export interface GetOnlinePlayerInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 7;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 4;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo target_player_info = 14;
     */
    targetPlayerInfo?: OnlinePlayerInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.GetOnlinePlayerInfoRsp.CmdId
 */
export enum GetOnlinePlayerInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 47;
     */
    CMD_ID = 47,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SegmentInfo
 */
export interface SegmentInfo {
    /**
     * @generated from protobuf field: optional uint32 offset = 3;
     */
    offset?: number;
    /**
     * @generated from protobuf field: optional uint32 module = 7;
     */
    module?: number;
    /**
     * @generated from protobuf field: optional uint32 size = 8;
     */
    size?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SegmentCRCInfo
 */
export interface SegmentCRCInfo {
    /**
     * @generated from protobuf field: optional uint32 module = 13;
     */
    module?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 size = 10;
     */
    size?: number;
    /**
     * @generated from protobuf field: optional string crc = 3;
     */
    crc?: string;
    /**
     * @generated from protobuf field: optional uint32 offset = 11;
     */
    offset?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CheckSegmentCRCNotify
 */
export interface CheckSegmentCRCNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SegmentInfo info_list = 6;
     */
    infoList: SegmentInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.CheckSegmentCRCNotify.CmdId
 */
export enum CheckSegmentCRCNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 39;
     */
    CMD_ID = 39,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckSegmentCRCReq
 */
export interface CheckSegmentCRCReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SegmentCRCInfo info_list = 1;
     */
    infoList: SegmentCRCInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.CheckSegmentCRCReq.CmdId
 */
export enum CheckSegmentCRCReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 53;
     */
    CMD_ID = 53,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerRTTInfo
 */
export interface PlayerRTTInfo {
    /**
     * @generated from protobuf field: optional uint32 rtt = 2;
     */
    rtt?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 1;
     */
    uid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WorldPlayerRTTNotify
 */
export interface WorldPlayerRTTNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PlayerRTTInfo player_rtt_list = 1;
     */
    playerRttList: PlayerRTTInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.WorldPlayerRTTNotify.CmdId
 */
export enum WorldPlayerRTTNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 22;
     */
    CMD_ID = 22,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EchoNotify
 */
export interface EchoNotify {
    /**
     * @generated from protobuf field: optional uint32 seq_id = 4;
     */
    seqId?: number;
    /**
     * @generated from protobuf field: optional string content = 9;
     */
    content?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.EchoNotify.CmdId
 */
export enum EchoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 65;
     */
    CMD_ID = 65,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UpdateRedPointNotify
 */
export interface UpdateRedPointNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.RedPointData red_point_list = 12;
     */
    redPointList: RedPointData[];
}
/**
 * @generated from protobuf enum com.midnights.game.UpdateRedPointNotify.CmdId
 */
export enum UpdateRedPointNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 93;
     */
    CMD_ID = 93,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientBulletCreateNotify
 */
export interface ClientBulletCreateNotify {
    /**
     * @generated from protobuf field: optional uint32 param = 6;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientBulletCreateNotify.CmdId
 */
export enum ClientBulletCreateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4;
     */
    CMD_ID = 4,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeServerGlobalValueNotify
 */
export interface ChangeServerGlobalValueNotify {
    /**
     * @generated from protobuf field: optional uint32 entity_id = 4;
     */
    entityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeServerGlobalValueNotify.CmdId
 */
export enum ChangeServerGlobalValueNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 27;
     */
    CMD_ID = 27,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GmTalkNotify
 */
export interface GmTalkNotify {
    /**
     * @generated from protobuf field: optional string msg = 5;
     */
    msg?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.GmTalkNotify.CmdId
 */
export enum GmTalkNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 94;
     */
    CMD_ID = 94,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.LastPacketPrintNotify
 */
export interface LastPacketPrintNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.LastPacketPrintNotify.CmdId
 */
export enum LastPacketPrintNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 88;
     */
    CMD_ID = 88,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.SvrMsgId
 */
export enum SvrMsgId {
    /**
     * @generated from protobuf enum value: MSG_UNKNOWN = 0;
     */
    MSG_UNKNOWN = 0,
    /**
     * @generated from protobuf enum value: MSG_BLOCK_REFRESH_COUNTDOWN = 1;
     */
    MSG_BLOCK_REFRESH_COUNTDOWN = 1,
    /**
     * @generated from protobuf enum value: MSG_AVATAR_REVIVE_BY_STATUE = 2;
     */
    MSG_AVATAR_REVIVE_BY_STATUE = 2,
    /**
     * @generated from protobuf enum value: MSG_DAILY_TASK_REWARD_MAX_NUM = 3;
     */
    MSG_DAILY_TASK_REWARD_MAX_NUM = 3,
    /**
     * @generated from protobuf enum value: MSG_ROUTINE_TYPE_NOT_OPEN = 4;
     */
    MSG_ROUTINE_TYPE_NOT_OPEN = 4,
    /**
     * @generated from protobuf enum value: MSG_ROUTINE_TYPE_REWARD_MAX_NUM = 5;
     */
    MSG_ROUTINE_TYPE_REWARD_MAX_NUM = 5,
    /**
     * @generated from protobuf enum value: MSG_MECHANICUS_COIN_LIMIT = 6;
     */
    MSG_MECHANICUS_COIN_LIMIT = 6
}
/**
 * @generated from protobuf enum com.midnights.game.ServerLogType
 */
export enum ServerLogType {
    /**
     * @generated from protobuf enum value: SERVER_LOG_NONE = 0;
     */
    SERVER_LOG_NONE = 0,
    /**
     * @generated from protobuf enum value: SERVER_LOG_ABILITY = 1;
     */
    SERVER_LOG_ABILITY = 1,
    /**
     * @generated from protobuf enum value: SERVER_LOG_LEVEL = 2;
     */
    SERVER_LOG_LEVEL = 2,
    /**
     * @generated from protobuf enum value: SERVER_LOG_ENTITY = 3;
     */
    SERVER_LOG_ENTITY = 3,
    /**
     * @generated from protobuf enum value: SERVER_LOG_LUA = 4;
     */
    SERVER_LOG_LUA = 4
}
/**
 * @generated from protobuf enum com.midnights.game.ServerLogLevel
 */
export enum ServerLogLevel {
    /**
     * @generated from protobuf enum value: LOG_LEVEL_NONE = 0;
     */
    LOG_LEVEL_NONE = 0,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_DEBUG = 1;
     */
    LOG_LEVEL_DEBUG = 1,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_INFO = 2;
     */
    LOG_LEVEL_INFO = 2,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_WARNING = 3;
     */
    LOG_LEVEL_WARNING = 3,
    /**
     * @generated from protobuf enum value: LOG_LEVEL_ERROR = 4;
     */
    LOG_LEVEL_ERROR = 4
}
/**
 * @generated from protobuf enum com.midnights.game.ClientReconnectReason
 */
export enum ClientReconnectReason {
    /**
     * @generated from protobuf enum value: CLIENT_RECONNNECT_NONE = 0;
     */
    CLIENT_RECONNNECT_NONE = 0,
    /**
     * @generated from protobuf enum value: CLIENT_RECONNNECT_QUIT_MP = 1;
     */
    CLIENT_RECONNNECT_QUIT_MP = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class KeepAliveNotify$Type extends MessageType<KeepAliveNotify> {
    constructor() {
        super("com.midnights.game.KeepAliveNotify", []);
    }
    create(value?: PartialMessage<KeepAliveNotify>): KeepAliveNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<KeepAliveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: KeepAliveNotify): KeepAliveNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: KeepAliveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.KeepAliveNotify
 */
export const KeepAliveNotify = new KeepAliveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GmTalkReq$Type extends MessageType<GmTalkReq> {
    constructor() {
        super("com.midnights.game.GmTalkReq", [
            { no: 13, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GmTalkReq>): GmTalkReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GmTalkReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GmTalkReq): GmTalkReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string msg */ 13:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GmTalkReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string msg = 13; */
        if (message.msg !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GmTalkReq
 */
export const GmTalkReq = new GmTalkReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GmTalkRsp$Type extends MessageType<GmTalkRsp> {
    constructor() {
        super("com.midnights.game.GmTalkRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "retmsg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GmTalkRsp>): GmTalkRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GmTalkRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GmTalkRsp): GmTalkRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional string retmsg */ 3:
                    message.retmsg = reader.string();
                    break;
                case /* optional string msg */ 13:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GmTalkRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional string retmsg = 3; */
        if (message.retmsg !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.retmsg);
        /* optional string msg = 13; */
        if (message.msg !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GmTalkRsp
 */
export const GmTalkRsp = new GmTalkRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MsgParam$Type extends MessageType<MsgParam> {
    constructor() {
        super("com.midnights.game.MsgParam", [
            { no: 9, name: "int_param", kind: "scalar", oneof: "param", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "flt_param", kind: "scalar", oneof: "param", T: 2 /*ScalarType.FLOAT*/ },
            { no: 4, name: "str_param", kind: "scalar", oneof: "param", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<MsgParam>): MsgParam {
        const message = { param: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MsgParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MsgParam): MsgParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 int_param */ 9:
                    message.param = {
                        oneofKind: "intParam",
                        intParam: reader.uint32()
                    };
                    break;
                case /* float flt_param */ 7:
                    message.param = {
                        oneofKind: "fltParam",
                        fltParam: reader.float()
                    };
                    break;
                case /* string str_param */ 4:
                    message.param = {
                        oneofKind: "strParam",
                        strParam: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MsgParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 int_param = 9; */
        if (message.param.oneofKind === "intParam")
            writer.tag(9, WireType.Varint).uint32(message.param.intParam);
        /* float flt_param = 7; */
        if (message.param.oneofKind === "fltParam")
            writer.tag(7, WireType.Bit32).float(message.param.fltParam);
        /* string str_param = 4; */
        if (message.param.oneofKind === "strParam")
            writer.tag(4, WireType.LengthDelimited).string(message.param.strParam);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MsgParam
 */
export const MsgParam = new MsgParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShowMessageNotify$Type extends MessageType<ShowMessageNotify> {
    constructor() {
        super("com.midnights.game.ShowMessageNotify", [
            { no: 14, name: "msg_id", kind: "enum", opt: true, T: () => ["com.midnights.game.SvrMsgId", SvrMsgId] },
            { no: 13, name: "params", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => MsgParam }
        ]);
    }
    create(value?: PartialMessage<ShowMessageNotify>): ShowMessageNotify {
        const message = { params: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowMessageNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowMessageNotify): ShowMessageNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SvrMsgId msg_id */ 14:
                    message.msgId = reader.int32();
                    break;
                case /* repeated com.midnights.game.MsgParam params */ 13:
                    message.params.push(MsgParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShowMessageNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SvrMsgId msg_id = 14; */
        if (message.msgId !== undefined)
            writer.tag(14, WireType.Varint).int32(message.msgId);
        /* repeated com.midnights.game.MsgParam params = 13; */
        for (let i = 0; i < message.params.length; i++)
            MsgParam.internalBinaryWrite(message.params[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShowMessageNotify
 */
export const ShowMessageNotify = new ShowMessageNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingReq$Type extends MessageType<PingReq> {
    constructor() {
        super("com.midnights.game.PingReq", [
            { no: 12, name: "client_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "ue_time", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 6, name: "total_tick_time", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 10, name: "sc_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PingReq>): PingReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingReq): PingReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 client_time */ 12:
                    message.clientTime = reader.uint32();
                    break;
                case /* optional float ue_time */ 14:
                    message.ueTime = reader.float();
                    break;
                case /* optional double total_tick_time */ 6:
                    message.totalTickTime = reader.double();
                    break;
                case /* optional bytes sc_data */ 10:
                    message.scData = reader.bytes();
                    break;
                case /* optional uint32 seq */ 3:
                    message.seq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 client_time = 12; */
        if (message.clientTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.clientTime);
        /* optional float ue_time = 14; */
        if (message.ueTime !== undefined)
            writer.tag(14, WireType.Bit32).float(message.ueTime);
        /* optional double total_tick_time = 6; */
        if (message.totalTickTime !== undefined)
            writer.tag(6, WireType.Bit64).double(message.totalTickTime);
        /* optional bytes sc_data = 10; */
        if (message.scData !== undefined)
            writer.tag(10, WireType.LengthDelimited).bytes(message.scData);
        /* optional uint32 seq = 3; */
        if (message.seq !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.seq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PingReq
 */
export const PingReq = new PingReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PingRsp$Type extends MessageType<PingRsp> {
    constructor() {
        super("com.midnights.game.PingRsp", [
            { no: 15, name: "client_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "seq", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PingRsp>): PingRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PingRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PingRsp): PingRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 client_time */ 15:
                    message.clientTime = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 seq */ 13:
                    message.seq = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PingRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 client_time = 15; */
        if (message.clientTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.clientTime);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 seq = 13; */
        if (message.seq !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.seq);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PingRsp
 */
export const PingRsp = new PingRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayerListReq$Type extends MessageType<GetOnlinePlayerListReq> {
    constructor() {
        super("com.midnights.game.GetOnlinePlayerListReq", []);
    }
    create(value?: PartialMessage<GetOnlinePlayerListReq>): GetOnlinePlayerListReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayerListReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayerListReq): GetOnlinePlayerListReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetOnlinePlayerListReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetOnlinePlayerListReq
 */
export const GetOnlinePlayerListReq = new GetOnlinePlayerListReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayerListRsp$Type extends MessageType<GetOnlinePlayerListRsp> {
    constructor() {
        super("com.midnights.game.GetOnlinePlayerListRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "player_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<GetOnlinePlayerListRsp>): GetOnlinePlayerListRsp {
        const message = { playerInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayerListRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayerListRsp): GetOnlinePlayerListRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 param */ 11:
                    message.param = reader.uint32();
                    break;
                case /* repeated com.midnights.game.OnlinePlayerInfo player_info_list */ 5:
                    message.playerInfoList.push(OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOnlinePlayerListRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 param = 11; */
        if (message.param !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.param);
        /* repeated com.midnights.game.OnlinePlayerInfo player_info_list = 5; */
        for (let i = 0; i < message.playerInfoList.length; i++)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetOnlinePlayerListRsp
 */
export const GetOnlinePlayerListRsp = new GetOnlinePlayerListRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerTimeNotify$Type extends MessageType<ServerTimeNotify> {
    constructor() {
        super("com.midnights.game.ServerTimeNotify", [
            { no: 5, name: "server_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ServerTimeNotify>): ServerTimeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerTimeNotify): ServerTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 server_time */ 5:
                    message.serverTime = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 server_time = 5; */
        if (message.serverTime !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.serverTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerTimeNotify
 */
export const ServerTimeNotify = new ServerTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerLogNotify$Type extends MessageType<ServerLogNotify> {
    constructor() {
        super("com.midnights.game.ServerLogNotify", [
            { no: 7, name: "server_log", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "log_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ServerLogType", ServerLogType] },
            { no: 15, name: "log_level", kind: "enum", opt: true, T: () => ["com.midnights.game.ServerLogLevel", ServerLogLevel] }
        ]);
    }
    create(value?: PartialMessage<ServerLogNotify>): ServerLogNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerLogNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerLogNotify): ServerLogNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string server_log */ 7:
                    message.serverLog = reader.string();
                    break;
                case /* optional com.midnights.game.ServerLogType log_type */ 9:
                    message.logType = reader.int32();
                    break;
                case /* optional com.midnights.game.ServerLogLevel log_level */ 15:
                    message.logLevel = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerLogNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string server_log = 7; */
        if (message.serverLog !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.serverLog);
        /* optional com.midnights.game.ServerLogType log_type = 9; */
        if (message.logType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.logType);
        /* optional com.midnights.game.ServerLogLevel log_level = 15; */
        if (message.logLevel !== undefined)
            writer.tag(15, WireType.Varint).int32(message.logLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerLogNotify
 */
export const ServerLogNotify = new ServerLogNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientReconnectNotify$Type extends MessageType<ClientReconnectNotify> {
    constructor() {
        super("com.midnights.game.ClientReconnectNotify", [
            { no: 6, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.ClientReconnectReason", ClientReconnectReason] }
        ]);
    }
    create(value?: PartialMessage<ClientReconnectNotify>): ClientReconnectNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientReconnectNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientReconnectNotify): ClientReconnectNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ClientReconnectReason reason */ 6:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientReconnectNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ClientReconnectReason reason = 6; */
        if (message.reason !== undefined)
            writer.tag(6, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientReconnectNotify
 */
export const ClientReconnectNotify = new ClientReconnectNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RobotPushPlayerDataNotify$Type extends MessageType<RobotPushPlayerDataNotify> {
    constructor() {
        super("com.midnights.game.RobotPushPlayerDataNotify", [
            { no: 6, name: "bin", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<RobotPushPlayerDataNotify>): RobotPushPlayerDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RobotPushPlayerDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RobotPushPlayerDataNotify): RobotPushPlayerDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes bin */ 6:
                    message.bin = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RobotPushPlayerDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes bin = 6; */
        if (message.bin !== undefined)
            writer.tag(6, WireType.LengthDelimited).bytes(message.bin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RobotPushPlayerDataNotify
 */
export const RobotPushPlayerDataNotify = new RobotPushPlayerDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientReportNotify$Type extends MessageType<ClientReportNotify> {
    constructor() {
        super("com.midnights.game.ClientReportNotify", [
            { no: 1, name: "report_type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "report_value", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ClientReportNotify>): ClientReportNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientReportNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientReportNotify): ClientReportNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string report_type */ 1:
                    message.reportType = reader.string();
                    break;
                case /* optional string report_value */ 4:
                    message.reportValue = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientReportNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string report_type = 1; */
        if (message.reportType !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.reportType);
        /* optional string report_value = 4; */
        if (message.reportValue !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.reportValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientReportNotify
 */
export const ClientReportNotify = new ClientReportNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionCmd$Type extends MessageType<UnionCmd> {
    constructor() {
        super("com.midnights.game.UnionCmd", [
            { no: 14, name: "body", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 8, name: "message_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UnionCmd>): UnionCmd {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionCmd>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionCmd): UnionCmd {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bytes body */ 14:
                    message.body = reader.bytes();
                    break;
                case /* optional uint32 message_id */ 8:
                    message.messageId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionCmd, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bytes body = 14; */
        if (message.body !== undefined)
            writer.tag(14, WireType.LengthDelimited).bytes(message.body);
        /* optional uint32 message_id = 8; */
        if (message.messageId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.messageId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnionCmd
 */
export const UnionCmd = new UnionCmd$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UnionCmdNotify$Type extends MessageType<UnionCmdNotify> {
    constructor() {
        super("com.midnights.game.UnionCmdNotify", [
            { no: 1, name: "cmd_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UnionCmd }
        ]);
    }
    create(value?: PartialMessage<UnionCmdNotify>): UnionCmdNotify {
        const message = { cmdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UnionCmdNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UnionCmdNotify): UnionCmdNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.UnionCmd cmd_list */ 1:
                    message.cmdList.push(UnionCmd.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UnionCmdNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.UnionCmd cmd_list = 1; */
        for (let i = 0; i < message.cmdList.length; i++)
            UnionCmd.internalBinaryWrite(message.cmdList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UnionCmdNotify
 */
export const UnionCmdNotify = new UnionCmdNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayerInfoReq$Type extends MessageType<GetOnlinePlayerInfoReq> {
    constructor() {
        super("com.midnights.game.GetOnlinePlayerInfoReq", [
            { no: 15, name: "is_online_id", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "target_uid", kind: "scalar", oneof: "playerId", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "online_id", kind: "scalar", oneof: "playerId", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "psn_id", kind: "scalar", oneof: "playerId", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetOnlinePlayerInfoReq>): GetOnlinePlayerInfoReq {
        const message = { playerId: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayerInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayerInfoReq): GetOnlinePlayerInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_online_id */ 15:
                    message.isOnlineId = reader.bool();
                    break;
                case /* uint32 target_uid */ 9:
                    message.playerId = {
                        oneofKind: "targetUid",
                        targetUid: reader.uint32()
                    };
                    break;
                case /* string online_id */ 7:
                    message.playerId = {
                        oneofKind: "onlineId",
                        onlineId: reader.string()
                    };
                    break;
                case /* string psn_id */ 2:
                    message.playerId = {
                        oneofKind: "psnId",
                        psnId: reader.string()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOnlinePlayerInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_online_id = 15; */
        if (message.isOnlineId !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isOnlineId);
        /* uint32 target_uid = 9; */
        if (message.playerId.oneofKind === "targetUid")
            writer.tag(9, WireType.Varint).uint32(message.playerId.targetUid);
        /* string online_id = 7; */
        if (message.playerId.oneofKind === "onlineId")
            writer.tag(7, WireType.LengthDelimited).string(message.playerId.onlineId);
        /* string psn_id = 2; */
        if (message.playerId.oneofKind === "psnId")
            writer.tag(2, WireType.LengthDelimited).string(message.playerId.psnId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetOnlinePlayerInfoReq
 */
export const GetOnlinePlayerInfoReq = new GetOnlinePlayerInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetOnlinePlayerInfoRsp$Type extends MessageType<GetOnlinePlayerInfoRsp> {
    constructor() {
        super("com.midnights.game.GetOnlinePlayerInfoRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "target_player_info", kind: "message", T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<GetOnlinePlayerInfoRsp>): GetOnlinePlayerInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetOnlinePlayerInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetOnlinePlayerInfoRsp): GetOnlinePlayerInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 target_uid */ 7:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional uint32 param */ 4:
                    message.param = reader.uint32();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo target_player_info */ 14:
                    message.targetPlayerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.targetPlayerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetOnlinePlayerInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 target_uid = 7; */
        if (message.targetUid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.targetUid);
        /* optional uint32 param = 4; */
        if (message.param !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.param);
        /* optional com.midnights.game.OnlinePlayerInfo target_player_info = 14; */
        if (message.targetPlayerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.targetPlayerInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetOnlinePlayerInfoRsp
 */
export const GetOnlinePlayerInfoRsp = new GetOnlinePlayerInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentInfo$Type extends MessageType<SegmentInfo> {
    constructor() {
        super("com.midnights.game.SegmentInfo", [
            { no: 3, name: "offset", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "module", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SegmentInfo>): SegmentInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SegmentInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SegmentInfo): SegmentInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 offset */ 3:
                    message.offset = reader.uint32();
                    break;
                case /* optional uint32 module */ 7:
                    message.module = reader.uint32();
                    break;
                case /* optional uint32 size */ 8:
                    message.size = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SegmentInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 offset = 3; */
        if (message.offset !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.offset);
        /* optional uint32 module = 7; */
        if (message.module !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.module);
        /* optional uint32 size = 8; */
        if (message.size !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.size);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SegmentInfo
 */
export const SegmentInfo = new SegmentInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SegmentCRCInfo$Type extends MessageType<SegmentCRCInfo> {
    constructor() {
        super("com.midnights.game.SegmentCRCInfo", [
            { no: 13, name: "module", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "size", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "crc", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "offset", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SegmentCRCInfo>): SegmentCRCInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SegmentCRCInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SegmentCRCInfo): SegmentCRCInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 module */ 13:
                    message.module = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 size */ 10:
                    message.size = reader.uint32();
                    break;
                case /* optional string crc */ 3:
                    message.crc = reader.string();
                    break;
                case /* optional uint32 offset */ 11:
                    message.offset = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SegmentCRCInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 module = 13; */
        if (message.module !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.module);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 size = 10; */
        if (message.size !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.size);
        /* optional string crc = 3; */
        if (message.crc !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.crc);
        /* optional uint32 offset = 11; */
        if (message.offset !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.offset);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SegmentCRCInfo
 */
export const SegmentCRCInfo = new SegmentCRCInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckSegmentCRCNotify$Type extends MessageType<CheckSegmentCRCNotify> {
    constructor() {
        super("com.midnights.game.CheckSegmentCRCNotify", [
            { no: 6, name: "info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SegmentInfo }
        ]);
    }
    create(value?: PartialMessage<CheckSegmentCRCNotify>): CheckSegmentCRCNotify {
        const message = { infoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckSegmentCRCNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckSegmentCRCNotify): CheckSegmentCRCNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SegmentInfo info_list */ 6:
                    message.infoList.push(SegmentInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckSegmentCRCNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SegmentInfo info_list = 6; */
        for (let i = 0; i < message.infoList.length; i++)
            SegmentInfo.internalBinaryWrite(message.infoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckSegmentCRCNotify
 */
export const CheckSegmentCRCNotify = new CheckSegmentCRCNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckSegmentCRCReq$Type extends MessageType<CheckSegmentCRCReq> {
    constructor() {
        super("com.midnights.game.CheckSegmentCRCReq", [
            { no: 1, name: "info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => SegmentCRCInfo }
        ]);
    }
    create(value?: PartialMessage<CheckSegmentCRCReq>): CheckSegmentCRCReq {
        const message = { infoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckSegmentCRCReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckSegmentCRCReq): CheckSegmentCRCReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SegmentCRCInfo info_list */ 1:
                    message.infoList.push(SegmentCRCInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckSegmentCRCReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SegmentCRCInfo info_list = 1; */
        for (let i = 0; i < message.infoList.length; i++)
            SegmentCRCInfo.internalBinaryWrite(message.infoList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckSegmentCRCReq
 */
export const CheckSegmentCRCReq = new CheckSegmentCRCReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRTTInfo$Type extends MessageType<PlayerRTTInfo> {
    constructor() {
        super("com.midnights.game.PlayerRTTInfo", [
            { no: 2, name: "rtt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerRTTInfo>): PlayerRTTInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerRTTInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerRTTInfo): PlayerRTTInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rtt */ 2:
                    message.rtt = reader.uint32();
                    break;
                case /* optional uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerRTTInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rtt = 2; */
        if (message.rtt !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.rtt);
        /* optional uint32 uid = 1; */
        if (message.uid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerRTTInfo
 */
export const PlayerRTTInfo = new PlayerRTTInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldPlayerRTTNotify$Type extends MessageType<WorldPlayerRTTNotify> {
    constructor() {
        super("com.midnights.game.WorldPlayerRTTNotify", [
            { no: 1, name: "player_rtt_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PlayerRTTInfo }
        ]);
    }
    create(value?: PartialMessage<WorldPlayerRTTNotify>): WorldPlayerRTTNotify {
        const message = { playerRttList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldPlayerRTTNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldPlayerRTTNotify): WorldPlayerRTTNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PlayerRTTInfo player_rtt_list */ 1:
                    message.playerRttList.push(PlayerRTTInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldPlayerRTTNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PlayerRTTInfo player_rtt_list = 1; */
        for (let i = 0; i < message.playerRttList.length; i++)
            PlayerRTTInfo.internalBinaryWrite(message.playerRttList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldPlayerRTTNotify
 */
export const WorldPlayerRTTNotify = new WorldPlayerRTTNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EchoNotify$Type extends MessageType<EchoNotify> {
    constructor() {
        super("com.midnights.game.EchoNotify", [
            { no: 4, name: "seq_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<EchoNotify>): EchoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EchoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EchoNotify): EchoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 seq_id */ 4:
                    message.seqId = reader.uint32();
                    break;
                case /* optional string content */ 9:
                    message.content = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EchoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 seq_id = 4; */
        if (message.seqId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.seqId);
        /* optional string content = 9; */
        if (message.content !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.content);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EchoNotify
 */
export const EchoNotify = new EchoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UpdateRedPointNotify$Type extends MessageType<UpdateRedPointNotify> {
    constructor() {
        super("com.midnights.game.UpdateRedPointNotify", [
            { no: 12, name: "red_point_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => RedPointData }
        ]);
    }
    create(value?: PartialMessage<UpdateRedPointNotify>): UpdateRedPointNotify {
        const message = { redPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UpdateRedPointNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UpdateRedPointNotify): UpdateRedPointNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.RedPointData red_point_list */ 12:
                    message.redPointList.push(RedPointData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UpdateRedPointNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.RedPointData red_point_list = 12; */
        for (let i = 0; i < message.redPointList.length; i++)
            RedPointData.internalBinaryWrite(message.redPointList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UpdateRedPointNotify
 */
export const UpdateRedPointNotify = new UpdateRedPointNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientBulletCreateNotify$Type extends MessageType<ClientBulletCreateNotify> {
    constructor() {
        super("com.midnights.game.ClientBulletCreateNotify", [
            { no: 6, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClientBulletCreateNotify>): ClientBulletCreateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientBulletCreateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientBulletCreateNotify): ClientBulletCreateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param */ 6:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientBulletCreateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param = 6; */
        if (message.param !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientBulletCreateNotify
 */
export const ClientBulletCreateNotify = new ClientBulletCreateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeServerGlobalValueNotify$Type extends MessageType<ChangeServerGlobalValueNotify> {
    constructor() {
        super("com.midnights.game.ChangeServerGlobalValueNotify", [
            { no: 4, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeServerGlobalValueNotify>): ChangeServerGlobalValueNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeServerGlobalValueNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeServerGlobalValueNotify): ChangeServerGlobalValueNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entity_id */ 4:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeServerGlobalValueNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entity_id = 4; */
        if (message.entityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeServerGlobalValueNotify
 */
export const ChangeServerGlobalValueNotify = new ChangeServerGlobalValueNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GmTalkNotify$Type extends MessageType<GmTalkNotify> {
    constructor() {
        super("com.midnights.game.GmTalkNotify", [
            { no: 5, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GmTalkNotify>): GmTalkNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GmTalkNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GmTalkNotify): GmTalkNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string msg */ 5:
                    message.msg = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GmTalkNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string msg = 5; */
        if (message.msg !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.msg);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GmTalkNotify
 */
export const GmTalkNotify = new GmTalkNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LastPacketPrintNotify$Type extends MessageType<LastPacketPrintNotify> {
    constructor() {
        super("com.midnights.game.LastPacketPrintNotify", []);
    }
    create(value?: PartialMessage<LastPacketPrintNotify>): LastPacketPrintNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LastPacketPrintNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LastPacketPrintNotify): LastPacketPrintNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: LastPacketPrintNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LastPacketPrintNotify
 */
export const LastPacketPrintNotify = new LastPacketPrintNotify$Type();
