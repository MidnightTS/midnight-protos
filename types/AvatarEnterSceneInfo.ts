// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "AvatarEnterSceneInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AbilitySyncStateInfo } from "./AbilitySyncStateInfo";
import { ServerBuff } from "./ServerBuff";
/**
 * @generated from protobuf message AvatarEnterSceneInfo
 */
export interface AvatarEnterSceneInfo {
    /**
     * @generated from protobuf field: uint32 weapon_entity_id = 5;
     */
    weaponEntityId: number;
    /**
     * @generated from protobuf field: uint64 avatar_guid = 9;
     */
    avatarGuid: bigint;
    /**
     * @generated from protobuf field: uint32 avatar_entity_id = 13;
     */
    avatarEntityId: number;
    /**
     * @generated from protobuf field: repeated ServerBuff server_buff_list = 7;
     */
    serverBuffList: ServerBuff[];
    /**
     * @generated from protobuf field: AbilitySyncStateInfo weapon_ability_info = 6;
     */
    weaponAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: repeated uint32 buff_id_list = 8;
     */
    buffIdList: number[];
    /**
     * @generated from protobuf field: AbilitySyncStateInfo avatar_ability_info = 1;
     */
    avatarAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: uint64 weapon_guid = 15;
     */
    weaponGuid: bigint;
}
// @generated message type with reflection information, may provide speed optimized methods
class AvatarEnterSceneInfo$Type extends MessageType<AvatarEnterSceneInfo> {
    constructor() {
        super("AvatarEnterSceneInfo", [
            { no: 5, name: "weapon_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "avatar_guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "avatar_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "server_buff_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServerBuff },
            { no: 6, name: "weapon_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 8, name: "buff_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "avatar_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 15, name: "weapon_guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarEnterSceneInfo>): AvatarEnterSceneInfo {
        const message = { weaponEntityId: 0, avatarGuid: 0n, avatarEntityId: 0, serverBuffList: [], buffIdList: [], weaponGuid: 0n };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarEnterSceneInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarEnterSceneInfo): AvatarEnterSceneInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 weapon_entity_id */ 5:
                    message.weaponEntityId = reader.uint32();
                    break;
                case /* uint64 avatar_guid */ 9:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* uint32 avatar_entity_id */ 13:
                    message.avatarEntityId = reader.uint32();
                    break;
                case /* repeated ServerBuff server_buff_list */ 7:
                    message.serverBuffList.push(ServerBuff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* AbilitySyncStateInfo weapon_ability_info */ 6:
                    message.weaponAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.weaponAbilityInfo);
                    break;
                case /* repeated uint32 buff_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.buffIdList.push(reader.uint32());
                    else
                        message.buffIdList.push(reader.uint32());
                    break;
                case /* AbilitySyncStateInfo avatar_ability_info */ 1:
                    message.avatarAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarAbilityInfo);
                    break;
                case /* uint64 weapon_guid */ 15:
                    message.weaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarEnterSceneInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 weapon_entity_id = 5; */
        if (message.weaponEntityId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.weaponEntityId);
        /* uint64 avatar_guid = 9; */
        if (message.avatarGuid !== 0n)
            writer.tag(9, WireType.Varint).uint64(message.avatarGuid);
        /* uint32 avatar_entity_id = 13; */
        if (message.avatarEntityId !== 0)
            writer.tag(13, WireType.Varint).uint32(message.avatarEntityId);
        /* repeated ServerBuff server_buff_list = 7; */
        for (let i = 0; i < message.serverBuffList.length; i++)
            ServerBuff.internalBinaryWrite(message.serverBuffList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* AbilitySyncStateInfo weapon_ability_info = 6; */
        if (message.weaponAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.weaponAbilityInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 buff_id_list = 8; */
        if (message.buffIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.buffIdList.length; i++)
                writer.uint32(message.buffIdList[i]);
            writer.join();
        }
        /* AbilitySyncStateInfo avatar_ability_info = 1; */
        if (message.avatarAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.avatarAbilityInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* uint64 weapon_guid = 15; */
        if (message.weaponGuid !== 0n)
            writer.tag(15, WireType.Varint).uint64(message.weaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AvatarEnterSceneInfo
 */
export const AvatarEnterSceneInfo = new AvatarEnterSceneInfo$Type();
