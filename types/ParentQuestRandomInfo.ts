/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ParentQuestRandomInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ParentQuestRandomInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        factor_list?: number[];
        template_id?: number;
        entrance_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("factor_list" in data && data.factor_list != undefined) {
                this.factor_list = data.factor_list;
            }
            if ("template_id" in data && data.template_id != undefined) {
                this.template_id = data.template_id;
            }
            if ("entrance_id" in data && data.entrance_id != undefined) {
                this.entrance_id = data.entrance_id;
            }
        }
    }
    get factor_list() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set factor_list(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get template_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set template_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get entrance_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set entrance_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        factor_list?: number[];
        template_id?: number;
        entrance_id?: number;
    }): ParentQuestRandomInfo {
        const message = new ParentQuestRandomInfo({});
        if (data.factor_list != null) {
            message.factor_list = data.factor_list;
        }
        if (data.template_id != null) {
            message.template_id = data.template_id;
        }
        if (data.entrance_id != null) {
            message.entrance_id = data.entrance_id;
        }
        return message;
    }
    toObject() {
        const data: {
            factor_list?: number[];
            template_id?: number;
            entrance_id?: number;
        } = {};
        if (this.factor_list != null) {
            data.factor_list = this.factor_list;
        }
        if (this.template_id != null) {
            data.template_id = this.template_id;
        }
        if (this.entrance_id != null) {
            data.entrance_id = this.entrance_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.factor_list.length)
            writer.writePackedUint32(1, this.factor_list);
        if (this.template_id != 0)
            writer.writeUint32(8, this.template_id);
        if (this.entrance_id != 0)
            writer.writeUint32(2, this.entrance_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParentQuestRandomInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParentQuestRandomInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.factor_list = reader.readPackedUint32();
                    break;
                case 8:
                    message.template_id = reader.readUint32();
                    break;
                case 2:
                    message.entrance_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ParentQuestRandomInfo {
        return ParentQuestRandomInfo.deserialize(bytes);
    }
}
