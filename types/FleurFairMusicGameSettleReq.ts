/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FleurFairMusicGameSettleReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FleurFairMusicGameSettleReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        score?: number;
        combo?: number;
        correct_hit?: number;
        music_basic_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("score" in data && data.score != undefined) {
                this.score = data.score;
            }
            if ("combo" in data && data.combo != undefined) {
                this.combo = data.combo;
            }
            if ("correct_hit" in data && data.correct_hit != undefined) {
                this.correct_hit = data.correct_hit;
            }
            if ("music_basic_id" in data && data.music_basic_id != undefined) {
                this.music_basic_id = data.music_basic_id;
            }
        }
    }
    get score() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set score(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get combo() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set combo(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get correct_hit() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set correct_hit(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get music_basic_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set music_basic_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        score?: number;
        combo?: number;
        correct_hit?: number;
        music_basic_id?: number;
    }): FleurFairMusicGameSettleReq {
        const message = new FleurFairMusicGameSettleReq({});
        if (data.score != null) {
            message.score = data.score;
        }
        if (data.combo != null) {
            message.combo = data.combo;
        }
        if (data.correct_hit != null) {
            message.correct_hit = data.correct_hit;
        }
        if (data.music_basic_id != null) {
            message.music_basic_id = data.music_basic_id;
        }
        return message;
    }
    toObject() {
        const data: {
            score?: number;
            combo?: number;
            correct_hit?: number;
            music_basic_id?: number;
        } = {};
        if (this.score != null) {
            data.score = this.score;
        }
        if (this.combo != null) {
            data.combo = this.combo;
        }
        if (this.correct_hit != null) {
            data.correct_hit = this.correct_hit;
        }
        if (this.music_basic_id != null) {
            data.music_basic_id = this.music_basic_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.score != 0)
            writer.writeUint32(3, this.score);
        if (this.combo != 0)
            writer.writeUint32(6, this.combo);
        if (this.correct_hit != 0)
            writer.writeUint32(10, this.correct_hit);
        if (this.music_basic_id != 0)
            writer.writeUint32(11, this.music_basic_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FleurFairMusicGameSettleReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FleurFairMusicGameSettleReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.score = reader.readUint32();
                    break;
                case 6:
                    message.combo = reader.readUint32();
                    break;
                case 10:
                    message.correct_hit = reader.readUint32();
                    break;
                case 11:
                    message.music_basic_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FleurFairMusicGameSettleReq {
        return FleurFairMusicGameSettleReq.deserialize(bytes);
    }
}
