/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MistTrialSelectAvatarAndEnterDungeonReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class MistTrialSelectAvatarAndEnterDungeonReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        trial_id?: number;
        select_trial_avatar_id_list?: number[];
        enter_point_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("trial_id" in data && data.trial_id != undefined) {
                this.trial_id = data.trial_id;
            }
            if ("select_trial_avatar_id_list" in data && data.select_trial_avatar_id_list != undefined) {
                this.select_trial_avatar_id_list = data.select_trial_avatar_id_list;
            }
            if ("enter_point_id" in data && data.enter_point_id != undefined) {
                this.enter_point_id = data.enter_point_id;
            }
        }
    }
    get trial_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set trial_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get select_trial_avatar_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 10, []) as number[];
    }
    set select_trial_avatar_id_list(value: number[]) {
        pb_1.Message.setField(this, 10, value);
    }
    get enter_point_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set enter_point_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        trial_id?: number;
        select_trial_avatar_id_list?: number[];
        enter_point_id?: number;
    }): MistTrialSelectAvatarAndEnterDungeonReq {
        const message = new MistTrialSelectAvatarAndEnterDungeonReq({});
        if (data.trial_id != null) {
            message.trial_id = data.trial_id;
        }
        if (data.select_trial_avatar_id_list != null) {
            message.select_trial_avatar_id_list = data.select_trial_avatar_id_list;
        }
        if (data.enter_point_id != null) {
            message.enter_point_id = data.enter_point_id;
        }
        return message;
    }
    toObject() {
        const data: {
            trial_id?: number;
            select_trial_avatar_id_list?: number[];
            enter_point_id?: number;
        } = {};
        if (this.trial_id != null) {
            data.trial_id = this.trial_id;
        }
        if (this.select_trial_avatar_id_list != null) {
            data.select_trial_avatar_id_list = this.select_trial_avatar_id_list;
        }
        if (this.enter_point_id != null) {
            data.enter_point_id = this.enter_point_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.trial_id != 0)
            writer.writeUint32(4, this.trial_id);
        if (this.select_trial_avatar_id_list.length)
            writer.writePackedUint32(10, this.select_trial_avatar_id_list);
        if (this.enter_point_id != 0)
            writer.writeUint32(7, this.enter_point_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MistTrialSelectAvatarAndEnterDungeonReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MistTrialSelectAvatarAndEnterDungeonReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.trial_id = reader.readUint32();
                    break;
                case 10:
                    message.select_trial_avatar_id_list = reader.readPackedUint32();
                    break;
                case 7:
                    message.enter_point_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MistTrialSelectAvatarAndEnterDungeonReq {
        return MistTrialSelectAvatarAndEnterDungeonReq.deserialize(bytes);
    }
}
