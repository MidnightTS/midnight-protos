/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarAddNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarInfo";
import * as pb_1 from "google-protobuf";
export class AvatarAddNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        avatar?: dependency_1.AvatarInfo;
        is_in_team?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("avatar" in data && data.avatar != undefined) {
                this.avatar = data.avatar;
            }
            if ("is_in_team" in data && data.is_in_team != undefined) {
                this.is_in_team = data.is_in_team;
            }
        }
    }
    get avatar() {
        return pb_1.Message.getWrapperField(this, dependency_1.AvatarInfo, 13) as dependency_1.AvatarInfo;
    }
    set avatar(value: dependency_1.AvatarInfo) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_avatar() {
        return pb_1.Message.getField(this, 13) != null;
    }
    get is_in_team() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set is_in_team(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data: {
        avatar?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>;
        is_in_team?: boolean;
    }): AvatarAddNotify {
        const message = new AvatarAddNotify({});
        if (data.avatar != null) {
            message.avatar = dependency_1.AvatarInfo.fromObject(data.avatar);
        }
        if (data.is_in_team != null) {
            message.is_in_team = data.is_in_team;
        }
        return message;
    }
    toObject() {
        const data: {
            avatar?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>;
            is_in_team?: boolean;
        } = {};
        if (this.avatar != null) {
            data.avatar = this.avatar.toObject();
        }
        if (this.is_in_team != null) {
            data.is_in_team = this.is_in_team;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_avatar)
            writer.writeMessage(13, this.avatar, () => this.avatar.serialize(writer));
        if (this.is_in_team != false)
            writer.writeBool(12, this.is_in_team);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvatarAddNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarAddNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    reader.readMessage(message.avatar, () => message.avatar = dependency_1.AvatarInfo.deserialize(reader));
                    break;
                case 12:
                    message.is_in_team = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AvatarAddNotify {
        return AvatarAddNotify.deserialize(bytes);
    }
}
