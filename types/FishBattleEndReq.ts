/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FishBattleEndReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./FishBattleResult";
import * as pb_1 from "google-protobuf";
export class FishBattleEndReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        max_bonus_time?: number;
        battle_result?: dependency_1.FishBattleResult;
        is_always_bonus?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("max_bonus_time" in data && data.max_bonus_time != undefined) {
                this.max_bonus_time = data.max_bonus_time;
            }
            if ("battle_result" in data && data.battle_result != undefined) {
                this.battle_result = data.battle_result;
            }
            if ("is_always_bonus" in data && data.is_always_bonus != undefined) {
                this.is_always_bonus = data.is_always_bonus;
            }
        }
    }
    get max_bonus_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set max_bonus_time(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get battle_result() {
        return pb_1.Message.getFieldWithDefault(this, 10, dependency_1.FishBattleResult.FISH_BATTLE_RESULT_NONE) as dependency_1.FishBattleResult;
    }
    set battle_result(value: dependency_1.FishBattleResult) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_always_bonus() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set is_always_bonus(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data: {
        max_bonus_time?: number;
        battle_result?: dependency_1.FishBattleResult;
        is_always_bonus?: boolean;
    }): FishBattleEndReq {
        const message = new FishBattleEndReq({});
        if (data.max_bonus_time != null) {
            message.max_bonus_time = data.max_bonus_time;
        }
        if (data.battle_result != null) {
            message.battle_result = data.battle_result;
        }
        if (data.is_always_bonus != null) {
            message.is_always_bonus = data.is_always_bonus;
        }
        return message;
    }
    toObject() {
        const data: {
            max_bonus_time?: number;
            battle_result?: dependency_1.FishBattleResult;
            is_always_bonus?: boolean;
        } = {};
        if (this.max_bonus_time != null) {
            data.max_bonus_time = this.max_bonus_time;
        }
        if (this.battle_result != null) {
            data.battle_result = this.battle_result;
        }
        if (this.is_always_bonus != null) {
            data.is_always_bonus = this.is_always_bonus;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.max_bonus_time != 0)
            writer.writeUint32(3, this.max_bonus_time);
        if (this.battle_result != dependency_1.FishBattleResult.FISH_BATTLE_RESULT_NONE)
            writer.writeEnum(10, this.battle_result);
        if (this.is_always_bonus != false)
            writer.writeBool(11, this.is_always_bonus);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FishBattleEndReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FishBattleEndReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.max_bonus_time = reader.readUint32();
                    break;
                case 10:
                    message.battle_result = reader.readEnum();
                    break;
                case 11:
                    message.is_always_bonus = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FishBattleEndReq {
        return FishBattleEndReq.deserialize(bytes);
    }
}
