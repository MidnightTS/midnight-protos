/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: EffigyDailyInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class EffigyDailyInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        challenge_max_score?: number;
        is_first_pass_reward_taken?: boolean;
        challenge_total_score?: number;
        challenge_id?: number;
        challenge_count?: number;
        day_index?: number;
        begin_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("challenge_max_score" in data && data.challenge_max_score != undefined) {
                this.challenge_max_score = data.challenge_max_score;
            }
            if ("is_first_pass_reward_taken" in data && data.is_first_pass_reward_taken != undefined) {
                this.is_first_pass_reward_taken = data.is_first_pass_reward_taken;
            }
            if ("challenge_total_score" in data && data.challenge_total_score != undefined) {
                this.challenge_total_score = data.challenge_total_score;
            }
            if ("challenge_id" in data && data.challenge_id != undefined) {
                this.challenge_id = data.challenge_id;
            }
            if ("challenge_count" in data && data.challenge_count != undefined) {
                this.challenge_count = data.challenge_count;
            }
            if ("day_index" in data && data.day_index != undefined) {
                this.day_index = data.day_index;
            }
            if ("begin_time" in data && data.begin_time != undefined) {
                this.begin_time = data.begin_time;
            }
        }
    }
    get challenge_max_score() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set challenge_max_score(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_first_pass_reward_taken() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set is_first_pass_reward_taken(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get challenge_total_score() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set challenge_total_score(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get challenge_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set challenge_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get challenge_count() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set challenge_count(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get day_index() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set day_index(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set begin_time(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        challenge_max_score?: number;
        is_first_pass_reward_taken?: boolean;
        challenge_total_score?: number;
        challenge_id?: number;
        challenge_count?: number;
        day_index?: number;
        begin_time?: number;
    }): EffigyDailyInfo {
        const message = new EffigyDailyInfo({});
        if (data.challenge_max_score != null) {
            message.challenge_max_score = data.challenge_max_score;
        }
        if (data.is_first_pass_reward_taken != null) {
            message.is_first_pass_reward_taken = data.is_first_pass_reward_taken;
        }
        if (data.challenge_total_score != null) {
            message.challenge_total_score = data.challenge_total_score;
        }
        if (data.challenge_id != null) {
            message.challenge_id = data.challenge_id;
        }
        if (data.challenge_count != null) {
            message.challenge_count = data.challenge_count;
        }
        if (data.day_index != null) {
            message.day_index = data.day_index;
        }
        if (data.begin_time != null) {
            message.begin_time = data.begin_time;
        }
        return message;
    }
    toObject() {
        const data: {
            challenge_max_score?: number;
            is_first_pass_reward_taken?: boolean;
            challenge_total_score?: number;
            challenge_id?: number;
            challenge_count?: number;
            day_index?: number;
            begin_time?: number;
        } = {};
        if (this.challenge_max_score != null) {
            data.challenge_max_score = this.challenge_max_score;
        }
        if (this.is_first_pass_reward_taken != null) {
            data.is_first_pass_reward_taken = this.is_first_pass_reward_taken;
        }
        if (this.challenge_total_score != null) {
            data.challenge_total_score = this.challenge_total_score;
        }
        if (this.challenge_id != null) {
            data.challenge_id = this.challenge_id;
        }
        if (this.challenge_count != null) {
            data.challenge_count = this.challenge_count;
        }
        if (this.day_index != null) {
            data.day_index = this.day_index;
        }
        if (this.begin_time != null) {
            data.begin_time = this.begin_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.challenge_max_score != 0)
            writer.writeUint32(6, this.challenge_max_score);
        if (this.is_first_pass_reward_taken != false)
            writer.writeBool(12, this.is_first_pass_reward_taken);
        if (this.challenge_total_score != 0)
            writer.writeUint32(15, this.challenge_total_score);
        if (this.challenge_id != 0)
            writer.writeUint32(1, this.challenge_id);
        if (this.challenge_count != 0)
            writer.writeUint32(3, this.challenge_count);
        if (this.day_index != 0)
            writer.writeUint32(14, this.day_index);
        if (this.begin_time != 0)
            writer.writeUint32(2, this.begin_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): EffigyDailyInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new EffigyDailyInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.challenge_max_score = reader.readUint32();
                    break;
                case 12:
                    message.is_first_pass_reward_taken = reader.readBool();
                    break;
                case 15:
                    message.challenge_total_score = reader.readUint32();
                    break;
                case 1:
                    message.challenge_id = reader.readUint32();
                    break;
                case 3:
                    message.challenge_count = reader.readUint32();
                    break;
                case 14:
                    message.day_index = reader.readUint32();
                    break;
                case 2:
                    message.begin_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): EffigyDailyInfo {
        return EffigyDailyInfo.deserialize(bytes);
    }
}
