// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "EffigyDailyInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message EffigyDailyInfo
 */
export interface EffigyDailyInfo {
    /**
     * @generated from protobuf field: bool is_first_pass_reward_taken = 7;
     */
    isFirstPassRewardTaken: boolean;
    /**
     * @generated from protobuf field: uint32 Unk3300_NNHICCGELHP = 2 [json_name = "Unk3300NNHICCGELHP"];
     */
    unk3300NNHICCGELHP: number;
    /**
     * @generated from protobuf field: uint32 Unk3300_NEBCDALEFEC = 11 [json_name = "Unk3300NEBCDALEFEC"];
     */
    unk3300NEBCDALEFEC: number;
    /**
     * @generated from protobuf field: uint32 challenge_max_score = 12;
     */
    challengeMaxScore: number;
    /**
     * @generated from protobuf field: uint32 begin_time = 8;
     */
    beginTime: number;
    /**
     * @generated from protobuf field: uint32 challenge_id = 6;
     */
    challengeId: number;
    /**
     * @generated from protobuf field: uint32 day_index = 9;
     */
    dayIndex: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class EffigyDailyInfo$Type extends MessageType<EffigyDailyInfo> {
    constructor() {
        super("EffigyDailyInfo", [
            { no: 7, name: "is_first_pass_reward_taken", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "Unk3300_NNHICCGELHP", kind: "scalar", jsonName: "Unk3300NNHICCGELHP", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "Unk3300_NEBCDALEFEC", kind: "scalar", jsonName: "Unk3300NEBCDALEFEC", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "challenge_max_score", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "begin_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "challenge_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "day_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyDailyInfo>): EffigyDailyInfo {
        const message = { isFirstPassRewardTaken: false, unk3300NNHICCGELHP: 0, unk3300NEBCDALEFEC: 0, challengeMaxScore: 0, beginTime: 0, challengeId: 0, dayIndex: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyDailyInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyDailyInfo): EffigyDailyInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool is_first_pass_reward_taken */ 7:
                    message.isFirstPassRewardTaken = reader.bool();
                    break;
                case /* uint32 Unk3300_NNHICCGELHP = 2 [json_name = "Unk3300NNHICCGELHP"];*/ 2:
                    message.unk3300NNHICCGELHP = reader.uint32();
                    break;
                case /* uint32 Unk3300_NEBCDALEFEC = 11 [json_name = "Unk3300NEBCDALEFEC"];*/ 11:
                    message.unk3300NEBCDALEFEC = reader.uint32();
                    break;
                case /* uint32 challenge_max_score */ 12:
                    message.challengeMaxScore = reader.uint32();
                    break;
                case /* uint32 begin_time */ 8:
                    message.beginTime = reader.uint32();
                    break;
                case /* uint32 challenge_id */ 6:
                    message.challengeId = reader.uint32();
                    break;
                case /* uint32 day_index */ 9:
                    message.dayIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyDailyInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool is_first_pass_reward_taken = 7; */
        if (message.isFirstPassRewardTaken !== false)
            writer.tag(7, WireType.Varint).bool(message.isFirstPassRewardTaken);
        /* uint32 Unk3300_NNHICCGELHP = 2 [json_name = "Unk3300NNHICCGELHP"]; */
        if (message.unk3300NNHICCGELHP !== 0)
            writer.tag(2, WireType.Varint).uint32(message.unk3300NNHICCGELHP);
        /* uint32 Unk3300_NEBCDALEFEC = 11 [json_name = "Unk3300NEBCDALEFEC"]; */
        if (message.unk3300NEBCDALEFEC !== 0)
            writer.tag(11, WireType.Varint).uint32(message.unk3300NEBCDALEFEC);
        /* uint32 challenge_max_score = 12; */
        if (message.challengeMaxScore !== 0)
            writer.tag(12, WireType.Varint).uint32(message.challengeMaxScore);
        /* uint32 begin_time = 8; */
        if (message.beginTime !== 0)
            writer.tag(8, WireType.Varint).uint32(message.beginTime);
        /* uint32 challenge_id = 6; */
        if (message.challengeId !== 0)
            writer.tag(6, WireType.Varint).uint32(message.challengeId);
        /* uint32 day_index = 9; */
        if (message.dayIndex !== 0)
            writer.tag(9, WireType.Varint).uint32(message.dayIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EffigyDailyInfo
 */
export const EffigyDailyInfo = new EffigyDailyInfo$Type();
