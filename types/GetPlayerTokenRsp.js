"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GetPlayerTokenRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetPlayerTokenRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetPlayerTokenRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class GetPlayerTokenRsp extends pb_1.Message {
    constructor(data) {
        super();
        _GetPlayerTokenRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1640], __classPrivateFieldGet(this, _GetPlayerTokenRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("birthday" in data && data.birthday != undefined) {
                this.birthday = data.birthday;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("security_cmd_buffer" in data && data.security_cmd_buffer != undefined) {
                this.security_cmd_buffer = data.security_cmd_buffer;
            }
            if ("secret_key_seed" in data && data.secret_key_seed != undefined) {
                this.secret_key_seed = data.secret_key_seed;
            }
            if ("country_code" in data && data.country_code != undefined) {
                this.country_code = data.country_code;
            }
            if ("extra_bin_data" in data && data.extra_bin_data != undefined) {
                this.extra_bin_data = data.extra_bin_data;
            }
            if ("secret_key" in data && data.secret_key != undefined) {
                this.secret_key = data.secret_key;
            }
            if ("Unk2700_NOJPEHIBDJH" in data && data.Unk2700_NOJPEHIBDJH != undefined) {
                this.Unk2700_NOJPEHIBDJH = data.Unk2700_NOJPEHIBDJH;
            }
            if ("black_uid_end_time" in data && data.black_uid_end_time != undefined) {
                this.black_uid_end_time = data.black_uid_end_time;
            }
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
            if ("gm_uid" in data && data.gm_uid != undefined) {
                this.gm_uid = data.gm_uid;
            }
            if ("channel_id" in data && data.channel_id != undefined) {
                this.channel_id = data.channel_id;
            }
            if ("psn_id" in data && data.psn_id != undefined) {
                this.psn_id = data.psn_id;
            }
            if ("client_ip_str" in data && data.client_ip_str != undefined) {
                this.client_ip_str = data.client_ip_str;
            }
            if ("msg" in data && data.msg != undefined) {
                this.msg = data.msg;
            }
            if ("account_type" in data && data.account_type != undefined) {
                this.account_type = data.account_type;
            }
            if ("sub_channel_id" in data && data.sub_channel_id != undefined) {
                this.sub_channel_id = data.sub_channel_id;
            }
            if ("Unk2700_FLBKPCPGPDH" in data && data.Unk2700_FLBKPCPGPDH != undefined) {
                this.Unk2700_FLBKPCPGPDH = data.Unk2700_FLBKPCPGPDH;
            }
            if ("encrypted_seed" in data && data.encrypted_seed != undefined) {
                this.encrypted_seed = data.encrypted_seed;
            }
            if ("is_proficient_player" in data && data.is_proficient_player != undefined) {
                this.is_proficient_player = data.is_proficient_player;
            }
            if ("key_id" in data && data.key_id != undefined) {
                this.key_id = data.key_id;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("account_uid" in data && data.account_uid != undefined) {
                this.account_uid = data.account_uid;
            }
            if ("is_guest" in data && data.is_guest != undefined) {
                this.is_guest = data.is_guest;
            }
            if ("client_version_random_key" in data && data.client_version_random_key != undefined) {
                this.client_version_random_key = data.client_version_random_key;
            }
            if ("Unk2800_NNBFCEAOEPB" in data && data.Unk2800_NNBFCEAOEPB != undefined) {
                this.Unk2800_NNBFCEAOEPB = data.Unk2800_NNBFCEAOEPB;
            }
            if ("platform_type" in data && data.platform_type != undefined) {
                this.platform_type = data.platform_type;
            }
            if ("reg_platform" in data && data.reg_platform != undefined) {
                this.reg_platform = data.reg_platform;
            }
            if ("is_login_white_list" in data && data.is_login_white_list != undefined) {
                this.is_login_white_list = data.is_login_white_list;
            }
            if ("seed_signature" in data && data.seed_signature != undefined) {
                this.seed_signature = data.seed_signature;
            }
        }
    }
    get birthday() {
        return pb_1.Message.getFieldWithDefault(this, 937, "");
    }
    set birthday(value) {
        pb_1.Message.setField(this, 937, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get security_cmd_buffer() {
        return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array());
    }
    set security_cmd_buffer(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get secret_key_seed() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set secret_key_seed(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get country_code() {
        return pb_1.Message.getFieldWithDefault(this, 2013, "");
    }
    set country_code(value) {
        pb_1.Message.setField(this, 2013, value);
    }
    get extra_bin_data() {
        return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array());
    }
    set extra_bin_data(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get secret_key() {
        return pb_1.Message.getFieldWithDefault(this, 15, "");
    }
    set secret_key(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get Unk2700_NOJPEHIBDJH() {
        return pb_1.Message.getFieldWithDefault(this, 1561, 0);
    }
    set Unk2700_NOJPEHIBDJH(value) {
        pb_1.Message.setField(this, 1561, value);
    }
    get black_uid_end_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set black_uid_end_time(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get tag() {
        return pb_1.Message.getFieldWithDefault(this, 1635, 0);
    }
    set tag(value) {
        pb_1.Message.setField(this, 1635, value);
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 11, "");
    }
    set token(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get gm_uid() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set gm_uid(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 896, 0);
    }
    set channel_id(value) {
        pb_1.Message.setField(this, 896, value);
    }
    get psn_id() {
        return pb_1.Message.getFieldWithDefault(this, 1811, "");
    }
    set psn_id(value) {
        pb_1.Message.setField(this, 1811, value);
    }
    get client_ip_str() {
        return pb_1.Message.getFieldWithDefault(this, 860, "");
    }
    set client_ip_str(value) {
        pb_1.Message.setField(this, 860, value);
    }
    get msg() {
        return pb_1.Message.getFieldWithDefault(this, 7, "");
    }
    set msg(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get account_type() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set account_type(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get sub_channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 1802, 0);
    }
    set sub_channel_id(value) {
        pb_1.Message.setField(this, 1802, value);
    }
    get Unk2700_FLBKPCPGPDH() {
        return pb_1.Message.getFieldWithDefault(this, 2028, false);
    }
    set Unk2700_FLBKPCPGPDH(value) {
        pb_1.Message.setField(this, 2028, value);
    }
    get encrypted_seed() {
        return pb_1.Message.getFieldWithDefault(this, 1493, "");
    }
    set encrypted_seed(value) {
        pb_1.Message.setField(this, 1493, value);
    }
    get is_proficient_player() {
        return pb_1.Message.getFieldWithDefault(this, 9, false);
    }
    set is_proficient_player(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get key_id() {
        return pb_1.Message.getFieldWithDefault(this, 1172, 0);
    }
    set key_id(value) {
        pb_1.Message.setField(this, 1172, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get account_uid() {
        return pb_1.Message.getFieldWithDefault(this, 12, "");
    }
    set account_uid(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_guest() {
        return pb_1.Message.getFieldWithDefault(this, 4, false);
    }
    set is_guest(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get client_version_random_key() {
        return pb_1.Message.getFieldWithDefault(this, 1529, "");
    }
    set client_version_random_key(value) {
        pb_1.Message.setField(this, 1529, value);
    }
    get Unk2800_NNBFCEAOEPB() {
        return pb_1.Message.getFieldWithDefault(this, 1640, []);
    }
    set Unk2800_NNBFCEAOEPB(value) {
        pb_1.Message.setField(this, 1640, value);
    }
    get platform_type() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set platform_type(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get reg_platform() {
        return pb_1.Message.getFieldWithDefault(this, 1112, 0);
    }
    set reg_platform(value) {
        pb_1.Message.setField(this, 1112, value);
    }
    get is_login_white_list() {
        return pb_1.Message.getFieldWithDefault(this, 573, false);
    }
    set is_login_white_list(value) {
        pb_1.Message.setField(this, 573, value);
    }
    get seed_signature() {
        return pb_1.Message.getFieldWithDefault(this, 1140, "");
    }
    set seed_signature(value) {
        pb_1.Message.setField(this, 1140, value);
    }
    static fromObject(data) {
        const message = new GetPlayerTokenRsp({});
        if (data.birthday != null) {
            message.birthday = data.birthday;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.security_cmd_buffer != null) {
            message.security_cmd_buffer = data.security_cmd_buffer;
        }
        if (data.secret_key_seed != null) {
            message.secret_key_seed = data.secret_key_seed;
        }
        if (data.country_code != null) {
            message.country_code = data.country_code;
        }
        if (data.extra_bin_data != null) {
            message.extra_bin_data = data.extra_bin_data;
        }
        if (data.secret_key != null) {
            message.secret_key = data.secret_key;
        }
        if (data.Unk2700_NOJPEHIBDJH != null) {
            message.Unk2700_NOJPEHIBDJH = data.Unk2700_NOJPEHIBDJH;
        }
        if (data.black_uid_end_time != null) {
            message.black_uid_end_time = data.black_uid_end_time;
        }
        if (data.tag != null) {
            message.tag = data.tag;
        }
        if (data.token != null) {
            message.token = data.token;
        }
        if (data.gm_uid != null) {
            message.gm_uid = data.gm_uid;
        }
        if (data.channel_id != null) {
            message.channel_id = data.channel_id;
        }
        if (data.psn_id != null) {
            message.psn_id = data.psn_id;
        }
        if (data.client_ip_str != null) {
            message.client_ip_str = data.client_ip_str;
        }
        if (data.msg != null) {
            message.msg = data.msg;
        }
        if (data.account_type != null) {
            message.account_type = data.account_type;
        }
        if (data.sub_channel_id != null) {
            message.sub_channel_id = data.sub_channel_id;
        }
        if (data.Unk2700_FLBKPCPGPDH != null) {
            message.Unk2700_FLBKPCPGPDH = data.Unk2700_FLBKPCPGPDH;
        }
        if (data.encrypted_seed != null) {
            message.encrypted_seed = data.encrypted_seed;
        }
        if (data.is_proficient_player != null) {
            message.is_proficient_player = data.is_proficient_player;
        }
        if (data.key_id != null) {
            message.key_id = data.key_id;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.account_uid != null) {
            message.account_uid = data.account_uid;
        }
        if (data.is_guest != null) {
            message.is_guest = data.is_guest;
        }
        if (data.client_version_random_key != null) {
            message.client_version_random_key = data.client_version_random_key;
        }
        if (data.Unk2800_NNBFCEAOEPB != null) {
            message.Unk2800_NNBFCEAOEPB = data.Unk2800_NNBFCEAOEPB;
        }
        if (data.platform_type != null) {
            message.platform_type = data.platform_type;
        }
        if (data.reg_platform != null) {
            message.reg_platform = data.reg_platform;
        }
        if (data.is_login_white_list != null) {
            message.is_login_white_list = data.is_login_white_list;
        }
        if (data.seed_signature != null) {
            message.seed_signature = data.seed_signature;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.birthday != null) {
            data.birthday = this.birthday;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.security_cmd_buffer != null) {
            data.security_cmd_buffer = this.security_cmd_buffer;
        }
        if (this.secret_key_seed != null) {
            data.secret_key_seed = this.secret_key_seed;
        }
        if (this.country_code != null) {
            data.country_code = this.country_code;
        }
        if (this.extra_bin_data != null) {
            data.extra_bin_data = this.extra_bin_data;
        }
        if (this.secret_key != null) {
            data.secret_key = this.secret_key;
        }
        if (this.Unk2700_NOJPEHIBDJH != null) {
            data.Unk2700_NOJPEHIBDJH = this.Unk2700_NOJPEHIBDJH;
        }
        if (this.black_uid_end_time != null) {
            data.black_uid_end_time = this.black_uid_end_time;
        }
        if (this.tag != null) {
            data.tag = this.tag;
        }
        if (this.token != null) {
            data.token = this.token;
        }
        if (this.gm_uid != null) {
            data.gm_uid = this.gm_uid;
        }
        if (this.channel_id != null) {
            data.channel_id = this.channel_id;
        }
        if (this.psn_id != null) {
            data.psn_id = this.psn_id;
        }
        if (this.client_ip_str != null) {
            data.client_ip_str = this.client_ip_str;
        }
        if (this.msg != null) {
            data.msg = this.msg;
        }
        if (this.account_type != null) {
            data.account_type = this.account_type;
        }
        if (this.sub_channel_id != null) {
            data.sub_channel_id = this.sub_channel_id;
        }
        if (this.Unk2700_FLBKPCPGPDH != null) {
            data.Unk2700_FLBKPCPGPDH = this.Unk2700_FLBKPCPGPDH;
        }
        if (this.encrypted_seed != null) {
            data.encrypted_seed = this.encrypted_seed;
        }
        if (this.is_proficient_player != null) {
            data.is_proficient_player = this.is_proficient_player;
        }
        if (this.key_id != null) {
            data.key_id = this.key_id;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.account_uid != null) {
            data.account_uid = this.account_uid;
        }
        if (this.is_guest != null) {
            data.is_guest = this.is_guest;
        }
        if (this.client_version_random_key != null) {
            data.client_version_random_key = this.client_version_random_key;
        }
        if (this.Unk2800_NNBFCEAOEPB != null) {
            data.Unk2800_NNBFCEAOEPB = this.Unk2800_NNBFCEAOEPB;
        }
        if (this.platform_type != null) {
            data.platform_type = this.platform_type;
        }
        if (this.reg_platform != null) {
            data.reg_platform = this.reg_platform;
        }
        if (this.is_login_white_list != null) {
            data.is_login_white_list = this.is_login_white_list;
        }
        if (this.seed_signature != null) {
            data.seed_signature = this.seed_signature;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.birthday.length)
            writer.writeString(937, this.birthday);
        if (this.retcode != 0)
            writer.writeInt32(2, this.retcode);
        if (this.security_cmd_buffer.length)
            writer.writeBytes(6, this.security_cmd_buffer);
        if (this.secret_key_seed != 0)
            writer.writeUint64(13, this.secret_key_seed);
        if (this.country_code.length)
            writer.writeString(2013, this.country_code);
        if (this.extra_bin_data.length)
            writer.writeBytes(3, this.extra_bin_data);
        if (this.secret_key.length)
            writer.writeString(15, this.secret_key);
        if (this.Unk2700_NOJPEHIBDJH != 0)
            writer.writeUint32(1561, this.Unk2700_NOJPEHIBDJH);
        if (this.black_uid_end_time != 0)
            writer.writeUint32(14, this.black_uid_end_time);
        if (this.tag != 0)
            writer.writeUint32(1635, this.tag);
        if (this.token.length)
            writer.writeString(11, this.token);
        if (this.gm_uid != 0)
            writer.writeUint32(10, this.gm_uid);
        if (this.channel_id != 0)
            writer.writeUint32(896, this.channel_id);
        if (this.psn_id.length)
            writer.writeString(1811, this.psn_id);
        if (this.client_ip_str.length)
            writer.writeString(860, this.client_ip_str);
        if (this.msg.length)
            writer.writeString(7, this.msg);
        if (this.account_type != 0)
            writer.writeUint32(5, this.account_type);
        if (this.sub_channel_id != 0)
            writer.writeUint32(1802, this.sub_channel_id);
        if (this.Unk2700_FLBKPCPGPDH != false)
            writer.writeBool(2028, this.Unk2700_FLBKPCPGPDH);
        if (this.encrypted_seed.length)
            writer.writeString(1493, this.encrypted_seed);
        if (this.is_proficient_player != false)
            writer.writeBool(9, this.is_proficient_player);
        if (this.key_id != 0)
            writer.writeUint32(1172, this.key_id);
        if (this.uid != 0)
            writer.writeUint32(1, this.uid);
        if (this.account_uid.length)
            writer.writeString(12, this.account_uid);
        if (this.is_guest != false)
            writer.writeBool(4, this.is_guest);
        if (this.client_version_random_key.length)
            writer.writeString(1529, this.client_version_random_key);
        if (this.Unk2800_NNBFCEAOEPB.length)
            writer.writePackedUint32(1640, this.Unk2800_NNBFCEAOEPB);
        if (this.platform_type != 0)
            writer.writeUint32(8, this.platform_type);
        if (this.reg_platform != 0)
            writer.writeUint32(1112, this.reg_platform);
        if (this.is_login_white_list != false)
            writer.writeBool(573, this.is_login_white_list);
        if (this.seed_signature.length)
            writer.writeString(1140, this.seed_signature);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerTokenRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 937:
                    message.birthday = reader.readString();
                    break;
                case 2:
                    message.retcode = reader.readInt32();
                    break;
                case 6:
                    message.security_cmd_buffer = reader.readBytes();
                    break;
                case 13:
                    message.secret_key_seed = reader.readUint64();
                    break;
                case 2013:
                    message.country_code = reader.readString();
                    break;
                case 3:
                    message.extra_bin_data = reader.readBytes();
                    break;
                case 15:
                    message.secret_key = reader.readString();
                    break;
                case 1561:
                    message.Unk2700_NOJPEHIBDJH = reader.readUint32();
                    break;
                case 14:
                    message.black_uid_end_time = reader.readUint32();
                    break;
                case 1635:
                    message.tag = reader.readUint32();
                    break;
                case 11:
                    message.token = reader.readString();
                    break;
                case 10:
                    message.gm_uid = reader.readUint32();
                    break;
                case 896:
                    message.channel_id = reader.readUint32();
                    break;
                case 1811:
                    message.psn_id = reader.readString();
                    break;
                case 860:
                    message.client_ip_str = reader.readString();
                    break;
                case 7:
                    message.msg = reader.readString();
                    break;
                case 5:
                    message.account_type = reader.readUint32();
                    break;
                case 1802:
                    message.sub_channel_id = reader.readUint32();
                    break;
                case 2028:
                    message.Unk2700_FLBKPCPGPDH = reader.readBool();
                    break;
                case 1493:
                    message.encrypted_seed = reader.readString();
                    break;
                case 9:
                    message.is_proficient_player = reader.readBool();
                    break;
                case 1172:
                    message.key_id = reader.readUint32();
                    break;
                case 1:
                    message.uid = reader.readUint32();
                    break;
                case 12:
                    message.account_uid = reader.readString();
                    break;
                case 4:
                    message.is_guest = reader.readBool();
                    break;
                case 1529:
                    message.client_version_random_key = reader.readString();
                    break;
                case 1640:
                    message.Unk2800_NNBFCEAOEPB = reader.readPackedUint32();
                    break;
                case 8:
                    message.platform_type = reader.readUint32();
                    break;
                case 1112:
                    message.reg_platform = reader.readUint32();
                    break;
                case 573:
                    message.is_login_white_list = reader.readBool();
                    break;
                case 1140:
                    message.seed_signature = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetPlayerTokenRsp.deserialize(bytes);
    }
}
exports.GetPlayerTokenRsp = GetPlayerTokenRsp;
_GetPlayerTokenRsp_one_of_decls = new WeakMap();
