"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChapterStateNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChapterStateNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChapterStateNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ChapterState");
const pb_1 = require("google-protobuf");
class ChapterStateNotify extends pb_1.Message {
    constructor(data) {
        super();
        _ChapterStateNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ChapterStateNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("chapter_state" in data && data.chapter_state != undefined) {
                this.chapter_state = data.chapter_state;
            }
            if ("need_player_level" in data && data.need_player_level != undefined) {
                this.need_player_level = data.need_player_level;
            }
            if ("need_begin_time" in data && data.need_begin_time != undefined) {
                this.need_begin_time = data.need_begin_time;
            }
            if ("chapter_id" in data && data.chapter_id != undefined) {
                this.chapter_id = data.chapter_id;
            }
        }
    }
    get chapter_state() {
        return pb_1.Message.getFieldWithDefault(this, 9, dependency_1.ChapterState.CHAPTER_STATE_INVALID);
    }
    set chapter_state(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get need_player_level() {
        return pb_1.Message.getWrapperField(this, ChapterStateNotify.NeedPlayerLevel, 10);
    }
    set need_player_level(value) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_need_player_level() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get need_begin_time() {
        return pb_1.Message.getWrapperField(this, ChapterStateNotify.NeedBeginTime, 1);
    }
    set need_begin_time(value) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_need_begin_time() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get chapter_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set chapter_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new ChapterStateNotify({});
        if (data.chapter_state != null) {
            message.chapter_state = data.chapter_state;
        }
        if (data.need_player_level != null) {
            message.need_player_level = ChapterStateNotify.NeedPlayerLevel.fromObject(data.need_player_level);
        }
        if (data.need_begin_time != null) {
            message.need_begin_time = ChapterStateNotify.NeedBeginTime.fromObject(data.need_begin_time);
        }
        if (data.chapter_id != null) {
            message.chapter_id = data.chapter_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.chapter_state != null) {
            data.chapter_state = this.chapter_state;
        }
        if (this.need_player_level != null) {
            data.need_player_level = this.need_player_level.toObject();
        }
        if (this.need_begin_time != null) {
            data.need_begin_time = this.need_begin_time.toObject();
        }
        if (this.chapter_id != null) {
            data.chapter_id = this.chapter_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.chapter_state != dependency_1.ChapterState.CHAPTER_STATE_INVALID)
            writer.writeEnum(9, this.chapter_state);
        if (this.has_need_player_level)
            writer.writeMessage(10, this.need_player_level, () => this.need_player_level.serialize(writer));
        if (this.has_need_begin_time)
            writer.writeMessage(1, this.need_begin_time, () => this.need_begin_time.serialize(writer));
        if (this.chapter_id != 0)
            writer.writeUint32(2, this.chapter_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChapterStateNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.chapter_state = reader.readEnum();
                    break;
                case 10:
                    reader.readMessage(message.need_player_level, () => message.need_player_level = ChapterStateNotify.NeedPlayerLevel.deserialize(reader));
                    break;
                case 1:
                    reader.readMessage(message.need_begin_time, () => message.need_begin_time = ChapterStateNotify.NeedBeginTime.deserialize(reader));
                    break;
                case 2:
                    message.chapter_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ChapterStateNotify.deserialize(bytes);
    }
}
exports.ChapterStateNotify = ChapterStateNotify;
_ChapterStateNotify_one_of_decls = new WeakMap();
(function (ChapterStateNotify) {
    var _NeedPlayerLevel_one_of_decls, _NeedBeginTime_one_of_decls;
    class NeedPlayerLevel extends pb_1.Message {
        constructor(data) {
            super();
            _NeedPlayerLevel_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NeedPlayerLevel_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_limit" in data && data.is_limit != undefined) {
                    this.is_limit = data.is_limit;
                }
                if ("config_need_player_level" in data && data.config_need_player_level != undefined) {
                    this.config_need_player_level = data.config_need_player_level;
                }
            }
        }
        get is_limit() {
            return pb_1.Message.getFieldWithDefault(this, 2, false);
        }
        set is_limit(value) {
            pb_1.Message.setField(this, 2, value);
        }
        get config_need_player_level() {
            return pb_1.Message.getFieldWithDefault(this, 11, 0);
        }
        set config_need_player_level(value) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data) {
            const message = new NeedPlayerLevel({});
            if (data.is_limit != null) {
                message.is_limit = data.is_limit;
            }
            if (data.config_need_player_level != null) {
                message.config_need_player_level = data.config_need_player_level;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.is_limit != null) {
                data.is_limit = this.is_limit;
            }
            if (this.config_need_player_level != null) {
                data.config_need_player_level = this.config_need_player_level;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_limit != false)
                writer.writeBool(2, this.is_limit);
            if (this.config_need_player_level != 0)
                writer.writeUint32(11, this.config_need_player_level);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NeedPlayerLevel();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 2:
                        message.is_limit = reader.readBool();
                        break;
                    case 11:
                        message.config_need_player_level = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NeedPlayerLevel.deserialize(bytes);
        }
    }
    _NeedPlayerLevel_one_of_decls = new WeakMap();
    ChapterStateNotify.NeedPlayerLevel = NeedPlayerLevel;
    class NeedBeginTime extends pb_1.Message {
        constructor(data) {
            super();
            _NeedBeginTime_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _NeedBeginTime_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("config_need_begin_time" in data && data.config_need_begin_time != undefined) {
                    this.config_need_begin_time = data.config_need_begin_time;
                }
                if ("is_limit" in data && data.is_limit != undefined) {
                    this.is_limit = data.is_limit;
                }
            }
        }
        get config_need_begin_time() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0);
        }
        set config_need_begin_time(value) {
            pb_1.Message.setField(this, 3, value);
        }
        get is_limit() {
            return pb_1.Message.getFieldWithDefault(this, 7, false);
        }
        set is_limit(value) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data) {
            const message = new NeedBeginTime({});
            if (data.config_need_begin_time != null) {
                message.config_need_begin_time = data.config_need_begin_time;
            }
            if (data.is_limit != null) {
                message.is_limit = data.is_limit;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.config_need_begin_time != null) {
                data.config_need_begin_time = this.config_need_begin_time;
            }
            if (this.is_limit != null) {
                data.is_limit = this.is_limit;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.config_need_begin_time != 0)
                writer.writeUint32(3, this.config_need_begin_time);
            if (this.is_limit != false)
                writer.writeBool(7, this.is_limit);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NeedBeginTime();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 3:
                        message.config_need_begin_time = reader.readUint32();
                        break;
                    case 7:
                        message.is_limit = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return NeedBeginTime.deserialize(bytes);
        }
    }
    _NeedBeginTime_one_of_decls = new WeakMap();
    ChapterStateNotify.NeedBeginTime = NeedBeginTime;
})(ChapterStateNotify = exports.ChapterStateNotify || (exports.ChapterStateNotify = {}));
