// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "FoundationInfo.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FoundationStatus } from "./FoundationStatus";
/**
 * @generated from protobuf message com.midnights.game.FoundationInfo
 */
export interface FoundationInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.FoundationStatus status = 1;
     */
    status?: FoundationStatus;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 2;
     */
    uidList: number[];
    /**
     * @generated from protobuf field: optional uint32 current_building_id = 3;
     */
    currentBuildingId?: number;
    /**
     * @generated from protobuf field: optional uint32 locked_by_uid = 4;
     */
    lockedByUid?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class FoundationInfo$Type extends MessageType<FoundationInfo> {
    constructor() {
        super("com.midnights.game.FoundationInfo", [
            { no: 1, name: "status", kind: "enum", opt: true, T: () => ["com.midnights.game.FoundationStatus", FoundationStatus, "FOUNDATION_STATUS_"] },
            { no: 2, name: "uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "current_building_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "locked_by_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FoundationInfo>): FoundationInfo {
        const message = { uidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FoundationInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FoundationInfo): FoundationInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.FoundationStatus status */ 1:
                    message.status = reader.int32();
                    break;
                case /* repeated uint32 uid_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                case /* optional uint32 current_building_id */ 3:
                    message.currentBuildingId = reader.uint32();
                    break;
                case /* optional uint32 locked_by_uid */ 4:
                    message.lockedByUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FoundationInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.FoundationStatus status = 1; */
        if (message.status !== undefined)
            writer.tag(1, WireType.Varint).int32(message.status);
        /* repeated uint32 uid_list = 2; */
        if (message.uidList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uidList.length; i++)
                writer.uint32(message.uidList[i]);
            writer.join();
        }
        /* optional uint32 current_building_id = 3; */
        if (message.currentBuildingId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.currentBuildingId);
        /* optional uint32 locked_by_uid = 4; */
        if (message.lockedByUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.lockedByUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FoundationInfo
 */
export const FoundationInfo = new FoundationInfo$Type();
