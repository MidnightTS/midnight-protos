"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InvestigationTarget_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InvestigationTarget = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InvestigationTarget.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class InvestigationTarget extends pb_1.Message {
    constructor(data) {
        super();
        _InvestigationTarget_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _InvestigationTarget_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("quest_id" in data && data.quest_id != undefined) {
                this.quest_id = data.quest_id;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("progress" in data && data.progress != undefined) {
                this.progress = data.progress;
            }
            if ("total_progress" in data && data.total_progress != undefined) {
                this.total_progress = data.total_progress;
            }
            if ("investigation_id" in data && data.investigation_id != undefined) {
                this.investigation_id = data.investigation_id;
            }
        }
    }
    get quest_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set quest_id(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 2, InvestigationTarget.State.STATE_INVALID);
    }
    set state(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get progress() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set progress(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get total_progress() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set total_progress(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get investigation_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set investigation_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new InvestigationTarget({});
        if (data.quest_id != null) {
            message.quest_id = data.quest_id;
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.progress != null) {
            message.progress = data.progress;
        }
        if (data.total_progress != null) {
            message.total_progress = data.total_progress;
        }
        if (data.investigation_id != null) {
            message.investigation_id = data.investigation_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.quest_id != null) {
            data.quest_id = this.quest_id;
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.progress != null) {
            data.progress = this.progress;
        }
        if (this.total_progress != null) {
            data.total_progress = this.total_progress;
        }
        if (this.investigation_id != null) {
            data.investigation_id = this.investigation_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.quest_id != 0)
            writer.writeUint32(15, this.quest_id);
        if (this.state != InvestigationTarget.State.STATE_INVALID)
            writer.writeEnum(2, this.state);
        if (this.progress != 0)
            writer.writeUint32(8, this.progress);
        if (this.total_progress != 0)
            writer.writeUint32(7, this.total_progress);
        if (this.investigation_id != 0)
            writer.writeUint32(3, this.investigation_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InvestigationTarget();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.quest_id = reader.readUint32();
                    break;
                case 2:
                    message.state = reader.readEnum();
                    break;
                case 8:
                    message.progress = reader.readUint32();
                    break;
                case 7:
                    message.total_progress = reader.readUint32();
                    break;
                case 3:
                    message.investigation_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return InvestigationTarget.deserialize(bytes);
    }
}
exports.InvestigationTarget = InvestigationTarget;
_InvestigationTarget_one_of_decls = new WeakMap();
(function (InvestigationTarget) {
    let State;
    (function (State) {
        State[State["STATE_INVALID"] = 0] = "STATE_INVALID";
        State[State["STATE_IN_PROGRESS"] = 1] = "STATE_IN_PROGRESS";
        State[State["STATE_COMPLETE"] = 2] = "STATE_COMPLETE";
        State[State["STATE_REWARD_TAKEN"] = 3] = "STATE_REWARD_TAKEN";
    })(State = InvestigationTarget.State || (InvestigationTarget.State = {}));
})(InvestigationTarget = exports.InvestigationTarget || (exports.InvestigationTarget = {}));
