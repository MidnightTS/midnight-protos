/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetPlayerMpModeAvailabilityRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GetPlayerMpModeAvailabilityRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mp_ret?: number;
        retcode?: number;
        param_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mp_ret" in data && data.mp_ret != undefined) {
                this.mp_ret = data.mp_ret;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("param_list" in data && data.param_list != undefined) {
                this.param_list = data.param_list;
            }
        }
    }
    get mp_ret() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mp_ret(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get param_list() {
        return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
    }
    set param_list(value: number[]) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        mp_ret?: number;
        retcode?: number;
        param_list?: number[];
    }): GetPlayerMpModeAvailabilityRsp {
        const message = new GetPlayerMpModeAvailabilityRsp({});
        if (data.mp_ret != null) {
            message.mp_ret = data.mp_ret;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.param_list != null) {
            message.param_list = data.param_list;
        }
        return message;
    }
    toObject() {
        const data: {
            mp_ret?: number;
            retcode?: number;
            param_list?: number[];
        } = {};
        if (this.mp_ret != null) {
            data.mp_ret = this.mp_ret;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.param_list != null) {
            data.param_list = this.param_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mp_ret != 0)
            writer.writeInt32(15, this.mp_ret);
        if (this.retcode != 0)
            writer.writeInt32(2, this.retcode);
        if (this.param_list.length)
            writer.writePackedUint32(8, this.param_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetPlayerMpModeAvailabilityRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetPlayerMpModeAvailabilityRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.mp_ret = reader.readInt32();
                    break;
                case 2:
                    message.retcode = reader.readInt32();
                    break;
                case 8:
                    message.param_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetPlayerMpModeAvailabilityRsp {
        return GetPlayerMpModeAvailabilityRsp.deserialize(bytes);
    }
}
