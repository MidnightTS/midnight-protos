// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "EvtSetAttackTargetInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message EvtSetAttackTargetInfo
 */
export interface EvtSetAttackTargetInfo {
    /**
     * @generated from protobuf field: uint32 attack_target_id = 6;
     */
    attackTargetId: number;
    /**
     * @generated from protobuf field: uint32 select_point_index = 3;
     */
    selectPointIndex: number;
    /**
     * @generated from protobuf field: uint32 entity_id = 2;
     */
    entityId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class EvtSetAttackTargetInfo$Type extends MessageType<EvtSetAttackTargetInfo> {
    constructor() {
        super("EvtSetAttackTargetInfo", [
            { no: 6, name: "attack_target_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "select_point_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EvtSetAttackTargetInfo>): EvtSetAttackTargetInfo {
        const message = { attackTargetId: 0, selectPointIndex: 0, entityId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EvtSetAttackTargetInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EvtSetAttackTargetInfo): EvtSetAttackTargetInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 attack_target_id */ 6:
                    message.attackTargetId = reader.uint32();
                    break;
                case /* uint32 select_point_index */ 3:
                    message.selectPointIndex = reader.uint32();
                    break;
                case /* uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EvtSetAttackTargetInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 attack_target_id = 6; */
        if (message.attackTargetId !== 0)
            writer.tag(6, WireType.Varint).uint32(message.attackTargetId);
        /* uint32 select_point_index = 3; */
        if (message.selectPointIndex !== 0)
            writer.tag(3, WireType.Varint).uint32(message.selectPointIndex);
        /* uint32 entity_id = 2; */
        if (message.entityId !== 0)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message EvtSetAttackTargetInfo
 */
export const EvtSetAttackTargetInfo = new EvtSetAttackTargetInfo$Type();
