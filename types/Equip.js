"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _Equip_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.Equip = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: Equip.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Reliquary");
const dependency_2 = require("./Weapon");
const pb_1 = require("google-protobuf");
class Equip extends pb_1.Message {
    constructor(data) {
        super();
        _Equip_one_of_decls.set(this, [[1, 2]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _Equip_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_locked" in data && data.is_locked != undefined) {
                this.is_locked = data.is_locked;
            }
            if ("reliquary" in data && data.reliquary != undefined) {
                this.reliquary = data.reliquary;
            }
            if ("weapon" in data && data.weapon != undefined) {
                this.weapon = data.weapon;
            }
        }
    }
    get is_locked() {
        return pb_1.Message.getFieldWithDefault(this, 3, false);
    }
    set is_locked(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get reliquary() {
        return pb_1.Message.getWrapperField(this, dependency_1.Reliquary, 1);
    }
    set reliquary(value) {
        pb_1.Message.setOneofWrapperField(this, 1, __classPrivateFieldGet(this, _Equip_one_of_decls, "f")[0], value);
    }
    get has_reliquary() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get weapon() {
        return pb_1.Message.getWrapperField(this, dependency_2.Weapon, 2);
    }
    set weapon(value) {
        pb_1.Message.setOneofWrapperField(this, 2, __classPrivateFieldGet(this, _Equip_one_of_decls, "f")[0], value);
    }
    get has_weapon() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get detail() {
        const cases = {
            0: "none",
            1: "reliquary",
            2: "weapon"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1, 2])];
    }
    static fromObject(data) {
        const message = new Equip({});
        if (data.is_locked != null) {
            message.is_locked = data.is_locked;
        }
        if (data.reliquary != null) {
            message.reliquary = dependency_1.Reliquary.fromObject(data.reliquary);
        }
        if (data.weapon != null) {
            message.weapon = dependency_2.Weapon.fromObject(data.weapon);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.is_locked != null) {
            data.is_locked = this.is_locked;
        }
        if (this.reliquary != null) {
            data.reliquary = this.reliquary.toObject();
        }
        if (this.weapon != null) {
            data.weapon = this.weapon.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_locked != false)
            writer.writeBool(3, this.is_locked);
        if (this.has_reliquary)
            writer.writeMessage(1, this.reliquary, () => this.reliquary.serialize(writer));
        if (this.has_weapon)
            writer.writeMessage(2, this.weapon, () => this.weapon.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Equip();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.is_locked = reader.readBool();
                    break;
                case 1:
                    reader.readMessage(message.reliquary, () => message.reliquary = dependency_1.Reliquary.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.weapon, () => message.weapon = dependency_2.Weapon.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return Equip.deserialize(bytes);
    }
}
exports.Equip = Equip;
_Equip_one_of_decls = new WeakMap();
