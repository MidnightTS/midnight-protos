"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AnnounceData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AnnounceData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AnnounceData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class AnnounceData extends pb_1.Message {
    constructor(data) {
        super();
        _AnnounceData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _AnnounceData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("count_down_text" in data && data.count_down_text != undefined) {
                this.count_down_text = data.count_down_text;
            }
            if ("center_system_text" in data && data.center_system_text != undefined) {
                this.center_system_text = data.center_system_text;
            }
            if ("count_down_frequency" in data && data.count_down_frequency != undefined) {
                this.count_down_frequency = data.count_down_frequency;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("begin_time" in data && data.begin_time != undefined) {
                this.begin_time = data.begin_time;
            }
            if ("center_system_frequency" in data && data.center_system_frequency != undefined) {
                this.center_system_frequency = data.center_system_frequency;
            }
            if ("dungeon_confirm_text" in data && data.dungeon_confirm_text != undefined) {
                this.dungeon_confirm_text = data.dungeon_confirm_text;
            }
            if ("is_center_system_last5_every_minutes" in data && data.is_center_system_last5_every_minutes != undefined) {
                this.is_center_system_last5_every_minutes = data.is_center_system_last5_every_minutes;
            }
            if ("end_time" in data && data.end_time != undefined) {
                this.end_time = data.end_time;
            }
        }
    }
    get count_down_text() {
        return pb_1.Message.getFieldWithDefault(this, 9, "");
    }
    set count_down_text(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get center_system_text() {
        return pb_1.Message.getFieldWithDefault(this, 8, "");
    }
    set center_system_text(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get count_down_frequency() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set count_down_frequency(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set config_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set begin_time(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get center_system_frequency() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set center_system_frequency(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get dungeon_confirm_text() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set dungeon_confirm_text(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get is_center_system_last5_every_minutes() {
        return pb_1.Message.getFieldWithDefault(this, 14, false);
    }
    set is_center_system_last5_every_minutes(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get end_time() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set end_time(value) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data) {
        const message = new AnnounceData({});
        if (data.count_down_text != null) {
            message.count_down_text = data.count_down_text;
        }
        if (data.center_system_text != null) {
            message.center_system_text = data.center_system_text;
        }
        if (data.count_down_frequency != null) {
            message.count_down_frequency = data.count_down_frequency;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.begin_time != null) {
            message.begin_time = data.begin_time;
        }
        if (data.center_system_frequency != null) {
            message.center_system_frequency = data.center_system_frequency;
        }
        if (data.dungeon_confirm_text != null) {
            message.dungeon_confirm_text = data.dungeon_confirm_text;
        }
        if (data.is_center_system_last5_every_minutes != null) {
            message.is_center_system_last5_every_minutes = data.is_center_system_last5_every_minutes;
        }
        if (data.end_time != null) {
            message.end_time = data.end_time;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.count_down_text != null) {
            data.count_down_text = this.count_down_text;
        }
        if (this.center_system_text != null) {
            data.center_system_text = this.center_system_text;
        }
        if (this.count_down_frequency != null) {
            data.count_down_frequency = this.count_down_frequency;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.begin_time != null) {
            data.begin_time = this.begin_time;
        }
        if (this.center_system_frequency != null) {
            data.center_system_frequency = this.center_system_frequency;
        }
        if (this.dungeon_confirm_text != null) {
            data.dungeon_confirm_text = this.dungeon_confirm_text;
        }
        if (this.is_center_system_last5_every_minutes != null) {
            data.is_center_system_last5_every_minutes = this.is_center_system_last5_every_minutes;
        }
        if (this.end_time != null) {
            data.end_time = this.end_time;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.count_down_text.length)
            writer.writeString(9, this.count_down_text);
        if (this.center_system_text.length)
            writer.writeString(8, this.center_system_text);
        if (this.count_down_frequency != 0)
            writer.writeUint32(1, this.count_down_frequency);
        if (this.config_id != 0)
            writer.writeUint32(7, this.config_id);
        if (this.begin_time != 0)
            writer.writeUint32(4, this.begin_time);
        if (this.center_system_frequency != 0)
            writer.writeUint32(11, this.center_system_frequency);
        if (this.dungeon_confirm_text.length)
            writer.writeString(2, this.dungeon_confirm_text);
        if (this.is_center_system_last5_every_minutes != false)
            writer.writeBool(14, this.is_center_system_last5_every_minutes);
        if (this.end_time != 0)
            writer.writeUint32(10, this.end_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnnounceData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.count_down_text = reader.readString();
                    break;
                case 8:
                    message.center_system_text = reader.readString();
                    break;
                case 1:
                    message.count_down_frequency = reader.readUint32();
                    break;
                case 7:
                    message.config_id = reader.readUint32();
                    break;
                case 4:
                    message.begin_time = reader.readUint32();
                    break;
                case 11:
                    message.center_system_frequency = reader.readUint32();
                    break;
                case 2:
                    message.dungeon_confirm_text = reader.readString();
                    break;
                case 14:
                    message.is_center_system_last5_every_minutes = reader.readBool();
                    break;
                case 10:
                    message.end_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AnnounceData.deserialize(bytes);
    }
}
exports.AnnounceData = AnnounceData;
_AnnounceData_one_of_decls = new WeakMap();
