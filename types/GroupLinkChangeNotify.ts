/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GroupLinkChangeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GroupLinkBundle";
import * as pb_1 from "google-protobuf";
export class GroupLinkChangeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        bundle?: dependency_1.GroupLinkBundle;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("bundle" in data && data.bundle != undefined) {
                this.bundle = data.bundle;
            }
        }
    }
    get bundle() {
        return pb_1.Message.getWrapperField(this, dependency_1.GroupLinkBundle, 8) as dependency_1.GroupLinkBundle;
    }
    set bundle(value: dependency_1.GroupLinkBundle) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_bundle() {
        return pb_1.Message.getField(this, 8) != null;
    }
    static fromObject(data: {
        bundle?: ReturnType<typeof dependency_1.GroupLinkBundle.prototype.toObject>;
    }): GroupLinkChangeNotify {
        const message = new GroupLinkChangeNotify({});
        if (data.bundle != null) {
            message.bundle = dependency_1.GroupLinkBundle.fromObject(data.bundle);
        }
        return message;
    }
    toObject() {
        const data: {
            bundle?: ReturnType<typeof dependency_1.GroupLinkBundle.prototype.toObject>;
        } = {};
        if (this.bundle != null) {
            data.bundle = this.bundle.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_bundle)
            writer.writeMessage(8, this.bundle, () => this.bundle.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GroupLinkChangeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GroupLinkChangeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    reader.readMessage(message.bundle, () => message.bundle = dependency_1.GroupLinkBundle.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GroupLinkChangeNotify {
        return GroupLinkChangeNotify.deserialize(bytes);
    }
}
