/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ShapeBox.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class ShapeBox extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        center?: dependency_1.Vector;
        axis_0?: dependency_1.Vector;
        axis_1?: dependency_1.Vector;
        axis_2?: dependency_1.Vector;
        extents?: dependency_1.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("center" in data && data.center != undefined) {
                this.center = data.center;
            }
            if ("axis_0" in data && data.axis_0 != undefined) {
                this.axis_0 = data.axis_0;
            }
            if ("axis_1" in data && data.axis_1 != undefined) {
                this.axis_1 = data.axis_1;
            }
            if ("axis_2" in data && data.axis_2 != undefined) {
                this.axis_2 = data.axis_2;
            }
            if ("extents" in data && data.extents != undefined) {
                this.extents = data.extents;
            }
        }
    }
    get center() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 1) as dependency_1.Vector;
    }
    set center(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_center() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get axis_0() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 2) as dependency_1.Vector;
    }
    set axis_0(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_axis_0() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get axis_1() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3) as dependency_1.Vector;
    }
    set axis_1(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_axis_1() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get axis_2() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 4) as dependency_1.Vector;
    }
    set axis_2(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_axis_2() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get extents() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 5) as dependency_1.Vector;
    }
    set extents(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_extents() {
        return pb_1.Message.getField(this, 5) != null;
    }
    static fromObject(data: {
        center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        axis_0?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        axis_1?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        axis_2?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        extents?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
    }): ShapeBox {
        const message = new ShapeBox({});
        if (data.center != null) {
            message.center = dependency_1.Vector.fromObject(data.center);
        }
        if (data.axis_0 != null) {
            message.axis_0 = dependency_1.Vector.fromObject(data.axis_0);
        }
        if (data.axis_1 != null) {
            message.axis_1 = dependency_1.Vector.fromObject(data.axis_1);
        }
        if (data.axis_2 != null) {
            message.axis_2 = dependency_1.Vector.fromObject(data.axis_2);
        }
        if (data.extents != null) {
            message.extents = dependency_1.Vector.fromObject(data.extents);
        }
        return message;
    }
    toObject() {
        const data: {
            center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            axis_0?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            axis_1?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            axis_2?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            extents?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        } = {};
        if (this.center != null) {
            data.center = this.center.toObject();
        }
        if (this.axis_0 != null) {
            data.axis_0 = this.axis_0.toObject();
        }
        if (this.axis_1 != null) {
            data.axis_1 = this.axis_1.toObject();
        }
        if (this.axis_2 != null) {
            data.axis_2 = this.axis_2.toObject();
        }
        if (this.extents != null) {
            data.extents = this.extents.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_center)
            writer.writeMessage(1, this.center, () => this.center.serialize(writer));
        if (this.has_axis_0)
            writer.writeMessage(2, this.axis_0, () => this.axis_0.serialize(writer));
        if (this.has_axis_1)
            writer.writeMessage(3, this.axis_1, () => this.axis_1.serialize(writer));
        if (this.has_axis_2)
            writer.writeMessage(4, this.axis_2, () => this.axis_2.serialize(writer));
        if (this.has_extents)
            writer.writeMessage(5, this.extents, () => this.extents.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShapeBox {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShapeBox();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.center, () => message.center = dependency_1.Vector.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.axis_0, () => message.axis_0 = dependency_1.Vector.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.axis_1, () => message.axis_1 = dependency_1.Vector.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.axis_2, () => message.axis_2 = dependency_1.Vector.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.extents, () => message.extents = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShapeBox {
        return ShapeBox.deserialize(bytes);
    }
}
