// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_dungeon.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { DungeonCandidateTeamPlayerState } from "./define";
import { AvatarInfo } from "./define";
import { PotionDungeonResultInfo } from "./cmd_activity";
import { PlayerDieOption } from "./define";
import { PlayerDieType } from "./define";
import { RoguelikeDungeonSettleInfo } from "./cmd_activity";
import { EffigyChallengeDungeonResultInfo } from "./cmd_activity";
import { ChannellerSlabLoopDungeonResultInfo } from "./cmd_activity";
import { TrialAvatarFirstPassDungeonNotify } from "./cmd_activity";
import { TowerLevelEndNotify } from "./cmd_tower";
import { ParamList } from "./define";
import { ExhibitionDisplayInfo } from "./define";
import { OnlinePlayerInfo } from "./define";
import { WeeklyBossResinDiscountInfo } from "./define";
import { Uint32Pair } from "./define";
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryInfoReq
 */
export interface DungeonEntryInfoReq {
    /**
     * @generated from protobuf field: optional uint32 point_id = 2;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 9;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.Uint32Pair scene_point_id_list = 4;
     */
    scenePointIdList: Uint32Pair[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonEntryInfoReq.CmdId
 */
export enum DungeonEntryInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 972;
     */
    CMD_ID = 972,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryInfo
 */
export interface DungeonEntryInfo {
    /**
     * @generated from protobuf field: optional uint32 end_time = 6;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 5;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 boss_chest_num = 12;
     */
    bossChestNum?: number;
    /**
     * @generated from protobuf field: optional uint32 max_boss_chest_num = 13;
     */
    maxBossChestNum?: number;
    /**
     * @generated from protobuf field: optional uint32 next_refresh_time = 11;
     */
    nextRefreshTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9;
     */
    weeklyBossResinDiscountInfo?: WeeklyBossResinDiscountInfo;
    /**
     * @generated from protobuf field: optional uint32 start_time = 15;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional bool is_passed = 4;
     */
    isPassed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 left_times = 7;
     */
    leftTimes?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryPointInfo
 */
export interface DungeonEntryPointInfo {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 12;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 6;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list = 1;
     */
    dungeonEntryList: DungeonEntryInfo[];
    /**
     * @generated from protobuf field: optional uint32 recommend_dungeon_id = 8;
     */
    recommendDungeonId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEntryInfoRsp
 */
export interface DungeonEntryInfoRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list = 12;
     */
    dungeonEntryList: DungeonEntryInfo[];
    /**
     * @generated from protobuf field: optional uint32 point_id = 15;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DungeonEntryPointInfo dungeon_entry_point_list = 4;
     */
    dungeonEntryPointList: DungeonEntryPointInfo[];
    /**
     * @generated from protobuf field: optional uint32 recommend_dungeon_id = 14;
     */
    recommendDungeonId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonEntryInfoRsp.CmdId
 */
export enum DungeonEntryInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 998;
     */
    CMD_ID = 998,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonEnterPosInfo
 */
export interface DungeonEnterPosInfo {
    /**
     * @generated from protobuf field: optional uint32 quest_id = 13;
     */
    questId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 6;
     */
    pointId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerEnterDungeonReq
 */
export interface PlayerEnterDungeonReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonEnterPosInfo enter_pos_info = 2;
     */
    enterPosInfo?: DungeonEnterPosInfo;
    /**
     * @generated from protobuf field: optional uint32 point_id = 13;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 7;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerEnterDungeonReq.CmdId
 */
export enum PlayerEnterDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 912;
     */
    CMD_ID = 912,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerEnterDungeonRsp
 */
export interface PlayerEnterDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 2;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 6;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerEnterDungeonRsp.CmdId
 */
export enum PlayerEnterDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 935;
     */
    CMD_ID = 935,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerQuitDungeonReq
 */
export interface PlayerQuitDungeonReq {
    /**
     * @generated from protobuf field: optional bool is_quit_immediately = 10;
     */
    isQuitImmediately?: boolean;
    /**
     * @generated from protobuf field: optional uint32 point_id = 7;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerQuitDungeonReq.CmdId
 */
export enum PlayerQuitDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 907;
     */
    CMD_ID = 907,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerQuitDungeonRsp
 */
export interface PlayerQuitDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 point_id = 11;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerQuitDungeonRsp.CmdId
 */
export enum PlayerQuitDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 921;
     */
    CMD_ID = 921,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonWayPointNotify
 */
export interface DungeonWayPointNotify {
    /**
     * @generated from protobuf field: optional bool is_add = 9;
     */
    isAdd?: boolean;
    /**
     * @generated from protobuf field: repeated uint32 active_way_point_list = 4;
     */
    activeWayPointList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonWayPointNotify.CmdId
 */
export enum DungeonWayPointNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 903;
     */
    CMD_ID = 903,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonWayPointActivateReq
 */
export interface DungeonWayPointActivateReq {
    /**
     * @generated from protobuf field: optional uint32 way_point_id = 3;
     */
    wayPointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonWayPointActivateReq.CmdId
 */
export enum DungeonWayPointActivateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 990;
     */
    CMD_ID = 990,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonWayPointActivateRsp
 */
export interface DungeonWayPointActivateRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 way_point_id = 7;
     */
    wayPointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonWayPointActivateRsp.CmdId
 */
export enum DungeonWayPointActivateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 973;
     */
    CMD_ID = 973,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StrengthenPointData
 */
export interface StrengthenPointData {
    /**
     * @generated from protobuf field: optional uint32 base_point = 10;
     */
    basePoint?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_point = 11;
     */
    curPoint?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonSettleExhibitionInfo
 */
export interface DungeonSettleExhibitionInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 3;
     */
    playerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExhibitionDisplayInfo card_list = 13;
     */
    cardList: ExhibitionDisplayInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.CrystalLinkDungeonSettleInfo
 */
export interface CrystalLinkDungeonSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 kill_elite_monster_num = 2;
     */
    killEliteMonsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 final_score = 6;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 12;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 13;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 difficulty_id = 9;
     */
    difficultyId?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_normal_mosnter_num = 3;
     */
    killNormalMosnterNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2DungeonSettleInfo
 */
export interface SummerTimeV2DungeonSettleInfo {
    /**
     * @generated from protobuf field: optional bool is_success = 5;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 taken_reward_count = 2;
     */
    takenRewardCount?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_dungeon_reward_limit = 11;
     */
    curDungeonRewardLimit?: number;
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayDungeonSettleInfo
 */
export interface InstableSprayDungeonSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 1;
     */
    stageId?: number;
    /**
     * @generated from protobuf field: repeated uint32 score_list = 4;
     */
    scoreList: number[];
    /**
     * @generated from protobuf field: optional bool is_new_record = 13;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 5;
     */
    difficulty?: number;
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldDungeonSettleInfo
 */
export interface WindFieldDungeonSettleInfo {
    /**
     * @generated from protobuf field: repeated uint32 after_watcher_id_list = 11;
     */
    afterWatcherIdList: number[];
    /**
     * @generated from protobuf field: repeated uint32 before_watcher_id_list = 7;
     */
    beforeWatcherIdList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.WindFieldDungeonFailReason fail_reason = 2;
     */
    failReason?: WindFieldDungeonFailReason;
}
/**
 * @generated from protobuf message com.midnights.game.EffigyChallengeV2SettleInfo
 */
export interface EffigyChallengeV2SettleInfo {
    /**
     * @generated from protobuf field: optional bool is_challenge_highest_difficulty = 7;
     */
    isChallengeHighestDifficulty?: boolean;
    /**
     * @generated from protobuf field: optional uint32 create_dungeon_player_uid = 4;
     */
    createDungeonPlayerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_mode_difficulty = 6;
     */
    challengeModeDifficulty?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record_time = 1;
     */
    isNewRecordTime?: boolean;
    /**
     * @generated from protobuf field: optional uint32 record_time = 12;
     */
    recordTime?: number;
    /**
     * @generated from protobuf field: optional uint32 first_time_finish_difficulty = 5;
     */
    firstTimeFinishDifficulty?: number;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonSettleNotify
 */
export interface DungeonSettleNotify {
    /**
     * @generated from protobuf field: optional uint32 result = 10;
     */
    result?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 13;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 14;
     */
    strengthenPointDataMap: {
        [key: number]: StrengthenPointData;
    };
    /**
     * @generated from protobuf field: repeated com.midnights.game.DungeonSettleExhibitionInfo exhibition_info_list = 8;
     */
    exhibitionInfoList: DungeonSettleExhibitionInfo[];
    /**
     * @generated from protobuf field: optional uint32 create_player_uid = 12;
     */
    createPlayerUid?: number;
    /**
     * @generated from protobuf field: repeated uint32 fail_cond_list = 11;
     */
    failCondList: number[];
    /**
     * @generated from protobuf field: optional uint32 use_time = 1;
     */
    useTime?: number;
    /**
     * @generated from protobuf field: optional uint32 close_time = 4;
     */
    closeTime?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 7;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.ParamList> settle_show = 5;
     */
    settleShow: {
        [key: number]: ParamList;
    };
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "towerLevelEndNotify";
        /**
         * @generated from protobuf field: com.midnights.game.TowerLevelEndNotify tower_level_end_notify = 351;
         */
        towerLevelEndNotify: TowerLevelEndNotify;
    } | {
        oneofKind: "trialAvatarFirstPassDungeonNotify";
        /**
         * @generated from protobuf field: com.midnights.game.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635;
         */
        trialAvatarFirstPassDungeonNotify: TrialAvatarFirstPassDungeonNotify;
    } | {
        oneofKind: "channellerSlabLoopDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686;
         */
        channellerSlabLoopDungeonResultInfo: ChannellerSlabLoopDungeonResultInfo;
    } | {
        oneofKind: "effigyChallengeDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328;
         */
        effigyChallengeDungeonResultInfo: EffigyChallengeDungeonResultInfo;
    } | {
        oneofKind: "roguelikeDungeonSettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482;
         */
        roguelikeDungeonSettleInfo: RoguelikeDungeonSettleInfo;
    } | {
        oneofKind: "crystalLinkSettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112;
         */
        crystalLinkSettleInfo: CrystalLinkDungeonSettleInfo;
    } | {
        oneofKind: "summerTimeV2DungeonSettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882;
         */
        summerTimeV2DungeonSettleInfo: SummerTimeV2DungeonSettleInfo;
    } | {
        oneofKind: "instableSpraySettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193;
         */
        instableSpraySettleInfo: InstableSprayDungeonSettleInfo;
    } | {
        oneofKind: "windFieldDungeonSettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825;
         */
        windFieldDungeonSettleInfo: WindFieldDungeonSettleInfo;
    } | {
        oneofKind: "effigyChallengeV2SettleInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802;
         */
        effigyChallengeV2SettleInfo: EffigyChallengeV2SettleInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonSettleNotify.CmdId
 */
export enum DungeonSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 999;
     */
    CMD_ID = 999,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonPlayerDieNotify
 */
export interface DungeonPlayerDieNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 15;
     */
    strengthenPointDataMap: {
        [key: number]: StrengthenPointData;
    };
    /**
     * @generated from protobuf field: optional uint32 wait_time = 1;
     */
    waitTime?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 9;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 murderer_entity_id = 13;
     */
    murdererEntityId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerDieType die_type = 3;
     */
    dieType?: PlayerDieType;
    /**
     * @generated from protobuf field: optional uint32 revive_count = 6;
     */
    reviveCount?: number;
    /**
     * @generated from protobuf oneof: entity
     */
    entity: {
        oneofKind: "monsterId";
        /**
         * @generated from protobuf field: uint32 monster_id = 4;
         */
        monsterId: number;
    } | {
        oneofKind: "gadgetId";
        /**
         * @generated from protobuf field: uint32 gadget_id = 8;
         */
        gadgetId: number;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonPlayerDieNotify.CmdId
 */
export enum DungeonPlayerDieNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 931;
     */
    CMD_ID = 931,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonDieOptionReq
 */
export interface DungeonDieOptionReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerDieOption die_option = 11;
     */
    dieOption?: PlayerDieOption;
    /**
     * @generated from protobuf field: optional bool is_quit_immediately = 14;
     */
    isQuitImmediately?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonDieOptionReq.CmdId
 */
export enum DungeonDieOptionReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 975;
     */
    CMD_ID = 975,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonDieOptionRsp
 */
export interface DungeonDieOptionRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 revive_count = 10;
     */
    reviveCount?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerDieOption die_option = 6;
     */
    dieOption?: PlayerDieOption;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonDieOptionRsp.CmdId
 */
export enum DungeonDieOptionRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 948;
     */
    CMD_ID = 948,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonShowReminderNotify
 */
export interface DungeonShowReminderNotify {
    /**
     * @generated from protobuf field: optional uint32 reminder_id = 9;
     */
    reminderId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonShowReminderNotify.CmdId
 */
export enum DungeonShowReminderNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 997;
     */
    CMD_ID = 997,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonPlayerDieReq
 */
export interface DungeonPlayerDieReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerDieType die_type = 6;
     */
    dieType?: PlayerDieType;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 8;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonPlayerDieReq.CmdId
 */
export enum DungeonPlayerDieReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 981;
     */
    CMD_ID = 981,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonPlayerDieRsp
 */
export interface DungeonPlayerDieRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonPlayerDieRsp.CmdId
 */
export enum DungeonPlayerDieRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 905;
     */
    CMD_ID = 905,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonDataNotify
 */
export interface DungeonDataNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> dungeon_data_map = 1;
     */
    dungeonDataMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonDataNotify.CmdId
 */
export enum DungeonDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 982;
     */
    CMD_ID = 982,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonChallengeBeginNotify
 */
export interface DungeonChallengeBeginNotify {
    /**
     * @generated from protobuf field: optional uint32 father_index = 5;
     */
    fatherIndex?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_list = 14;
     */
    paramList: number[];
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 6;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 1;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 4;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 12;
     */
    uidList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonChallengeBeginNotify.CmdId
 */
export enum DungeonChallengeBeginNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 947;
     */
    CMD_ID = 947,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChallengeBrief
 */
export interface ChallengeBrief {
    /**
     * @generated from protobuf field: optional uint32 cur_progress = 9;
     */
    curProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 10;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 4;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 8;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CustomDungeonResultInfo
 */
export interface CustomDungeonResultInfo {
    /**
     * @generated from protobuf field: optional bool is_liked = 12;
     */
    isLiked?: boolean;
    /**
     * @generated from protobuf field: optional uint32 got_coin_num = 9;
     */
    gotCoinNum?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChallengeBrief child_challenge_list = 6;
     */
    childChallengeList: ChallengeBrief[];
    /**
     * @generated from protobuf field: optional uint64 dungeon_guid = 3;
     */
    dungeonGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.CustomDungeonFinishType finish_type = 7;
     */
    finishType?: CustomDungeonFinishType;
    /**
     * @generated from protobuf field: optional uint32 time_cost = 11;
     */
    timeCost?: number;
    /**
     * @generated from protobuf field: optional bool is_arrive_finish = 2;
     */
    isArriveFinish?: boolean;
    /**
     * @generated from protobuf field: optional bool is_stored = 14;
     */
    isStored?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonChallengeFinishNotify
 */
export interface DungeonChallengeFinishNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 13;
     */
    strengthenPointDataMap: {
        [key: number]: StrengthenPointData;
    };
    /**
     * @generated from protobuf field: optional com.midnights.game.ChallengeFinishType finish_type = 9;
     */
    finishType?: ChallengeFinishType;
    /**
     * @generated from protobuf field: optional bool is_new_record = 10;
     */
    isNewRecord?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_record_type = 7;
     */
    challengeRecordType?: number;
    /**
     * @generated from protobuf field: optional uint32 time_cost = 4;
     */
    timeCost?: number;
    /**
     * @generated from protobuf field: optional uint32 current_value = 15;
     */
    currentValue?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 3;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 5;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "channellerSlabLoopDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521;
         */
        channellerSlabLoopDungeonResultInfo: ChannellerSlabLoopDungeonResultInfo;
    } | {
        oneofKind: "effigyChallengeDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627;
         */
        effigyChallengeDungeonResultInfo: EffigyChallengeDungeonResultInfo;
    } | {
        oneofKind: "potionDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.PotionDungeonResultInfo potion_dungeon_result_info = 1824;
         */
        potionDungeonResultInfo: PotionDungeonResultInfo;
    } | {
        oneofKind: "customDungeonResultInfo";
        /**
         * @generated from protobuf field: com.midnights.game.CustomDungeonResultInfo custom_dungeon_result_info = 1664;
         */
        customDungeonResultInfo: CustomDungeonResultInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonChallengeFinishNotify.CmdId
 */
export enum DungeonChallengeFinishNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 939;
     */
    CMD_ID = 939,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChallengeDataNotify
 */
export interface ChallengeDataNotify {
    /**
     * @generated from protobuf field: optional uint32 value = 8;
     */
    value?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 2;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 param_index = 9;
     */
    paramIndex?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChallengeDataNotify.CmdId
 */
export enum ChallengeDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 953;
     */
    CMD_ID = 953,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonFollowNotify
 */
export interface DungeonFollowNotify {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 8;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonFollowNotify.CmdId
 */
export enum DungeonFollowNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 922;
     */
    CMD_ID = 922,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonGetStatueDropReq
 */
export interface DungeonGetStatueDropReq {
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonGetStatueDropReq.CmdId
 */
export enum DungeonGetStatueDropReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 965;
     */
    CMD_ID = 965,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonGetStatueDropRsp
 */
export interface DungeonGetStatueDropRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonGetStatueDropRsp.CmdId
 */
export enum DungeonGetStatueDropRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 904;
     */
    CMD_ID = 904,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChallengeRecord
 */
export interface ChallengeRecord {
    /**
     * @generated from protobuf field: optional uint32 challenge_record_type = 14;
     */
    challengeRecordType?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 15;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 1;
     */
    challengeId?: number;
    /**
     * @generated from protobuf field: optional uint32 best_value = 8;
     */
    bestValue?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ChallengeRecordNotify
 */
export interface ChallengeRecordNotify {
    /**
     * @generated from protobuf field: optional uint32 group_id = 2;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ChallengeRecord challenge_record_list = 5;
     */
    challengeRecordList: ChallengeRecord[];
}
/**
 * @generated from protobuf enum com.midnights.game.ChallengeRecordNotify.CmdId
 */
export enum ChallengeRecordNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 993;
     */
    CMD_ID = 993,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamAvatar
 */
export interface DungeonCandidateTeamAvatar {
    /**
     * @generated from protobuf field: optional uint32 player_uid = 2;
     */
    playerUid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AvatarInfo avatar_info = 6;
     */
    avatarInfo?: AvatarInfo;
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamInfoNotify
 */
export interface DungeonCandidateTeamInfoNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.DungeonCandidateTeamPlayerState> player_state_map = 10;
     */
    playerStateMap: {
        [key: number]: DungeonCandidateTeamPlayerState;
    };
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 9;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: repeated uint32 ready_player_uid = 13;
     */
    readyPlayerUid: number[];
    /**
     * @generated from protobuf field: optional uint32 match_type = 2;
     */
    matchType?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DungeonCandidateTeamAvatar avatar_list = 4;
     */
    avatarList: DungeonCandidateTeamAvatar[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamInfoNotify.CmdId
 */
export enum DungeonCandidateTeamInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 927;
     */
    CMD_ID = 927,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamInviteNotify
 */
export interface DungeonCandidateTeamInviteNotify {
    /**
     * @generated from protobuf field: optional uint32 player_uid = 5;
     */
    playerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 vaild_deadline_time_sec = 9;
     */
    vaildDeadlineTimeSec?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 6;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamInviteNotify.CmdId
 */
export enum DungeonCandidateTeamInviteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 994;
     */
    CMD_ID = 994,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamRefuseNotify
 */
export interface DungeonCandidateTeamRefuseNotify {
    /**
     * @generated from protobuf field: optional uint32 player_uid = 3;
     */
    playerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamRefuseNotify.CmdId
 */
export enum DungeonCandidateTeamRefuseNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 988;
     */
    CMD_ID = 988,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamPlayerLeaveNotify
 */
export interface DungeonCandidateTeamPlayerLeaveNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonCandidateTeamPlayerLeaveReason reason = 3;
     */
    reason?: DungeonCandidateTeamPlayerLeaveReason;
    /**
     * @generated from protobuf field: optional uint32 player_uid = 13;
     */
    playerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamPlayerLeaveNotify.CmdId
 */
export enum DungeonCandidateTeamPlayerLeaveNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 926;
     */
    CMD_ID = 926,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamDismissNotify
 */
export interface DungeonCandidateTeamDismissNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonCandidateTeamDismissReason reason = 9;
     */
    reason?: DungeonCandidateTeamDismissReason;
    /**
     * @generated from protobuf field: optional uint32 player_uid = 12;
     */
    playerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamDismissNotify.CmdId
 */
export enum DungeonCandidateTeamDismissNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 963;
     */
    CMD_ID = 963,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamCreateReq
 */
export interface DungeonCandidateTeamCreateReq {
    /**
     * @generated from protobuf field: optional uint32 point_id = 7;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 6;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamCreateReq.CmdId
 */
export enum DungeonCandidateTeamCreateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 995;
     */
    CMD_ID = 995,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamCreateRsp
 */
export interface DungeonCandidateTeamCreateRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamCreateRsp.CmdId
 */
export enum DungeonCandidateTeamCreateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 906;
     */
    CMD_ID = 906,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamInviteReq
 */
export interface DungeonCandidateTeamInviteReq {
    /**
     * @generated from protobuf field: repeated uint32 player_uids = 5;
     */
    playerUids: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamInviteReq.CmdId
 */
export enum DungeonCandidateTeamInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 934;
     */
    CMD_ID = 934,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamInviteRsp
 */
export interface DungeonCandidateTeamInviteRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 invalid_player_uids = 7;
     */
    invalidPlayerUids: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamInviteRsp.CmdId
 */
export enum DungeonCandidateTeamInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 950;
     */
    CMD_ID = 950,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamKickReq
 */
export interface DungeonCandidateTeamKickReq {
    /**
     * @generated from protobuf field: optional uint32 player_uid = 9;
     */
    playerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamKickReq.CmdId
 */
export enum DungeonCandidateTeamKickReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 943;
     */
    CMD_ID = 943,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamKickRsp
 */
export interface DungeonCandidateTeamKickRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamKickRsp.CmdId
 */
export enum DungeonCandidateTeamKickRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 974;
     */
    CMD_ID = 974,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamLeaveReq
 */
export interface DungeonCandidateTeamLeaveReq {
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamLeaveReq.CmdId
 */
export enum DungeonCandidateTeamLeaveReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 976;
     */
    CMD_ID = 976,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamLeaveRsp
 */
export interface DungeonCandidateTeamLeaveRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamLeaveRsp.CmdId
 */
export enum DungeonCandidateTeamLeaveRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 946;
     */
    CMD_ID = 946,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamReplyInviteReq
 */
export interface DungeonCandidateTeamReplyInviteReq {
    /**
     * @generated from protobuf field: optional bool is_accept = 5;
     */
    isAccept?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamReplyInviteReq.CmdId
 */
export enum DungeonCandidateTeamReplyInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 941;
     */
    CMD_ID = 941,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamReplyInviteRsp
 */
export interface DungeonCandidateTeamReplyInviteRsp {
    /**
     * @generated from protobuf field: optional bool is_trans_point = 4;
     */
    isTransPoint?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamReplyInviteRsp.CmdId
 */
export enum DungeonCandidateTeamReplyInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 949;
     */
    CMD_ID = 949,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamSetReadyReq
 */
export interface DungeonCandidateTeamSetReadyReq {
    /**
     * @generated from protobuf field: optional bool is_ready = 15;
     */
    isReady?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamSetReadyReq.CmdId
 */
export enum DungeonCandidateTeamSetReadyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 991;
     */
    CMD_ID = 991,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamSetReadyRsp
 */
export interface DungeonCandidateTeamSetReadyRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamSetReadyRsp.CmdId
 */
export enum DungeonCandidateTeamSetReadyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 924;
     */
    CMD_ID = 924,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamChangeAvatarReq
 */
export interface DungeonCandidateTeamChangeAvatarReq {
    /**
     * @generated from protobuf field: repeated uint64 avatar_guid_list = 5;
     */
    avatarGuidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamChangeAvatarReq.CmdId
 */
export enum DungeonCandidateTeamChangeAvatarReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 956;
     */
    CMD_ID = 956,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamChangeAvatarRsp
 */
export interface DungeonCandidateTeamChangeAvatarRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamChangeAvatarRsp.CmdId
 */
export enum DungeonCandidateTeamChangeAvatarRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 942;
     */
    CMD_ID = 942,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyDungeonEntryInfo
 */
export interface DailyDungeonEntryInfo {
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_config_id = 12;
     */
    dungeonEntryConfigId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_entry_id = 15;
     */
    dungeonEntryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.DungeonEntryInfo recommend_dungeon_entry_info = 1;
     */
    recommendDungeonEntryInfo?: DungeonEntryInfo;
    /**
     * @generated from protobuf field: optional uint32 recommend_dungeon_id = 4;
     */
    recommendDungeonId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetDailyDungeonEntryInfoReq
 */
export interface GetDailyDungeonEntryInfoReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 15;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetDailyDungeonEntryInfoReq.CmdId
 */
export enum GetDailyDungeonEntryInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 930;
     */
    CMD_ID = 930,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetDailyDungeonEntryInfoRsp
 */
export interface GetDailyDungeonEntryInfoRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.DailyDungeonEntryInfo daily_dungeon_info_list = 2;
     */
    dailyDungeonInfoList: DailyDungeonEntryInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetDailyDungeonEntryInfoRsp.CmdId
 */
export enum GetDailyDungeonEntryInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 967;
     */
    CMD_ID = 967,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonSlipRevivePointActivateReq
 */
export interface DungeonSlipRevivePointActivateReq {
    /**
     * @generated from protobuf field: optional uint32 slip_revive_point_id = 9;
     */
    slipRevivePointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonSlipRevivePointActivateReq.CmdId
 */
export enum DungeonSlipRevivePointActivateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 958;
     */
    CMD_ID = 958,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonSlipRevivePointActivateRsp
 */
export interface DungeonSlipRevivePointActivateRsp {
    /**
     * @generated from protobuf field: optional uint32 slip_revive_point_id = 14;
     */
    slipRevivePointId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonSlipRevivePointActivateRsp.CmdId
 */
export enum DungeonSlipRevivePointActivateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 970;
     */
    CMD_ID = 970,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonInterruptChallengeReq
 */
export interface DungeonInterruptChallengeReq {
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 14;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 13;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 11;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonInterruptChallengeReq.CmdId
 */
export enum DungeonInterruptChallengeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 917;
     */
    CMD_ID = 917,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonInterruptChallengeRsp
 */
export interface DungeonInterruptChallengeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_index = 2;
     */
    challengeIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 group_id = 15;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_id = 11;
     */
    challengeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonInterruptChallengeRsp.CmdId
 */
export enum DungeonInterruptChallengeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 902;
     */
    CMD_ID = 902,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InteractDailyDungeonInfoNotify
 */
export interface InteractDailyDungeonInfoNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.InteractDailyDungeonInfoNotify.CmdId
 */
export enum InteractDailyDungeonInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 919;
     */
    CMD_ID = 919,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartReq
 */
export interface DungeonRestartReq {
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartReq.CmdId
 */
export enum DungeonRestartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 961;
     */
    CMD_ID = 961,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartRsp
 */
export interface DungeonRestartRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 15;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 14;
     */
    pointId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartRsp.CmdId
 */
export enum DungeonRestartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 929;
     */
    CMD_ID = 929,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartInviteNotify
 */
export interface DungeonRestartInviteNotify {
    /**
     * @generated from protobuf field: optional uint32 player_uid = 3;
     */
    playerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 cd = 15;
     */
    cd?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 13;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 10;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartInviteNotify.CmdId
 */
export enum DungeonRestartInviteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 957;
     */
    CMD_ID = 957,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartInviteReplyReq
 */
export interface DungeonRestartInviteReplyReq {
    /**
     * @generated from protobuf field: optional bool is_accept = 11;
     */
    isAccept?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartInviteReplyReq.CmdId
 */
export enum DungeonRestartInviteReplyReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1000;
     */
    CMD_ID = 1000,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartInviteReplyRsp
 */
export interface DungeonRestartInviteReplyRsp {
    /**
     * @generated from protobuf field: optional bool is_accept = 10;
     */
    isAccept?: boolean;
    /**
     * @generated from protobuf field: optional bool is_trans_point = 1;
     */
    isTransPoint?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartInviteReplyRsp.CmdId
 */
export enum DungeonRestartInviteReplyRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 916;
     */
    CMD_ID = 916,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartInviteReplyNotify
 */
export interface DungeonRestartInviteReplyNotify {
    /**
     * @generated from protobuf field: optional bool is_accept = 6;
     */
    isAccept?: boolean;
    /**
     * @generated from protobuf field: optional uint32 player_uid = 9;
     */
    playerUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartInviteReplyNotify.CmdId
 */
export enum DungeonRestartInviteReplyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 987;
     */
    CMD_ID = 987,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonRestartResultNotify
 */
export interface DungeonRestartResultNotify {
    /**
     * @generated from protobuf field: optional bool is_add_accpet = 9;
     */
    isAddAccpet?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartResultNotify.CmdId
 */
export enum DungeonRestartResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 940;
     */
    CMD_ID = 940,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamSetChangingAvatarReq
 */
export interface DungeonCandidateTeamSetChangingAvatarReq {
    /**
     * @generated from protobuf field: optional bool is_changing_avatar = 12;
     */
    isChangingAvatar?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamSetChangingAvatarReq.CmdId
 */
export enum DungeonCandidateTeamSetChangingAvatarReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 918;
     */
    CMD_ID = 918,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonCandidateTeamSetChangingAvatarRsp
 */
export interface DungeonCandidateTeamSetChangingAvatarRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamSetChangingAvatarRsp.CmdId
 */
export enum DungeonCandidateTeamSetChangingAvatarRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 966;
     */
    CMD_ID = 966,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MistTrialFloorLevelNotify
 */
export interface MistTrialFloorLevelNotify {
    /**
     * @generated from protobuf field: optional uint32 floor_level = 7;
     */
    floorLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_scene_id = 14;
     */
    dungeonSceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MistTrialFloorLevelNotify.CmdId
 */
export enum MistTrialFloorLevelNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 968;
     */
    CMD_ID = 968,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DungeonReviseLevelNotify
 */
export interface DungeonReviseLevelNotify {
    /**
     * @generated from protobuf field: optional uint32 scene_level = 5;
     */
    sceneLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 revise_level = 10;
     */
    reviseLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 3;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonReviseLevelNotify.CmdId
 */
export enum DungeonReviseLevelNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 933;
     */
    CMD_ID = 933,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.WindFieldDungeonFailReason
 */
export enum WindFieldDungeonFailReason {
    /**
     * @generated from protobuf enum value: WIND_FIELD_DUNGEON_FAIL_NONE = 0;
     */
    WIND_FIELD_DUNGEON_FAIL_NONE = 0,
    /**
     * @generated from protobuf enum value: WIND_FIELD_DUNGEON_FAIL_CANCEL = 1;
     */
    WIND_FIELD_DUNGEON_FAIL_CANCEL = 1,
    /**
     * @generated from protobuf enum value: WIND_FIELD_DUNGEON_FAIL_TIMEOUT = 2;
     */
    WIND_FIELD_DUNGEON_FAIL_TIMEOUT = 2,
    /**
     * @generated from protobuf enum value: WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE = 3;
     */
    WIND_FIELD_DUNGEON_FAIL_ALL_AVATAR_DIE = 3,
    /**
     * @generated from protobuf enum value: WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT = 4;
     */
    WIND_FIELD_DUNGEON_FAIL_LUA_INTERRUPT = 4
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonDataType
 */
export enum DungeonDataType {
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_NONE = 0;
     */
    DUNGEON_DATA_NONE = 0,
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_END_TIME = 1;
     */
    DUNGEON_DATA_END_TIME = 1,
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_MONSTER_DIE_COUNT = 2;
     */
    DUNGEON_DATA_MONSTER_DIE_COUNT = 2,
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_LEVEL_CONFIG_ID = 3;
     */
    DUNGEON_DATA_LEVEL_CONFIG_ID = 3,
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID = 4;
     */
    DUNGEON_DATA_TOWER_MONTHLY_LEVEL_CONFIG_ID = 4,
    /**
     * @generated from protobuf enum value: DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID = 5;
     */
    DUNGEON_DATA_TOWER_FLOOR_LEVEL_CONFIG_ID = 5
}
/**
 * @generated from protobuf enum com.midnights.game.ChallengeFinishType
 */
export enum ChallengeFinishType {
    /**
     * @generated from protobuf enum value: CHALLENGE_FINISH_TYPE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CHALLENGE_FINISH_TYPE_FAIL = 1;
     */
    FAIL = 1,
    /**
     * @generated from protobuf enum value: CHALLENGE_FINISH_TYPE_SUCC = 2;
     */
    SUCC = 2,
    /**
     * @generated from protobuf enum value: CHALLENGE_FINISH_TYPE_PAUSE = 3;
     */
    PAUSE = 3
}
/**
 * @generated from protobuf enum com.midnights.game.CustomDungeonFinishType
 */
export enum CustomDungeonFinishType {
    /**
     * @generated from protobuf enum value: CUSTOM_DUNGEON_FINISH_PLAY_NORMAL = 0;
     */
    CUSTOM_DUNGEON_FINISH_PLAY_NORMAL = 0,
    /**
     * @generated from protobuf enum value: CUSTOM_DUNGEON_FINISH_PLAY_TRY = 1;
     */
    CUSTOM_DUNGEON_FINISH_PLAY_TRY = 1,
    /**
     * @generated from protobuf enum value: CUSTOM_DUNGEON_FINISH_EDIT_TRY = 2;
     */
    CUSTOM_DUNGEON_FINISH_EDIT_TRY = 2,
    /**
     * @generated from protobuf enum value: CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL = 3;
     */
    CUSTOM_DUNGEON_FINISH_SELF_PLAY_NORMAL = 3
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamPlayerLeaveReason
 */
export enum DungeonCandidateTeamPlayerLeaveReason {
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPLR_NORMAL = 0;
     */
    DUNGEON_CANDIDATE_TPLR_NORMAL = 0,
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPLR_DIE = 1;
     */
    DUNGEON_CANDIDATE_TPLR_DIE = 1,
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPLR_BE_KICK = 2;
     */
    DUNGEON_CANDIDATE_TPLR_BE_KICK = 2,
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_DISCONNECT = 3;
     */
    DUNGEON_CANDIDATE_DISCONNECT = 3
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonCandidateTeamDismissReason
 */
export enum DungeonCandidateTeamDismissReason {
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPDR_NORMAL = 0;
     */
    DUNGEON_CANDIDATE_TPDR_NORMAL = 0,
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPDR_DIE = 1;
     */
    DUNGEON_CANDIDATE_TPDR_DIE = 1,
    /**
     * @generated from protobuf enum value: DUNGEON_CANDIDATE_TPDR_DISCONNECT = 2;
     */
    DUNGEON_CANDIDATE_TPDR_DISCONNECT = 2
}
/**
 * @generated from protobuf enum com.midnights.game.DungeonRestartReason
 */
export enum DungeonRestartReason {
    /**
     * @generated from protobuf enum value: DUNGEON_RESTART_REASON_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: DUNGEON_RESTART_REASON_DAILY_RESTART = 1;
     */
    DAILY_RESTART = 1,
    /**
     * @generated from protobuf enum value: DUNGEON_RESTART_REASON_DIE_RETRY = 2;
     */
    DIE_RETRY = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryInfoReq$Type extends MessageType<DungeonEntryInfoReq> {
    constructor() {
        super("com.midnights.game.DungeonEntryInfoReq", [
            { no: 2, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "scene_point_id_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Uint32Pair }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryInfoReq>): DungeonEntryInfoReq {
        const message = { scenePointIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryInfoReq): DungeonEntryInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 2:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 9:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.Uint32Pair scene_point_id_list */ 4:
                    message.scenePointIdList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 2; */
        if (message.pointId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.pointId);
        /* optional uint32 scene_id = 9; */
        if (message.sceneId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.sceneId);
        /* repeated com.midnights.game.Uint32Pair scene_point_id_list = 4; */
        for (let i = 0; i < message.scenePointIdList.length; i++)
            Uint32Pair.internalBinaryWrite(message.scenePointIdList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryInfoReq
 */
export const DungeonEntryInfoReq = new DungeonEntryInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryInfo$Type extends MessageType<DungeonEntryInfo> {
    constructor() {
        super("com.midnights.game.DungeonEntryInfo", [
            { no: 6, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "boss_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "max_boss_chest_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "next_refresh_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "weekly_boss_resin_discount_info", kind: "message", T: () => WeeklyBossResinDiscountInfo },
            { no: 15, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_passed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "left_times", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryInfo>): DungeonEntryInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryInfo): DungeonEntryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 end_time */ 6:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 5:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 boss_chest_num */ 12:
                    message.bossChestNum = reader.uint32();
                    break;
                case /* optional uint32 max_boss_chest_num */ 13:
                    message.maxBossChestNum = reader.uint32();
                    break;
                case /* optional uint32 next_refresh_time */ 11:
                    message.nextRefreshTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info */ 9:
                    message.weeklyBossResinDiscountInfo = WeeklyBossResinDiscountInfo.internalBinaryRead(reader, reader.uint32(), options, message.weeklyBossResinDiscountInfo);
                    break;
                case /* optional uint32 start_time */ 15:
                    message.startTime = reader.uint32();
                    break;
                case /* optional bool is_passed */ 4:
                    message.isPassed = reader.bool();
                    break;
                case /* optional uint32 left_times */ 7:
                    message.leftTimes = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 end_time = 6; */
        if (message.endTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.endTime);
        /* optional uint32 dungeon_id = 5; */
        if (message.dungeonId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 boss_chest_num = 12; */
        if (message.bossChestNum !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.bossChestNum);
        /* optional uint32 max_boss_chest_num = 13; */
        if (message.maxBossChestNum !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.maxBossChestNum);
        /* optional uint32 next_refresh_time = 11; */
        if (message.nextRefreshTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.nextRefreshTime);
        /* optional com.midnights.game.WeeklyBossResinDiscountInfo weekly_boss_resin_discount_info = 9; */
        if (message.weeklyBossResinDiscountInfo)
            WeeklyBossResinDiscountInfo.internalBinaryWrite(message.weeklyBossResinDiscountInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 start_time = 15; */
        if (message.startTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.startTime);
        /* optional bool is_passed = 4; */
        if (message.isPassed !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isPassed);
        /* optional uint32 left_times = 7; */
        if (message.leftTimes !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.leftTimes);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryInfo
 */
export const DungeonEntryInfo = new DungeonEntryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryPointInfo$Type extends MessageType<DungeonEntryPointInfo> {
    constructor() {
        super("com.midnights.game.DungeonEntryPointInfo", [
            { no: 12, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "dungeon_entry_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DungeonEntryInfo },
            { no: 8, name: "recommend_dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryPointInfo>): DungeonEntryPointInfo {
        const message = { dungeonEntryList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryPointInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryPointInfo): DungeonEntryPointInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 12:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 6:
                    message.pointId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list */ 1:
                    message.dungeonEntryList.push(DungeonEntryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 recommend_dungeon_id */ 8:
                    message.recommendDungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryPointInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 12; */
        if (message.sceneId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sceneId);
        /* optional uint32 point_id = 6; */
        if (message.pointId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.pointId);
        /* repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list = 1; */
        for (let i = 0; i < message.dungeonEntryList.length; i++)
            DungeonEntryInfo.internalBinaryWrite(message.dungeonEntryList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 recommend_dungeon_id = 8; */
        if (message.recommendDungeonId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.recommendDungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryPointInfo
 */
export const DungeonEntryPointInfo = new DungeonEntryPointInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEntryInfoRsp$Type extends MessageType<DungeonEntryInfoRsp> {
    constructor() {
        super("com.midnights.game.DungeonEntryInfoRsp", [
            { no: 12, name: "dungeon_entry_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DungeonEntryInfo },
            { no: 15, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "dungeon_entry_point_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DungeonEntryPointInfo },
            { no: 14, name: "recommend_dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEntryInfoRsp>): DungeonEntryInfoRsp {
        const message = { dungeonEntryList: [], dungeonEntryPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEntryInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEntryInfoRsp): DungeonEntryInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list */ 12:
                    message.dungeonEntryList.push(DungeonEntryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 point_id */ 15:
                    message.pointId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.DungeonEntryPointInfo dungeon_entry_point_list */ 4:
                    message.dungeonEntryPointList.push(DungeonEntryPointInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 recommend_dungeon_id */ 14:
                    message.recommendDungeonId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEntryInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.DungeonEntryInfo dungeon_entry_list = 12; */
        for (let i = 0; i < message.dungeonEntryList.length; i++)
            DungeonEntryInfo.internalBinaryWrite(message.dungeonEntryList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 point_id = 15; */
        if (message.pointId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.pointId);
        /* repeated com.midnights.game.DungeonEntryPointInfo dungeon_entry_point_list = 4; */
        for (let i = 0; i < message.dungeonEntryPointList.length; i++)
            DungeonEntryPointInfo.internalBinaryWrite(message.dungeonEntryPointList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 recommend_dungeon_id = 14; */
        if (message.recommendDungeonId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.recommendDungeonId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEntryInfoRsp
 */
export const DungeonEntryInfoRsp = new DungeonEntryInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonEnterPosInfo$Type extends MessageType<DungeonEnterPosInfo> {
    constructor() {
        super("com.midnights.game.DungeonEnterPosInfo", [
            { no: 13, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonEnterPosInfo>): DungeonEnterPosInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonEnterPosInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonEnterPosInfo): DungeonEnterPosInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 quest_id */ 13:
                    message.questId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 6:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonEnterPosInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 quest_id = 13; */
        if (message.questId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.questId);
        /* optional uint32 point_id = 6; */
        if (message.pointId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonEnterPosInfo
 */
export const DungeonEnterPosInfo = new DungeonEnterPosInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEnterDungeonReq$Type extends MessageType<PlayerEnterDungeonReq> {
    constructor() {
        super("com.midnights.game.PlayerEnterDungeonReq", [
            { no: 2, name: "enter_pos_info", kind: "message", T: () => DungeonEnterPosInfo },
            { no: 13, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerEnterDungeonReq>): PlayerEnterDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEnterDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEnterDungeonReq): PlayerEnterDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DungeonEnterPosInfo enter_pos_info */ 2:
                    message.enterPosInfo = DungeonEnterPosInfo.internalBinaryRead(reader, reader.uint32(), options, message.enterPosInfo);
                    break;
                case /* optional uint32 point_id */ 13:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 7:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEnterDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DungeonEnterPosInfo enter_pos_info = 2; */
        if (message.enterPosInfo)
            DungeonEnterPosInfo.internalBinaryWrite(message.enterPosInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 point_id = 13; */
        if (message.pointId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.pointId);
        /* optional uint32 dungeon_id = 7; */
        if (message.dungeonId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerEnterDungeonReq
 */
export const PlayerEnterDungeonReq = new PlayerEnterDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEnterDungeonRsp$Type extends MessageType<PlayerEnterDungeonRsp> {
    constructor() {
        super("com.midnights.game.PlayerEnterDungeonRsp", [
            { no: 2, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerEnterDungeonRsp>): PlayerEnterDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEnterDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEnterDungeonRsp): PlayerEnterDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 2:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 6:
                    message.pointId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEnterDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 2; */
        if (message.dungeonId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 point_id = 6; */
        if (message.pointId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.pointId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerEnterDungeonRsp
 */
export const PlayerEnterDungeonRsp = new PlayerEnterDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerQuitDungeonReq$Type extends MessageType<PlayerQuitDungeonReq> {
    constructor() {
        super("com.midnights.game.PlayerQuitDungeonReq", [
            { no: 10, name: "is_quit_immediately", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerQuitDungeonReq>): PlayerQuitDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerQuitDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerQuitDungeonReq): PlayerQuitDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_quit_immediately */ 10:
                    message.isQuitImmediately = reader.bool();
                    break;
                case /* optional uint32 point_id */ 7:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerQuitDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_quit_immediately = 10; */
        if (message.isQuitImmediately !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isQuitImmediately);
        /* optional uint32 point_id = 7; */
        if (message.pointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerQuitDungeonReq
 */
export const PlayerQuitDungeonReq = new PlayerQuitDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerQuitDungeonRsp$Type extends MessageType<PlayerQuitDungeonRsp> {
    constructor() {
        super("com.midnights.game.PlayerQuitDungeonRsp", [
            { no: 11, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerQuitDungeonRsp>): PlayerQuitDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerQuitDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerQuitDungeonRsp): PlayerQuitDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 11:
                    message.pointId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerQuitDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 11; */
        if (message.pointId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.pointId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerQuitDungeonRsp
 */
export const PlayerQuitDungeonRsp = new PlayerQuitDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonWayPointNotify$Type extends MessageType<DungeonWayPointNotify> {
    constructor() {
        super("com.midnights.game.DungeonWayPointNotify", [
            { no: 9, name: "is_add", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "active_way_point_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonWayPointNotify>): DungeonWayPointNotify {
        const message = { activeWayPointList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonWayPointNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonWayPointNotify): DungeonWayPointNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_add */ 9:
                    message.isAdd = reader.bool();
                    break;
                case /* repeated uint32 active_way_point_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activeWayPointList.push(reader.uint32());
                    else
                        message.activeWayPointList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonWayPointNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_add = 9; */
        if (message.isAdd !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isAdd);
        /* repeated uint32 active_way_point_list = 4; */
        for (let i = 0; i < message.activeWayPointList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.activeWayPointList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonWayPointNotify
 */
export const DungeonWayPointNotify = new DungeonWayPointNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonWayPointActivateReq$Type extends MessageType<DungeonWayPointActivateReq> {
    constructor() {
        super("com.midnights.game.DungeonWayPointActivateReq", [
            { no: 3, name: "way_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonWayPointActivateReq>): DungeonWayPointActivateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonWayPointActivateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonWayPointActivateReq): DungeonWayPointActivateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 way_point_id */ 3:
                    message.wayPointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonWayPointActivateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 way_point_id = 3; */
        if (message.wayPointId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.wayPointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonWayPointActivateReq
 */
export const DungeonWayPointActivateReq = new DungeonWayPointActivateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonWayPointActivateRsp$Type extends MessageType<DungeonWayPointActivateRsp> {
    constructor() {
        super("com.midnights.game.DungeonWayPointActivateRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "way_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonWayPointActivateRsp>): DungeonWayPointActivateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonWayPointActivateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonWayPointActivateRsp): DungeonWayPointActivateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 way_point_id */ 7:
                    message.wayPointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonWayPointActivateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 way_point_id = 7; */
        if (message.wayPointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.wayPointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonWayPointActivateRsp
 */
export const DungeonWayPointActivateRsp = new DungeonWayPointActivateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StrengthenPointData$Type extends MessageType<StrengthenPointData> {
    constructor() {
        super("com.midnights.game.StrengthenPointData", [
            { no: 10, name: "base_point", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cur_point", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StrengthenPointData>): StrengthenPointData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StrengthenPointData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StrengthenPointData): StrengthenPointData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 base_point */ 10:
                    message.basePoint = reader.uint32();
                    break;
                case /* optional uint32 cur_point */ 11:
                    message.curPoint = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StrengthenPointData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 base_point = 10; */
        if (message.basePoint !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.basePoint);
        /* optional uint32 cur_point = 11; */
        if (message.curPoint !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.curPoint);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StrengthenPointData
 */
export const StrengthenPointData = new StrengthenPointData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonSettleExhibitionInfo$Type extends MessageType<DungeonSettleExhibitionInfo> {
    constructor() {
        super("com.midnights.game.DungeonSettleExhibitionInfo", [
            { no: 3, name: "player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 13, name: "card_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExhibitionDisplayInfo }
        ]);
    }
    create(value?: PartialMessage<DungeonSettleExhibitionInfo>): DungeonSettleExhibitionInfo {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonSettleExhibitionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonSettleExhibitionInfo): DungeonSettleExhibitionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 3:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                case /* repeated com.midnights.game.ExhibitionDisplayInfo card_list */ 13:
                    message.cardList.push(ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonSettleExhibitionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 3; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ExhibitionDisplayInfo card_list = 13; */
        for (let i = 0; i < message.cardList.length; i++)
            ExhibitionDisplayInfo.internalBinaryWrite(message.cardList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonSettleExhibitionInfo
 */
export const DungeonSettleExhibitionInfo = new DungeonSettleExhibitionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CrystalLinkDungeonSettleInfo$Type extends MessageType<CrystalLinkDungeonSettleInfo> {
    constructor() {
        super("com.midnights.game.CrystalLinkDungeonSettleInfo", [
            { no: 2, name: "kill_elite_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "difficulty_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "kill_normal_mosnter_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CrystalLinkDungeonSettleInfo>): CrystalLinkDungeonSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CrystalLinkDungeonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CrystalLinkDungeonSettleInfo): CrystalLinkDungeonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 kill_elite_monster_num */ 2:
                    message.killEliteMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 6:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 12:
                    message.levelId = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 difficulty_id */ 9:
                    message.difficultyId = reader.uint32();
                    break;
                case /* optional uint32 kill_normal_mosnter_num */ 3:
                    message.killNormalMosnterNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CrystalLinkDungeonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 kill_elite_monster_num = 2; */
        if (message.killEliteMonsterNum !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.killEliteMonsterNum);
        /* optional uint32 final_score = 6; */
        if (message.finalScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 level_id = 12; */
        if (message.levelId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.levelId);
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 difficulty_id = 9; */
        if (message.difficultyId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.difficultyId);
        /* optional uint32 kill_normal_mosnter_num = 3; */
        if (message.killNormalMosnterNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.killNormalMosnterNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CrystalLinkDungeonSettleInfo
 */
export const CrystalLinkDungeonSettleInfo = new CrystalLinkDungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2DungeonSettleInfo$Type extends MessageType<SummerTimeV2DungeonSettleInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeV2DungeonSettleInfo", [
            { no: 5, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "taken_reward_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "cur_dungeon_reward_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2DungeonSettleInfo>): SummerTimeV2DungeonSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2DungeonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2DungeonSettleInfo): SummerTimeV2DungeonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 5:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 taken_reward_count */ 2:
                    message.takenRewardCount = reader.uint32();
                    break;
                case /* optional uint32 cur_dungeon_reward_limit */ 11:
                    message.curDungeonRewardLimit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2DungeonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 5; */
        if (message.isSuccess !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 taken_reward_count = 2; */
        if (message.takenRewardCount !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.takenRewardCount);
        /* optional uint32 cur_dungeon_reward_limit = 11; */
        if (message.curDungeonRewardLimit !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.curDungeonRewardLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2DungeonSettleInfo
 */
export const SummerTimeV2DungeonSettleInfo = new SummerTimeV2DungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayDungeonSettleInfo$Type extends MessageType<InstableSprayDungeonSettleInfo> {
    constructor() {
        super("com.midnights.game.InstableSprayDungeonSettleInfo", [
            { no: 1, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "score_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayDungeonSettleInfo>): InstableSprayDungeonSettleInfo {
        const message = { scoreList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayDungeonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayDungeonSettleInfo): InstableSprayDungeonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 1:
                    message.stageId = reader.uint32();
                    break;
                case /* repeated uint32 score_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.scoreList.push(reader.uint32());
                    else
                        message.scoreList.push(reader.uint32());
                    break;
                case /* optional bool is_new_record */ 13:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 difficulty */ 5:
                    message.difficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayDungeonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 1; */
        if (message.stageId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.stageId);
        /* repeated uint32 score_list = 4; */
        for (let i = 0; i < message.scoreList.length; i++)
            writer.tag(4, WireType.Varint).uint32(message.scoreList[i]);
        /* optional bool is_new_record = 13; */
        if (message.isNewRecord !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 difficulty = 5; */
        if (message.difficulty !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.difficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayDungeonSettleInfo
 */
export const InstableSprayDungeonSettleInfo = new InstableSprayDungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldDungeonSettleInfo$Type extends MessageType<WindFieldDungeonSettleInfo> {
    constructor() {
        super("com.midnights.game.WindFieldDungeonSettleInfo", [
            { no: 11, name: "after_watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "before_watcher_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "fail_reason", kind: "enum", opt: true, T: () => ["com.midnights.game.WindFieldDungeonFailReason", WindFieldDungeonFailReason] }
        ]);
    }
    create(value?: PartialMessage<WindFieldDungeonSettleInfo>): WindFieldDungeonSettleInfo {
        const message = { afterWatcherIdList: [], beforeWatcherIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldDungeonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldDungeonSettleInfo): WindFieldDungeonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 after_watcher_id_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.afterWatcherIdList.push(reader.uint32());
                    else
                        message.afterWatcherIdList.push(reader.uint32());
                    break;
                case /* repeated uint32 before_watcher_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.beforeWatcherIdList.push(reader.uint32());
                    else
                        message.beforeWatcherIdList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.WindFieldDungeonFailReason fail_reason */ 2:
                    message.failReason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldDungeonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 after_watcher_id_list = 11; */
        for (let i = 0; i < message.afterWatcherIdList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.afterWatcherIdList[i]);
        /* repeated uint32 before_watcher_id_list = 7; */
        for (let i = 0; i < message.beforeWatcherIdList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.beforeWatcherIdList[i]);
        /* optional com.midnights.game.WindFieldDungeonFailReason fail_reason = 2; */
        if (message.failReason !== undefined)
            writer.tag(2, WireType.Varint).int32(message.failReason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldDungeonSettleInfo
 */
export const WindFieldDungeonSettleInfo = new WindFieldDungeonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EffigyChallengeV2SettleInfo$Type extends MessageType<EffigyChallengeV2SettleInfo> {
    constructor() {
        super("com.midnights.game.EffigyChallengeV2SettleInfo", [
            { no: 7, name: "is_challenge_highest_difficulty", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "create_dungeon_player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "challenge_mode_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_new_record_time", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "record_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "first_time_finish_difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EffigyChallengeV2SettleInfo>): EffigyChallengeV2SettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EffigyChallengeV2SettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EffigyChallengeV2SettleInfo): EffigyChallengeV2SettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_challenge_highest_difficulty */ 7:
                    message.isChallengeHighestDifficulty = reader.bool();
                    break;
                case /* optional uint32 create_dungeon_player_uid */ 4:
                    message.createDungeonPlayerUid = reader.uint32();
                    break;
                case /* optional uint32 challenge_mode_difficulty */ 6:
                    message.challengeModeDifficulty = reader.uint32();
                    break;
                case /* optional bool is_new_record_time */ 1:
                    message.isNewRecordTime = reader.bool();
                    break;
                case /* optional uint32 record_time */ 12:
                    message.recordTime = reader.uint32();
                    break;
                case /* optional uint32 first_time_finish_difficulty */ 5:
                    message.firstTimeFinishDifficulty = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EffigyChallengeV2SettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_challenge_highest_difficulty = 7; */
        if (message.isChallengeHighestDifficulty !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isChallengeHighestDifficulty);
        /* optional uint32 create_dungeon_player_uid = 4; */
        if (message.createDungeonPlayerUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.createDungeonPlayerUid);
        /* optional uint32 challenge_mode_difficulty = 6; */
        if (message.challengeModeDifficulty !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeModeDifficulty);
        /* optional bool is_new_record_time = 1; */
        if (message.isNewRecordTime !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isNewRecordTime);
        /* optional uint32 record_time = 12; */
        if (message.recordTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.recordTime);
        /* optional uint32 first_time_finish_difficulty = 5; */
        if (message.firstTimeFinishDifficulty !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.firstTimeFinishDifficulty);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EffigyChallengeV2SettleInfo
 */
export const EffigyChallengeV2SettleInfo = new EffigyChallengeV2SettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonSettleNotify$Type extends MessageType<DungeonSettleNotify> {
    constructor() {
        super("com.midnights.game.DungeonSettleNotify", [
            { no: 10, name: "result", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "strengthen_point_data_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => StrengthenPointData } },
            { no: 8, name: "exhibition_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DungeonSettleExhibitionInfo },
            { no: 12, name: "create_player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fail_cond_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "use_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "close_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "settle_show", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => ParamList } },
            { no: 351, name: "tower_level_end_notify", kind: "message", oneof: "detail", T: () => TowerLevelEndNotify },
            { no: 635, name: "trial_avatar_first_pass_dungeon_notify", kind: "message", oneof: "detail", T: () => TrialAvatarFirstPassDungeonNotify },
            { no: 686, name: "channeller_slab_loop_dungeon_result_info", kind: "message", oneof: "detail", T: () => ChannellerSlabLoopDungeonResultInfo },
            { no: 328, name: "effigy_challenge_dungeon_result_info", kind: "message", oneof: "detail", T: () => EffigyChallengeDungeonResultInfo },
            { no: 1482, name: "roguelike_dungeon_settle_info", kind: "message", oneof: "detail", T: () => RoguelikeDungeonSettleInfo },
            { no: 112, name: "crystal_link_settle_info", kind: "message", oneof: "detail", T: () => CrystalLinkDungeonSettleInfo },
            { no: 1882, name: "summer_time_v2_dungeon_settle_info", kind: "message", oneof: "detail", T: () => SummerTimeV2DungeonSettleInfo },
            { no: 193, name: "instable_spray_settle_info", kind: "message", oneof: "detail", T: () => InstableSprayDungeonSettleInfo },
            { no: 1825, name: "wind_field_dungeon_settle_info", kind: "message", oneof: "detail", T: () => WindFieldDungeonSettleInfo },
            { no: 1802, name: "effigy_challenge_v2_settle_info", kind: "message", oneof: "detail", T: () => EffigyChallengeV2SettleInfo }
        ]);
    }
    create(value?: PartialMessage<DungeonSettleNotify>): DungeonSettleNotify {
        const message = { strengthenPointDataMap: {}, exhibitionInfoList: [], failCondList: [], settleShow: {}, detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonSettleNotify): DungeonSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 result */ 10:
                    message.result = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 13:
                    message.dungeonId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map */ 14:
                    this.binaryReadMap14(message.strengthenPointDataMap, reader, options);
                    break;
                case /* repeated com.midnights.game.DungeonSettleExhibitionInfo exhibition_info_list */ 8:
                    message.exhibitionInfoList.push(DungeonSettleExhibitionInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 create_player_uid */ 12:
                    message.createPlayerUid = reader.uint32();
                    break;
                case /* repeated uint32 fail_cond_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.failCondList.push(reader.uint32());
                    else
                        message.failCondList.push(reader.uint32());
                    break;
                case /* optional uint32 use_time */ 1:
                    message.useTime = reader.uint32();
                    break;
                case /* optional uint32 close_time */ 4:
                    message.closeTime = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* map<uint32, com.midnights.game.ParamList> settle_show */ 5:
                    this.binaryReadMap5(message.settleShow, reader, options);
                    break;
                case /* com.midnights.game.TowerLevelEndNotify tower_level_end_notify */ 351:
                    message.detail = {
                        oneofKind: "towerLevelEndNotify",
                        towerLevelEndNotify: TowerLevelEndNotify.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).towerLevelEndNotify)
                    };
                    break;
                case /* com.midnights.game.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify */ 635:
                    message.detail = {
                        oneofKind: "trialAvatarFirstPassDungeonNotify",
                        trialAvatarFirstPassDungeonNotify: TrialAvatarFirstPassDungeonNotify.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).trialAvatarFirstPassDungeonNotify)
                    };
                    break;
                case /* com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info */ 686:
                    message.detail = {
                        oneofKind: "channellerSlabLoopDungeonResultInfo",
                        channellerSlabLoopDungeonResultInfo: ChannellerSlabLoopDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).channellerSlabLoopDungeonResultInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info */ 328:
                    message.detail = {
                        oneofKind: "effigyChallengeDungeonResultInfo",
                        effigyChallengeDungeonResultInfo: EffigyChallengeDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).effigyChallengeDungeonResultInfo)
                    };
                    break;
                case /* com.midnights.game.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info */ 1482:
                    message.detail = {
                        oneofKind: "roguelikeDungeonSettleInfo",
                        roguelikeDungeonSettleInfo: RoguelikeDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).roguelikeDungeonSettleInfo)
                    };
                    break;
                case /* com.midnights.game.CrystalLinkDungeonSettleInfo crystal_link_settle_info */ 112:
                    message.detail = {
                        oneofKind: "crystalLinkSettleInfo",
                        crystalLinkSettleInfo: CrystalLinkDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).crystalLinkSettleInfo)
                    };
                    break;
                case /* com.midnights.game.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info */ 1882:
                    message.detail = {
                        oneofKind: "summerTimeV2DungeonSettleInfo",
                        summerTimeV2DungeonSettleInfo: SummerTimeV2DungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).summerTimeV2DungeonSettleInfo)
                    };
                    break;
                case /* com.midnights.game.InstableSprayDungeonSettleInfo instable_spray_settle_info */ 193:
                    message.detail = {
                        oneofKind: "instableSpraySettleInfo",
                        instableSpraySettleInfo: InstableSprayDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).instableSpraySettleInfo)
                    };
                    break;
                case /* com.midnights.game.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info */ 1825:
                    message.detail = {
                        oneofKind: "windFieldDungeonSettleInfo",
                        windFieldDungeonSettleInfo: WindFieldDungeonSettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).windFieldDungeonSettleInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info */ 1802:
                    message.detail = {
                        oneofKind: "effigyChallengeV2SettleInfo",
                        effigyChallengeV2SettleInfo: EffigyChallengeV2SettleInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).effigyChallengeV2SettleInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: DungeonSettleNotify["strengthenPointDataMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonSettleNotify["strengthenPointDataMap"] | undefined, val: DungeonSettleNotify["strengthenPointDataMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = StrengthenPointData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonSettleNotify.strengthen_point_data_map");
            }
        }
        map[key ?? 0] = val ?? StrengthenPointData.create();
    }
    private binaryReadMap5(map: DungeonSettleNotify["settleShow"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonSettleNotify["settleShow"] | undefined, val: DungeonSettleNotify["settleShow"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = ParamList.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonSettleNotify.settle_show");
            }
        }
        map[key ?? 0] = val ?? ParamList.create();
    }
    internalBinaryWrite(message: DungeonSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 result = 10; */
        if (message.result !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.result);
        /* optional uint32 dungeon_id = 13; */
        if (message.dungeonId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.dungeonId);
        /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 14; */
        for (let k of Object.keys(message.strengthenPointDataMap)) {
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            StrengthenPointData.internalBinaryWrite(message.strengthenPointDataMap[k as any], writer, options);
            writer.join().join();
        }
        /* repeated com.midnights.game.DungeonSettleExhibitionInfo exhibition_info_list = 8; */
        for (let i = 0; i < message.exhibitionInfoList.length; i++)
            DungeonSettleExhibitionInfo.internalBinaryWrite(message.exhibitionInfoList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 create_player_uid = 12; */
        if (message.createPlayerUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.createPlayerUid);
        /* repeated uint32 fail_cond_list = 11; */
        for (let i = 0; i < message.failCondList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.failCondList[i]);
        /* optional uint32 use_time = 1; */
        if (message.useTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.useTime);
        /* optional uint32 close_time = 4; */
        if (message.closeTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.closeTime);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSuccess);
        /* map<uint32, com.midnights.game.ParamList> settle_show = 5; */
        for (let k of Object.keys(message.settleShow)) {
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ParamList.internalBinaryWrite(message.settleShow[k as any], writer, options);
            writer.join().join();
        }
        /* com.midnights.game.TowerLevelEndNotify tower_level_end_notify = 351; */
        if (message.detail.oneofKind === "towerLevelEndNotify")
            TowerLevelEndNotify.internalBinaryWrite(message.detail.towerLevelEndNotify, writer.tag(351, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.TrialAvatarFirstPassDungeonNotify trial_avatar_first_pass_dungeon_notify = 635; */
        if (message.detail.oneofKind === "trialAvatarFirstPassDungeonNotify")
            TrialAvatarFirstPassDungeonNotify.internalBinaryWrite(message.detail.trialAvatarFirstPassDungeonNotify, writer.tag(635, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 686; */
        if (message.detail.oneofKind === "channellerSlabLoopDungeonResultInfo")
            ChannellerSlabLoopDungeonResultInfo.internalBinaryWrite(message.detail.channellerSlabLoopDungeonResultInfo, writer.tag(686, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 328; */
        if (message.detail.oneofKind === "effigyChallengeDungeonResultInfo")
            EffigyChallengeDungeonResultInfo.internalBinaryWrite(message.detail.effigyChallengeDungeonResultInfo, writer.tag(328, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.RoguelikeDungeonSettleInfo roguelike_dungeon_settle_info = 1482; */
        if (message.detail.oneofKind === "roguelikeDungeonSettleInfo")
            RoguelikeDungeonSettleInfo.internalBinaryWrite(message.detail.roguelikeDungeonSettleInfo, writer.tag(1482, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CrystalLinkDungeonSettleInfo crystal_link_settle_info = 112; */
        if (message.detail.oneofKind === "crystalLinkSettleInfo")
            CrystalLinkDungeonSettleInfo.internalBinaryWrite(message.detail.crystalLinkSettleInfo, writer.tag(112, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SummerTimeV2DungeonSettleInfo summer_time_v2_dungeon_settle_info = 1882; */
        if (message.detail.oneofKind === "summerTimeV2DungeonSettleInfo")
            SummerTimeV2DungeonSettleInfo.internalBinaryWrite(message.detail.summerTimeV2DungeonSettleInfo, writer.tag(1882, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.InstableSprayDungeonSettleInfo instable_spray_settle_info = 193; */
        if (message.detail.oneofKind === "instableSpraySettleInfo")
            InstableSprayDungeonSettleInfo.internalBinaryWrite(message.detail.instableSpraySettleInfo, writer.tag(193, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.WindFieldDungeonSettleInfo wind_field_dungeon_settle_info = 1825; */
        if (message.detail.oneofKind === "windFieldDungeonSettleInfo")
            WindFieldDungeonSettleInfo.internalBinaryWrite(message.detail.windFieldDungeonSettleInfo, writer.tag(1825, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyChallengeV2SettleInfo effigy_challenge_v2_settle_info = 1802; */
        if (message.detail.oneofKind === "effigyChallengeV2SettleInfo")
            EffigyChallengeV2SettleInfo.internalBinaryWrite(message.detail.effigyChallengeV2SettleInfo, writer.tag(1802, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonSettleNotify
 */
export const DungeonSettleNotify = new DungeonSettleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonPlayerDieNotify$Type extends MessageType<DungeonPlayerDieNotify> {
    constructor() {
        super("com.midnights.game.DungeonPlayerDieNotify", [
            { no: 15, name: "strengthen_point_data_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => StrengthenPointData } },
            { no: 1, name: "wait_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "murderer_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "die_type", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerDieType", PlayerDieType] },
            { no: 6, name: "revive_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "monster_id", kind: "scalar", oneof: "entity", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "gadget_id", kind: "scalar", oneof: "entity", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonPlayerDieNotify>): DungeonPlayerDieNotify {
        const message = { strengthenPointDataMap: {}, entity: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonPlayerDieNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonPlayerDieNotify): DungeonPlayerDieNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map */ 15:
                    this.binaryReadMap15(message.strengthenPointDataMap, reader, options);
                    break;
                case /* optional uint32 wait_time */ 1:
                    message.waitTime = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 9:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 murderer_entity_id */ 13:
                    message.murdererEntityId = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlayerDieType die_type */ 3:
                    message.dieType = reader.int32();
                    break;
                case /* optional uint32 revive_count */ 6:
                    message.reviveCount = reader.uint32();
                    break;
                case /* uint32 monster_id */ 4:
                    message.entity = {
                        oneofKind: "monsterId",
                        monsterId: reader.uint32()
                    };
                    break;
                case /* uint32 gadget_id */ 8:
                    message.entity = {
                        oneofKind: "gadgetId",
                        gadgetId: reader.uint32()
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: DungeonPlayerDieNotify["strengthenPointDataMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonPlayerDieNotify["strengthenPointDataMap"] | undefined, val: DungeonPlayerDieNotify["strengthenPointDataMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = StrengthenPointData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonPlayerDieNotify.strengthen_point_data_map");
            }
        }
        map[key ?? 0] = val ?? StrengthenPointData.create();
    }
    internalBinaryWrite(message: DungeonPlayerDieNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 15; */
        for (let k of Object.keys(message.strengthenPointDataMap)) {
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            StrengthenPointData.internalBinaryWrite(message.strengthenPointDataMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 wait_time = 1; */
        if (message.waitTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.waitTime);
        /* optional uint32 dungeon_id = 9; */
        if (message.dungeonId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 murderer_entity_id = 13; */
        if (message.murdererEntityId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.murdererEntityId);
        /* optional com.midnights.game.PlayerDieType die_type = 3; */
        if (message.dieType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.dieType);
        /* optional uint32 revive_count = 6; */
        if (message.reviveCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reviveCount);
        /* uint32 monster_id = 4; */
        if (message.entity.oneofKind === "monsterId")
            writer.tag(4, WireType.Varint).uint32(message.entity.monsterId);
        /* uint32 gadget_id = 8; */
        if (message.entity.oneofKind === "gadgetId")
            writer.tag(8, WireType.Varint).uint32(message.entity.gadgetId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonPlayerDieNotify
 */
export const DungeonPlayerDieNotify = new DungeonPlayerDieNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonDieOptionReq$Type extends MessageType<DungeonDieOptionReq> {
    constructor() {
        super("com.midnights.game.DungeonDieOptionReq", [
            { no: 11, name: "die_option", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerDieOption", PlayerDieOption] },
            { no: 14, name: "is_quit_immediately", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonDieOptionReq>): DungeonDieOptionReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonDieOptionReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonDieOptionReq): DungeonDieOptionReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerDieOption die_option */ 11:
                    message.dieOption = reader.int32();
                    break;
                case /* optional bool is_quit_immediately */ 14:
                    message.isQuitImmediately = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonDieOptionReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerDieOption die_option = 11; */
        if (message.dieOption !== undefined)
            writer.tag(11, WireType.Varint).int32(message.dieOption);
        /* optional bool is_quit_immediately = 14; */
        if (message.isQuitImmediately !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isQuitImmediately);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonDieOptionReq
 */
export const DungeonDieOptionReq = new DungeonDieOptionReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonDieOptionRsp$Type extends MessageType<DungeonDieOptionRsp> {
    constructor() {
        super("com.midnights.game.DungeonDieOptionRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "revive_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "die_option", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerDieOption", PlayerDieOption] }
        ]);
    }
    create(value?: PartialMessage<DungeonDieOptionRsp>): DungeonDieOptionRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonDieOptionRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonDieOptionRsp): DungeonDieOptionRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 revive_count */ 10:
                    message.reviveCount = reader.uint32();
                    break;
                case /* optional com.midnights.game.PlayerDieOption die_option */ 6:
                    message.dieOption = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonDieOptionRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 revive_count = 10; */
        if (message.reviveCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.reviveCount);
        /* optional com.midnights.game.PlayerDieOption die_option = 6; */
        if (message.dieOption !== undefined)
            writer.tag(6, WireType.Varint).int32(message.dieOption);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonDieOptionRsp
 */
export const DungeonDieOptionRsp = new DungeonDieOptionRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonShowReminderNotify$Type extends MessageType<DungeonShowReminderNotify> {
    constructor() {
        super("com.midnights.game.DungeonShowReminderNotify", [
            { no: 9, name: "reminder_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonShowReminderNotify>): DungeonShowReminderNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonShowReminderNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonShowReminderNotify): DungeonShowReminderNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reminder_id */ 9:
                    message.reminderId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonShowReminderNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reminder_id = 9; */
        if (message.reminderId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.reminderId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonShowReminderNotify
 */
export const DungeonShowReminderNotify = new DungeonShowReminderNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonPlayerDieReq$Type extends MessageType<DungeonPlayerDieReq> {
    constructor() {
        super("com.midnights.game.DungeonPlayerDieReq", [
            { no: 6, name: "die_type", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerDieType", PlayerDieType] },
            { no: 8, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonPlayerDieReq>): DungeonPlayerDieReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonPlayerDieReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonPlayerDieReq): DungeonPlayerDieReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerDieType die_type */ 6:
                    message.dieType = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 8:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonPlayerDieReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerDieType die_type = 6; */
        if (message.dieType !== undefined)
            writer.tag(6, WireType.Varint).int32(message.dieType);
        /* optional uint32 dungeon_id = 8; */
        if (message.dungeonId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonPlayerDieReq
 */
export const DungeonPlayerDieReq = new DungeonPlayerDieReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonPlayerDieRsp$Type extends MessageType<DungeonPlayerDieRsp> {
    constructor() {
        super("com.midnights.game.DungeonPlayerDieRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonPlayerDieRsp>): DungeonPlayerDieRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonPlayerDieRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonPlayerDieRsp): DungeonPlayerDieRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonPlayerDieRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonPlayerDieRsp
 */
export const DungeonPlayerDieRsp = new DungeonPlayerDieRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonDataNotify$Type extends MessageType<DungeonDataNotify> {
    constructor() {
        super("com.midnights.game.DungeonDataNotify", [
            { no: 1, name: "dungeon_data_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<DungeonDataNotify>): DungeonDataNotify {
        const message = { dungeonDataMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonDataNotify): DungeonDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> dungeon_data_map */ 1:
                    this.binaryReadMap1(message.dungeonDataMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: DungeonDataNotify["dungeonDataMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonDataNotify["dungeonDataMap"] | undefined, val: DungeonDataNotify["dungeonDataMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonDataNotify.dungeon_data_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: DungeonDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> dungeon_data_map = 1; */
        for (let k of Object.keys(message.dungeonDataMap))
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.dungeonDataMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonDataNotify
 */
export const DungeonDataNotify = new DungeonDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonChallengeBeginNotify$Type extends MessageType<DungeonChallengeBeginNotify> {
    constructor() {
        super("com.midnights.game.DungeonChallengeBeginNotify", [
            { no: 5, name: "father_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "param_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "uid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonChallengeBeginNotify>): DungeonChallengeBeginNotify {
        const message = { paramList: [], uidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonChallengeBeginNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonChallengeBeginNotify): DungeonChallengeBeginNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 father_index */ 5:
                    message.fatherIndex = reader.uint32();
                    break;
                case /* repeated uint32 param_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.uint32());
                    else
                        message.paramList.push(reader.uint32());
                    break;
                case /* optional uint32 challenge_index */ 6:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 4:
                    message.groupId = reader.uint32();
                    break;
                case /* repeated uint32 uid_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonChallengeBeginNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 father_index = 5; */
        if (message.fatherIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.fatherIndex);
        /* repeated uint32 param_list = 14; */
        for (let i = 0; i < message.paramList.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.paramList[i]);
        /* optional uint32 challenge_index = 6; */
        if (message.challengeIndex !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 group_id = 4; */
        if (message.groupId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.groupId);
        /* repeated uint32 uid_list = 12; */
        for (let i = 0; i < message.uidList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.uidList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonChallengeBeginNotify
 */
export const DungeonChallengeBeginNotify = new DungeonChallengeBeginNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeBrief$Type extends MessageType<ChallengeBrief> {
    constructor() {
        super("com.midnights.game.ChallengeBrief", [
            { no: 9, name: "cur_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeBrief>): ChallengeBrief {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChallengeBrief>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeBrief): ChallengeBrief {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_progress */ 9:
                    message.curProgress = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 10:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional bool is_success */ 4:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_id */ 8:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeBrief, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_progress = 9; */
        if (message.curProgress !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curProgress);
        /* optional uint32 challenge_index = 10; */
        if (message.challengeIndex !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.challengeIndex);
        /* optional bool is_success = 4; */
        if (message.isSuccess !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_id = 8; */
        if (message.challengeId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChallengeBrief
 */
export const ChallengeBrief = new ChallengeBrief$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CustomDungeonResultInfo$Type extends MessageType<CustomDungeonResultInfo> {
    constructor() {
        super("com.midnights.game.CustomDungeonResultInfo", [
            { no: 12, name: "is_liked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "got_coin_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "child_challenge_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChallengeBrief },
            { no: 3, name: "dungeon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "finish_type", kind: "enum", opt: true, T: () => ["com.midnights.game.CustomDungeonFinishType", CustomDungeonFinishType] },
            { no: 11, name: "time_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_arrive_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "is_stored", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CustomDungeonResultInfo>): CustomDungeonResultInfo {
        const message = { childChallengeList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CustomDungeonResultInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CustomDungeonResultInfo): CustomDungeonResultInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_liked */ 12:
                    message.isLiked = reader.bool();
                    break;
                case /* optional uint32 got_coin_num */ 9:
                    message.gotCoinNum = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChallengeBrief child_challenge_list */ 6:
                    message.childChallengeList.push(ChallengeBrief.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 dungeon_guid */ 3:
                    message.dungeonGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.CustomDungeonFinishType finish_type */ 7:
                    message.finishType = reader.int32();
                    break;
                case /* optional uint32 time_cost */ 11:
                    message.timeCost = reader.uint32();
                    break;
                case /* optional bool is_arrive_finish */ 2:
                    message.isArriveFinish = reader.bool();
                    break;
                case /* optional bool is_stored */ 14:
                    message.isStored = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CustomDungeonResultInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_liked = 12; */
        if (message.isLiked !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isLiked);
        /* optional uint32 got_coin_num = 9; */
        if (message.gotCoinNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.gotCoinNum);
        /* repeated com.midnights.game.ChallengeBrief child_challenge_list = 6; */
        for (let i = 0; i < message.childChallengeList.length; i++)
            ChallengeBrief.internalBinaryWrite(message.childChallengeList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 dungeon_guid = 3; */
        if (message.dungeonGuid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.dungeonGuid);
        /* optional com.midnights.game.CustomDungeonFinishType finish_type = 7; */
        if (message.finishType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.finishType);
        /* optional uint32 time_cost = 11; */
        if (message.timeCost !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.timeCost);
        /* optional bool is_arrive_finish = 2; */
        if (message.isArriveFinish !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isArriveFinish);
        /* optional bool is_stored = 14; */
        if (message.isStored !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isStored);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CustomDungeonResultInfo
 */
export const CustomDungeonResultInfo = new CustomDungeonResultInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonChallengeFinishNotify$Type extends MessageType<DungeonChallengeFinishNotify> {
    constructor() {
        super("com.midnights.game.DungeonChallengeFinishNotify", [
            { no: 13, name: "strengthen_point_data_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => StrengthenPointData } },
            { no: 9, name: "finish_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ChallengeFinishType", ChallengeFinishType, "CHALLENGE_FINISH_TYPE_"] },
            { no: 10, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "challenge_record_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "time_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "current_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1521, name: "channeller_slab_loop_dungeon_result_info", kind: "message", oneof: "detail", T: () => ChannellerSlabLoopDungeonResultInfo },
            { no: 1627, name: "effigy_challenge_dungeon_result_info", kind: "message", oneof: "detail", T: () => EffigyChallengeDungeonResultInfo },
            { no: 1824, name: "potion_dungeon_result_info", kind: "message", oneof: "detail", T: () => PotionDungeonResultInfo },
            { no: 1664, name: "custom_dungeon_result_info", kind: "message", oneof: "detail", T: () => CustomDungeonResultInfo }
        ]);
    }
    create(value?: PartialMessage<DungeonChallengeFinishNotify>): DungeonChallengeFinishNotify {
        const message = { strengthenPointDataMap: {}, detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonChallengeFinishNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonChallengeFinishNotify): DungeonChallengeFinishNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map */ 13:
                    this.binaryReadMap13(message.strengthenPointDataMap, reader, options);
                    break;
                case /* optional com.midnights.game.ChallengeFinishType finish_type */ 9:
                    message.finishType = reader.int32();
                    break;
                case /* optional bool is_new_record */ 10:
                    message.isNewRecord = reader.bool();
                    break;
                case /* optional uint32 challenge_record_type */ 7:
                    message.challengeRecordType = reader.uint32();
                    break;
                case /* optional uint32 time_cost */ 4:
                    message.timeCost = reader.uint32();
                    break;
                case /* optional uint32 current_value */ 15:
                    message.currentValue = reader.uint32();
                    break;
                case /* optional bool is_success */ 3:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_index */ 5:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info */ 1521:
                    message.detail = {
                        oneofKind: "channellerSlabLoopDungeonResultInfo",
                        channellerSlabLoopDungeonResultInfo: ChannellerSlabLoopDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).channellerSlabLoopDungeonResultInfo)
                    };
                    break;
                case /* com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info */ 1627:
                    message.detail = {
                        oneofKind: "effigyChallengeDungeonResultInfo",
                        effigyChallengeDungeonResultInfo: EffigyChallengeDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).effigyChallengeDungeonResultInfo)
                    };
                    break;
                case /* com.midnights.game.PotionDungeonResultInfo potion_dungeon_result_info */ 1824:
                    message.detail = {
                        oneofKind: "potionDungeonResultInfo",
                        potionDungeonResultInfo: PotionDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).potionDungeonResultInfo)
                    };
                    break;
                case /* com.midnights.game.CustomDungeonResultInfo custom_dungeon_result_info */ 1664:
                    message.detail = {
                        oneofKind: "customDungeonResultInfo",
                        customDungeonResultInfo: CustomDungeonResultInfo.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).customDungeonResultInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap13(map: DungeonChallengeFinishNotify["strengthenPointDataMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonChallengeFinishNotify["strengthenPointDataMap"] | undefined, val: DungeonChallengeFinishNotify["strengthenPointDataMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = StrengthenPointData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonChallengeFinishNotify.strengthen_point_data_map");
            }
        }
        map[key ?? 0] = val ?? StrengthenPointData.create();
    }
    internalBinaryWrite(message: DungeonChallengeFinishNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.StrengthenPointData> strengthen_point_data_map = 13; */
        for (let k of Object.keys(message.strengthenPointDataMap)) {
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            StrengthenPointData.internalBinaryWrite(message.strengthenPointDataMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional com.midnights.game.ChallengeFinishType finish_type = 9; */
        if (message.finishType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.finishType);
        /* optional bool is_new_record = 10; */
        if (message.isNewRecord !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isNewRecord);
        /* optional uint32 challenge_record_type = 7; */
        if (message.challengeRecordType !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.challengeRecordType);
        /* optional uint32 time_cost = 4; */
        if (message.timeCost !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.timeCost);
        /* optional uint32 current_value = 15; */
        if (message.currentValue !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.currentValue);
        /* optional bool is_success = 3; */
        if (message.isSuccess !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_index = 5; */
        if (message.challengeIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.challengeIndex);
        /* com.midnights.game.ChannellerSlabLoopDungeonResultInfo channeller_slab_loop_dungeon_result_info = 1521; */
        if (message.detail.oneofKind === "channellerSlabLoopDungeonResultInfo")
            ChannellerSlabLoopDungeonResultInfo.internalBinaryWrite(message.detail.channellerSlabLoopDungeonResultInfo, writer.tag(1521, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.EffigyChallengeDungeonResultInfo effigy_challenge_dungeon_result_info = 1627; */
        if (message.detail.oneofKind === "effigyChallengeDungeonResultInfo")
            EffigyChallengeDungeonResultInfo.internalBinaryWrite(message.detail.effigyChallengeDungeonResultInfo, writer.tag(1627, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.PotionDungeonResultInfo potion_dungeon_result_info = 1824; */
        if (message.detail.oneofKind === "potionDungeonResultInfo")
            PotionDungeonResultInfo.internalBinaryWrite(message.detail.potionDungeonResultInfo, writer.tag(1824, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.CustomDungeonResultInfo custom_dungeon_result_info = 1664; */
        if (message.detail.oneofKind === "customDungeonResultInfo")
            CustomDungeonResultInfo.internalBinaryWrite(message.detail.customDungeonResultInfo, writer.tag(1664, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonChallengeFinishNotify
 */
export const DungeonChallengeFinishNotify = new DungeonChallengeFinishNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeDataNotify$Type extends MessageType<ChallengeDataNotify> {
    constructor() {
        super("com.midnights.game.ChallengeDataNotify", [
            { no: 8, name: "value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "param_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeDataNotify>): ChallengeDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChallengeDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeDataNotify): ChallengeDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 value */ 8:
                    message.value = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 2:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 param_index */ 9:
                    message.paramIndex = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 value = 8; */
        if (message.value !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.value);
        /* optional uint32 challenge_index = 2; */
        if (message.challengeIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 param_index = 9; */
        if (message.paramIndex !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.paramIndex);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChallengeDataNotify
 */
export const ChallengeDataNotify = new ChallengeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonFollowNotify$Type extends MessageType<DungeonFollowNotify> {
    constructor() {
        super("com.midnights.game.DungeonFollowNotify", [
            { no: 8, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonFollowNotify>): DungeonFollowNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonFollowNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonFollowNotify): DungeonFollowNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 8:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonFollowNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 8; */
        if (message.targetUid !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonFollowNotify
 */
export const DungeonFollowNotify = new DungeonFollowNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonGetStatueDropReq$Type extends MessageType<DungeonGetStatueDropReq> {
    constructor() {
        super("com.midnights.game.DungeonGetStatueDropReq", []);
    }
    create(value?: PartialMessage<DungeonGetStatueDropReq>): DungeonGetStatueDropReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonGetStatueDropReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonGetStatueDropReq): DungeonGetStatueDropReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DungeonGetStatueDropReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonGetStatueDropReq
 */
export const DungeonGetStatueDropReq = new DungeonGetStatueDropReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonGetStatueDropRsp$Type extends MessageType<DungeonGetStatueDropRsp> {
    constructor() {
        super("com.midnights.game.DungeonGetStatueDropRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonGetStatueDropRsp>): DungeonGetStatueDropRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonGetStatueDropRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonGetStatueDropRsp): DungeonGetStatueDropRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonGetStatueDropRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonGetStatueDropRsp
 */
export const DungeonGetStatueDropRsp = new DungeonGetStatueDropRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeRecord$Type extends MessageType<ChallengeRecord> {
    constructor() {
        super("com.midnights.game.ChallengeRecord", [
            { no: 14, name: "challenge_record_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "best_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChallengeRecord>): ChallengeRecord {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChallengeRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeRecord): ChallengeRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_record_type */ 14:
                    message.challengeRecordType = reader.uint32();
                    break;
                case /* optional uint32 challenge_index */ 15:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 1:
                    message.challengeId = reader.uint32();
                    break;
                case /* optional uint32 best_value */ 8:
                    message.bestValue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_record_type = 14; */
        if (message.challengeRecordType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.challengeRecordType);
        /* optional uint32 challenge_index = 15; */
        if (message.challengeIndex !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 challenge_id = 1; */
        if (message.challengeId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeId);
        /* optional uint32 best_value = 8; */
        if (message.bestValue !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.bestValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChallengeRecord
 */
export const ChallengeRecord = new ChallengeRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChallengeRecordNotify$Type extends MessageType<ChallengeRecordNotify> {
    constructor() {
        super("com.midnights.game.ChallengeRecordNotify", [
            { no: 2, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ChallengeRecord }
        ]);
    }
    create(value?: PartialMessage<ChallengeRecordNotify>): ChallengeRecordNotify {
        const message = { challengeRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChallengeRecordNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChallengeRecordNotify): ChallengeRecordNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 group_id */ 2:
                    message.groupId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ChallengeRecord challenge_record_list */ 5:
                    message.challengeRecordList.push(ChallengeRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChallengeRecordNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 group_id = 2; */
        if (message.groupId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.groupId);
        /* repeated com.midnights.game.ChallengeRecord challenge_record_list = 5; */
        for (let i = 0; i < message.challengeRecordList.length; i++)
            ChallengeRecord.internalBinaryWrite(message.challengeRecordList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChallengeRecordNotify
 */
export const ChallengeRecordNotify = new ChallengeRecordNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamAvatar$Type extends MessageType<DungeonCandidateTeamAvatar> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamAvatar", [
            { no: 2, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "avatar_info", kind: "message", T: () => AvatarInfo }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamAvatar>): DungeonCandidateTeamAvatar {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamAvatar): DungeonCandidateTeamAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_uid */ 2:
                    message.playerUid = reader.uint32();
                    break;
                case /* optional com.midnights.game.AvatarInfo avatar_info */ 6:
                    message.avatarInfo = AvatarInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_uid = 2; */
        if (message.playerUid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.playerUid);
        /* optional com.midnights.game.AvatarInfo avatar_info = 6; */
        if (message.avatarInfo)
            AvatarInfo.internalBinaryWrite(message.avatarInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamAvatar
 */
export const DungeonCandidateTeamAvatar = new DungeonCandidateTeamAvatar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamInfoNotify$Type extends MessageType<DungeonCandidateTeamInfoNotify> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamInfoNotify", [
            { no: 10, name: "player_state_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "enum", T: () => ["com.midnights.game.DungeonCandidateTeamPlayerState", DungeonCandidateTeamPlayerState, "DUNGEON_CANDIDATE_TEAM_PLAYER_STATE_"] } },
            { no: 9, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "ready_player_uid", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "match_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "avatar_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DungeonCandidateTeamAvatar }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamInfoNotify>): DungeonCandidateTeamInfoNotify {
        const message = { playerStateMap: {}, readyPlayerUid: [], avatarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamInfoNotify): DungeonCandidateTeamInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.DungeonCandidateTeamPlayerState> player_state_map */ 10:
                    this.binaryReadMap10(message.playerStateMap, reader, options);
                    break;
                case /* optional uint32 dungeon_id */ 9:
                    message.dungeonId = reader.uint32();
                    break;
                case /* repeated uint32 ready_player_uid */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.readyPlayerUid.push(reader.uint32());
                    else
                        message.readyPlayerUid.push(reader.uint32());
                    break;
                case /* optional uint32 match_type */ 2:
                    message.matchType = reader.uint32();
                    break;
                case /* repeated com.midnights.game.DungeonCandidateTeamAvatar avatar_list */ 4:
                    message.avatarList.push(DungeonCandidateTeamAvatar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: DungeonCandidateTeamInfoNotify["playerStateMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof DungeonCandidateTeamInfoNotify["playerStateMap"] | undefined, val: DungeonCandidateTeamInfoNotify["playerStateMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.DungeonCandidateTeamInfoNotify.player_state_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: DungeonCandidateTeamInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.DungeonCandidateTeamPlayerState> player_state_map = 10; */
        for (let k of Object.keys(message.playerStateMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).int32(message.playerStateMap[k as any]).join();
        /* optional uint32 dungeon_id = 9; */
        if (message.dungeonId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.dungeonId);
        /* repeated uint32 ready_player_uid = 13; */
        for (let i = 0; i < message.readyPlayerUid.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.readyPlayerUid[i]);
        /* optional uint32 match_type = 2; */
        if (message.matchType !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.matchType);
        /* repeated com.midnights.game.DungeonCandidateTeamAvatar avatar_list = 4; */
        for (let i = 0; i < message.avatarList.length; i++)
            DungeonCandidateTeamAvatar.internalBinaryWrite(message.avatarList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamInfoNotify
 */
export const DungeonCandidateTeamInfoNotify = new DungeonCandidateTeamInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamInviteNotify$Type extends MessageType<DungeonCandidateTeamInviteNotify> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamInviteNotify", [
            { no: 5, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "vaild_deadline_time_sec", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamInviteNotify>): DungeonCandidateTeamInviteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamInviteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamInviteNotify): DungeonCandidateTeamInviteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_uid */ 5:
                    message.playerUid = reader.uint32();
                    break;
                case /* optional uint32 vaild_deadline_time_sec */ 9:
                    message.vaildDeadlineTimeSec = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamInviteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_uid = 5; */
        if (message.playerUid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.playerUid);
        /* optional uint32 vaild_deadline_time_sec = 9; */
        if (message.vaildDeadlineTimeSec !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.vaildDeadlineTimeSec);
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamInviteNotify
 */
export const DungeonCandidateTeamInviteNotify = new DungeonCandidateTeamInviteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamRefuseNotify$Type extends MessageType<DungeonCandidateTeamRefuseNotify> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamRefuseNotify", [
            { no: 3, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamRefuseNotify>): DungeonCandidateTeamRefuseNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamRefuseNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamRefuseNotify): DungeonCandidateTeamRefuseNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_uid */ 3:
                    message.playerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamRefuseNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_uid = 3; */
        if (message.playerUid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.playerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamRefuseNotify
 */
export const DungeonCandidateTeamRefuseNotify = new DungeonCandidateTeamRefuseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamPlayerLeaveNotify$Type extends MessageType<DungeonCandidateTeamPlayerLeaveNotify> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamPlayerLeaveNotify", [
            { no: 3, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.DungeonCandidateTeamPlayerLeaveReason", DungeonCandidateTeamPlayerLeaveReason] },
            { no: 13, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamPlayerLeaveNotify>): DungeonCandidateTeamPlayerLeaveNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamPlayerLeaveNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamPlayerLeaveNotify): DungeonCandidateTeamPlayerLeaveNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DungeonCandidateTeamPlayerLeaveReason reason */ 3:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 player_uid */ 13:
                    message.playerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamPlayerLeaveNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DungeonCandidateTeamPlayerLeaveReason reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.reason);
        /* optional uint32 player_uid = 13; */
        if (message.playerUid !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.playerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamPlayerLeaveNotify
 */
export const DungeonCandidateTeamPlayerLeaveNotify = new DungeonCandidateTeamPlayerLeaveNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamDismissNotify$Type extends MessageType<DungeonCandidateTeamDismissNotify> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamDismissNotify", [
            { no: 9, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.DungeonCandidateTeamDismissReason", DungeonCandidateTeamDismissReason] },
            { no: 12, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamDismissNotify>): DungeonCandidateTeamDismissNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamDismissNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamDismissNotify): DungeonCandidateTeamDismissNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DungeonCandidateTeamDismissReason reason */ 9:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 player_uid */ 12:
                    message.playerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamDismissNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DungeonCandidateTeamDismissReason reason = 9; */
        if (message.reason !== undefined)
            writer.tag(9, WireType.Varint).int32(message.reason);
        /* optional uint32 player_uid = 12; */
        if (message.playerUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.playerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamDismissNotify
 */
export const DungeonCandidateTeamDismissNotify = new DungeonCandidateTeamDismissNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamCreateReq$Type extends MessageType<DungeonCandidateTeamCreateReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamCreateReq", [
            { no: 7, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamCreateReq>): DungeonCandidateTeamCreateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamCreateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamCreateReq): DungeonCandidateTeamCreateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 7:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamCreateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 7; */
        if (message.pointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.pointId);
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamCreateReq
 */
export const DungeonCandidateTeamCreateReq = new DungeonCandidateTeamCreateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamCreateRsp$Type extends MessageType<DungeonCandidateTeamCreateRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamCreateRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamCreateRsp>): DungeonCandidateTeamCreateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamCreateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamCreateRsp): DungeonCandidateTeamCreateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamCreateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamCreateRsp
 */
export const DungeonCandidateTeamCreateRsp = new DungeonCandidateTeamCreateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamInviteReq$Type extends MessageType<DungeonCandidateTeamInviteReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamInviteReq", [
            { no: 5, name: "player_uids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamInviteReq>): DungeonCandidateTeamInviteReq {
        const message = { playerUids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamInviteReq): DungeonCandidateTeamInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 player_uids */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.playerUids.push(reader.uint32());
                    else
                        message.playerUids.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 player_uids = 5; */
        for (let i = 0; i < message.playerUids.length; i++)
            writer.tag(5, WireType.Varint).uint32(message.playerUids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamInviteReq
 */
export const DungeonCandidateTeamInviteReq = new DungeonCandidateTeamInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamInviteRsp$Type extends MessageType<DungeonCandidateTeamInviteRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamInviteRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "invalid_player_uids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamInviteRsp>): DungeonCandidateTeamInviteRsp {
        const message = { invalidPlayerUids: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamInviteRsp): DungeonCandidateTeamInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 invalid_player_uids */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.invalidPlayerUids.push(reader.uint32());
                    else
                        message.invalidPlayerUids.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* repeated uint32 invalid_player_uids = 7; */
        for (let i = 0; i < message.invalidPlayerUids.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.invalidPlayerUids[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamInviteRsp
 */
export const DungeonCandidateTeamInviteRsp = new DungeonCandidateTeamInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamKickReq$Type extends MessageType<DungeonCandidateTeamKickReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamKickReq", [
            { no: 9, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamKickReq>): DungeonCandidateTeamKickReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamKickReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamKickReq): DungeonCandidateTeamKickReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_uid */ 9:
                    message.playerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamKickReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_uid = 9; */
        if (message.playerUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.playerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamKickReq
 */
export const DungeonCandidateTeamKickReq = new DungeonCandidateTeamKickReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamKickRsp$Type extends MessageType<DungeonCandidateTeamKickRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamKickRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamKickRsp>): DungeonCandidateTeamKickRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamKickRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamKickRsp): DungeonCandidateTeamKickRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamKickRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamKickRsp
 */
export const DungeonCandidateTeamKickRsp = new DungeonCandidateTeamKickRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamLeaveReq$Type extends MessageType<DungeonCandidateTeamLeaveReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamLeaveReq", []);
    }
    create(value?: PartialMessage<DungeonCandidateTeamLeaveReq>): DungeonCandidateTeamLeaveReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamLeaveReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamLeaveReq): DungeonCandidateTeamLeaveReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DungeonCandidateTeamLeaveReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamLeaveReq
 */
export const DungeonCandidateTeamLeaveReq = new DungeonCandidateTeamLeaveReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamLeaveRsp$Type extends MessageType<DungeonCandidateTeamLeaveRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamLeaveRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamLeaveRsp>): DungeonCandidateTeamLeaveRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamLeaveRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamLeaveRsp): DungeonCandidateTeamLeaveRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamLeaveRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamLeaveRsp
 */
export const DungeonCandidateTeamLeaveRsp = new DungeonCandidateTeamLeaveRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamReplyInviteReq$Type extends MessageType<DungeonCandidateTeamReplyInviteReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamReplyInviteReq", [
            { no: 5, name: "is_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamReplyInviteReq>): DungeonCandidateTeamReplyInviteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamReplyInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamReplyInviteReq): DungeonCandidateTeamReplyInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_accept */ 5:
                    message.isAccept = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamReplyInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_accept = 5; */
        if (message.isAccept !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isAccept);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamReplyInviteReq
 */
export const DungeonCandidateTeamReplyInviteReq = new DungeonCandidateTeamReplyInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamReplyInviteRsp$Type extends MessageType<DungeonCandidateTeamReplyInviteRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamReplyInviteRsp", [
            { no: 4, name: "is_trans_point", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamReplyInviteRsp>): DungeonCandidateTeamReplyInviteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamReplyInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamReplyInviteRsp): DungeonCandidateTeamReplyInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_trans_point */ 4:
                    message.isTransPoint = reader.bool();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamReplyInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_trans_point = 4; */
        if (message.isTransPoint !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isTransPoint);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamReplyInviteRsp
 */
export const DungeonCandidateTeamReplyInviteRsp = new DungeonCandidateTeamReplyInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamSetReadyReq$Type extends MessageType<DungeonCandidateTeamSetReadyReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamSetReadyReq", [
            { no: 15, name: "is_ready", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamSetReadyReq>): DungeonCandidateTeamSetReadyReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamSetReadyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamSetReadyReq): DungeonCandidateTeamSetReadyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_ready */ 15:
                    message.isReady = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamSetReadyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_ready = 15; */
        if (message.isReady !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isReady);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamSetReadyReq
 */
export const DungeonCandidateTeamSetReadyReq = new DungeonCandidateTeamSetReadyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamSetReadyRsp$Type extends MessageType<DungeonCandidateTeamSetReadyRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamSetReadyRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamSetReadyRsp>): DungeonCandidateTeamSetReadyRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamSetReadyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamSetReadyRsp): DungeonCandidateTeamSetReadyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamSetReadyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamSetReadyRsp
 */
export const DungeonCandidateTeamSetReadyRsp = new DungeonCandidateTeamSetReadyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamChangeAvatarReq$Type extends MessageType<DungeonCandidateTeamChangeAvatarReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamChangeAvatarReq", [
            { no: 5, name: "avatar_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamChangeAvatarReq>): DungeonCandidateTeamChangeAvatarReq {
        const message = { avatarGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamChangeAvatarReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamChangeAvatarReq): DungeonCandidateTeamChangeAvatarReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 avatar_guid_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.avatarGuidList.push(reader.uint64().toBigInt());
                    else
                        message.avatarGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamChangeAvatarReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 avatar_guid_list = 5; */
        for (let i = 0; i < message.avatarGuidList.length; i++)
            writer.tag(5, WireType.Varint).uint64(message.avatarGuidList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamChangeAvatarReq
 */
export const DungeonCandidateTeamChangeAvatarReq = new DungeonCandidateTeamChangeAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamChangeAvatarRsp$Type extends MessageType<DungeonCandidateTeamChangeAvatarRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamChangeAvatarRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamChangeAvatarRsp>): DungeonCandidateTeamChangeAvatarRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamChangeAvatarRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamChangeAvatarRsp): DungeonCandidateTeamChangeAvatarRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamChangeAvatarRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamChangeAvatarRsp
 */
export const DungeonCandidateTeamChangeAvatarRsp = new DungeonCandidateTeamChangeAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyDungeonEntryInfo$Type extends MessageType<DailyDungeonEntryInfo> {
    constructor() {
        super("com.midnights.game.DailyDungeonEntryInfo", [
            { no: 12, name: "dungeon_entry_config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "dungeon_entry_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "recommend_dungeon_entry_info", kind: "message", T: () => DungeonEntryInfo },
            { no: 4, name: "recommend_dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DailyDungeonEntryInfo>): DailyDungeonEntryInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyDungeonEntryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyDungeonEntryInfo): DailyDungeonEntryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_entry_config_id */ 12:
                    message.dungeonEntryConfigId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_entry_id */ 15:
                    message.dungeonEntryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.DungeonEntryInfo recommend_dungeon_entry_info */ 1:
                    message.recommendDungeonEntryInfo = DungeonEntryInfo.internalBinaryRead(reader, reader.uint32(), options, message.recommendDungeonEntryInfo);
                    break;
                case /* optional uint32 recommend_dungeon_id */ 4:
                    message.recommendDungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyDungeonEntryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_entry_config_id = 12; */
        if (message.dungeonEntryConfigId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.dungeonEntryConfigId);
        /* optional uint32 dungeon_entry_id = 15; */
        if (message.dungeonEntryId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dungeonEntryId);
        /* optional com.midnights.game.DungeonEntryInfo recommend_dungeon_entry_info = 1; */
        if (message.recommendDungeonEntryInfo)
            DungeonEntryInfo.internalBinaryWrite(message.recommendDungeonEntryInfo, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 recommend_dungeon_id = 4; */
        if (message.recommendDungeonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.recommendDungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyDungeonEntryInfo
 */
export const DailyDungeonEntryInfo = new DailyDungeonEntryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDailyDungeonEntryInfoReq$Type extends MessageType<GetDailyDungeonEntryInfoReq> {
    constructor() {
        super("com.midnights.game.GetDailyDungeonEntryInfoReq", [
            { no: 15, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDailyDungeonEntryInfoReq>): GetDailyDungeonEntryInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDailyDungeonEntryInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDailyDungeonEntryInfoReq): GetDailyDungeonEntryInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 15:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDailyDungeonEntryInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 15; */
        if (message.sceneId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetDailyDungeonEntryInfoReq
 */
export const GetDailyDungeonEntryInfoReq = new GetDailyDungeonEntryInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetDailyDungeonEntryInfoRsp$Type extends MessageType<GetDailyDungeonEntryInfoRsp> {
    constructor() {
        super("com.midnights.game.GetDailyDungeonEntryInfoRsp", [
            { no: 2, name: "daily_dungeon_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DailyDungeonEntryInfo },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetDailyDungeonEntryInfoRsp>): GetDailyDungeonEntryInfoRsp {
        const message = { dailyDungeonInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetDailyDungeonEntryInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetDailyDungeonEntryInfoRsp): GetDailyDungeonEntryInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DailyDungeonEntryInfo daily_dungeon_info_list */ 2:
                    message.dailyDungeonInfoList.push(DailyDungeonEntryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetDailyDungeonEntryInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.DailyDungeonEntryInfo daily_dungeon_info_list = 2; */
        for (let i = 0; i < message.dailyDungeonInfoList.length; i++)
            DailyDungeonEntryInfo.internalBinaryWrite(message.dailyDungeonInfoList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetDailyDungeonEntryInfoRsp
 */
export const GetDailyDungeonEntryInfoRsp = new GetDailyDungeonEntryInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonSlipRevivePointActivateReq$Type extends MessageType<DungeonSlipRevivePointActivateReq> {
    constructor() {
        super("com.midnights.game.DungeonSlipRevivePointActivateReq", [
            { no: 9, name: "slip_revive_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonSlipRevivePointActivateReq>): DungeonSlipRevivePointActivateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonSlipRevivePointActivateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonSlipRevivePointActivateReq): DungeonSlipRevivePointActivateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slip_revive_point_id */ 9:
                    message.slipRevivePointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonSlipRevivePointActivateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slip_revive_point_id = 9; */
        if (message.slipRevivePointId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.slipRevivePointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonSlipRevivePointActivateReq
 */
export const DungeonSlipRevivePointActivateReq = new DungeonSlipRevivePointActivateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonSlipRevivePointActivateRsp$Type extends MessageType<DungeonSlipRevivePointActivateRsp> {
    constructor() {
        super("com.midnights.game.DungeonSlipRevivePointActivateRsp", [
            { no: 14, name: "slip_revive_point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonSlipRevivePointActivateRsp>): DungeonSlipRevivePointActivateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonSlipRevivePointActivateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonSlipRevivePointActivateRsp): DungeonSlipRevivePointActivateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 slip_revive_point_id */ 14:
                    message.slipRevivePointId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonSlipRevivePointActivateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 slip_revive_point_id = 14; */
        if (message.slipRevivePointId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.slipRevivePointId);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonSlipRevivePointActivateRsp
 */
export const DungeonSlipRevivePointActivateRsp = new DungeonSlipRevivePointActivateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonInterruptChallengeReq$Type extends MessageType<DungeonInterruptChallengeReq> {
    constructor() {
        super("com.midnights.game.DungeonInterruptChallengeReq", [
            { no: 14, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonInterruptChallengeReq>): DungeonInterruptChallengeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonInterruptChallengeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonInterruptChallengeReq): DungeonInterruptChallengeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_index */ 14:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 13:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonInterruptChallengeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_index = 14; */
        if (message.challengeIndex !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 group_id = 13; */
        if (message.groupId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.groupId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonInterruptChallengeReq
 */
export const DungeonInterruptChallengeReq = new DungeonInterruptChallengeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonInterruptChallengeRsp$Type extends MessageType<DungeonInterruptChallengeRsp> {
    constructor() {
        super("com.midnights.game.DungeonInterruptChallengeRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "challenge_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonInterruptChallengeRsp>): DungeonInterruptChallengeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonInterruptChallengeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonInterruptChallengeRsp): DungeonInterruptChallengeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 challenge_index */ 2:
                    message.challengeIndex = reader.uint32();
                    break;
                case /* optional uint32 group_id */ 15:
                    message.groupId = reader.uint32();
                    break;
                case /* optional uint32 challenge_id */ 11:
                    message.challengeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonInterruptChallengeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 challenge_index = 2; */
        if (message.challengeIndex !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.challengeIndex);
        /* optional uint32 group_id = 15; */
        if (message.groupId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.groupId);
        /* optional uint32 challenge_id = 11; */
        if (message.challengeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonInterruptChallengeRsp
 */
export const DungeonInterruptChallengeRsp = new DungeonInterruptChallengeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InteractDailyDungeonInfoNotify$Type extends MessageType<InteractDailyDungeonInfoNotify> {
    constructor() {
        super("com.midnights.game.InteractDailyDungeonInfoNotify", []);
    }
    create(value?: PartialMessage<InteractDailyDungeonInfoNotify>): InteractDailyDungeonInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InteractDailyDungeonInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InteractDailyDungeonInfoNotify): InteractDailyDungeonInfoNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: InteractDailyDungeonInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InteractDailyDungeonInfoNotify
 */
export const InteractDailyDungeonInfoNotify = new InteractDailyDungeonInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartReq$Type extends MessageType<DungeonRestartReq> {
    constructor() {
        super("com.midnights.game.DungeonRestartReq", []);
    }
    create(value?: PartialMessage<DungeonRestartReq>): DungeonRestartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartReq): DungeonRestartReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DungeonRestartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartReq
 */
export const DungeonRestartReq = new DungeonRestartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartRsp$Type extends MessageType<DungeonRestartRsp> {
    constructor() {
        super("com.midnights.game.DungeonRestartRsp", [
            { no: 15, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartRsp>): DungeonRestartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartRsp): DungeonRestartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 15:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 point_id */ 14:
                    message.pointId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 15; */
        if (message.dungeonId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.dungeonId);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint32 point_id = 14; */
        if (message.pointId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.pointId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartRsp
 */
export const DungeonRestartRsp = new DungeonRestartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartInviteNotify$Type extends MessageType<DungeonRestartInviteNotify> {
    constructor() {
        super("com.midnights.game.DungeonRestartInviteNotify", [
            { no: 3, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "cd", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartInviteNotify>): DungeonRestartInviteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartInviteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartInviteNotify): DungeonRestartInviteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 player_uid */ 3:
                    message.playerUid = reader.uint32();
                    break;
                case /* optional uint32 cd */ 15:
                    message.cd = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 13:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartInviteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 player_uid = 3; */
        if (message.playerUid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.playerUid);
        /* optional uint32 cd = 15; */
        if (message.cd !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cd);
        /* optional uint32 point_id = 13; */
        if (message.pointId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.pointId);
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartInviteNotify
 */
export const DungeonRestartInviteNotify = new DungeonRestartInviteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartInviteReplyReq$Type extends MessageType<DungeonRestartInviteReplyReq> {
    constructor() {
        super("com.midnights.game.DungeonRestartInviteReplyReq", [
            { no: 11, name: "is_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartInviteReplyReq>): DungeonRestartInviteReplyReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartInviteReplyReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartInviteReplyReq): DungeonRestartInviteReplyReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_accept */ 11:
                    message.isAccept = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartInviteReplyReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_accept = 11; */
        if (message.isAccept !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isAccept);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartInviteReplyReq
 */
export const DungeonRestartInviteReplyReq = new DungeonRestartInviteReplyReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartInviteReplyRsp$Type extends MessageType<DungeonRestartInviteReplyRsp> {
    constructor() {
        super("com.midnights.game.DungeonRestartInviteReplyRsp", [
            { no: 10, name: "is_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "is_trans_point", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartInviteReplyRsp>): DungeonRestartInviteReplyRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartInviteReplyRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartInviteReplyRsp): DungeonRestartInviteReplyRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_accept */ 10:
                    message.isAccept = reader.bool();
                    break;
                case /* optional bool is_trans_point */ 1:
                    message.isTransPoint = reader.bool();
                    break;
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartInviteReplyRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_accept = 10; */
        if (message.isAccept !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isAccept);
        /* optional bool is_trans_point = 1; */
        if (message.isTransPoint !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isTransPoint);
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartInviteReplyRsp
 */
export const DungeonRestartInviteReplyRsp = new DungeonRestartInviteReplyRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartInviteReplyNotify$Type extends MessageType<DungeonRestartInviteReplyNotify> {
    constructor() {
        super("com.midnights.game.DungeonRestartInviteReplyNotify", [
            { no: 6, name: "is_accept", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "player_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartInviteReplyNotify>): DungeonRestartInviteReplyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartInviteReplyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartInviteReplyNotify): DungeonRestartInviteReplyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_accept */ 6:
                    message.isAccept = reader.bool();
                    break;
                case /* optional uint32 player_uid */ 9:
                    message.playerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartInviteReplyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_accept = 6; */
        if (message.isAccept !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isAccept);
        /* optional uint32 player_uid = 9; */
        if (message.playerUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.playerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartInviteReplyNotify
 */
export const DungeonRestartInviteReplyNotify = new DungeonRestartInviteReplyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonRestartResultNotify$Type extends MessageType<DungeonRestartResultNotify> {
    constructor() {
        super("com.midnights.game.DungeonRestartResultNotify", [
            { no: 9, name: "is_add_accpet", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonRestartResultNotify>): DungeonRestartResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonRestartResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonRestartResultNotify): DungeonRestartResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_add_accpet */ 9:
                    message.isAddAccpet = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonRestartResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_add_accpet = 9; */
        if (message.isAddAccpet !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isAddAccpet);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonRestartResultNotify
 */
export const DungeonRestartResultNotify = new DungeonRestartResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamSetChangingAvatarReq$Type extends MessageType<DungeonCandidateTeamSetChangingAvatarReq> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamSetChangingAvatarReq", [
            { no: 12, name: "is_changing_avatar", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamSetChangingAvatarReq>): DungeonCandidateTeamSetChangingAvatarReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamSetChangingAvatarReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamSetChangingAvatarReq): DungeonCandidateTeamSetChangingAvatarReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_changing_avatar */ 12:
                    message.isChangingAvatar = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamSetChangingAvatarReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_changing_avatar = 12; */
        if (message.isChangingAvatar !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isChangingAvatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamSetChangingAvatarReq
 */
export const DungeonCandidateTeamSetChangingAvatarReq = new DungeonCandidateTeamSetChangingAvatarReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonCandidateTeamSetChangingAvatarRsp$Type extends MessageType<DungeonCandidateTeamSetChangingAvatarRsp> {
    constructor() {
        super("com.midnights.game.DungeonCandidateTeamSetChangingAvatarRsp", [
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonCandidateTeamSetChangingAvatarRsp>): DungeonCandidateTeamSetChangingAvatarRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonCandidateTeamSetChangingAvatarRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonCandidateTeamSetChangingAvatarRsp): DungeonCandidateTeamSetChangingAvatarRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonCandidateTeamSetChangingAvatarRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonCandidateTeamSetChangingAvatarRsp
 */
export const DungeonCandidateTeamSetChangingAvatarRsp = new DungeonCandidateTeamSetChangingAvatarRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MistTrialFloorLevelNotify$Type extends MessageType<MistTrialFloorLevelNotify> {
    constructor() {
        super("com.midnights.game.MistTrialFloorLevelNotify", [
            { no: 7, name: "floor_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "dungeon_scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MistTrialFloorLevelNotify>): MistTrialFloorLevelNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MistTrialFloorLevelNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MistTrialFloorLevelNotify): MistTrialFloorLevelNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 floor_level */ 7:
                    message.floorLevel = reader.uint32();
                    break;
                case /* optional uint32 dungeon_scene_id */ 14:
                    message.dungeonSceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MistTrialFloorLevelNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 floor_level = 7; */
        if (message.floorLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.floorLevel);
        /* optional uint32 dungeon_scene_id = 14; */
        if (message.dungeonSceneId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.dungeonSceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MistTrialFloorLevelNotify
 */
export const MistTrialFloorLevelNotify = new MistTrialFloorLevelNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DungeonReviseLevelNotify$Type extends MessageType<DungeonReviseLevelNotify> {
    constructor() {
        super("com.midnights.game.DungeonReviseLevelNotify", [
            { no: 5, name: "scene_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "revise_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DungeonReviseLevelNotify>): DungeonReviseLevelNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DungeonReviseLevelNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DungeonReviseLevelNotify): DungeonReviseLevelNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_level */ 5:
                    message.sceneLevel = reader.uint32();
                    break;
                case /* optional uint32 revise_level */ 10:
                    message.reviseLevel = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DungeonReviseLevelNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_level = 5; */
        if (message.sceneLevel !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneLevel);
        /* optional uint32 revise_level = 10; */
        if (message.reviseLevel !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.reviseLevel);
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DungeonReviseLevelNotify
 */
export const DungeonReviseLevelNotify = new DungeonReviseLevelNotify$Type();
