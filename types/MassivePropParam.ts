/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MassivePropParam.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class MassivePropParam extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        type?: number;
        reaction_info_list?: number[];
        param_list?: number[];
        sync_flag?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("type" in data && data.type != undefined) {
                this.type = data.type;
            }
            if ("reaction_info_list" in data && data.reaction_info_list != undefined) {
                this.reaction_info_list = data.reaction_info_list;
            }
            if ("param_list" in data && data.param_list != undefined) {
                this.param_list = data.param_list;
            }
            if ("sync_flag" in data && data.sync_flag != undefined) {
                this.sync_flag = data.sync_flag;
            }
        }
    }
    get type() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set type(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get reaction_info_list() {
        return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
    }
    set reaction_info_list(value: number[]) {
        pb_1.Message.setField(this, 2, value);
    }
    get param_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set param_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get sync_flag() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set sync_flag(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        type?: number;
        reaction_info_list?: number[];
        param_list?: number[];
        sync_flag?: number;
    }): MassivePropParam {
        const message = new MassivePropParam({});
        if (data.type != null) {
            message.type = data.type;
        }
        if (data.reaction_info_list != null) {
            message.reaction_info_list = data.reaction_info_list;
        }
        if (data.param_list != null) {
            message.param_list = data.param_list;
        }
        if (data.sync_flag != null) {
            message.sync_flag = data.sync_flag;
        }
        return message;
    }
    toObject() {
        const data: {
            type?: number;
            reaction_info_list?: number[];
            param_list?: number[];
            sync_flag?: number;
        } = {};
        if (this.type != null) {
            data.type = this.type;
        }
        if (this.reaction_info_list != null) {
            data.reaction_info_list = this.reaction_info_list;
        }
        if (this.param_list != null) {
            data.param_list = this.param_list;
        }
        if (this.sync_flag != null) {
            data.sync_flag = this.sync_flag;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.type != 0)
            writer.writeInt32(1, this.type);
        if (this.reaction_info_list.length)
            writer.writePackedUint32(2, this.reaction_info_list);
        if (this.param_list.length)
            writer.writePackedFloat(3, this.param_list);
        if (this.sync_flag != 0)
            writer.writeUint32(4, this.sync_flag);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassivePropParam {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassivePropParam();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.type = reader.readInt32();
                    break;
                case 2:
                    message.reaction_info_list = reader.readPackedUint32();
                    break;
                case 3:
                    message.param_list = reader.readPackedFloat();
                    break;
                case 4:
                    message.sync_flag = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MassivePropParam {
        return MassivePropParam.deserialize(bytes);
    }
}
