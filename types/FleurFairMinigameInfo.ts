/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FleurFairMinigameInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./FleurFairBalloonInfo";
import * as dependency_2 from "./FleurFairFallInfo";
import * as dependency_3 from "./FleurFairMusicGameInfo";
import * as pb_1 from "google-protobuf";
export class FleurFairMinigameInfo extends pb_1.Message {
    #one_of_decls: number[][] = [[12, 11, 9]];
    constructor(data?: any[] | ({
        minigame_id?: number;
        is_open?: boolean;
        open_time?: number;
    } & (({
        balloon_info?: dependency_1.FleurFairBalloonInfo;
        fall_info?: never;
        music_info?: never;
    } | {
        balloon_info?: never;
        fall_info?: dependency_2.FleurFairFallInfo;
        music_info?: never;
    } | {
        balloon_info?: never;
        fall_info?: never;
        music_info?: dependency_3.FleurFairMusicGameInfo;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("minigame_id" in data && data.minigame_id != undefined) {
                this.minigame_id = data.minigame_id;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
            if ("open_time" in data && data.open_time != undefined) {
                this.open_time = data.open_time;
            }
            if ("balloon_info" in data && data.balloon_info != undefined) {
                this.balloon_info = data.balloon_info;
            }
            if ("fall_info" in data && data.fall_info != undefined) {
                this.fall_info = data.fall_info;
            }
            if ("music_info" in data && data.music_info != undefined) {
                this.music_info = data.music_info;
            }
        }
    }
    get minigame_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set minigame_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set is_open(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get open_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set open_time(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get balloon_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.FleurFairBalloonInfo, 12) as dependency_1.FleurFairBalloonInfo;
    }
    set balloon_info(value: dependency_1.FleurFairBalloonInfo) {
        pb_1.Message.setOneofWrapperField(this, 12, this.#one_of_decls[0], value);
    }
    get has_balloon_info() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get fall_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.FleurFairFallInfo, 11) as dependency_2.FleurFairFallInfo;
    }
    set fall_info(value: dependency_2.FleurFairFallInfo) {
        pb_1.Message.setOneofWrapperField(this, 11, this.#one_of_decls[0], value);
    }
    get has_fall_info() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get music_info() {
        return pb_1.Message.getWrapperField(this, dependency_3.FleurFairMusicGameInfo, 9) as dependency_3.FleurFairMusicGameInfo;
    }
    set music_info(value: dependency_3.FleurFairMusicGameInfo) {
        pb_1.Message.setOneofWrapperField(this, 9, this.#one_of_decls[0], value);
    }
    get has_music_info() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get detail() {
        const cases: {
            [index: number]: "none" | "balloon_info" | "fall_info" | "music_info";
        } = {
            0: "none",
            12: "balloon_info",
            11: "fall_info",
            9: "music_info"
        };
        return cases[pb_1.Message.computeOneofCase(this, [12, 11, 9])];
    }
    static fromObject(data: {
        minigame_id?: number;
        is_open?: boolean;
        open_time?: number;
        balloon_info?: ReturnType<typeof dependency_1.FleurFairBalloonInfo.prototype.toObject>;
        fall_info?: ReturnType<typeof dependency_2.FleurFairFallInfo.prototype.toObject>;
        music_info?: ReturnType<typeof dependency_3.FleurFairMusicGameInfo.prototype.toObject>;
    }): FleurFairMinigameInfo {
        const message = new FleurFairMinigameInfo({});
        if (data.minigame_id != null) {
            message.minigame_id = data.minigame_id;
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        if (data.open_time != null) {
            message.open_time = data.open_time;
        }
        if (data.balloon_info != null) {
            message.balloon_info = dependency_1.FleurFairBalloonInfo.fromObject(data.balloon_info);
        }
        if (data.fall_info != null) {
            message.fall_info = dependency_2.FleurFairFallInfo.fromObject(data.fall_info);
        }
        if (data.music_info != null) {
            message.music_info = dependency_3.FleurFairMusicGameInfo.fromObject(data.music_info);
        }
        return message;
    }
    toObject() {
        const data: {
            minigame_id?: number;
            is_open?: boolean;
            open_time?: number;
            balloon_info?: ReturnType<typeof dependency_1.FleurFairBalloonInfo.prototype.toObject>;
            fall_info?: ReturnType<typeof dependency_2.FleurFairFallInfo.prototype.toObject>;
            music_info?: ReturnType<typeof dependency_3.FleurFairMusicGameInfo.prototype.toObject>;
        } = {};
        if (this.minigame_id != null) {
            data.minigame_id = this.minigame_id;
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        if (this.open_time != null) {
            data.open_time = this.open_time;
        }
        if (this.balloon_info != null) {
            data.balloon_info = this.balloon_info.toObject();
        }
        if (this.fall_info != null) {
            data.fall_info = this.fall_info.toObject();
        }
        if (this.music_info != null) {
            data.music_info = this.music_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.minigame_id != 0)
            writer.writeUint32(13, this.minigame_id);
        if (this.is_open != false)
            writer.writeBool(8, this.is_open);
        if (this.open_time != 0)
            writer.writeUint32(15, this.open_time);
        if (this.has_balloon_info)
            writer.writeMessage(12, this.balloon_info, () => this.balloon_info.serialize(writer));
        if (this.has_fall_info)
            writer.writeMessage(11, this.fall_info, () => this.fall_info.serialize(writer));
        if (this.has_music_info)
            writer.writeMessage(9, this.music_info, () => this.music_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FleurFairMinigameInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FleurFairMinigameInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.minigame_id = reader.readUint32();
                    break;
                case 8:
                    message.is_open = reader.readBool();
                    break;
                case 15:
                    message.open_time = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.balloon_info, () => message.balloon_info = dependency_1.FleurFairBalloonInfo.deserialize(reader));
                    break;
                case 11:
                    reader.readMessage(message.fall_info, () => message.fall_info = dependency_2.FleurFairFallInfo.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.music_info, () => message.music_info = dependency_3.FleurFairMusicGameInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FleurFairMinigameInfo {
        return FleurFairMinigameInfo.deserialize(bytes);
    }
}
