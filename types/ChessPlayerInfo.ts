/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChessPlayerInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ChessNormalCardInfo";
import * as pb_1 from "google-protobuf";
export class ChessPlayerInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        free_refresh_limit?: number;
        candidate_card_info_list?: dependency_1.ChessNormalCardInfo[];
        building_points?: number;
        candidate_index?: number;
        free_refresh_count?: number;
        refresh_cost?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("free_refresh_limit" in data && data.free_refresh_limit != undefined) {
                this.free_refresh_limit = data.free_refresh_limit;
            }
            if ("candidate_card_info_list" in data && data.candidate_card_info_list != undefined) {
                this.candidate_card_info_list = data.candidate_card_info_list;
            }
            if ("building_points" in data && data.building_points != undefined) {
                this.building_points = data.building_points;
            }
            if ("candidate_index" in data && data.candidate_index != undefined) {
                this.candidate_index = data.candidate_index;
            }
            if ("free_refresh_count" in data && data.free_refresh_count != undefined) {
                this.free_refresh_count = data.free_refresh_count;
            }
            if ("refresh_cost" in data && data.refresh_cost != undefined) {
                this.refresh_cost = data.refresh_cost;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get free_refresh_limit() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set free_refresh_limit(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get candidate_card_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ChessNormalCardInfo, 3) as dependency_1.ChessNormalCardInfo[];
    }
    set candidate_card_info_list(value: dependency_1.ChessNormalCardInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    get building_points() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set building_points(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get candidate_index() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set candidate_index(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get free_refresh_count() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set free_refresh_count(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get refresh_cost() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set refresh_cost(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        uid?: number;
        free_refresh_limit?: number;
        candidate_card_info_list?: ReturnType<typeof dependency_1.ChessNormalCardInfo.prototype.toObject>[];
        building_points?: number;
        candidate_index?: number;
        free_refresh_count?: number;
        refresh_cost?: number;
    }): ChessPlayerInfo {
        const message = new ChessPlayerInfo({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.free_refresh_limit != null) {
            message.free_refresh_limit = data.free_refresh_limit;
        }
        if (data.candidate_card_info_list != null) {
            message.candidate_card_info_list = data.candidate_card_info_list.map(item => dependency_1.ChessNormalCardInfo.fromObject(item));
        }
        if (data.building_points != null) {
            message.building_points = data.building_points;
        }
        if (data.candidate_index != null) {
            message.candidate_index = data.candidate_index;
        }
        if (data.free_refresh_count != null) {
            message.free_refresh_count = data.free_refresh_count;
        }
        if (data.refresh_cost != null) {
            message.refresh_cost = data.refresh_cost;
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            free_refresh_limit?: number;
            candidate_card_info_list?: ReturnType<typeof dependency_1.ChessNormalCardInfo.prototype.toObject>[];
            building_points?: number;
            candidate_index?: number;
            free_refresh_count?: number;
            refresh_cost?: number;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.free_refresh_limit != null) {
            data.free_refresh_limit = this.free_refresh_limit;
        }
        if (this.candidate_card_info_list != null) {
            data.candidate_card_info_list = this.candidate_card_info_list.map((item: dependency_1.ChessNormalCardInfo) => item.toObject());
        }
        if (this.building_points != null) {
            data.building_points = this.building_points;
        }
        if (this.candidate_index != null) {
            data.candidate_index = this.candidate_index;
        }
        if (this.free_refresh_count != null) {
            data.free_refresh_count = this.free_refresh_count;
        }
        if (this.refresh_cost != null) {
            data.refresh_cost = this.refresh_cost;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(5, this.uid);
        if (this.free_refresh_limit != 0)
            writer.writeUint32(10, this.free_refresh_limit);
        if (this.candidate_card_info_list.length)
            writer.writeRepeatedMessage(3, this.candidate_card_info_list, (item: dependency_1.ChessNormalCardInfo) => item.serialize(writer));
        if (this.building_points != 0)
            writer.writeUint32(12, this.building_points);
        if (this.candidate_index != 0)
            writer.writeUint32(6, this.candidate_index);
        if (this.free_refresh_count != 0)
            writer.writeUint32(13, this.free_refresh_count);
        if (this.refresh_cost != 0)
            writer.writeUint32(7, this.refresh_cost);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChessPlayerInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChessPlayerInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.uid = reader.readUint32();
                    break;
                case 10:
                    message.free_refresh_limit = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.candidate_card_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.ChessNormalCardInfo.deserialize(reader), dependency_1.ChessNormalCardInfo));
                    break;
                case 12:
                    message.building_points = reader.readUint32();
                    break;
                case 6:
                    message.candidate_index = reader.readUint32();
                    break;
                case 13:
                    message.free_refresh_count = reader.readUint32();
                    break;
                case 7:
                    message.refresh_cost = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChessPlayerInfo {
        return ChessPlayerInfo.deserialize(bytes);
    }
}
