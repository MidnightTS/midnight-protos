// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "PlayerEyePointStateNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { PolygonRegionSize } from "./PolygonRegionSize";
import { CylinderRegionSize } from "./CylinderRegionSize";
import { Vector } from "./Vector";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 3079;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message PlayerEyePointStateNotify
 */
export interface PlayerEyePointStateNotify {
    /**
     * @generated from protobuf field: Vector eye_point_pos = 12;
     */
    eyePointPos?: Vector;
    /**
     * @generated from protobuf field: bool Unk3300_KFOHOBLMMLB = 9 [json_name = "Unk3300KFOHOBLMMLB"];
     */
    unk3300KFOHOBLMMLB: boolean;
    /**
     * @generated from protobuf field: uint32 Unk3300_GNFJIOEGHOE = 1 [json_name = "Unk3300GNFJIOEGHOE"];
     */
    unk3300GNFJIOEGHOE: number;
    /**
     * @generated from protobuf field: uint32 Unk3300_BIHEKNFDDDI = 8 [json_name = "Unk3300BIHEKNFDDDI"];
     */
    unk3300BIHEKNFDDDI: number;
    /**
     * @generated from protobuf field: int32 fix_lod_level = 11;
     */
    fixLodLevel: number;
    /**
     * @generated from protobuf field: bool Unk3300_NIPFCFCBFAE = 14 [json_name = "Unk3300NIPFCFCBFAE"];
     */
    unk3300NIPFCFCBFAE: boolean;
    /**
     * @generated from protobuf field: uint32 Unk3300_JGEMKKJAHKA = 13 [json_name = "Unk3300JGEMKKJAHKA"];
     */
    unk3300JGEMKKJAHKA: number;
    /**
     * @generated from protobuf field: uint32 Unk3300_EOPFNBBBGPK = 6 [json_name = "Unk3300EOPFNBBBGPK"];
     */
    unk3300EOPFNBBBGPK: number;
    /**
     * @generated from protobuf oneof: region_size
     */
    regionSize: {
        oneofKind: "sphereRadius";
        /**
         * @generated from protobuf field: float sphere_radius = 1413;
         */
        sphereRadius: number;
    } | {
        oneofKind: "cubicSize";
        /**
         * @generated from protobuf field: Vector cubic_size = 1362;
         */
        cubicSize: Vector;
    } | {
        oneofKind: "cylinderSize";
        /**
         * @generated from protobuf field: CylinderRegionSize cylinder_size = 1250;
         */
        cylinderSize: CylinderRegionSize;
    } | {
        oneofKind: "polygonSize";
        /**
         * @generated from protobuf field: PolygonRegionSize polygon_size = 608;
         */
        polygonSize: PolygonRegionSize;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEyePointStateNotify$Type extends MessageType<PlayerEyePointStateNotify> {
    constructor() {
        super("PlayerEyePointStateNotify", [
            { no: 12, name: "eye_point_pos", kind: "message", T: () => Vector },
            { no: 9, name: "Unk3300_KFOHOBLMMLB", kind: "scalar", jsonName: "Unk3300KFOHOBLMMLB", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "Unk3300_GNFJIOEGHOE", kind: "scalar", jsonName: "Unk3300GNFJIOEGHOE", T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "Unk3300_BIHEKNFDDDI", kind: "scalar", jsonName: "Unk3300BIHEKNFDDDI", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "fix_lod_level", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "Unk3300_NIPFCFCBFAE", kind: "scalar", jsonName: "Unk3300NIPFCFCBFAE", T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "Unk3300_JGEMKKJAHKA", kind: "scalar", jsonName: "Unk3300JGEMKKJAHKA", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "Unk3300_EOPFNBBBGPK", kind: "scalar", jsonName: "Unk3300EOPFNBBBGPK", T: 13 /*ScalarType.UINT32*/ },
            { no: 1413, name: "sphere_radius", kind: "scalar", oneof: "regionSize", T: 2 /*ScalarType.FLOAT*/ },
            { no: 1362, name: "cubic_size", kind: "message", oneof: "regionSize", T: () => Vector },
            { no: 1250, name: "cylinder_size", kind: "message", oneof: "regionSize", T: () => CylinderRegionSize },
            { no: 608, name: "polygon_size", kind: "message", oneof: "regionSize", T: () => PolygonRegionSize }
        ]);
    }
    create(value?: PartialMessage<PlayerEyePointStateNotify>): PlayerEyePointStateNotify {
        const message = { unk3300KFOHOBLMMLB: false, unk3300GNFJIOEGHOE: 0, unk3300BIHEKNFDDDI: 0, fixLodLevel: 0, unk3300NIPFCFCBFAE: false, unk3300JGEMKKJAHKA: 0, unk3300EOPFNBBBGPK: 0, regionSize: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEyePointStateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEyePointStateNotify): PlayerEyePointStateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* Vector eye_point_pos */ 12:
                    message.eyePointPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.eyePointPos);
                    break;
                case /* bool Unk3300_KFOHOBLMMLB = 9 [json_name = "Unk3300KFOHOBLMMLB"];*/ 9:
                    message.unk3300KFOHOBLMMLB = reader.bool();
                    break;
                case /* uint32 Unk3300_GNFJIOEGHOE = 1 [json_name = "Unk3300GNFJIOEGHOE"];*/ 1:
                    message.unk3300GNFJIOEGHOE = reader.uint32();
                    break;
                case /* uint32 Unk3300_BIHEKNFDDDI = 8 [json_name = "Unk3300BIHEKNFDDDI"];*/ 8:
                    message.unk3300BIHEKNFDDDI = reader.uint32();
                    break;
                case /* int32 fix_lod_level */ 11:
                    message.fixLodLevel = reader.int32();
                    break;
                case /* bool Unk3300_NIPFCFCBFAE = 14 [json_name = "Unk3300NIPFCFCBFAE"];*/ 14:
                    message.unk3300NIPFCFCBFAE = reader.bool();
                    break;
                case /* uint32 Unk3300_JGEMKKJAHKA = 13 [json_name = "Unk3300JGEMKKJAHKA"];*/ 13:
                    message.unk3300JGEMKKJAHKA = reader.uint32();
                    break;
                case /* uint32 Unk3300_EOPFNBBBGPK = 6 [json_name = "Unk3300EOPFNBBBGPK"];*/ 6:
                    message.unk3300EOPFNBBBGPK = reader.uint32();
                    break;
                case /* float sphere_radius */ 1413:
                    message.regionSize = {
                        oneofKind: "sphereRadius",
                        sphereRadius: reader.float()
                    };
                    break;
                case /* Vector cubic_size */ 1362:
                    message.regionSize = {
                        oneofKind: "cubicSize",
                        cubicSize: Vector.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).cubicSize)
                    };
                    break;
                case /* CylinderRegionSize cylinder_size */ 1250:
                    message.regionSize = {
                        oneofKind: "cylinderSize",
                        cylinderSize: CylinderRegionSize.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).cylinderSize)
                    };
                    break;
                case /* PolygonRegionSize polygon_size */ 608:
                    message.regionSize = {
                        oneofKind: "polygonSize",
                        polygonSize: PolygonRegionSize.internalBinaryRead(reader, reader.uint32(), options, (message.regionSize as any).polygonSize)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEyePointStateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* Vector eye_point_pos = 12; */
        if (message.eyePointPos)
            Vector.internalBinaryWrite(message.eyePointPos, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* bool Unk3300_KFOHOBLMMLB = 9 [json_name = "Unk3300KFOHOBLMMLB"]; */
        if (message.unk3300KFOHOBLMMLB !== false)
            writer.tag(9, WireType.Varint).bool(message.unk3300KFOHOBLMMLB);
        /* uint32 Unk3300_GNFJIOEGHOE = 1 [json_name = "Unk3300GNFJIOEGHOE"]; */
        if (message.unk3300GNFJIOEGHOE !== 0)
            writer.tag(1, WireType.Varint).uint32(message.unk3300GNFJIOEGHOE);
        /* uint32 Unk3300_BIHEKNFDDDI = 8 [json_name = "Unk3300BIHEKNFDDDI"]; */
        if (message.unk3300BIHEKNFDDDI !== 0)
            writer.tag(8, WireType.Varint).uint32(message.unk3300BIHEKNFDDDI);
        /* int32 fix_lod_level = 11; */
        if (message.fixLodLevel !== 0)
            writer.tag(11, WireType.Varint).int32(message.fixLodLevel);
        /* bool Unk3300_NIPFCFCBFAE = 14 [json_name = "Unk3300NIPFCFCBFAE"]; */
        if (message.unk3300NIPFCFCBFAE !== false)
            writer.tag(14, WireType.Varint).bool(message.unk3300NIPFCFCBFAE);
        /* uint32 Unk3300_JGEMKKJAHKA = 13 [json_name = "Unk3300JGEMKKJAHKA"]; */
        if (message.unk3300JGEMKKJAHKA !== 0)
            writer.tag(13, WireType.Varint).uint32(message.unk3300JGEMKKJAHKA);
        /* uint32 Unk3300_EOPFNBBBGPK = 6 [json_name = "Unk3300EOPFNBBBGPK"]; */
        if (message.unk3300EOPFNBBBGPK !== 0)
            writer.tag(6, WireType.Varint).uint32(message.unk3300EOPFNBBBGPK);
        /* float sphere_radius = 1413; */
        if (message.regionSize.oneofKind === "sphereRadius")
            writer.tag(1413, WireType.Bit32).float(message.regionSize.sphereRadius);
        /* Vector cubic_size = 1362; */
        if (message.regionSize.oneofKind === "cubicSize")
            Vector.internalBinaryWrite(message.regionSize.cubicSize, writer.tag(1362, WireType.LengthDelimited).fork(), options).join();
        /* CylinderRegionSize cylinder_size = 1250; */
        if (message.regionSize.oneofKind === "cylinderSize")
            CylinderRegionSize.internalBinaryWrite(message.regionSize.cylinderSize, writer.tag(1250, WireType.LengthDelimited).fork(), options).join();
        /* PolygonRegionSize polygon_size = 608; */
        if (message.regionSize.oneofKind === "polygonSize")
            PolygonRegionSize.internalBinaryWrite(message.regionSize.polygonSize, writer.tag(608, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerEyePointStateNotify
 */
export const PlayerEyePointStateNotify = new PlayerEyePointStateNotify$Type();
