/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerStartMatchReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MatchType";
import * as pb_1 from "google-protobuf";
export class PlayerStartMatchReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        match_type?: dependency_1.MatchType;
        mechanicus_difficult_level?: number;
        match_param_list?: number[];
        dungeon_id?: number;
        mp_play_id?: number;
        match_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("match_type" in data && data.match_type != undefined) {
                this.match_type = data.match_type;
            }
            if ("mechanicus_difficult_level" in data && data.mechanicus_difficult_level != undefined) {
                this.mechanicus_difficult_level = data.mechanicus_difficult_level;
            }
            if ("match_param_list" in data && data.match_param_list != undefined) {
                this.match_param_list = data.match_param_list;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("mp_play_id" in data && data.mp_play_id != undefined) {
                this.mp_play_id = data.mp_play_id;
            }
            if ("match_id" in data && data.match_id != undefined) {
                this.match_id = data.match_id;
            }
        }
    }
    get match_type() {
        return pb_1.Message.getFieldWithDefault(this, 3, dependency_1.MatchType.MATCH_TYPE_NONE) as dependency_1.MatchType;
    }
    set match_type(value: dependency_1.MatchType) {
        pb_1.Message.setField(this, 3, value);
    }
    get mechanicus_difficult_level() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set mechanicus_difficult_level(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get match_param_list() {
        return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
    }
    set match_param_list(value: number[]) {
        pb_1.Message.setField(this, 11, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get mp_play_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mp_play_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get match_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set match_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        match_type?: dependency_1.MatchType;
        mechanicus_difficult_level?: number;
        match_param_list?: number[];
        dungeon_id?: number;
        mp_play_id?: number;
        match_id?: number;
    }): PlayerStartMatchReq {
        const message = new PlayerStartMatchReq({});
        if (data.match_type != null) {
            message.match_type = data.match_type;
        }
        if (data.mechanicus_difficult_level != null) {
            message.mechanicus_difficult_level = data.mechanicus_difficult_level;
        }
        if (data.match_param_list != null) {
            message.match_param_list = data.match_param_list;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.mp_play_id != null) {
            message.mp_play_id = data.mp_play_id;
        }
        if (data.match_id != null) {
            message.match_id = data.match_id;
        }
        return message;
    }
    toObject() {
        const data: {
            match_type?: dependency_1.MatchType;
            mechanicus_difficult_level?: number;
            match_param_list?: number[];
            dungeon_id?: number;
            mp_play_id?: number;
            match_id?: number;
        } = {};
        if (this.match_type != null) {
            data.match_type = this.match_type;
        }
        if (this.mechanicus_difficult_level != null) {
            data.mechanicus_difficult_level = this.mechanicus_difficult_level;
        }
        if (this.match_param_list != null) {
            data.match_param_list = this.match_param_list;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.mp_play_id != null) {
            data.mp_play_id = this.mp_play_id;
        }
        if (this.match_id != null) {
            data.match_id = this.match_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.match_type != dependency_1.MatchType.MATCH_TYPE_NONE)
            writer.writeEnum(3, this.match_type);
        if (this.mechanicus_difficult_level != 0)
            writer.writeUint32(12, this.mechanicus_difficult_level);
        if (this.match_param_list.length)
            writer.writePackedUint32(11, this.match_param_list);
        if (this.dungeon_id != 0)
            writer.writeUint32(1, this.dungeon_id);
        if (this.mp_play_id != 0)
            writer.writeUint32(15, this.mp_play_id);
        if (this.match_id != 0)
            writer.writeUint32(6, this.match_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerStartMatchReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerStartMatchReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.match_type = reader.readEnum();
                    break;
                case 12:
                    message.mechanicus_difficult_level = reader.readUint32();
                    break;
                case 11:
                    message.match_param_list = reader.readPackedUint32();
                    break;
                case 1:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 15:
                    message.mp_play_id = reader.readUint32();
                    break;
                case 6:
                    message.match_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerStartMatchReq {
        return PlayerStartMatchReq.deserialize(bytes);
    }
}
