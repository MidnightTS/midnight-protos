/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SumoSetNoSwitchPunishTimeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./SumoDungeonTeam";
import * as pb_1 from "google-protobuf";
export class SumoSetNoSwitchPunishTimeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        cur_team_index?: number;
        stage_id?: number;
        dungeon_team_list?: dependency_1.SumoDungeonTeam[];
        no_switch_punish_time?: number;
        next_valid_switch_time?: number;
        activity_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cur_team_index" in data && data.cur_team_index != undefined) {
                this.cur_team_index = data.cur_team_index;
            }
            if ("stage_id" in data && data.stage_id != undefined) {
                this.stage_id = data.stage_id;
            }
            if ("dungeon_team_list" in data && data.dungeon_team_list != undefined) {
                this.dungeon_team_list = data.dungeon_team_list;
            }
            if ("no_switch_punish_time" in data && data.no_switch_punish_time != undefined) {
                this.no_switch_punish_time = data.no_switch_punish_time;
            }
            if ("next_valid_switch_time" in data && data.next_valid_switch_time != undefined) {
                this.next_valid_switch_time = data.next_valid_switch_time;
            }
            if ("activity_id" in data && data.activity_id != undefined) {
                this.activity_id = data.activity_id;
            }
        }
    }
    get cur_team_index() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set cur_team_index(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get stage_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set stage_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get dungeon_team_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SumoDungeonTeam, 11) as dependency_1.SumoDungeonTeam[];
    }
    set dungeon_team_list(value: dependency_1.SumoDungeonTeam[]) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get no_switch_punish_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set no_switch_punish_time(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get next_valid_switch_time() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set next_valid_switch_time(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get activity_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set activity_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        cur_team_index?: number;
        stage_id?: number;
        dungeon_team_list?: ReturnType<typeof dependency_1.SumoDungeonTeam.prototype.toObject>[];
        no_switch_punish_time?: number;
        next_valid_switch_time?: number;
        activity_id?: number;
    }): SumoSetNoSwitchPunishTimeNotify {
        const message = new SumoSetNoSwitchPunishTimeNotify({});
        if (data.cur_team_index != null) {
            message.cur_team_index = data.cur_team_index;
        }
        if (data.stage_id != null) {
            message.stage_id = data.stage_id;
        }
        if (data.dungeon_team_list != null) {
            message.dungeon_team_list = data.dungeon_team_list.map(item => dependency_1.SumoDungeonTeam.fromObject(item));
        }
        if (data.no_switch_punish_time != null) {
            message.no_switch_punish_time = data.no_switch_punish_time;
        }
        if (data.next_valid_switch_time != null) {
            message.next_valid_switch_time = data.next_valid_switch_time;
        }
        if (data.activity_id != null) {
            message.activity_id = data.activity_id;
        }
        return message;
    }
    toObject() {
        const data: {
            cur_team_index?: number;
            stage_id?: number;
            dungeon_team_list?: ReturnType<typeof dependency_1.SumoDungeonTeam.prototype.toObject>[];
            no_switch_punish_time?: number;
            next_valid_switch_time?: number;
            activity_id?: number;
        } = {};
        if (this.cur_team_index != null) {
            data.cur_team_index = this.cur_team_index;
        }
        if (this.stage_id != null) {
            data.stage_id = this.stage_id;
        }
        if (this.dungeon_team_list != null) {
            data.dungeon_team_list = this.dungeon_team_list.map((item: dependency_1.SumoDungeonTeam) => item.toObject());
        }
        if (this.no_switch_punish_time != null) {
            data.no_switch_punish_time = this.no_switch_punish_time;
        }
        if (this.next_valid_switch_time != null) {
            data.next_valid_switch_time = this.next_valid_switch_time;
        }
        if (this.activity_id != null) {
            data.activity_id = this.activity_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cur_team_index != 0)
            writer.writeUint32(15, this.cur_team_index);
        if (this.stage_id != 0)
            writer.writeUint32(13, this.stage_id);
        if (this.dungeon_team_list.length)
            writer.writeRepeatedMessage(11, this.dungeon_team_list, (item: dependency_1.SumoDungeonTeam) => item.serialize(writer));
        if (this.no_switch_punish_time != 0)
            writer.writeUint32(2, this.no_switch_punish_time);
        if (this.next_valid_switch_time != 0)
            writer.writeUint32(14, this.next_valid_switch_time);
        if (this.activity_id != 0)
            writer.writeUint32(9, this.activity_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SumoSetNoSwitchPunishTimeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SumoSetNoSwitchPunishTimeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.cur_team_index = reader.readUint32();
                    break;
                case 13:
                    message.stage_id = reader.readUint32();
                    break;
                case 11:
                    reader.readMessage(message.dungeon_team_list, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_1.SumoDungeonTeam.deserialize(reader), dependency_1.SumoDungeonTeam));
                    break;
                case 2:
                    message.no_switch_punish_time = reader.readUint32();
                    break;
                case 14:
                    message.next_valid_switch_time = reader.readUint32();
                    break;
                case 9:
                    message.activity_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SumoSetNoSwitchPunishTimeNotify {
        return SumoSetNoSwitchPunishTimeNotify.deserialize(bytes);
    }
}
