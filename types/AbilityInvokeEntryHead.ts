// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "AbilityInvokeEntryHead.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message AbilityInvokeEntryHead
 */
export interface AbilityInvokeEntryHead {
    /**
     * @generated from protobuf field: uint32 instanced_ability_id = 8;
     */
    instancedAbilityId: number;
    /**
     * @generated from protobuf field: uint32 target_id = 6;
     */
    targetId: number;
    /**
     * @generated from protobuf field: uint32 server_buff_uid = 1;
     */
    serverBuffUid: number;
    /**
     * @generated from protobuf field: int32 local_id = 12;
     */
    localId: number;
    /**
     * @generated from protobuf field: int32 modifier_config_local_id = 7;
     */
    modifierConfigLocalId: number;
    /**
     * @generated from protobuf field: bool is_serverbuff_modifier = 15;
     */
    isServerbuffModifier: boolean;
    /**
     * @generated from protobuf field: uint32 instanced_modifier_id = 10;
     */
    instancedModifierId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class AbilityInvokeEntryHead$Type extends MessageType<AbilityInvokeEntryHead> {
    constructor() {
        super("AbilityInvokeEntryHead", [
            { no: 8, name: "instanced_ability_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "target_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "server_buff_uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "local_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "modifier_config_local_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "is_serverbuff_modifier", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "instanced_modifier_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AbilityInvokeEntryHead>): AbilityInvokeEntryHead {
        const message = { instancedAbilityId: 0, targetId: 0, serverBuffUid: 0, localId: 0, modifierConfigLocalId: 0, isServerbuffModifier: false, instancedModifierId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityInvokeEntryHead>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityInvokeEntryHead): AbilityInvokeEntryHead {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 instanced_ability_id */ 8:
                    message.instancedAbilityId = reader.uint32();
                    break;
                case /* uint32 target_id */ 6:
                    message.targetId = reader.uint32();
                    break;
                case /* uint32 server_buff_uid */ 1:
                    message.serverBuffUid = reader.uint32();
                    break;
                case /* int32 local_id */ 12:
                    message.localId = reader.int32();
                    break;
                case /* int32 modifier_config_local_id */ 7:
                    message.modifierConfigLocalId = reader.int32();
                    break;
                case /* bool is_serverbuff_modifier */ 15:
                    message.isServerbuffModifier = reader.bool();
                    break;
                case /* uint32 instanced_modifier_id */ 10:
                    message.instancedModifierId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityInvokeEntryHead, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 instanced_ability_id = 8; */
        if (message.instancedAbilityId !== 0)
            writer.tag(8, WireType.Varint).uint32(message.instancedAbilityId);
        /* uint32 target_id = 6; */
        if (message.targetId !== 0)
            writer.tag(6, WireType.Varint).uint32(message.targetId);
        /* uint32 server_buff_uid = 1; */
        if (message.serverBuffUid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.serverBuffUid);
        /* int32 local_id = 12; */
        if (message.localId !== 0)
            writer.tag(12, WireType.Varint).int32(message.localId);
        /* int32 modifier_config_local_id = 7; */
        if (message.modifierConfigLocalId !== 0)
            writer.tag(7, WireType.Varint).int32(message.modifierConfigLocalId);
        /* bool is_serverbuff_modifier = 15; */
        if (message.isServerbuffModifier !== false)
            writer.tag(15, WireType.Varint).bool(message.isServerbuffModifier);
        /* uint32 instanced_modifier_id = 10; */
        if (message.instancedModifierId !== 0)
            writer.tag(10, WireType.Varint).uint32(message.instancedModifierId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityInvokeEntryHead
 */
export const AbilityInvokeEntryHead = new AbilityInvokeEntryHead$Type();
