// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "ContentAuditData.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.ContentAuditData
 */
export interface ContentAuditData {
    /**
     * @generated from protobuf field: optional string type = 1;
     */
    type?: string;
    /**
     * @generated from protobuf field: optional string content = 2;
     */
    content?: string;
    /**
     * @generated from protobuf field: optional uint32 auto_pass_time = 3;
     */
    autoPassTime?: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ContentAuditData$Type extends MessageType<ContentAuditData> {
    constructor() {
        super("com.midnights.game.ContentAuditData", [
            { no: 1, name: "type", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "content", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "auto_pass_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ContentAuditData>): ContentAuditData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ContentAuditData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ContentAuditData): ContentAuditData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string type */ 1:
                    message.type = reader.string();
                    break;
                case /* optional string content */ 2:
                    message.content = reader.string();
                    break;
                case /* optional uint32 auto_pass_time */ 3:
                    message.autoPassTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ContentAuditData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string type = 1; */
        if (message.type !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.type);
        /* optional string content = 2; */
        if (message.content !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.content);
        /* optional uint32 auto_pass_time = 3; */
        if (message.autoPassTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.autoPassTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ContentAuditData
 */
export const ContentAuditData = new ContentAuditData$Type();
