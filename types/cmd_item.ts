// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_item.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Reward } from "./define";
import { ItemParam } from "./define";
import { SceneWeaponInfo } from "./define";
import { SceneReliquaryInfo } from "./define";
import { Vector } from "./define";
import { StoreType } from "./define";
import { Item } from "./define";
/**
 * @generated from protobuf message com.midnights.game.PlayerStoreNotify
 */
export interface PlayerStoreNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Item item_list = 15;
     */
    itemList: Item[];
    /**
     * @generated from protobuf field: optional uint32 weight_limit = 8;
     */
    weightLimit?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 2;
     */
    storeType?: StoreType;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerStoreNotify.CmdId
 */
export enum PlayerStoreNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 672;
     */
    CMD_ID = 672,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StoreWeightLimitNotify
 */
export interface StoreWeightLimitNotify {
    /**
     * @generated from protobuf field: optional uint32 weapon_count_limit = 2;
     */
    weaponCountLimit?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 7;
     */
    storeType?: StoreType;
    /**
     * @generated from protobuf field: optional uint32 material_count_limit = 4;
     */
    materialCountLimit?: number;
    /**
     * @generated from protobuf field: optional uint32 reliquary_count_limit = 6;
     */
    reliquaryCountLimit?: number;
    /**
     * @generated from protobuf field: optional uint32 furniture_count_limit = 9;
     */
    furnitureCountLimit?: number;
    /**
     * @generated from protobuf field: optional uint32 weight_limit = 15;
     */
    weightLimit?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.StoreWeightLimitNotify.CmdId
 */
export enum StoreWeightLimitNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 698;
     */
    CMD_ID = 698,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StoreItemChangeNotify
 */
export interface StoreItemChangeNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 12;
     */
    storeType?: StoreType;
    /**
     * @generated from protobuf field: repeated com.midnights.game.Item item_list = 10;
     */
    itemList: Item[];
}
/**
 * @generated from protobuf enum com.midnights.game.StoreItemChangeNotify.CmdId
 */
export enum StoreItemChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 612;
     */
    CMD_ID = 612,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.StoreItemDelNotify
 */
export interface StoreItemDelNotify {
    /**
     * @generated from protobuf field: repeated uint64 guid_list = 12;
     */
    guidList: bigint[];
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 15;
     */
    storeType?: StoreType;
}
/**
 * @generated from protobuf enum com.midnights.game.StoreItemDelNotify.CmdId
 */
export enum StoreItemDelNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 635;
     */
    CMD_ID = 635,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ItemHint
 */
export interface ItemHint {
    /**
     * @generated from protobuf field: optional uint32 item_id = 8;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional bool is_new = 2;
     */
    isNew?: boolean;
    /**
     * @generated from protobuf field: optional uint32 count = 15;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional uint64 guid = 4;
     */
    guid?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.ItemAddHintNotify
 */
export interface ItemAddHintNotify {
    /**
     * @generated from protobuf field: optional bool is_position_valid = 14;
     */
    isPositionValid?: boolean;
    /**
     * @generated from protobuf field: optional uint32 quest_id = 3;
     */
    questId?: number;
    /**
     * @generated from protobuf field: optional uint32 reason = 6;
     */
    reason?: number;
    /**
     * @generated from protobuf field: optional bool is_general_reward_hiden = 15;
     */
    isGeneralRewardHiden?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemHint item_list = 10;
     */
    itemList: ItemHint[];
    /**
     * @generated from protobuf field: optional bool is_transfered_from_avatar_card = 12;
     */
    isTransferedFromAvatarCard?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 9;
     */
    position?: Vector;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemHint overflow_transformed_item_list = 8;
     */
    overflowTransformedItemList: ItemHint[];
}
/**
 * @generated from protobuf enum com.midnights.game.ItemAddHintNotify.CmdId
 */
export enum ItemAddHintNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 607;
     */
    CMD_ID = 607,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseItemReq
 */
export interface UseItemReq {
    /**
     * @generated from protobuf field: optional uint32 count = 13;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional uint64 target_guid = 14;
     */
    targetGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 guid = 10;
     */
    guid?: bigint;
    /**
     * @generated from protobuf field: optional bool is_enter_mp_dungeon_team = 15;
     */
    isEnterMpDungeonTeam?: boolean;
    /**
     * @generated from protobuf field: optional uint32 option_idx = 7;
     */
    optionIdx?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseItemReq.CmdId
 */
export enum UseItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 690;
     */
    CMD_ID = 690,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.UseItemRsp
 */
export interface UseItemRsp {
    /**
     * @generated from protobuf field: optional uint64 guid = 5;
     */
    guid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 target_guid = 1;
     */
    targetGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 item_id = 4;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional uint32 option_idx = 8;
     */
    optionIdx?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.UseItemRsp.CmdId
 */
export enum UseItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 673;
     */
    CMD_ID = 673,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DropItemReq
 */
export interface DropItemReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 11;
     */
    pos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 1;
     */
    storeType?: StoreType;
    /**
     * @generated from protobuf field: optional uint32 count = 2;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional uint64 guid = 13;
     */
    guid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.DropItemReq.CmdId
 */
export enum DropItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 699;
     */
    CMD_ID = 699,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DropItemRsp
 */
export interface DropItemRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 guid = 1;
     */
    guid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.StoreType store_type = 15;
     */
    storeType?: StoreType;
}
/**
 * @generated from protobuf enum com.midnights.game.DropItemRsp.CmdId
 */
export enum DropItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 631;
     */
    CMD_ID = 631,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WearEquipReq
 */
export interface WearEquipReq {
    /**
     * @generated from protobuf field: optional uint64 equip_guid = 7;
     */
    equipGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 5;
     */
    avatarGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WearEquipReq.CmdId
 */
export enum WearEquipReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 697;
     */
    CMD_ID = 697,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WearEquipRsp
 */
export interface WearEquipRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 equip_guid = 1;
     */
    equipGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 7;
     */
    avatarGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WearEquipRsp.CmdId
 */
export enum WearEquipRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 681;
     */
    CMD_ID = 681,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeoffEquipReq
 */
export interface TakeoffEquipReq {
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 8;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 slot = 15;
     */
    slot?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeoffEquipReq.CmdId
 */
export enum TakeoffEquipReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 605;
     */
    CMD_ID = 605,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeoffEquipRsp
 */
export interface TakeoffEquipRsp {
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 9;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 slot = 10;
     */
    slot?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeoffEquipRsp.CmdId
 */
export enum TakeoffEquipRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 682;
     */
    CMD_ID = 682,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AvatarEquipChangeNotify
 */
export interface AvatarEquipChangeNotify {
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 10;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 equip_guid = 13;
     */
    equipGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.SceneReliquaryInfo reliquary = 1;
     */
    reliquary?: SceneReliquaryInfo;
    /**
     * @generated from protobuf field: optional com.midnights.game.SceneWeaponInfo weapon = 15;
     */
    weapon?: SceneWeaponInfo;
    /**
     * @generated from protobuf field: optional uint32 item_id = 14;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional uint32 equip_type = 8;
     */
    equipType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AvatarEquipChangeNotify.CmdId
 */
export enum AvatarEquipChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 647;
     */
    CMD_ID = 647,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponUpgradeReq
 */
export interface WeaponUpgradeReq {
    /**
     * @generated from protobuf field: repeated uint64 food_weapon_guid_list = 1;
     */
    foodWeaponGuidList: bigint[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 15;
     */
    itemParamList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 4;
     */
    targetWeaponGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponUpgradeReq.CmdId
 */
export enum WeaponUpgradeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 639;
     */
    CMD_ID = 639,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponUpgradeRsp
 */
export interface WeaponUpgradeRsp {
    /**
     * @generated from protobuf field: optional uint32 cur_level = 7;
     */
    curLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 old_level = 8;
     */
    oldLevel?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 2;
     */
    itemParamList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 6;
     */
    targetWeaponGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponUpgradeRsp.CmdId
 */
export enum WeaponUpgradeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 653;
     */
    CMD_ID = 653,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponPromoteReq
 */
export interface WeaponPromoteReq {
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 5;
     */
    targetWeaponGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponPromoteReq.CmdId
 */
export enum WeaponPromoteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 622;
     */
    CMD_ID = 622,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponPromoteRsp
 */
export interface WeaponPromoteRsp {
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 3;
     */
    targetWeaponGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 old_promote_level = 7;
     */
    oldPromoteLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_promote_level = 12;
     */
    curPromoteLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponPromoteRsp.CmdId
 */
export enum WeaponPromoteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 665;
     */
    CMD_ID = 665,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryUpgradeReq
 */
export interface ReliquaryUpgradeReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 11;
     */
    itemParamList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint64 target_reliquary_guid = 6;
     */
    targetReliquaryGuid?: bigint;
    /**
     * @generated from protobuf field: repeated uint64 food_reliquary_guid_list = 12;
     */
    foodReliquaryGuidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryUpgradeReq.CmdId
 */
export enum ReliquaryUpgradeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 604;
     */
    CMD_ID = 604,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryUpgradeRsp
 */
export interface ReliquaryUpgradeRsp {
    /**
     * @generated from protobuf field: optional uint32 old_level = 4;
     */
    oldLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_level = 13;
     */
    curLevel?: number;
    /**
     * @generated from protobuf field: optional uint64 target_reliquary_guid = 9;
     */
    targetReliquaryGuid?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 cur_append_prop_list = 2;
     */
    curAppendPropList: number[];
    /**
     * @generated from protobuf field: optional uint32 power_up_rate = 6;
     */
    powerUpRate?: number;
    /**
     * @generated from protobuf field: repeated uint32 old_append_prop_list = 15;
     */
    oldAppendPropList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryUpgradeRsp.CmdId
 */
export enum ReliquaryUpgradeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 693;
     */
    CMD_ID = 693,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryPromoteReq
 */
export interface ReliquaryPromoteReq {
    /**
     * @generated from protobuf field: optional uint64 item_guid = 10;
     */
    itemGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint64 target_guid = 13;
     */
    targetGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryPromoteReq.CmdId
 */
export enum ReliquaryPromoteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 627;
     */
    CMD_ID = 627,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryPromoteRsp
 */
export interface ReliquaryPromoteRsp {
    /**
     * @generated from protobuf field: optional uint32 old_promote_level = 10;
     */
    oldPromoteLevel?: number;
    /**
     * @generated from protobuf field: optional uint64 target_reliquary_guid = 6;
     */
    targetReliquaryGuid?: bigint;
    /**
     * @generated from protobuf field: repeated uint32 cur_append_prop_list = 9;
     */
    curAppendPropList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_promote_level = 2;
     */
    curPromoteLevel?: number;
    /**
     * @generated from protobuf field: repeated uint32 old_append_prop_list = 8;
     */
    oldAppendPropList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryPromoteRsp.CmdId
 */
export enum ReliquaryPromoteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 694;
     */
    CMD_ID = 694,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AvatarCardChangeReq
 */
export interface AvatarCardChangeReq {
    /**
     * @generated from protobuf field: optional uint32 item_id = 6;
     */
    itemId?: number;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 14;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 count = 7;
     */
    count?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AvatarCardChangeReq.CmdId
 */
export enum AvatarCardChangeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 688;
     */
    CMD_ID = 688,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AvatarCardChangeRsp
 */
export interface AvatarCardChangeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AvatarCardChangeRsp.CmdId
 */
export enum AvatarCardChangeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 626;
     */
    CMD_ID = 626,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GrantRewardNotify
 */
export interface GrantRewardNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Reward reward = 6;
     */
    reward?: Reward;
}
/**
 * @generated from protobuf enum com.midnights.game.GrantRewardNotify.CmdId
 */
export enum GrantRewardNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 663;
     */
    CMD_ID = 663,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponAwakenReq
 */
export interface WeaponAwakenReq {
    /**
     * @generated from protobuf field: optional uint64 item_guid = 10;
     */
    itemGuid?: bigint;
    /**
     * @generated from protobuf field: map<uint32, uint32> affix_level_map = 7;
     */
    affixLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 9;
     */
    targetWeaponGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponAwakenReq.CmdId
 */
export enum WeaponAwakenReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 695;
     */
    CMD_ID = 695,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.WeaponAwakenRsp
 */
export interface WeaponAwakenRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 10;
     */
    avatarGuid?: bigint;
    /**
     * @generated from protobuf field: map<uint32, uint32> old_affix_level_map = 4;
     */
    oldAffixLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 target_weapon_awaken_level = 2;
     */
    targetWeaponAwakenLevel?: number;
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 15;
     */
    targetWeaponGuid?: bigint;
    /**
     * @generated from protobuf field: map<uint32, uint32> cur_affix_level_map = 11;
     */
    curAffixLevelMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.WeaponAwakenRsp.CmdId
 */
export enum WeaponAwakenRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 606;
     */
    CMD_ID = 606,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ItemCdGroupTimeNotify
 */
export interface ItemCdGroupTimeNotify {
    /**
     * @generated from protobuf field: map<uint32, uint64> item_cd_map = 9;
     */
    itemCdMap: {
        [key: number]: bigint;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.ItemCdGroupTimeNotify.CmdId
 */
export enum ItemCdGroupTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 634;
     */
    CMD_ID = 634,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DropHintNotify
 */
export interface DropHintNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector position = 7;
     */
    position?: Vector;
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 14;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DropHintNotify.CmdId
 */
export enum DropHintNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 650;
     */
    CMD_ID = 650,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CombineReq
 */
export interface CombineReq {
    /**
     * @generated from protobuf field: optional uint32 combine_count = 12;
     */
    combineCount?: number;
    /**
     * @generated from protobuf field: optional uint32 combine_id = 9;
     */
    combineId?: number;
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 14;
     */
    avatarGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.CombineReq.CmdId
 */
export enum CombineReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 643;
     */
    CMD_ID = 643,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CombineRsp
 */
export interface CombineRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam cost_item_list = 3;
     */
    costItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam total_extra_item_list = 6;
     */
    totalExtraItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 combine_id = 11;
     */
    combineId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam total_random_item_list = 9;
     */
    totalRandomItemList: ItemParam[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam result_item_list = 2;
     */
    resultItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 combine_count = 13;
     */
    combineCount?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam total_return_item_list = 12;
     */
    totalReturnItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint64 avatar_guid = 10;
     */
    avatarGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.CombineRsp.CmdId
 */
export enum CombineRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 674;
     */
    CMD_ID = 674,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeQueueData
 */
export interface ForgeQueueData {
    /**
     * @generated from protobuf field: optional uint32 finish_count = 13;
     */
    finishCount?: number;
    /**
     * @generated from protobuf field: optional uint32 total_finish_timestamp = 14;
     */
    totalFinishTimestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 7;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional uint32 queue_id = 1;
     */
    queueId?: number;
    /**
     * @generated from protobuf field: optional uint32 unfinish_count = 10;
     */
    unfinishCount?: number;
    /**
     * @generated from protobuf field: optional uint32 next_finish_timestamp = 11;
     */
    nextFinishTimestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 forge_id = 15;
     */
    forgeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ForgeQueueDataNotify
 */
export interface ForgeQueueDataNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 7;
     */
    forgeQueueMap: {
        [key: number]: ForgeQueueData;
    };
    /**
     * @generated from protobuf field: repeated uint32 removed_forge_queue_list = 6;
     */
    removedForgeQueueList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeQueueDataNotify.CmdId
 */
export enum ForgeQueueDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 676;
     */
    CMD_ID = 676,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeGetQueueDataReq
 */
export interface ForgeGetQueueDataReq {
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeGetQueueDataReq.CmdId
 */
export enum ForgeGetQueueDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 646;
     */
    CMD_ID = 646,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeGetQueueDataRsp
 */
export interface ForgeGetQueueDataRsp {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 2;
     */
    forgeQueueMap: {
        [key: number]: ForgeQueueData;
    };
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 max_queue_num = 6;
     */
    maxQueueNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeGetQueueDataRsp.CmdId
 */
export enum ForgeGetQueueDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 641;
     */
    CMD_ID = 641,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeStartReq
 */
export interface ForgeStartReq {
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 7;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional uint32 forge_id = 4;
     */
    forgeId?: number;
    /**
     * @generated from protobuf field: optional uint32 forge_count = 6;
     */
    forgeCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeStartReq.CmdId
 */
export enum ForgeStartReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 649;
     */
    CMD_ID = 649,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeStartRsp
 */
export interface ForgeStartRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeStartRsp.CmdId
 */
export enum ForgeStartRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 691;
     */
    CMD_ID = 691,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeQueueManipulateReq
 */
export interface ForgeQueueManipulateReq {
    /**
     * @generated from protobuf field: optional uint32 forge_queue_id = 5;
     */
    forgeQueueId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ForgeQueueManipulateType manipulate_type = 13;
     */
    manipulateType?: ForgeQueueManipulateType;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeQueueManipulateReq.CmdId
 */
export enum ForgeQueueManipulateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 624;
     */
    CMD_ID = 624,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeQueueManipulateRsp
 */
export interface ForgeQueueManipulateRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.ForgeQueueManipulateType manipulate_type = 4;
     */
    manipulateType?: ForgeQueueManipulateType;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam extra_output_item_list = 13;
     */
    extraOutputItemList: ItemParam[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam return_item_list = 10;
     */
    returnItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam output_item_list = 9;
     */
    outputItemList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeQueueManipulateRsp.CmdId
 */
export enum ForgeQueueManipulateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 656;
     */
    CMD_ID = 656,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ResinChangeNotify
 */
export interface ResinChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 next_add_timestamp = 6;
     */
    nextAddTimestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_buy_count = 4;
     */
    curBuyCount?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_value = 12;
     */
    curValue?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ResinChangeNotify.CmdId
 */
export enum ResinChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 642;
     */
    CMD_ID = 642,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuyResinReq
 */
export interface BuyResinReq {
}
/**
 * @generated from protobuf enum com.midnights.game.BuyResinReq.CmdId
 */
export enum BuyResinReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 602;
     */
    CMD_ID = 602,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuyResinRsp
 */
export interface BuyResinRsp {
    /**
     * @generated from protobuf field: optional uint32 cur_value = 10;
     */
    curValue?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BuyResinRsp.CmdId
 */
export enum BuyResinRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 619;
     */
    CMD_ID = 619,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MaterialDeleteReturnNotify
 */
export interface MaterialDeleteReturnNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> return_item_map = 5;
     */
    returnItemMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional com.midnights.game.MaterialDeleteReturnType type = 8;
     */
    type?: MaterialDeleteReturnType;
    /**
     * @generated from protobuf field: map<uint32, uint32> delete_material_map = 6;
     */
    deleteMaterialMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.MaterialDeleteReturnNotify.CmdId
 */
export enum MaterialDeleteReturnNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 661;
     */
    CMD_ID = 661,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeMaterialDeleteReturnReq
 */
export interface TakeMaterialDeleteReturnReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MaterialDeleteReturnType type = 8;
     */
    type?: MaterialDeleteReturnType;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeMaterialDeleteReturnReq.CmdId
 */
export enum TakeMaterialDeleteReturnReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 629;
     */
    CMD_ID = 629,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeMaterialDeleteReturnRsp
 */
export interface TakeMaterialDeleteReturnRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeMaterialDeleteReturnRsp.CmdId
 */
export enum TakeMaterialDeleteReturnRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 657;
     */
    CMD_ID = 657,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MaterialDeleteUpdateNotify
 */
export interface MaterialDeleteUpdateNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.MaterialDeleteUpdateNotify.CmdId
 */
export enum MaterialDeleteUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 700;
     */
    CMD_ID = 700,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.McoinExchangeHcoinReq
 */
export interface McoinExchangeHcoinReq {
    /**
     * @generated from protobuf field: optional uint32 hcoin = 5;
     */
    hcoin?: number;
    /**
     * @generated from protobuf field: optional uint32 mcoin_cost = 1;
     */
    mcoinCost?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.McoinExchangeHcoinReq.CmdId
 */
export enum McoinExchangeHcoinReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 616;
     */
    CMD_ID = 616,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.McoinExchangeHcoinRsp
 */
export interface McoinExchangeHcoinRsp {
    /**
     * @generated from protobuf field: optional uint32 mcoin_cost = 8;
     */
    mcoinCost?: number;
    /**
     * @generated from protobuf field: optional uint32 hcoin = 7;
     */
    hcoin?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.McoinExchangeHcoinRsp.CmdId
 */
export enum McoinExchangeHcoinRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 687;
     */
    CMD_ID = 687,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MaterilaInfo
 */
export interface MaterilaInfo {
    /**
     * @generated from protobuf field: optional uint32 count = 11;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional uint64 guid = 5;
     */
    guid?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.DestroyMaterialReq
 */
export interface DestroyMaterialReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MaterilaInfo material_list = 5;
     */
    materialList: MaterilaInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.DestroyMaterialReq.CmdId
 */
export enum DestroyMaterialReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 640;
     */
    CMD_ID = 640,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DestroyMaterialRsp
 */
export interface DestroyMaterialRsp {
    /**
     * @generated from protobuf field: repeated uint32 item_count_list = 12;
     */
    itemCountList: number[];
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 13;
     */
    itemIdList: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DestroyMaterialRsp.CmdId
 */
export enum DestroyMaterialRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 618;
     */
    CMD_ID = 618,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetEquipLockStateReq
 */
export interface SetEquipLockStateReq {
    /**
     * @generated from protobuf field: optional bool is_locked = 15;
     */
    isLocked?: boolean;
    /**
     * @generated from protobuf field: optional uint64 target_equip_guid = 9;
     */
    targetEquipGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.SetEquipLockStateReq.CmdId
 */
export enum SetEquipLockStateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 666;
     */
    CMD_ID = 666,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetEquipLockStateRsp
 */
export interface SetEquipLockStateRsp {
    /**
     * @generated from protobuf field: optional uint64 target_equip_guid = 14;
     */
    targetEquipGuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_locked = 10;
     */
    isLocked?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SetEquipLockStateRsp.CmdId
 */
export enum SetEquipLockStateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 668;
     */
    CMD_ID = 668,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CalcWeaponUpgradeReturnItemsReq
 */
export interface CalcWeaponUpgradeReturnItemsReq {
    /**
     * @generated from protobuf field: repeated uint64 food_weapon_guid_list = 15;
     */
    foodWeaponGuidList: bigint[];
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 12;
     */
    targetWeaponGuid?: bigint;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 3;
     */
    itemParamList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.CalcWeaponUpgradeReturnItemsReq.CmdId
 */
export enum CalcWeaponUpgradeReturnItemsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 633;
     */
    CMD_ID = 633,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CalcWeaponUpgradeReturnItemsRsp
 */
export interface CalcWeaponUpgradeReturnItemsRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 4;
     */
    itemParamList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 target_weapon_guid = 8;
     */
    targetWeaponGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.CalcWeaponUpgradeReturnItemsRsp.CmdId
 */
export enum CalcWeaponUpgradeReturnItemsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 684;
     */
    CMD_ID = 684,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeDataNotify
 */
export interface ForgeDataNotify {
    /**
     * @generated from protobuf field: repeated uint32 forge_id_list = 5;
     */
    forgeIdList: number[];
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 8;
     */
    forgeQueueMap: {
        [key: number]: ForgeQueueData;
    };
    /**
     * @generated from protobuf field: optional uint32 max_queue_num = 14;
     */
    maxQueueNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeDataNotify.CmdId
 */
export enum ForgeDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 680;
     */
    CMD_ID = 680,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ForgeFormulaDataNotify
 */
export interface ForgeFormulaDataNotify {
    /**
     * @generated from protobuf field: optional bool is_locked = 15;
     */
    isLocked?: boolean;
    /**
     * @generated from protobuf field: optional uint32 forge_id = 13;
     */
    forgeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeFormulaDataNotify.CmdId
 */
export enum ForgeFormulaDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 689;
     */
    CMD_ID = 689,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CombineDataNotify
 */
export interface CombineDataNotify {
    /**
     * @generated from protobuf field: repeated uint32 combine_id_list = 5;
     */
    combineIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.CombineDataNotify.CmdId
 */
export enum CombineDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 659;
     */
    CMD_ID = 659,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CombineFormulaDataNotify
 */
export interface CombineFormulaDataNotify {
    /**
     * @generated from protobuf field: optional uint32 combine_id = 6;
     */
    combineId?: number;
    /**
     * @generated from protobuf field: optional bool is_locked = 3;
     */
    isLocked?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.CombineFormulaDataNotify.CmdId
 */
export enum CombineFormulaDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 632;
     */
    CMD_ID = 632,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClosedItemNotify
 */
export interface ClosedItemNotify {
    /**
     * @generated from protobuf field: repeated uint32 item_id_list = 8;
     */
    itemIdList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.ClosedItemNotify.CmdId
 */
export enum ClosedItemNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 614;
     */
    CMD_ID = 614,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckAddItemExceedLimitNotify
 */
export interface CheckAddItemExceedLimitNotify {
    /**
     * @generated from protobuf field: optional bool is_drop = 5;
     */
    isDrop?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType msg_type = 4;
     */
    msgType?: CheckAddItemExceedLimitNotify_ItemExceedLimitMsgType;
    /**
     * @generated from protobuf field: repeated uint32 exceeded_item_type_list = 10;
     */
    exceededItemTypeList: number[];
    /**
     * @generated from protobuf field: repeated uint32 exceeded_item_list = 12;
     */
    exceededItemList: number[];
    /**
     * @generated from protobuf field: optional uint32 reason = 14;
     */
    reason?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType
 */
export enum CheckAddItemExceedLimitNotify_ItemExceedLimitMsgType {
    /**
     * @generated from protobuf enum value: ITEM_EXCEED_LIMIT_MSG_DEFAULT = 0;
     */
    ITEM_EXCEED_LIMIT_MSG_DEFAULT = 0,
    /**
     * @generated from protobuf enum value: ITEM_EXCEED_LIMIT_MSG_TEXT = 1;
     */
    ITEM_EXCEED_LIMIT_MSG_TEXT = 1,
    /**
     * @generated from protobuf enum value: ITEM_EXCEED_LIMIT_MSG_DIALOG = 2;
     */
    ITEM_EXCEED_LIMIT_MSG_DIALOG = 2,
    /**
     * @generated from protobuf enum value: ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK = 3;
     */
    ITEM_EXCEED_LIMIT_MSG_DIALOG_NONBLOCK = 3
}
/**
 * @generated from protobuf enum com.midnights.game.CheckAddItemExceedLimitNotify.CmdId
 */
export enum CheckAddItemExceedLimitNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 692;
     */
    CMD_ID = 692,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetIsAutoUnlockSpecificEquipReq
 */
export interface SetIsAutoUnlockSpecificEquipReq {
    /**
     * @generated from protobuf field: optional bool is_auto_unlock_specific_equip = 14;
     */
    isAutoUnlockSpecificEquip?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.SetIsAutoUnlockSpecificEquipReq.CmdId
 */
export enum SetIsAutoUnlockSpecificEquipReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 620;
     */
    CMD_ID = 620,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetIsAutoUnlockSpecificEquipRsp
 */
export interface SetIsAutoUnlockSpecificEquipRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetIsAutoUnlockSpecificEquipRsp.CmdId
 */
export enum SetIsAutoUnlockSpecificEquipRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 664;
     */
    CMD_ID = 664,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryDecomposeReq
 */
export interface ReliquaryDecomposeReq {
    /**
     * @generated from protobuf field: optional uint32 config_id = 13;
     */
    configId?: number;
    /**
     * @generated from protobuf field: optional uint32 target_count = 9;
     */
    targetCount?: number;
    /**
     * @generated from protobuf field: repeated uint64 guid_list = 8;
     */
    guidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryDecomposeReq.CmdId
 */
export enum ReliquaryDecomposeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 638;
     */
    CMD_ID = 638,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReliquaryDecomposeRsp
 */
export interface ReliquaryDecomposeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint64 guid_list = 14;
     */
    guidList: bigint[];
}
/**
 * @generated from protobuf enum com.midnights.game.ReliquaryDecomposeRsp.CmdId
 */
export enum ReliquaryDecomposeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 611;
     */
    CMD_ID = 611,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ForgeQueueManipulateType
 */
export enum ForgeQueueManipulateType {
    /**
     * @generated from protobuf enum value: FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT = 0;
     */
    RECEIVE_OUTPUT = 0,
    /**
     * @generated from protobuf enum value: FORGE_QUEUE_MANIPULATE_TYPE_STOP_FORGE = 1;
     */
    STOP_FORGE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.MaterialDeleteReturnType
 */
export enum MaterialDeleteReturnType {
    /**
     * @generated from protobuf enum value: MATERIAL_DELETE_RETURN_BAG = 0;
     */
    MATERIAL_DELETE_RETURN_BAG = 0,
    /**
     * @generated from protobuf enum value: MATERIAL_DELETE_RETURN_SEED = 1;
     */
    MATERIAL_DELETE_RETURN_SEED = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStoreNotify$Type extends MessageType<PlayerStoreNotify> {
    constructor() {
        super("com.midnights.game.PlayerStoreNotify", [
            { no: 15, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item },
            { no: 8, name: "weight_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] }
        ]);
    }
    create(value?: PartialMessage<PlayerStoreNotify>): PlayerStoreNotify {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStoreNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStoreNotify): PlayerStoreNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Item item_list */ 15:
                    message.itemList.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 weight_limit */ 8:
                    message.weightLimit = reader.uint32();
                    break;
                case /* optional com.midnights.game.StoreType store_type */ 2:
                    message.storeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStoreNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Item item_list = 15; */
        for (let i = 0; i < message.itemList.length; i++)
            Item.internalBinaryWrite(message.itemList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 weight_limit = 8; */
        if (message.weightLimit !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.weightLimit);
        /* optional com.midnights.game.StoreType store_type = 2; */
        if (message.storeType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.storeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerStoreNotify
 */
export const PlayerStoreNotify = new PlayerStoreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreWeightLimitNotify$Type extends MessageType<StoreWeightLimitNotify> {
    constructor() {
        super("com.midnights.game.StoreWeightLimitNotify", [
            { no: 2, name: "weapon_count_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] },
            { no: 4, name: "material_count_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "reliquary_count_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "furniture_count_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "weight_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<StoreWeightLimitNotify>): StoreWeightLimitNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreWeightLimitNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreWeightLimitNotify): StoreWeightLimitNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 weapon_count_limit */ 2:
                    message.weaponCountLimit = reader.uint32();
                    break;
                case /* optional com.midnights.game.StoreType store_type */ 7:
                    message.storeType = reader.int32();
                    break;
                case /* optional uint32 material_count_limit */ 4:
                    message.materialCountLimit = reader.uint32();
                    break;
                case /* optional uint32 reliquary_count_limit */ 6:
                    message.reliquaryCountLimit = reader.uint32();
                    break;
                case /* optional uint32 furniture_count_limit */ 9:
                    message.furnitureCountLimit = reader.uint32();
                    break;
                case /* optional uint32 weight_limit */ 15:
                    message.weightLimit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreWeightLimitNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 weapon_count_limit = 2; */
        if (message.weaponCountLimit !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.weaponCountLimit);
        /* optional com.midnights.game.StoreType store_type = 7; */
        if (message.storeType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.storeType);
        /* optional uint32 material_count_limit = 4; */
        if (message.materialCountLimit !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.materialCountLimit);
        /* optional uint32 reliquary_count_limit = 6; */
        if (message.reliquaryCountLimit !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reliquaryCountLimit);
        /* optional uint32 furniture_count_limit = 9; */
        if (message.furnitureCountLimit !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.furnitureCountLimit);
        /* optional uint32 weight_limit = 15; */
        if (message.weightLimit !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.weightLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StoreWeightLimitNotify
 */
export const StoreWeightLimitNotify = new StoreWeightLimitNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreItemChangeNotify$Type extends MessageType<StoreItemChangeNotify> {
    constructor() {
        super("com.midnights.game.StoreItemChangeNotify", [
            { no: 12, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] },
            { no: 10, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Item }
        ]);
    }
    create(value?: PartialMessage<StoreItemChangeNotify>): StoreItemChangeNotify {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreItemChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreItemChangeNotify): StoreItemChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.StoreType store_type */ 12:
                    message.storeType = reader.int32();
                    break;
                case /* repeated com.midnights.game.Item item_list */ 10:
                    message.itemList.push(Item.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreItemChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.StoreType store_type = 12; */
        if (message.storeType !== undefined)
            writer.tag(12, WireType.Varint).int32(message.storeType);
        /* repeated com.midnights.game.Item item_list = 10; */
        for (let i = 0; i < message.itemList.length; i++)
            Item.internalBinaryWrite(message.itemList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StoreItemChangeNotify
 */
export const StoreItemChangeNotify = new StoreItemChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StoreItemDelNotify$Type extends MessageType<StoreItemDelNotify> {
    constructor() {
        super("com.midnights.game.StoreItemDelNotify", [
            { no: 12, name: "guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] }
        ]);
    }
    create(value?: PartialMessage<StoreItemDelNotify>): StoreItemDelNotify {
        const message = { guidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StoreItemDelNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StoreItemDelNotify): StoreItemDelNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 guid_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.guidList.push(reader.uint64().toBigInt());
                    else
                        message.guidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional com.midnights.game.StoreType store_type */ 15:
                    message.storeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StoreItemDelNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 guid_list = 12; */
        if (message.guidList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.guidList.length; i++)
                writer.uint64(message.guidList[i]);
            writer.join();
        }
        /* optional com.midnights.game.StoreType store_type = 15; */
        if (message.storeType !== undefined)
            writer.tag(15, WireType.Varint).int32(message.storeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.StoreItemDelNotify
 */
export const StoreItemDelNotify = new StoreItemDelNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemHint$Type extends MessageType<ItemHint> {
    constructor() {
        super("com.midnights.game.ItemHint", [
            { no: 8, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_new", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ItemHint>): ItemHint {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemHint>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemHint): ItemHint {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_id */ 8:
                    message.itemId = reader.uint32();
                    break;
                case /* optional bool is_new */ 2:
                    message.isNew = reader.bool();
                    break;
                case /* optional uint32 count */ 15:
                    message.count = reader.uint32();
                    break;
                case /* optional uint64 guid */ 4:
                    message.guid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemHint, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_id = 8; */
        if (message.itemId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.itemId);
        /* optional bool is_new = 2; */
        if (message.isNew !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isNew);
        /* optional uint32 count = 15; */
        if (message.count !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.count);
        /* optional uint64 guid = 4; */
        if (message.guid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.guid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ItemHint
 */
export const ItemHint = new ItemHint$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemAddHintNotify$Type extends MessageType<ItemAddHintNotify> {
    constructor() {
        super("com.midnights.game.ItemAddHintNotify", [
            { no: 14, name: "is_position_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "quest_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_general_reward_hiden", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemHint },
            { no: 12, name: "is_transfered_from_avatar_card", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "position", kind: "message", T: () => Vector },
            { no: 8, name: "overflow_transformed_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemHint }
        ]);
    }
    create(value?: PartialMessage<ItemAddHintNotify>): ItemAddHintNotify {
        const message = { itemList: [], overflowTransformedItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemAddHintNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemAddHintNotify): ItemAddHintNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_position_valid */ 14:
                    message.isPositionValid = reader.bool();
                    break;
                case /* optional uint32 quest_id */ 3:
                    message.questId = reader.uint32();
                    break;
                case /* optional uint32 reason */ 6:
                    message.reason = reader.uint32();
                    break;
                case /* optional bool is_general_reward_hiden */ 15:
                    message.isGeneralRewardHiden = reader.bool();
                    break;
                case /* repeated com.midnights.game.ItemHint item_list */ 10:
                    message.itemList.push(ItemHint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional bool is_transfered_from_avatar_card */ 12:
                    message.isTransferedFromAvatarCard = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector position */ 9:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* repeated com.midnights.game.ItemHint overflow_transformed_item_list */ 8:
                    message.overflowTransformedItemList.push(ItemHint.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemAddHintNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_position_valid = 14; */
        if (message.isPositionValid !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isPositionValid);
        /* optional uint32 quest_id = 3; */
        if (message.questId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.questId);
        /* optional uint32 reason = 6; */
        if (message.reason !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.reason);
        /* optional bool is_general_reward_hiden = 15; */
        if (message.isGeneralRewardHiden !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isGeneralRewardHiden);
        /* repeated com.midnights.game.ItemHint item_list = 10; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemHint.internalBinaryWrite(message.itemList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfered_from_avatar_card = 12; */
        if (message.isTransferedFromAvatarCard !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isTransferedFromAvatarCard);
        /* optional com.midnights.game.Vector position = 9; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemHint overflow_transformed_item_list = 8; */
        for (let i = 0; i < message.overflowTransformedItemList.length; i++)
            ItemHint.internalBinaryWrite(message.overflowTransformedItemList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ItemAddHintNotify
 */
export const ItemAddHintNotify = new ItemAddHintNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseItemReq$Type extends MessageType<UseItemReq> {
    constructor() {
        super("com.midnights.game.UseItemReq", [
            { no: 13, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "target_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "is_enter_mp_dungeon_team", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "option_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseItemReq>): UseItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseItemReq): UseItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 count */ 13:
                    message.count = reader.uint32();
                    break;
                case /* optional uint64 target_guid */ 14:
                    message.targetGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 guid */ 10:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_enter_mp_dungeon_team */ 15:
                    message.isEnterMpDungeonTeam = reader.bool();
                    break;
                case /* optional uint32 option_idx */ 7:
                    message.optionIdx = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 count = 13; */
        if (message.count !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.count);
        /* optional uint64 target_guid = 14; */
        if (message.targetGuid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.targetGuid);
        /* optional uint64 guid = 10; */
        if (message.guid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.guid);
        /* optional bool is_enter_mp_dungeon_team = 15; */
        if (message.isEnterMpDungeonTeam !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isEnterMpDungeonTeam);
        /* optional uint32 option_idx = 7; */
        if (message.optionIdx !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.optionIdx);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseItemReq
 */
export const UseItemReq = new UseItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UseItemRsp$Type extends MessageType<UseItemRsp> {
    constructor() {
        super("com.midnights.game.UseItemRsp", [
            { no: 5, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1, name: "target_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "option_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<UseItemRsp>): UseItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UseItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UseItemRsp): UseItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 guid */ 5:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 target_guid */ 1:
                    message.targetGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 item_id */ 4:
                    message.itemId = reader.uint32();
                    break;
                case /* optional uint32 option_idx */ 8:
                    message.optionIdx = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UseItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 guid = 5; */
        if (message.guid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.guid);
        /* optional uint64 target_guid = 1; */
        if (message.targetGuid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.targetGuid);
        /* optional uint32 item_id = 4; */
        if (message.itemId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.itemId);
        /* optional uint32 option_idx = 8; */
        if (message.optionIdx !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.optionIdx);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UseItemRsp
 */
export const UseItemRsp = new UseItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DropItemReq$Type extends MessageType<DropItemReq> {
    constructor() {
        super("com.midnights.game.DropItemReq", [
            { no: 11, name: "pos", kind: "message", T: () => Vector },
            { no: 1, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] },
            { no: 2, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<DropItemReq>): DropItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DropItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropItemReq): DropItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector pos */ 11:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                case /* optional com.midnights.game.StoreType store_type */ 1:
                    message.storeType = reader.int32();
                    break;
                case /* optional uint32 count */ 2:
                    message.count = reader.uint32();
                    break;
                case /* optional uint64 guid */ 13:
                    message.guid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DropItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector pos = 11; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.StoreType store_type = 1; */
        if (message.storeType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.storeType);
        /* optional uint32 count = 2; */
        if (message.count !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.count);
        /* optional uint64 guid = 13; */
        if (message.guid !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.guid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DropItemReq
 */
export const DropItemReq = new DropItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DropItemRsp$Type extends MessageType<DropItemRsp> {
    constructor() {
        super("com.midnights.game.DropItemRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "store_type", kind: "enum", opt: true, T: () => ["com.midnights.game.StoreType", StoreType] }
        ]);
    }
    create(value?: PartialMessage<DropItemRsp>): DropItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DropItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropItemRsp): DropItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 guid */ 1:
                    message.guid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.StoreType store_type */ 15:
                    message.storeType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DropItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint64 guid = 1; */
        if (message.guid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.guid);
        /* optional com.midnights.game.StoreType store_type = 15; */
        if (message.storeType !== undefined)
            writer.tag(15, WireType.Varint).int32(message.storeType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DropItemRsp
 */
export const DropItemRsp = new DropItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WearEquipReq$Type extends MessageType<WearEquipReq> {
    constructor() {
        super("com.midnights.game.WearEquipReq", [
            { no: 7, name: "equip_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WearEquipReq>): WearEquipReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WearEquipReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WearEquipReq): WearEquipReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 equip_guid */ 7:
                    message.equipGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 avatar_guid */ 5:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WearEquipReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 equip_guid = 7; */
        if (message.equipGuid !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.equipGuid);
        /* optional uint64 avatar_guid = 5; */
        if (message.avatarGuid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WearEquipReq
 */
export const WearEquipReq = new WearEquipReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WearEquipRsp$Type extends MessageType<WearEquipRsp> {
    constructor() {
        super("com.midnights.game.WearEquipRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "equip_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WearEquipRsp>): WearEquipRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WearEquipRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WearEquipRsp): WearEquipRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 equip_guid */ 1:
                    message.equipGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 avatar_guid */ 7:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WearEquipRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint64 equip_guid = 1; */
        if (message.equipGuid !== undefined)
            writer.tag(1, WireType.Varint).uint64(message.equipGuid);
        /* optional uint64 avatar_guid = 7; */
        if (message.avatarGuid !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WearEquipRsp
 */
export const WearEquipRsp = new WearEquipRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeoffEquipReq$Type extends MessageType<TakeoffEquipReq> {
    constructor() {
        super("com.midnights.game.TakeoffEquipReq", [
            { no: 8, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "slot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeoffEquipReq>): TakeoffEquipReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeoffEquipReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeoffEquipReq): TakeoffEquipReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 8:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 slot */ 15:
                    message.slot = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeoffEquipReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_guid = 8; */
        if (message.avatarGuid !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.avatarGuid);
        /* optional uint32 slot = 15; */
        if (message.slot !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.slot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeoffEquipReq
 */
export const TakeoffEquipReq = new TakeoffEquipReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeoffEquipRsp$Type extends MessageType<TakeoffEquipRsp> {
    constructor() {
        super("com.midnights.game.TakeoffEquipRsp", [
            { no: 9, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "slot", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeoffEquipRsp>): TakeoffEquipRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeoffEquipRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeoffEquipRsp): TakeoffEquipRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 9:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 slot */ 10:
                    message.slot = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeoffEquipRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_guid = 9; */
        if (message.avatarGuid !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.avatarGuid);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 slot = 10; */
        if (message.slot !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.slot);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeoffEquipRsp
 */
export const TakeoffEquipRsp = new TakeoffEquipRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarEquipChangeNotify$Type extends MessageType<AvatarEquipChangeNotify> {
    constructor() {
        super("com.midnights.game.AvatarEquipChangeNotify", [
            { no: 10, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "equip_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1, name: "reliquary", kind: "message", T: () => SceneReliquaryInfo },
            { no: 15, name: "weapon", kind: "message", T: () => SceneWeaponInfo },
            { no: 14, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "equip_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarEquipChangeNotify>): AvatarEquipChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarEquipChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarEquipChangeNotify): AvatarEquipChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 avatar_guid */ 10:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 equip_guid */ 13:
                    message.equipGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.SceneReliquaryInfo reliquary */ 1:
                    message.reliquary = SceneReliquaryInfo.internalBinaryRead(reader, reader.uint32(), options, message.reliquary);
                    break;
                case /* optional com.midnights.game.SceneWeaponInfo weapon */ 15:
                    message.weapon = SceneWeaponInfo.internalBinaryRead(reader, reader.uint32(), options, message.weapon);
                    break;
                case /* optional uint32 item_id */ 14:
                    message.itemId = reader.uint32();
                    break;
                case /* optional uint32 equip_type */ 8:
                    message.equipType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarEquipChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 avatar_guid = 10; */
        if (message.avatarGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.avatarGuid);
        /* optional uint64 equip_guid = 13; */
        if (message.equipGuid !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.equipGuid);
        /* optional com.midnights.game.SceneReliquaryInfo reliquary = 1; */
        if (message.reliquary)
            SceneReliquaryInfo.internalBinaryWrite(message.reliquary, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.SceneWeaponInfo weapon = 15; */
        if (message.weapon)
            SceneWeaponInfo.internalBinaryWrite(message.weapon, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 item_id = 14; */
        if (message.itemId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.itemId);
        /* optional uint32 equip_type = 8; */
        if (message.equipType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.equipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AvatarEquipChangeNotify
 */
export const AvatarEquipChangeNotify = new AvatarEquipChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponUpgradeReq$Type extends MessageType<WeaponUpgradeReq> {
    constructor() {
        super("com.midnights.game.WeaponUpgradeReq", [
            { no: 1, name: "food_weapon_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "item_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 4, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WeaponUpgradeReq>): WeaponUpgradeReq {
        const message = { foodWeaponGuidList: [], itemParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponUpgradeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponUpgradeReq): WeaponUpgradeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 food_weapon_guid_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.foodWeaponGuidList.push(reader.uint64().toBigInt());
                    else
                        message.foodWeaponGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* repeated com.midnights.game.ItemParam item_param_list */ 15:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 target_weapon_guid */ 4:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeaponUpgradeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 food_weapon_guid_list = 1; */
        if (message.foodWeaponGuidList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.foodWeaponGuidList.length; i++)
                writer.uint64(message.foodWeaponGuidList[i]);
            writer.join();
        }
        /* repeated com.midnights.game.ItemParam item_param_list = 15; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 target_weapon_guid = 4; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.targetWeaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponUpgradeReq
 */
export const WeaponUpgradeReq = new WeaponUpgradeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponUpgradeRsp$Type extends MessageType<WeaponUpgradeRsp> {
    constructor() {
        super("com.midnights.game.WeaponUpgradeRsp", [
            { no: 7, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "old_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "item_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 6, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WeaponUpgradeRsp>): WeaponUpgradeRsp {
        const message = { itemParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponUpgradeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponUpgradeRsp): WeaponUpgradeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_level */ 7:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 old_level */ 8:
                    message.oldLevel = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_param_list */ 2:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 target_weapon_guid */ 6:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeaponUpgradeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_level = 7; */
        if (message.curLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.curLevel);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        /* optional uint32 old_level = 8; */
        if (message.oldLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.oldLevel);
        /* repeated com.midnights.game.ItemParam item_param_list = 2; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 target_weapon_guid = 6; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.targetWeaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponUpgradeRsp
 */
export const WeaponUpgradeRsp = new WeaponUpgradeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponPromoteReq$Type extends MessageType<WeaponPromoteReq> {
    constructor() {
        super("com.midnights.game.WeaponPromoteReq", [
            { no: 5, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WeaponPromoteReq>): WeaponPromoteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponPromoteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponPromoteReq): WeaponPromoteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 target_weapon_guid */ 5:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeaponPromoteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 target_weapon_guid = 5; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.targetWeaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponPromoteReq
 */
export const WeaponPromoteReq = new WeaponPromoteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponPromoteRsp$Type extends MessageType<WeaponPromoteRsp> {
    constructor() {
        super("com.midnights.game.WeaponPromoteRsp", [
            { no: 3, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "old_promote_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "cur_promote_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<WeaponPromoteRsp>): WeaponPromoteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponPromoteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponPromoteRsp): WeaponPromoteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 target_weapon_guid */ 3:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 old_promote_level */ 7:
                    message.oldPromoteLevel = reader.uint32();
                    break;
                case /* optional uint32 cur_promote_level */ 12:
                    message.curPromoteLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WeaponPromoteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 target_weapon_guid = 3; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.targetWeaponGuid);
        /* optional uint32 old_promote_level = 7; */
        if (message.oldPromoteLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.oldPromoteLevel);
        /* optional uint32 cur_promote_level = 12; */
        if (message.curPromoteLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curPromoteLevel);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponPromoteRsp
 */
export const WeaponPromoteRsp = new WeaponPromoteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryUpgradeReq$Type extends MessageType<ReliquaryUpgradeReq> {
    constructor() {
        super("com.midnights.game.ReliquaryUpgradeReq", [
            { no: 11, name: "item_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 6, name: "target_reliquary_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "food_reliquary_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryUpgradeReq>): ReliquaryUpgradeReq {
        const message = { itemParamList: [], foodReliquaryGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryUpgradeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryUpgradeReq): ReliquaryUpgradeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_param_list */ 11:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 target_reliquary_guid */ 6:
                    message.targetReliquaryGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint64 food_reliquary_guid_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.foodReliquaryGuidList.push(reader.uint64().toBigInt());
                    else
                        message.foodReliquaryGuidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryUpgradeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_param_list = 11; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 target_reliquary_guid = 6; */
        if (message.targetReliquaryGuid !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.targetReliquaryGuid);
        /* repeated uint64 food_reliquary_guid_list = 12; */
        if (message.foodReliquaryGuidList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.foodReliquaryGuidList.length; i++)
                writer.uint64(message.foodReliquaryGuidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryUpgradeReq
 */
export const ReliquaryUpgradeReq = new ReliquaryUpgradeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryUpgradeRsp$Type extends MessageType<ReliquaryUpgradeRsp> {
    constructor() {
        super("com.midnights.game.ReliquaryUpgradeRsp", [
            { no: 4, name: "old_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "cur_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "target_reliquary_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "cur_append_prop_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "power_up_rate", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "old_append_prop_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryUpgradeRsp>): ReliquaryUpgradeRsp {
        const message = { curAppendPropList: [], oldAppendPropList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryUpgradeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryUpgradeRsp): ReliquaryUpgradeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 old_level */ 4:
                    message.oldLevel = reader.uint32();
                    break;
                case /* optional uint32 cur_level */ 13:
                    message.curLevel = reader.uint32();
                    break;
                case /* optional uint64 target_reliquary_guid */ 9:
                    message.targetReliquaryGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint32 cur_append_prop_list */ 2:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curAppendPropList.push(reader.uint32());
                    else
                        message.curAppendPropList.push(reader.uint32());
                    break;
                case /* optional uint32 power_up_rate */ 6:
                    message.powerUpRate = reader.uint32();
                    break;
                case /* repeated uint32 old_append_prop_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.oldAppendPropList.push(reader.uint32());
                    else
                        message.oldAppendPropList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryUpgradeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 old_level = 4; */
        if (message.oldLevel !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.oldLevel);
        /* optional uint32 cur_level = 13; */
        if (message.curLevel !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.curLevel);
        /* optional uint64 target_reliquary_guid = 9; */
        if (message.targetReliquaryGuid !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.targetReliquaryGuid);
        /* repeated uint32 cur_append_prop_list = 2; */
        if (message.curAppendPropList.length) {
            writer.tag(2, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.curAppendPropList.length; i++)
                writer.uint32(message.curAppendPropList[i]);
            writer.join();
        }
        /* optional uint32 power_up_rate = 6; */
        if (message.powerUpRate !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.powerUpRate);
        /* repeated uint32 old_append_prop_list = 15; */
        if (message.oldAppendPropList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.oldAppendPropList.length; i++)
                writer.uint32(message.oldAppendPropList[i]);
            writer.join();
        }
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryUpgradeRsp
 */
export const ReliquaryUpgradeRsp = new ReliquaryUpgradeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryPromoteReq$Type extends MessageType<ReliquaryPromoteReq> {
    constructor() {
        super("com.midnights.game.ReliquaryPromoteReq", [
            { no: 10, name: "item_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "target_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryPromoteReq>): ReliquaryPromoteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryPromoteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryPromoteReq): ReliquaryPromoteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_guid */ 10:
                    message.itemGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 target_guid */ 13:
                    message.targetGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryPromoteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_guid = 10; */
        if (message.itemGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.itemGuid);
        /* optional uint64 target_guid = 13; */
        if (message.targetGuid !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.targetGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryPromoteReq
 */
export const ReliquaryPromoteReq = new ReliquaryPromoteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryPromoteRsp$Type extends MessageType<ReliquaryPromoteRsp> {
    constructor() {
        super("com.midnights.game.ReliquaryPromoteRsp", [
            { no: 10, name: "old_promote_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "target_reliquary_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 9, name: "cur_append_prop_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "cur_promote_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "old_append_prop_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryPromoteRsp>): ReliquaryPromoteRsp {
        const message = { curAppendPropList: [], oldAppendPropList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryPromoteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryPromoteRsp): ReliquaryPromoteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 old_promote_level */ 10:
                    message.oldPromoteLevel = reader.uint32();
                    break;
                case /* optional uint64 target_reliquary_guid */ 6:
                    message.targetReliquaryGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated uint32 cur_append_prop_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.curAppendPropList.push(reader.uint32());
                    else
                        message.curAppendPropList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cur_promote_level */ 2:
                    message.curPromoteLevel = reader.uint32();
                    break;
                case /* repeated uint32 old_append_prop_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.oldAppendPropList.push(reader.uint32());
                    else
                        message.oldAppendPropList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryPromoteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 old_promote_level = 10; */
        if (message.oldPromoteLevel !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.oldPromoteLevel);
        /* optional uint64 target_reliquary_guid = 6; */
        if (message.targetReliquaryGuid !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.targetReliquaryGuid);
        /* repeated uint32 cur_append_prop_list = 9; */
        if (message.curAppendPropList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.curAppendPropList.length; i++)
                writer.uint32(message.curAppendPropList[i]);
            writer.join();
        }
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 cur_promote_level = 2; */
        if (message.curPromoteLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.curPromoteLevel);
        /* repeated uint32 old_append_prop_list = 8; */
        if (message.oldAppendPropList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.oldAppendPropList.length; i++)
                writer.uint32(message.oldAppendPropList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryPromoteRsp
 */
export const ReliquaryPromoteRsp = new ReliquaryPromoteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarCardChangeReq$Type extends MessageType<AvatarCardChangeReq> {
    constructor() {
        super("com.midnights.game.AvatarCardChangeReq", [
            { no: 6, name: "item_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarCardChangeReq>): AvatarCardChangeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarCardChangeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarCardChangeReq): AvatarCardChangeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 item_id */ 6:
                    message.itemId = reader.uint32();
                    break;
                case /* optional uint64 avatar_guid */ 14:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 count */ 7:
                    message.count = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarCardChangeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 item_id = 6; */
        if (message.itemId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.itemId);
        /* optional uint64 avatar_guid = 14; */
        if (message.avatarGuid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.avatarGuid);
        /* optional uint32 count = 7; */
        if (message.count !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.count);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AvatarCardChangeReq
 */
export const AvatarCardChangeReq = new AvatarCardChangeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AvatarCardChangeRsp$Type extends MessageType<AvatarCardChangeRsp> {
    constructor() {
        super("com.midnights.game.AvatarCardChangeRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<AvatarCardChangeRsp>): AvatarCardChangeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AvatarCardChangeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AvatarCardChangeRsp): AvatarCardChangeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AvatarCardChangeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AvatarCardChangeRsp
 */
export const AvatarCardChangeRsp = new AvatarCardChangeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GrantRewardNotify$Type extends MessageType<GrantRewardNotify> {
    constructor() {
        super("com.midnights.game.GrantRewardNotify", [
            { no: 6, name: "reward", kind: "message", T: () => Reward }
        ]);
    }
    create(value?: PartialMessage<GrantRewardNotify>): GrantRewardNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GrantRewardNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GrantRewardNotify): GrantRewardNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Reward reward */ 6:
                    message.reward = Reward.internalBinaryRead(reader, reader.uint32(), options, message.reward);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GrantRewardNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Reward reward = 6; */
        if (message.reward)
            Reward.internalBinaryWrite(message.reward, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GrantRewardNotify
 */
export const GrantRewardNotify = new GrantRewardNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponAwakenReq$Type extends MessageType<WeaponAwakenReq> {
    constructor() {
        super("com.midnights.game.WeaponAwakenReq", [
            { no: 10, name: "item_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 7, name: "affix_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 9, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<WeaponAwakenReq>): WeaponAwakenReq {
        const message = { affixLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponAwakenReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponAwakenReq): WeaponAwakenReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 item_guid */ 10:
                    message.itemGuid = reader.uint64().toBigInt();
                    break;
                case /* map<uint32, uint32> affix_level_map */ 7:
                    this.binaryReadMap7(message.affixLevelMap, reader, options);
                    break;
                case /* optional uint64 target_weapon_guid */ 9:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: WeaponAwakenReq["affixLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WeaponAwakenReq["affixLevelMap"] | undefined, val: WeaponAwakenReq["affixLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WeaponAwakenReq.affix_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: WeaponAwakenReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 item_guid = 10; */
        if (message.itemGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.itemGuid);
        /* map<uint32, uint32> affix_level_map = 7; */
        for (let k of Object.keys(message.affixLevelMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.affixLevelMap[k as any]).join();
        /* optional uint64 target_weapon_guid = 9; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.targetWeaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponAwakenReq
 */
export const WeaponAwakenReq = new WeaponAwakenReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WeaponAwakenRsp$Type extends MessageType<WeaponAwakenRsp> {
    constructor() {
        super("com.midnights.game.WeaponAwakenRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "old_affix_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 2, name: "target_weapon_awaken_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "cur_affix_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<WeaponAwakenRsp>): WeaponAwakenRsp {
        const message = { oldAffixLevelMap: {}, curAffixLevelMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WeaponAwakenRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WeaponAwakenRsp): WeaponAwakenRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 avatar_guid */ 10:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* map<uint32, uint32> old_affix_level_map */ 4:
                    this.binaryReadMap4(message.oldAffixLevelMap, reader, options);
                    break;
                case /* optional uint32 target_weapon_awaken_level */ 2:
                    message.targetWeaponAwakenLevel = reader.uint32();
                    break;
                case /* optional uint64 target_weapon_guid */ 15:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                case /* map<uint32, uint32> cur_affix_level_map */ 11:
                    this.binaryReadMap11(message.curAffixLevelMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: WeaponAwakenRsp["oldAffixLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WeaponAwakenRsp["oldAffixLevelMap"] | undefined, val: WeaponAwakenRsp["oldAffixLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WeaponAwakenRsp.old_affix_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap11(map: WeaponAwakenRsp["curAffixLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof WeaponAwakenRsp["curAffixLevelMap"] | undefined, val: WeaponAwakenRsp["curAffixLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.WeaponAwakenRsp.cur_affix_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: WeaponAwakenRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional uint64 avatar_guid = 10; */
        if (message.avatarGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.avatarGuid);
        /* map<uint32, uint32> old_affix_level_map = 4; */
        for (let k of Object.keys(message.oldAffixLevelMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.oldAffixLevelMap[k as any]).join();
        /* optional uint32 target_weapon_awaken_level = 2; */
        if (message.targetWeaponAwakenLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.targetWeaponAwakenLevel);
        /* optional uint64 target_weapon_guid = 15; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(15, WireType.Varint).uint64(message.targetWeaponGuid);
        /* map<uint32, uint32> cur_affix_level_map = 11; */
        for (let k of Object.keys(message.curAffixLevelMap))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.curAffixLevelMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WeaponAwakenRsp
 */
export const WeaponAwakenRsp = new WeaponAwakenRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemCdGroupTimeNotify$Type extends MessageType<ItemCdGroupTimeNotify> {
    constructor() {
        super("com.midnights.game.ItemCdGroupTimeNotify", [
            { no: 9, name: "item_cd_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ } }
        ]);
    }
    create(value?: PartialMessage<ItemCdGroupTimeNotify>): ItemCdGroupTimeNotify {
        const message = { itemCdMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemCdGroupTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemCdGroupTimeNotify): ItemCdGroupTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint64> item_cd_map */ 9:
                    this.binaryReadMap9(message.itemCdMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: ItemCdGroupTimeNotify["itemCdMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ItemCdGroupTimeNotify["itemCdMap"] | undefined, val: ItemCdGroupTimeNotify["itemCdMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint64().toBigInt();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ItemCdGroupTimeNotify.item_cd_map");
            }
        }
        map[key ?? 0] = val ?? 0n;
    }
    internalBinaryWrite(message: ItemCdGroupTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint64> item_cd_map = 9; */
        for (let k of Object.keys(message.itemCdMap))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint64(message.itemCdMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ItemCdGroupTimeNotify
 */
export const ItemCdGroupTimeNotify = new ItemCdGroupTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DropHintNotify$Type extends MessageType<DropHintNotify> {
    constructor() {
        super("com.midnights.game.DropHintNotify", [
            { no: 7, name: "position", kind: "message", T: () => Vector },
            { no: 14, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DropHintNotify>): DropHintNotify {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DropHintNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DropHintNotify): DropHintNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector position */ 7:
                    message.position = Vector.internalBinaryRead(reader, reader.uint32(), options, message.position);
                    break;
                case /* repeated uint32 item_id_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DropHintNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector position = 7; */
        if (message.position)
            Vector.internalBinaryWrite(message.position, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 item_id_list = 14; */
        if (message.itemIdList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DropHintNotify
 */
export const DropHintNotify = new DropHintNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombineReq$Type extends MessageType<CombineReq> {
    constructor() {
        super("com.midnights.game.CombineReq", [
            { no: 12, name: "combine_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "combine_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CombineReq>): CombineReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombineReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombineReq): CombineReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 combine_count */ 12:
                    message.combineCount = reader.uint32();
                    break;
                case /* optional uint32 combine_id */ 9:
                    message.combineId = reader.uint32();
                    break;
                case /* optional uint64 avatar_guid */ 14:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombineReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 combine_count = 12; */
        if (message.combineCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.combineCount);
        /* optional uint32 combine_id = 9; */
        if (message.combineId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.combineId);
        /* optional uint64 avatar_guid = 14; */
        if (message.avatarGuid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CombineReq
 */
export const CombineReq = new CombineReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombineRsp$Type extends MessageType<CombineRsp> {
    constructor() {
        super("com.midnights.game.CombineRsp", [
            { no: 3, name: "cost_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "total_extra_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 11, name: "combine_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "total_random_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 2, name: "result_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 13, name: "combine_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "total_return_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 10, name: "avatar_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CombineRsp>): CombineRsp {
        const message = { costItemList: [], totalExtraItemList: [], totalRandomItemList: [], resultItemList: [], totalReturnItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombineRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombineRsp): CombineRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam cost_item_list */ 3:
                    message.costItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam total_extra_item_list */ 6:
                    message.totalExtraItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 combine_id */ 11:
                    message.combineId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam total_random_item_list */ 9:
                    message.totalRandomItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ItemParam result_item_list */ 2:
                    message.resultItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 combine_count */ 13:
                    message.combineCount = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam total_return_item_list */ 12:
                    message.totalReturnItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint64 avatar_guid */ 10:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombineRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam cost_item_list = 3; */
        for (let i = 0; i < message.costItemList.length; i++)
            ItemParam.internalBinaryWrite(message.costItemList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam total_extra_item_list = 6; */
        for (let i = 0; i < message.totalExtraItemList.length; i++)
            ItemParam.internalBinaryWrite(message.totalExtraItemList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 combine_id = 11; */
        if (message.combineId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.combineId);
        /* repeated com.midnights.game.ItemParam total_random_item_list = 9; */
        for (let i = 0; i < message.totalRandomItemList.length; i++)
            ItemParam.internalBinaryWrite(message.totalRandomItemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam result_item_list = 2; */
        for (let i = 0; i < message.resultItemList.length; i++)
            ItemParam.internalBinaryWrite(message.resultItemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 combine_count = 13; */
        if (message.combineCount !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.combineCount);
        /* repeated com.midnights.game.ItemParam total_return_item_list = 12; */
        for (let i = 0; i < message.totalReturnItemList.length; i++)
            ItemParam.internalBinaryWrite(message.totalReturnItemList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional uint64 avatar_guid = 10; */
        if (message.avatarGuid !== undefined)
            writer.tag(10, WireType.Varint).uint64(message.avatarGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CombineRsp
 */
export const CombineRsp = new CombineRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeQueueData$Type extends MessageType<ForgeQueueData> {
    constructor() {
        super("com.midnights.game.ForgeQueueData", [
            { no: 13, name: "finish_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "total_finish_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "queue_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "unfinish_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "next_finish_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "forge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeQueueData>): ForgeQueueData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeQueueData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeQueueData): ForgeQueueData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 finish_count */ 13:
                    message.finishCount = reader.uint32();
                    break;
                case /* optional uint32 total_finish_timestamp */ 14:
                    message.totalFinishTimestamp = reader.uint32();
                    break;
                case /* optional uint32 avatar_id */ 7:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional uint32 queue_id */ 1:
                    message.queueId = reader.uint32();
                    break;
                case /* optional uint32 unfinish_count */ 10:
                    message.unfinishCount = reader.uint32();
                    break;
                case /* optional uint32 next_finish_timestamp */ 11:
                    message.nextFinishTimestamp = reader.uint32();
                    break;
                case /* optional uint32 forge_id */ 15:
                    message.forgeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeQueueData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 finish_count = 13; */
        if (message.finishCount !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.finishCount);
        /* optional uint32 total_finish_timestamp = 14; */
        if (message.totalFinishTimestamp !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.totalFinishTimestamp);
        /* optional uint32 avatar_id = 7; */
        if (message.avatarId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.avatarId);
        /* optional uint32 queue_id = 1; */
        if (message.queueId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.queueId);
        /* optional uint32 unfinish_count = 10; */
        if (message.unfinishCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.unfinishCount);
        /* optional uint32 next_finish_timestamp = 11; */
        if (message.nextFinishTimestamp !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.nextFinishTimestamp);
        /* optional uint32 forge_id = 15; */
        if (message.forgeId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.forgeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeQueueData
 */
export const ForgeQueueData = new ForgeQueueData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeQueueDataNotify$Type extends MessageType<ForgeQueueDataNotify> {
    constructor() {
        super("com.midnights.game.ForgeQueueDataNotify", [
            { no: 7, name: "forge_queue_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => ForgeQueueData } },
            { no: 6, name: "removed_forge_queue_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeQueueDataNotify>): ForgeQueueDataNotify {
        const message = { forgeQueueMap: {}, removedForgeQueueList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeQueueDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeQueueDataNotify): ForgeQueueDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map */ 7:
                    this.binaryReadMap7(message.forgeQueueMap, reader, options);
                    break;
                case /* repeated uint32 removed_forge_queue_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.removedForgeQueueList.push(reader.uint32());
                    else
                        message.removedForgeQueueList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: ForgeQueueDataNotify["forgeQueueMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ForgeQueueDataNotify["forgeQueueMap"] | undefined, val: ForgeQueueDataNotify["forgeQueueMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = ForgeQueueData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ForgeQueueDataNotify.forge_queue_map");
            }
        }
        map[key ?? 0] = val ?? ForgeQueueData.create();
    }
    internalBinaryWrite(message: ForgeQueueDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 7; */
        for (let k of Object.keys(message.forgeQueueMap)) {
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ForgeQueueData.internalBinaryWrite(message.forgeQueueMap[k as any], writer, options);
            writer.join().join();
        }
        /* repeated uint32 removed_forge_queue_list = 6; */
        if (message.removedForgeQueueList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.removedForgeQueueList.length; i++)
                writer.uint32(message.removedForgeQueueList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeQueueDataNotify
 */
export const ForgeQueueDataNotify = new ForgeQueueDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeGetQueueDataReq$Type extends MessageType<ForgeGetQueueDataReq> {
    constructor() {
        super("com.midnights.game.ForgeGetQueueDataReq", []);
    }
    create(value?: PartialMessage<ForgeGetQueueDataReq>): ForgeGetQueueDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeGetQueueDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeGetQueueDataReq): ForgeGetQueueDataReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ForgeGetQueueDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeGetQueueDataReq
 */
export const ForgeGetQueueDataReq = new ForgeGetQueueDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeGetQueueDataRsp$Type extends MessageType<ForgeGetQueueDataRsp> {
    constructor() {
        super("com.midnights.game.ForgeGetQueueDataRsp", [
            { no: 2, name: "forge_queue_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => ForgeQueueData } },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "max_queue_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeGetQueueDataRsp>): ForgeGetQueueDataRsp {
        const message = { forgeQueueMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeGetQueueDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeGetQueueDataRsp): ForgeGetQueueDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map */ 2:
                    this.binaryReadMap2(message.forgeQueueMap, reader, options);
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 max_queue_num */ 6:
                    message.maxQueueNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ForgeGetQueueDataRsp["forgeQueueMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ForgeGetQueueDataRsp["forgeQueueMap"] | undefined, val: ForgeGetQueueDataRsp["forgeQueueMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = ForgeQueueData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ForgeGetQueueDataRsp.forge_queue_map");
            }
        }
        map[key ?? 0] = val ?? ForgeQueueData.create();
    }
    internalBinaryWrite(message: ForgeGetQueueDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 2; */
        for (let k of Object.keys(message.forgeQueueMap)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ForgeQueueData.internalBinaryWrite(message.forgeQueueMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 max_queue_num = 6; */
        if (message.maxQueueNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.maxQueueNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeGetQueueDataRsp
 */
export const ForgeGetQueueDataRsp = new ForgeGetQueueDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeStartReq$Type extends MessageType<ForgeStartReq> {
    constructor() {
        super("com.midnights.game.ForgeStartReq", [
            { no: 7, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "forge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "forge_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeStartReq>): ForgeStartReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeStartReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeStartReq): ForgeStartReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 avatar_id */ 7:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional uint32 forge_id */ 4:
                    message.forgeId = reader.uint32();
                    break;
                case /* optional uint32 forge_count */ 6:
                    message.forgeCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeStartReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 avatar_id = 7; */
        if (message.avatarId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.avatarId);
        /* optional uint32 forge_id = 4; */
        if (message.forgeId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.forgeId);
        /* optional uint32 forge_count = 6; */
        if (message.forgeCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.forgeCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeStartReq
 */
export const ForgeStartReq = new ForgeStartReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeStartRsp$Type extends MessageType<ForgeStartRsp> {
    constructor() {
        super("com.midnights.game.ForgeStartRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeStartRsp>): ForgeStartRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeStartRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeStartRsp): ForgeStartRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeStartRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeStartRsp
 */
export const ForgeStartRsp = new ForgeStartRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeQueueManipulateReq$Type extends MessageType<ForgeQueueManipulateReq> {
    constructor() {
        super("com.midnights.game.ForgeQueueManipulateReq", [
            { no: 5, name: "forge_queue_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "manipulate_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ForgeQueueManipulateType", ForgeQueueManipulateType, "FORGE_QUEUE_MANIPULATE_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ForgeQueueManipulateReq>): ForgeQueueManipulateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeQueueManipulateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeQueueManipulateReq): ForgeQueueManipulateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 forge_queue_id */ 5:
                    message.forgeQueueId = reader.uint32();
                    break;
                case /* optional com.midnights.game.ForgeQueueManipulateType manipulate_type */ 13:
                    message.manipulateType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeQueueManipulateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 forge_queue_id = 5; */
        if (message.forgeQueueId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.forgeQueueId);
        /* optional com.midnights.game.ForgeQueueManipulateType manipulate_type = 13; */
        if (message.manipulateType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.manipulateType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeQueueManipulateReq
 */
export const ForgeQueueManipulateReq = new ForgeQueueManipulateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeQueueManipulateRsp$Type extends MessageType<ForgeQueueManipulateRsp> {
    constructor() {
        super("com.midnights.game.ForgeQueueManipulateRsp", [
            { no: 4, name: "manipulate_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ForgeQueueManipulateType", ForgeQueueManipulateType, "FORGE_QUEUE_MANIPULATE_TYPE_"] },
            { no: 13, name: "extra_output_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 10, name: "return_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "output_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<ForgeQueueManipulateRsp>): ForgeQueueManipulateRsp {
        const message = { extraOutputItemList: [], returnItemList: [], outputItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeQueueManipulateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeQueueManipulateRsp): ForgeQueueManipulateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ForgeQueueManipulateType manipulate_type */ 4:
                    message.manipulateType = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam extra_output_item_list */ 13:
                    message.extraOutputItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ItemParam return_item_list */ 10:
                    message.returnItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.ItemParam output_item_list */ 9:
                    message.outputItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeQueueManipulateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ForgeQueueManipulateType manipulate_type = 4; */
        if (message.manipulateType !== undefined)
            writer.tag(4, WireType.Varint).int32(message.manipulateType);
        /* repeated com.midnights.game.ItemParam extra_output_item_list = 13; */
        for (let i = 0; i < message.extraOutputItemList.length; i++)
            ItemParam.internalBinaryWrite(message.extraOutputItemList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ItemParam return_item_list = 10; */
        for (let i = 0; i < message.returnItemList.length; i++)
            ItemParam.internalBinaryWrite(message.returnItemList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.ItemParam output_item_list = 9; */
        for (let i = 0; i < message.outputItemList.length; i++)
            ItemParam.internalBinaryWrite(message.outputItemList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeQueueManipulateRsp
 */
export const ForgeQueueManipulateRsp = new ForgeQueueManipulateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ResinChangeNotify$Type extends MessageType<ResinChangeNotify> {
    constructor() {
        super("com.midnights.game.ResinChangeNotify", [
            { no: 6, name: "next_add_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "cur_buy_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "cur_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ResinChangeNotify>): ResinChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ResinChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ResinChangeNotify): ResinChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 next_add_timestamp */ 6:
                    message.nextAddTimestamp = reader.uint32();
                    break;
                case /* optional uint32 cur_buy_count */ 4:
                    message.curBuyCount = reader.uint32();
                    break;
                case /* optional uint32 cur_value */ 12:
                    message.curValue = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ResinChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 next_add_timestamp = 6; */
        if (message.nextAddTimestamp !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.nextAddTimestamp);
        /* optional uint32 cur_buy_count = 4; */
        if (message.curBuyCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.curBuyCount);
        /* optional uint32 cur_value = 12; */
        if (message.curValue !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curValue);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ResinChangeNotify
 */
export const ResinChangeNotify = new ResinChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuyResinReq$Type extends MessageType<BuyResinReq> {
    constructor() {
        super("com.midnights.game.BuyResinReq", []);
    }
    create(value?: PartialMessage<BuyResinReq>): BuyResinReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuyResinReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuyResinReq): BuyResinReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: BuyResinReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuyResinReq
 */
export const BuyResinReq = new BuyResinReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuyResinRsp$Type extends MessageType<BuyResinRsp> {
    constructor() {
        super("com.midnights.game.BuyResinRsp", [
            { no: 10, name: "cur_value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BuyResinRsp>): BuyResinRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuyResinRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuyResinRsp): BuyResinRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_value */ 10:
                    message.curValue = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuyResinRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_value = 10; */
        if (message.curValue !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.curValue);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuyResinRsp
 */
export const BuyResinRsp = new BuyResinRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterialDeleteReturnNotify$Type extends MessageType<MaterialDeleteReturnNotify> {
    constructor() {
        super("com.midnights.game.MaterialDeleteReturnNotify", [
            { no: 5, name: "return_item_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 8, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.MaterialDeleteReturnType", MaterialDeleteReturnType] },
            { no: 6, name: "delete_material_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<MaterialDeleteReturnNotify>): MaterialDeleteReturnNotify {
        const message = { returnItemMap: {}, deleteMaterialMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaterialDeleteReturnNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaterialDeleteReturnNotify): MaterialDeleteReturnNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> return_item_map */ 5:
                    this.binaryReadMap5(message.returnItemMap, reader, options);
                    break;
                case /* optional com.midnights.game.MaterialDeleteReturnType type */ 8:
                    message.type = reader.int32();
                    break;
                case /* map<uint32, uint32> delete_material_map */ 6:
                    this.binaryReadMap6(message.deleteMaterialMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: MaterialDeleteReturnNotify["returnItemMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MaterialDeleteReturnNotify["returnItemMap"] | undefined, val: MaterialDeleteReturnNotify["returnItemMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MaterialDeleteReturnNotify.return_item_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap6(map: MaterialDeleteReturnNotify["deleteMaterialMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof MaterialDeleteReturnNotify["deleteMaterialMap"] | undefined, val: MaterialDeleteReturnNotify["deleteMaterialMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.MaterialDeleteReturnNotify.delete_material_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: MaterialDeleteReturnNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> return_item_map = 5; */
        for (let k of Object.keys(message.returnItemMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.returnItemMap[k as any]).join();
        /* optional com.midnights.game.MaterialDeleteReturnType type = 8; */
        if (message.type !== undefined)
            writer.tag(8, WireType.Varint).int32(message.type);
        /* map<uint32, uint32> delete_material_map = 6; */
        for (let k of Object.keys(message.deleteMaterialMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.deleteMaterialMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MaterialDeleteReturnNotify
 */
export const MaterialDeleteReturnNotify = new MaterialDeleteReturnNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeMaterialDeleteReturnReq$Type extends MessageType<TakeMaterialDeleteReturnReq> {
    constructor() {
        super("com.midnights.game.TakeMaterialDeleteReturnReq", [
            { no: 8, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.MaterialDeleteReturnType", MaterialDeleteReturnType] }
        ]);
    }
    create(value?: PartialMessage<TakeMaterialDeleteReturnReq>): TakeMaterialDeleteReturnReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeMaterialDeleteReturnReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeMaterialDeleteReturnReq): TakeMaterialDeleteReturnReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MaterialDeleteReturnType type */ 8:
                    message.type = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeMaterialDeleteReturnReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MaterialDeleteReturnType type = 8; */
        if (message.type !== undefined)
            writer.tag(8, WireType.Varint).int32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeMaterialDeleteReturnReq
 */
export const TakeMaterialDeleteReturnReq = new TakeMaterialDeleteReturnReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeMaterialDeleteReturnRsp$Type extends MessageType<TakeMaterialDeleteReturnRsp> {
    constructor() {
        super("com.midnights.game.TakeMaterialDeleteReturnRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeMaterialDeleteReturnRsp>): TakeMaterialDeleteReturnRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeMaterialDeleteReturnRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeMaterialDeleteReturnRsp): TakeMaterialDeleteReturnRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeMaterialDeleteReturnRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeMaterialDeleteReturnRsp
 */
export const TakeMaterialDeleteReturnRsp = new TakeMaterialDeleteReturnRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterialDeleteUpdateNotify$Type extends MessageType<MaterialDeleteUpdateNotify> {
    constructor() {
        super("com.midnights.game.MaterialDeleteUpdateNotify", []);
    }
    create(value?: PartialMessage<MaterialDeleteUpdateNotify>): MaterialDeleteUpdateNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaterialDeleteUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaterialDeleteUpdateNotify): MaterialDeleteUpdateNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: MaterialDeleteUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MaterialDeleteUpdateNotify
 */
export const MaterialDeleteUpdateNotify = new MaterialDeleteUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class McoinExchangeHcoinReq$Type extends MessageType<McoinExchangeHcoinReq> {
    constructor() {
        super("com.midnights.game.McoinExchangeHcoinReq", [
            { no: 5, name: "hcoin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "mcoin_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<McoinExchangeHcoinReq>): McoinExchangeHcoinReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<McoinExchangeHcoinReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: McoinExchangeHcoinReq): McoinExchangeHcoinReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 hcoin */ 5:
                    message.hcoin = reader.uint32();
                    break;
                case /* optional uint32 mcoin_cost */ 1:
                    message.mcoinCost = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: McoinExchangeHcoinReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 hcoin = 5; */
        if (message.hcoin !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.hcoin);
        /* optional uint32 mcoin_cost = 1; */
        if (message.mcoinCost !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.mcoinCost);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.McoinExchangeHcoinReq
 */
export const McoinExchangeHcoinReq = new McoinExchangeHcoinReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class McoinExchangeHcoinRsp$Type extends MessageType<McoinExchangeHcoinRsp> {
    constructor() {
        super("com.midnights.game.McoinExchangeHcoinRsp", [
            { no: 8, name: "mcoin_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "hcoin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<McoinExchangeHcoinRsp>): McoinExchangeHcoinRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<McoinExchangeHcoinRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: McoinExchangeHcoinRsp): McoinExchangeHcoinRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mcoin_cost */ 8:
                    message.mcoinCost = reader.uint32();
                    break;
                case /* optional uint32 hcoin */ 7:
                    message.hcoin = reader.uint32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: McoinExchangeHcoinRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mcoin_cost = 8; */
        if (message.mcoinCost !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.mcoinCost);
        /* optional uint32 hcoin = 7; */
        if (message.hcoin !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.hcoin);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.McoinExchangeHcoinRsp
 */
export const McoinExchangeHcoinRsp = new McoinExchangeHcoinRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MaterilaInfo$Type extends MessageType<MaterilaInfo> {
    constructor() {
        super("com.midnights.game.MaterilaInfo", [
            { no: 11, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<MaterilaInfo>): MaterilaInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MaterilaInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MaterilaInfo): MaterilaInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 count */ 11:
                    message.count = reader.uint32();
                    break;
                case /* optional uint64 guid */ 5:
                    message.guid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MaterilaInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 count = 11; */
        if (message.count !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.count);
        /* optional uint64 guid = 5; */
        if (message.guid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.guid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MaterilaInfo
 */
export const MaterilaInfo = new MaterilaInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DestroyMaterialReq$Type extends MessageType<DestroyMaterialReq> {
    constructor() {
        super("com.midnights.game.DestroyMaterialReq", [
            { no: 5, name: "material_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MaterilaInfo }
        ]);
    }
    create(value?: PartialMessage<DestroyMaterialReq>): DestroyMaterialReq {
        const message = { materialList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DestroyMaterialReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestroyMaterialReq): DestroyMaterialReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MaterilaInfo material_list */ 5:
                    message.materialList.push(MaterilaInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DestroyMaterialReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MaterilaInfo material_list = 5; */
        for (let i = 0; i < message.materialList.length; i++)
            MaterilaInfo.internalBinaryWrite(message.materialList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DestroyMaterialReq
 */
export const DestroyMaterialReq = new DestroyMaterialReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DestroyMaterialRsp$Type extends MessageType<DestroyMaterialRsp> {
    constructor() {
        super("com.midnights.game.DestroyMaterialRsp", [
            { no: 12, name: "item_count_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<DestroyMaterialRsp>): DestroyMaterialRsp {
        const message = { itemCountList: [], itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DestroyMaterialRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DestroyMaterialRsp): DestroyMaterialRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 item_count_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemCountList.push(reader.uint32());
                    else
                        message.itemCountList.push(reader.uint32());
                    break;
                case /* repeated uint32 item_id_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DestroyMaterialRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 item_count_list = 12; */
        if (message.itemCountList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemCountList.length; i++)
                writer.uint32(message.itemCountList[i]);
            writer.join();
        }
        /* repeated uint32 item_id_list = 13; */
        if (message.itemIdList.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DestroyMaterialRsp
 */
export const DestroyMaterialRsp = new DestroyMaterialRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetEquipLockStateReq$Type extends MessageType<SetEquipLockStateReq> {
    constructor() {
        super("com.midnights.game.SetEquipLockStateReq", [
            { no: 15, name: "is_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "target_equip_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SetEquipLockStateReq>): SetEquipLockStateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetEquipLockStateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetEquipLockStateReq): SetEquipLockStateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_locked */ 15:
                    message.isLocked = reader.bool();
                    break;
                case /* optional uint64 target_equip_guid */ 9:
                    message.targetEquipGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetEquipLockStateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_locked = 15; */
        if (message.isLocked !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isLocked);
        /* optional uint64 target_equip_guid = 9; */
        if (message.targetEquipGuid !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.targetEquipGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetEquipLockStateReq
 */
export const SetEquipLockStateReq = new SetEquipLockStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetEquipLockStateRsp$Type extends MessageType<SetEquipLockStateRsp> {
    constructor() {
        super("com.midnights.game.SetEquipLockStateRsp", [
            { no: 14, name: "target_equip_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "is_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetEquipLockStateRsp>): SetEquipLockStateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetEquipLockStateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetEquipLockStateRsp): SetEquipLockStateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 target_equip_guid */ 14:
                    message.targetEquipGuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_locked */ 10:
                    message.isLocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetEquipLockStateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 target_equip_guid = 14; */
        if (message.targetEquipGuid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.targetEquipGuid);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional bool is_locked = 10; */
        if (message.isLocked !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isLocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetEquipLockStateRsp
 */
export const SetEquipLockStateRsp = new SetEquipLockStateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalcWeaponUpgradeReturnItemsReq$Type extends MessageType<CalcWeaponUpgradeReturnItemsReq> {
    constructor() {
        super("com.midnights.game.CalcWeaponUpgradeReturnItemsReq", [
            { no: 15, name: "food_weapon_guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "item_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<CalcWeaponUpgradeReturnItemsReq>): CalcWeaponUpgradeReturnItemsReq {
        const message = { foodWeaponGuidList: [], itemParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CalcWeaponUpgradeReturnItemsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalcWeaponUpgradeReturnItemsReq): CalcWeaponUpgradeReturnItemsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 food_weapon_guid_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.foodWeaponGuidList.push(reader.uint64().toBigInt());
                    else
                        message.foodWeaponGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional uint64 target_weapon_guid */ 12:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                case /* repeated com.midnights.game.ItemParam item_param_list */ 3:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalcWeaponUpgradeReturnItemsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 food_weapon_guid_list = 15; */
        if (message.foodWeaponGuidList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.foodWeaponGuidList.length; i++)
                writer.uint64(message.foodWeaponGuidList[i]);
            writer.join();
        }
        /* optional uint64 target_weapon_guid = 12; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(12, WireType.Varint).uint64(message.targetWeaponGuid);
        /* repeated com.midnights.game.ItemParam item_param_list = 3; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CalcWeaponUpgradeReturnItemsReq
 */
export const CalcWeaponUpgradeReturnItemsReq = new CalcWeaponUpgradeReturnItemsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CalcWeaponUpgradeReturnItemsRsp$Type extends MessageType<CalcWeaponUpgradeReturnItemsRsp> {
    constructor() {
        super("com.midnights.game.CalcWeaponUpgradeReturnItemsRsp", [
            { no: 4, name: "item_param_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "target_weapon_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<CalcWeaponUpgradeReturnItemsRsp>): CalcWeaponUpgradeReturnItemsRsp {
        const message = { itemParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CalcWeaponUpgradeReturnItemsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CalcWeaponUpgradeReturnItemsRsp): CalcWeaponUpgradeReturnItemsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_param_list */ 4:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 target_weapon_guid */ 8:
                    message.targetWeaponGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CalcWeaponUpgradeReturnItemsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_param_list = 4; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint64 target_weapon_guid = 8; */
        if (message.targetWeaponGuid !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.targetWeaponGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CalcWeaponUpgradeReturnItemsRsp
 */
export const CalcWeaponUpgradeReturnItemsRsp = new CalcWeaponUpgradeReturnItemsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeDataNotify$Type extends MessageType<ForgeDataNotify> {
    constructor() {
        super("com.midnights.game.ForgeDataNotify", [
            { no: 5, name: "forge_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "forge_queue_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => ForgeQueueData } },
            { no: 14, name: "max_queue_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeDataNotify>): ForgeDataNotify {
        const message = { forgeIdList: [], forgeQueueMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeDataNotify): ForgeDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 forge_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.forgeIdList.push(reader.uint32());
                    else
                        message.forgeIdList.push(reader.uint32());
                    break;
                case /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map */ 8:
                    this.binaryReadMap8(message.forgeQueueMap, reader, options);
                    break;
                case /* optional uint32 max_queue_num */ 14:
                    message.maxQueueNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: ForgeDataNotify["forgeQueueMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ForgeDataNotify["forgeQueueMap"] | undefined, val: ForgeDataNotify["forgeQueueMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = ForgeQueueData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ForgeDataNotify.forge_queue_map");
            }
        }
        map[key ?? 0] = val ?? ForgeQueueData.create();
    }
    internalBinaryWrite(message: ForgeDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 forge_id_list = 5; */
        if (message.forgeIdList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.forgeIdList.length; i++)
                writer.uint32(message.forgeIdList[i]);
            writer.join();
        }
        /* map<uint32, com.midnights.game.ForgeQueueData> forge_queue_map = 8; */
        for (let k of Object.keys(message.forgeQueueMap)) {
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            ForgeQueueData.internalBinaryWrite(message.forgeQueueMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 max_queue_num = 14; */
        if (message.maxQueueNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxQueueNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeDataNotify
 */
export const ForgeDataNotify = new ForgeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ForgeFormulaDataNotify$Type extends MessageType<ForgeFormulaDataNotify> {
    constructor() {
        super("com.midnights.game.ForgeFormulaDataNotify", [
            { no: 15, name: "is_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "forge_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ForgeFormulaDataNotify>): ForgeFormulaDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ForgeFormulaDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ForgeFormulaDataNotify): ForgeFormulaDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_locked */ 15:
                    message.isLocked = reader.bool();
                    break;
                case /* optional uint32 forge_id */ 13:
                    message.forgeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ForgeFormulaDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_locked = 15; */
        if (message.isLocked !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isLocked);
        /* optional uint32 forge_id = 13; */
        if (message.forgeId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.forgeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ForgeFormulaDataNotify
 */
export const ForgeFormulaDataNotify = new ForgeFormulaDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombineDataNotify$Type extends MessageType<CombineDataNotify> {
    constructor() {
        super("com.midnights.game.CombineDataNotify", [
            { no: 5, name: "combine_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CombineDataNotify>): CombineDataNotify {
        const message = { combineIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombineDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombineDataNotify): CombineDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 combine_id_list */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.combineIdList.push(reader.uint32());
                    else
                        message.combineIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombineDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 combine_id_list = 5; */
        if (message.combineIdList.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.combineIdList.length; i++)
                writer.uint32(message.combineIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CombineDataNotify
 */
export const CombineDataNotify = new CombineDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CombineFormulaDataNotify$Type extends MessageType<CombineFormulaDataNotify> {
    constructor() {
        super("com.midnights.game.CombineFormulaDataNotify", [
            { no: 6, name: "combine_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_locked", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<CombineFormulaDataNotify>): CombineFormulaDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CombineFormulaDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CombineFormulaDataNotify): CombineFormulaDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 combine_id */ 6:
                    message.combineId = reader.uint32();
                    break;
                case /* optional bool is_locked */ 3:
                    message.isLocked = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CombineFormulaDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 combine_id = 6; */
        if (message.combineId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.combineId);
        /* optional bool is_locked = 3; */
        if (message.isLocked !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isLocked);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CombineFormulaDataNotify
 */
export const CombineFormulaDataNotify = new CombineFormulaDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClosedItemNotify$Type extends MessageType<ClosedItemNotify> {
    constructor() {
        super("com.midnights.game.ClosedItemNotify", [
            { no: 8, name: "item_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ClosedItemNotify>): ClosedItemNotify {
        const message = { itemIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClosedItemNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClosedItemNotify): ClosedItemNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 item_id_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.itemIdList.push(reader.uint32());
                    else
                        message.itemIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClosedItemNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 item_id_list = 8; */
        if (message.itemIdList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.itemIdList.length; i++)
                writer.uint32(message.itemIdList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClosedItemNotify
 */
export const ClosedItemNotify = new ClosedItemNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckAddItemExceedLimitNotify$Type extends MessageType<CheckAddItemExceedLimitNotify> {
    constructor() {
        super("com.midnights.game.CheckAddItemExceedLimitNotify", [
            { no: 5, name: "is_drop", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "msg_type", kind: "enum", opt: true, T: () => ["com.midnights.game.CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType", CheckAddItemExceedLimitNotify_ItemExceedLimitMsgType] },
            { no: 10, name: "exceeded_item_type_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "exceeded_item_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "reason", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CheckAddItemExceedLimitNotify>): CheckAddItemExceedLimitNotify {
        const message = { exceededItemTypeList: [], exceededItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckAddItemExceedLimitNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckAddItemExceedLimitNotify): CheckAddItemExceedLimitNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_drop */ 5:
                    message.isDrop = reader.bool();
                    break;
                case /* optional com.midnights.game.CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType msg_type */ 4:
                    message.msgType = reader.int32();
                    break;
                case /* repeated uint32 exceeded_item_type_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exceededItemTypeList.push(reader.uint32());
                    else
                        message.exceededItemTypeList.push(reader.uint32());
                    break;
                case /* repeated uint32 exceeded_item_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.exceededItemList.push(reader.uint32());
                    else
                        message.exceededItemList.push(reader.uint32());
                    break;
                case /* optional uint32 reason */ 14:
                    message.reason = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckAddItemExceedLimitNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_drop = 5; */
        if (message.isDrop !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isDrop);
        /* optional com.midnights.game.CheckAddItemExceedLimitNotify.ItemExceedLimitMsgType msg_type = 4; */
        if (message.msgType !== undefined)
            writer.tag(4, WireType.Varint).int32(message.msgType);
        /* repeated uint32 exceeded_item_type_list = 10; */
        if (message.exceededItemTypeList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exceededItemTypeList.length; i++)
                writer.uint32(message.exceededItemTypeList[i]);
            writer.join();
        }
        /* repeated uint32 exceeded_item_list = 12; */
        if (message.exceededItemList.length) {
            writer.tag(12, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.exceededItemList.length; i++)
                writer.uint32(message.exceededItemList[i]);
            writer.join();
        }
        /* optional uint32 reason = 14; */
        if (message.reason !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckAddItemExceedLimitNotify
 */
export const CheckAddItemExceedLimitNotify = new CheckAddItemExceedLimitNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetIsAutoUnlockSpecificEquipReq$Type extends MessageType<SetIsAutoUnlockSpecificEquipReq> {
    constructor() {
        super("com.midnights.game.SetIsAutoUnlockSpecificEquipReq", [
            { no: 14, name: "is_auto_unlock_specific_equip", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SetIsAutoUnlockSpecificEquipReq>): SetIsAutoUnlockSpecificEquipReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetIsAutoUnlockSpecificEquipReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetIsAutoUnlockSpecificEquipReq): SetIsAutoUnlockSpecificEquipReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_auto_unlock_specific_equip */ 14:
                    message.isAutoUnlockSpecificEquip = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetIsAutoUnlockSpecificEquipReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_auto_unlock_specific_equip = 14; */
        if (message.isAutoUnlockSpecificEquip !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isAutoUnlockSpecificEquip);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetIsAutoUnlockSpecificEquipReq
 */
export const SetIsAutoUnlockSpecificEquipReq = new SetIsAutoUnlockSpecificEquipReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetIsAutoUnlockSpecificEquipRsp$Type extends MessageType<SetIsAutoUnlockSpecificEquipRsp> {
    constructor() {
        super("com.midnights.game.SetIsAutoUnlockSpecificEquipRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetIsAutoUnlockSpecificEquipRsp>): SetIsAutoUnlockSpecificEquipRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetIsAutoUnlockSpecificEquipRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetIsAutoUnlockSpecificEquipRsp): SetIsAutoUnlockSpecificEquipRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetIsAutoUnlockSpecificEquipRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetIsAutoUnlockSpecificEquipRsp
 */
export const SetIsAutoUnlockSpecificEquipRsp = new SetIsAutoUnlockSpecificEquipRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryDecomposeReq$Type extends MessageType<ReliquaryDecomposeReq> {
    constructor() {
        super("com.midnights.game.ReliquaryDecomposeReq", [
            { no: 13, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "target_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryDecomposeReq>): ReliquaryDecomposeReq {
        const message = { guidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryDecomposeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryDecomposeReq): ReliquaryDecomposeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 config_id */ 13:
                    message.configId = reader.uint32();
                    break;
                case /* optional uint32 target_count */ 9:
                    message.targetCount = reader.uint32();
                    break;
                case /* repeated uint64 guid_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.guidList.push(reader.uint64().toBigInt());
                    else
                        message.guidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryDecomposeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 config_id = 13; */
        if (message.configId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.configId);
        /* optional uint32 target_count = 9; */
        if (message.targetCount !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.targetCount);
        /* repeated uint64 guid_list = 8; */
        if (message.guidList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.guidList.length; i++)
                writer.uint64(message.guidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryDecomposeReq
 */
export const ReliquaryDecomposeReq = new ReliquaryDecomposeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReliquaryDecomposeRsp$Type extends MessageType<ReliquaryDecomposeRsp> {
    constructor() {
        super("com.midnights.game.ReliquaryDecomposeRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "guid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<ReliquaryDecomposeRsp>): ReliquaryDecomposeRsp {
        const message = { guidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReliquaryDecomposeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReliquaryDecomposeRsp): ReliquaryDecomposeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint64 guid_list */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.guidList.push(reader.uint64().toBigInt());
                    else
                        message.guidList.push(reader.uint64().toBigInt());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReliquaryDecomposeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* repeated uint64 guid_list = 14; */
        if (message.guidList.length) {
            writer.tag(14, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.guidList.length; i++)
                writer.uint64(message.guidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReliquaryDecomposeRsp
 */
export const ReliquaryDecomposeRsp = new ReliquaryDecomposeRsp$Type();
