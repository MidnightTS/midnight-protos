/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CreateGadgetInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GadgetBornType";
import * as pb_1 from "google-protobuf";
export class CreateGadgetInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        born_type?: dependency_1.GadgetBornType;
        chest?: CreateGadgetInfo.Chest;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("born_type" in data && data.born_type != undefined) {
                this.born_type = data.born_type;
            }
            if ("chest" in data && data.chest != undefined) {
                this.chest = data.chest;
            }
        }
    }
    get born_type() {
        return pb_1.Message.getFieldWithDefault(this, 1, dependency_1.GadgetBornType.GADGET_BORN_TYPE_NONE) as dependency_1.GadgetBornType;
    }
    set born_type(value: dependency_1.GadgetBornType) {
        pb_1.Message.setField(this, 1, value);
    }
    get chest() {
        return pb_1.Message.getWrapperField(this, CreateGadgetInfo.Chest, 2) as CreateGadgetInfo.Chest;
    }
    set chest(value: CreateGadgetInfo.Chest) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_chest() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        born_type?: dependency_1.GadgetBornType;
        chest?: ReturnType<typeof CreateGadgetInfo.Chest.prototype.toObject>;
    }): CreateGadgetInfo {
        const message = new CreateGadgetInfo({});
        if (data.born_type != null) {
            message.born_type = data.born_type;
        }
        if (data.chest != null) {
            message.chest = CreateGadgetInfo.Chest.fromObject(data.chest);
        }
        return message;
    }
    toObject() {
        const data: {
            born_type?: dependency_1.GadgetBornType;
            chest?: ReturnType<typeof CreateGadgetInfo.Chest.prototype.toObject>;
        } = {};
        if (this.born_type != null) {
            data.born_type = this.born_type;
        }
        if (this.chest != null) {
            data.chest = this.chest.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.born_type != dependency_1.GadgetBornType.GADGET_BORN_TYPE_NONE)
            writer.writeEnum(1, this.born_type);
        if (this.has_chest)
            writer.writeMessage(2, this.chest, () => this.chest.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CreateGadgetInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CreateGadgetInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.born_type = reader.readEnum();
                    break;
                case 2:
                    reader.readMessage(message.chest, () => message.chest = CreateGadgetInfo.Chest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CreateGadgetInfo {
        return CreateGadgetInfo.deserialize(bytes);
    }
}
export namespace CreateGadgetInfo {
    export class Chest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            chest_drop_id?: number;
            is_show_cutscene?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("chest_drop_id" in data && data.chest_drop_id != undefined) {
                    this.chest_drop_id = data.chest_drop_id;
                }
                if ("is_show_cutscene" in data && data.is_show_cutscene != undefined) {
                    this.is_show_cutscene = data.is_show_cutscene;
                }
            }
        }
        get chest_drop_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set chest_drop_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get is_show_cutscene() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set is_show_cutscene(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            chest_drop_id?: number;
            is_show_cutscene?: boolean;
        }): Chest {
            const message = new Chest({});
            if (data.chest_drop_id != null) {
                message.chest_drop_id = data.chest_drop_id;
            }
            if (data.is_show_cutscene != null) {
                message.is_show_cutscene = data.is_show_cutscene;
            }
            return message;
        }
        toObject() {
            const data: {
                chest_drop_id?: number;
                is_show_cutscene?: boolean;
            } = {};
            if (this.chest_drop_id != null) {
                data.chest_drop_id = this.chest_drop_id;
            }
            if (this.is_show_cutscene != null) {
                data.is_show_cutscene = this.is_show_cutscene;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.chest_drop_id != 0)
                writer.writeUint32(1, this.chest_drop_id);
            if (this.is_show_cutscene != false)
                writer.writeBool(2, this.is_show_cutscene);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Chest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Chest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.chest_drop_id = reader.readUint32();
                        break;
                    case 2:
                        message.is_show_cutscene = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Chest {
            return Chest.deserialize(bytes);
        }
    }
}
