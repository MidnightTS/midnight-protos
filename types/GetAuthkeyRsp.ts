/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetAuthkeyRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GetAuthkeyRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        auth_appid?: string;
        sign_type?: number;
        retcode?: number;
        authkey_ver?: number;
        game_biz?: string;
        authkey?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("auth_appid" in data && data.auth_appid != undefined) {
                this.auth_appid = data.auth_appid;
            }
            if ("sign_type" in data && data.sign_type != undefined) {
                this.sign_type = data.sign_type;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("authkey_ver" in data && data.authkey_ver != undefined) {
                this.authkey_ver = data.authkey_ver;
            }
            if ("game_biz" in data && data.game_biz != undefined) {
                this.game_biz = data.game_biz;
            }
            if ("authkey" in data && data.authkey != undefined) {
                this.authkey = data.authkey;
            }
        }
    }
    get auth_appid() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set auth_appid(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get sign_type() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set sign_type(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get authkey_ver() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set authkey_ver(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get game_biz() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set game_biz(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get authkey() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set authkey(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        auth_appid?: string;
        sign_type?: number;
        retcode?: number;
        authkey_ver?: number;
        game_biz?: string;
        authkey?: string;
    }): GetAuthkeyRsp {
        const message = new GetAuthkeyRsp({});
        if (data.auth_appid != null) {
            message.auth_appid = data.auth_appid;
        }
        if (data.sign_type != null) {
            message.sign_type = data.sign_type;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.authkey_ver != null) {
            message.authkey_ver = data.authkey_ver;
        }
        if (data.game_biz != null) {
            message.game_biz = data.game_biz;
        }
        if (data.authkey != null) {
            message.authkey = data.authkey;
        }
        return message;
    }
    toObject() {
        const data: {
            auth_appid?: string;
            sign_type?: number;
            retcode?: number;
            authkey_ver?: number;
            game_biz?: string;
            authkey?: string;
        } = {};
        if (this.auth_appid != null) {
            data.auth_appid = this.auth_appid;
        }
        if (this.sign_type != null) {
            data.sign_type = this.sign_type;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.authkey_ver != null) {
            data.authkey_ver = this.authkey_ver;
        }
        if (this.game_biz != null) {
            data.game_biz = this.game_biz;
        }
        if (this.authkey != null) {
            data.authkey = this.authkey;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.auth_appid.length)
            writer.writeString(4, this.auth_appid);
        if (this.sign_type != 0)
            writer.writeUint32(15, this.sign_type);
        if (this.retcode != 0)
            writer.writeInt32(6, this.retcode);
        if (this.authkey_ver != 0)
            writer.writeUint32(9, this.authkey_ver);
        if (this.game_biz.length)
            writer.writeString(11, this.game_biz);
        if (this.authkey.length)
            writer.writeString(3, this.authkey);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetAuthkeyRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetAuthkeyRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.auth_appid = reader.readString();
                    break;
                case 15:
                    message.sign_type = reader.readUint32();
                    break;
                case 6:
                    message.retcode = reader.readInt32();
                    break;
                case 9:
                    message.authkey_ver = reader.readUint32();
                    break;
                case 11:
                    message.game_biz = reader.readString();
                    break;
                case 3:
                    message.authkey = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetAuthkeyRsp {
        return GetAuthkeyRsp.deserialize(bytes);
    }
}
