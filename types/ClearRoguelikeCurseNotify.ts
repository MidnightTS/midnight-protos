/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ClearRoguelikeCurseNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ClearRoguelikeCurseNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        clear_curse_map?: Map<number, number>;
        is_clear_all?: boolean;
        card_id?: number;
        is_curse_all_clear?: boolean;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("clear_curse_map" in data && data.clear_curse_map != undefined) {
                this.clear_curse_map = data.clear_curse_map;
            }
            if ("is_clear_all" in data && data.is_clear_all != undefined) {
                this.is_clear_all = data.is_clear_all;
            }
            if ("card_id" in data && data.card_id != undefined) {
                this.card_id = data.card_id;
            }
            if ("is_curse_all_clear" in data && data.is_curse_all_clear != undefined) {
                this.is_curse_all_clear = data.is_curse_all_clear;
            }
        }
        if (!this.clear_curse_map)
            this.clear_curse_map = new Map();
    }
    get clear_curse_map() {
        return pb_1.Message.getField(this, 10) as any as Map<number, number>;
    }
    set clear_curse_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 10, value as any);
    }
    get is_clear_all() {
        return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
    }
    set is_clear_all(value: boolean) {
        pb_1.Message.setField(this, 11, value);
    }
    get card_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set card_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_curse_all_clear() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_curse_all_clear(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        clear_curse_map?: {
            [key: number]: number;
        };
        is_clear_all?: boolean;
        card_id?: number;
        is_curse_all_clear?: boolean;
    }): ClearRoguelikeCurseNotify {
        const message = new ClearRoguelikeCurseNotify({});
        if (typeof data.clear_curse_map == "object") {
            message.clear_curse_map = new Map(Object.entries(data.clear_curse_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.is_clear_all != null) {
            message.is_clear_all = data.is_clear_all;
        }
        if (data.card_id != null) {
            message.card_id = data.card_id;
        }
        if (data.is_curse_all_clear != null) {
            message.is_curse_all_clear = data.is_curse_all_clear;
        }
        return message;
    }
    toObject() {
        const data: {
            clear_curse_map?: {
                [key: number]: number;
            };
            is_clear_all?: boolean;
            card_id?: number;
            is_curse_all_clear?: boolean;
        } = {};
        if (this.clear_curse_map.size > 0) {
            data.clear_curse_map = (Object.fromEntries)(this.clear_curse_map);
        }
        if (this.is_clear_all != null) {
            data.is_clear_all = this.is_clear_all;
        }
        if (this.card_id != null) {
            data.card_id = this.card_id;
        }
        if (this.is_curse_all_clear != null) {
            data.is_curse_all_clear = this.is_curse_all_clear;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.clear_curse_map) {
            writer.writeMessage(10, this.clear_curse_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.is_clear_all != false)
            writer.writeBool(11, this.is_clear_all);
        if (this.card_id != 0)
            writer.writeUint32(8, this.card_id);
        if (this.is_curse_all_clear != false)
            writer.writeBool(1, this.is_curse_all_clear);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ClearRoguelikeCurseNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ClearRoguelikeCurseNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.clear_curse_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 11:
                    message.is_clear_all = reader.readBool();
                    break;
                case 8:
                    message.card_id = reader.readUint32();
                    break;
                case 1:
                    message.is_curse_all_clear = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ClearRoguelikeCurseNotify {
        return ClearRoguelikeCurseNotify.deserialize(bytes);
    }
}
