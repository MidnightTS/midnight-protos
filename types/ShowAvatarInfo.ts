/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ShowAvatarInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarExcelInfo";
import * as dependency_2 from "./AvatarFetterInfo";
import * as dependency_3 from "./PropValue";
import * as dependency_4 from "./ShowEquip";
import * as pb_1 from "google-protobuf";
export class ShowAvatarInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        avatar_id?: number;
        prop_map?: Map<number, dependency_3.PropValue>;
        talent_id_list?: number[];
        fight_prop_map?: Map<number, number>;
        skill_depot_id?: number;
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: Map<number, number>;
        proud_skill_extra_level_map?: Map<number, number>;
        equip_list?: dependency_4.ShowEquip[];
        fetter_info?: dependency_2.AvatarFetterInfo;
        costume_id?: number;
        excel_info?: dependency_1.AvatarExcelInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 7, 10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("prop_map" in data && data.prop_map != undefined) {
                this.prop_map = data.prop_map;
            }
            if ("talent_id_list" in data && data.talent_id_list != undefined) {
                this.talent_id_list = data.talent_id_list;
            }
            if ("fight_prop_map" in data && data.fight_prop_map != undefined) {
                this.fight_prop_map = data.fight_prop_map;
            }
            if ("skill_depot_id" in data && data.skill_depot_id != undefined) {
                this.skill_depot_id = data.skill_depot_id;
            }
            if ("core_proud_skill_level" in data && data.core_proud_skill_level != undefined) {
                this.core_proud_skill_level = data.core_proud_skill_level;
            }
            if ("inherent_proud_skill_list" in data && data.inherent_proud_skill_list != undefined) {
                this.inherent_proud_skill_list = data.inherent_proud_skill_list;
            }
            if ("skill_level_map" in data && data.skill_level_map != undefined) {
                this.skill_level_map = data.skill_level_map;
            }
            if ("proud_skill_extra_level_map" in data && data.proud_skill_extra_level_map != undefined) {
                this.proud_skill_extra_level_map = data.proud_skill_extra_level_map;
            }
            if ("equip_list" in data && data.equip_list != undefined) {
                this.equip_list = data.equip_list;
            }
            if ("fetter_info" in data && data.fetter_info != undefined) {
                this.fetter_info = data.fetter_info;
            }
            if ("costume_id" in data && data.costume_id != undefined) {
                this.costume_id = data.costume_id;
            }
            if ("excel_info" in data && data.excel_info != undefined) {
                this.excel_info = data.excel_info;
            }
        }
        if (!this.prop_map)
            this.prop_map = new Map();
        if (!this.fight_prop_map)
            this.fight_prop_map = new Map();
        if (!this.skill_level_map)
            this.skill_level_map = new Map();
        if (!this.proud_skill_extra_level_map)
            this.proud_skill_extra_level_map = new Map();
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set avatar_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get prop_map() {
        return pb_1.Message.getField(this, 2) as any as Map<number, dependency_3.PropValue>;
    }
    set prop_map(value: Map<number, dependency_3.PropValue>) {
        pb_1.Message.setField(this, 2, value as any);
    }
    get talent_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set talent_id_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get fight_prop_map() {
        return pb_1.Message.getField(this, 4) as any as Map<number, number>;
    }
    set fight_prop_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 4, value as any);
    }
    get skill_depot_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set skill_depot_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get core_proud_skill_level() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set core_proud_skill_level(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get inherent_proud_skill_list() {
        return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
    }
    set inherent_proud_skill_list(value: number[]) {
        pb_1.Message.setField(this, 7, value);
    }
    get skill_level_map() {
        return pb_1.Message.getField(this, 8) as any as Map<number, number>;
    }
    set skill_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 8, value as any);
    }
    get proud_skill_extra_level_map() {
        return pb_1.Message.getField(this, 9) as any as Map<number, number>;
    }
    set proud_skill_extra_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 9, value as any);
    }
    get equip_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_4.ShowEquip, 10) as dependency_4.ShowEquip[];
    }
    set equip_list(value: dependency_4.ShowEquip[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get fetter_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.AvatarFetterInfo, 11) as dependency_2.AvatarFetterInfo;
    }
    set fetter_info(value: dependency_2.AvatarFetterInfo) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_fetter_info() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get costume_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set costume_id(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get excel_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AvatarExcelInfo, 13) as dependency_1.AvatarExcelInfo;
    }
    set excel_info(value: dependency_1.AvatarExcelInfo) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_excel_info() {
        return pb_1.Message.getField(this, 13) != null;
    }
    static fromObject(data: {
        avatar_id?: number;
        prop_map?: {
            [key: number]: ReturnType<typeof dependency_3.PropValue.prototype.toObject>;
        };
        talent_id_list?: number[];
        fight_prop_map?: {
            [key: number]: number;
        };
        skill_depot_id?: number;
        core_proud_skill_level?: number;
        inherent_proud_skill_list?: number[];
        skill_level_map?: {
            [key: number]: number;
        };
        proud_skill_extra_level_map?: {
            [key: number]: number;
        };
        equip_list?: ReturnType<typeof dependency_4.ShowEquip.prototype.toObject>[];
        fetter_info?: ReturnType<typeof dependency_2.AvatarFetterInfo.prototype.toObject>;
        costume_id?: number;
        excel_info?: ReturnType<typeof dependency_1.AvatarExcelInfo.prototype.toObject>;
    }): ShowAvatarInfo {
        const message = new ShowAvatarInfo({});
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (typeof data.prop_map == "object") {
            message.prop_map = new Map(Object.entries(data.prop_map).map(([key, value]) => [Number(key), dependency_3.PropValue.fromObject(value)]));
        }
        if (data.talent_id_list != null) {
            message.talent_id_list = data.talent_id_list;
        }
        if (typeof data.fight_prop_map == "object") {
            message.fight_prop_map = new Map(Object.entries(data.fight_prop_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.skill_depot_id != null) {
            message.skill_depot_id = data.skill_depot_id;
        }
        if (data.core_proud_skill_level != null) {
            message.core_proud_skill_level = data.core_proud_skill_level;
        }
        if (data.inherent_proud_skill_list != null) {
            message.inherent_proud_skill_list = data.inherent_proud_skill_list;
        }
        if (typeof data.skill_level_map == "object") {
            message.skill_level_map = new Map(Object.entries(data.skill_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.proud_skill_extra_level_map == "object") {
            message.proud_skill_extra_level_map = new Map(Object.entries(data.proud_skill_extra_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.equip_list != null) {
            message.equip_list = data.equip_list.map(item => dependency_4.ShowEquip.fromObject(item));
        }
        if (data.fetter_info != null) {
            message.fetter_info = dependency_2.AvatarFetterInfo.fromObject(data.fetter_info);
        }
        if (data.costume_id != null) {
            message.costume_id = data.costume_id;
        }
        if (data.excel_info != null) {
            message.excel_info = dependency_1.AvatarExcelInfo.fromObject(data.excel_info);
        }
        return message;
    }
    toObject() {
        const data: {
            avatar_id?: number;
            prop_map?: {
                [key: number]: ReturnType<typeof dependency_3.PropValue.prototype.toObject>;
            };
            talent_id_list?: number[];
            fight_prop_map?: {
                [key: number]: number;
            };
            skill_depot_id?: number;
            core_proud_skill_level?: number;
            inherent_proud_skill_list?: number[];
            skill_level_map?: {
                [key: number]: number;
            };
            proud_skill_extra_level_map?: {
                [key: number]: number;
            };
            equip_list?: ReturnType<typeof dependency_4.ShowEquip.prototype.toObject>[];
            fetter_info?: ReturnType<typeof dependency_2.AvatarFetterInfo.prototype.toObject>;
            costume_id?: number;
            excel_info?: ReturnType<typeof dependency_1.AvatarExcelInfo.prototype.toObject>;
        } = {};
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.prop_map.size > 0) {
            data.prop_map = (Object.fromEntries)((Array.from)(this.prop_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.talent_id_list != null) {
            data.talent_id_list = this.talent_id_list;
        }
        if (this.fight_prop_map.size > 0) {
            data.fight_prop_map = (Object.fromEntries)(this.fight_prop_map);
        }
        if (this.skill_depot_id != null) {
            data.skill_depot_id = this.skill_depot_id;
        }
        if (this.core_proud_skill_level != null) {
            data.core_proud_skill_level = this.core_proud_skill_level;
        }
        if (this.inherent_proud_skill_list != null) {
            data.inherent_proud_skill_list = this.inherent_proud_skill_list;
        }
        if (this.skill_level_map.size > 0) {
            data.skill_level_map = (Object.fromEntries)(this.skill_level_map);
        }
        if (this.proud_skill_extra_level_map.size > 0) {
            data.proud_skill_extra_level_map = (Object.fromEntries)(this.proud_skill_extra_level_map);
        }
        if (this.equip_list != null) {
            data.equip_list = this.equip_list.map((item: dependency_4.ShowEquip) => item.toObject());
        }
        if (this.fetter_info != null) {
            data.fetter_info = this.fetter_info.toObject();
        }
        if (this.costume_id != null) {
            data.costume_id = this.costume_id;
        }
        if (this.excel_info != null) {
            data.excel_info = this.excel_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.avatar_id != 0)
            writer.writeUint32(1, this.avatar_id);
        for (const [key, value] of this.prop_map) {
            writer.writeMessage(2, this.prop_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.talent_id_list.length)
            writer.writePackedUint32(3, this.talent_id_list);
        for (const [key, value] of this.fight_prop_map) {
            writer.writeMessage(4, this.fight_prop_map, () => {
                writer.writeUint32(1, key);
                writer.writeFloat(2, value);
            });
        }
        if (this.skill_depot_id != 0)
            writer.writeUint32(5, this.skill_depot_id);
        if (this.core_proud_skill_level != 0)
            writer.writeUint32(6, this.core_proud_skill_level);
        if (this.inherent_proud_skill_list.length)
            writer.writePackedUint32(7, this.inherent_proud_skill_list);
        for (const [key, value] of this.skill_level_map) {
            writer.writeMessage(8, this.skill_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        for (const [key, value] of this.proud_skill_extra_level_map) {
            writer.writeMessage(9, this.proud_skill_extra_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.equip_list.length)
            writer.writeRepeatedMessage(10, this.equip_list, (item: dependency_4.ShowEquip) => item.serialize(writer));
        if (this.has_fetter_info)
            writer.writeMessage(11, this.fetter_info, () => this.fetter_info.serialize(writer));
        if (this.costume_id != 0)
            writer.writeUint32(12, this.costume_id);
        if (this.has_excel_info)
            writer.writeMessage(13, this.excel_info, () => this.excel_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ShowAvatarInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ShowAvatarInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.avatar_id = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.prop_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_3.PropValue.deserialize(reader));
                        return value;
                    }));
                    break;
                case 3:
                    message.talent_id_list = reader.readPackedUint32();
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.fight_prop_map as any, reader, reader.readUint32, reader.readFloat));
                    break;
                case 5:
                    message.skill_depot_id = reader.readUint32();
                    break;
                case 6:
                    message.core_proud_skill_level = reader.readUint32();
                    break;
                case 7:
                    message.inherent_proud_skill_list = reader.readPackedUint32();
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 9:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.proud_skill_extra_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 10:
                    reader.readMessage(message.equip_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_4.ShowEquip.deserialize(reader), dependency_4.ShowEquip));
                    break;
                case 11:
                    reader.readMessage(message.fetter_info, () => message.fetter_info = dependency_2.AvatarFetterInfo.deserialize(reader));
                    break;
                case 12:
                    message.costume_id = reader.readUint32();
                    break;
                case 13:
                    reader.readMessage(message.excel_info, () => message.excel_info = dependency_1.AvatarExcelInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ShowAvatarInfo {
        return ShowAvatarInfo.deserialize(bytes);
    }
}
