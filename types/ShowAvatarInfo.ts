// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "ShowAvatarInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { AvatarExcelInfo } from "./AvatarExcelInfo";
import { AvatarFetterInfo } from "./AvatarFetterInfo";
import { ShowEquip } from "./ShowEquip";
import { PropValue } from "./PropValue";
/**
 * @generated from protobuf message ShowAvatarInfo
 */
export interface ShowAvatarInfo {
    /**
     * @generated from protobuf field: uint32 avatar_id = 1;
     */
    avatarId: number;
    /**
     * @generated from protobuf field: map<uint32, PropValue> prop_map = 2;
     */
    propMap: {
        [key: number]: PropValue;
    };
    /**
     * @generated from protobuf field: repeated uint32 talent_id_list = 3;
     */
    talentIdList: number[];
    /**
     * @generated from protobuf field: map<uint32, float> fight_prop_map = 4;
     */
    fightPropMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 skill_depot_id = 5;
     */
    skillDepotId: number;
    /**
     * @generated from protobuf field: uint32 core_proud_skill_level = 6;
     */
    coreProudSkillLevel: number;
    /**
     * @generated from protobuf field: repeated uint32 inherent_proud_skill_list = 7;
     */
    inherentProudSkillList: number[];
    /**
     * @generated from protobuf field: map<uint32, uint32> skill_level_map = 8;
     */
    skillLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> proud_skill_extra_level_map = 9;
     */
    proudSkillExtraLevelMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: repeated ShowEquip equip_list = 10;
     */
    equipList: ShowEquip[];
    /**
     * @generated from protobuf field: AvatarFetterInfo fetter_info = 11;
     */
    fetterInfo?: AvatarFetterInfo;
    /**
     * @generated from protobuf field: uint32 costume_id = 12;
     */
    costumeId: number;
    /**
     * @generated from protobuf field: AvatarExcelInfo excel_info = 13;
     */
    excelInfo?: AvatarExcelInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class ShowAvatarInfo$Type extends MessageType<ShowAvatarInfo> {
    constructor() {
        super("ShowAvatarInfo", [
            { no: 1, name: "avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => PropValue } },
            { no: 3, name: "talent_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "fight_prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 2 /*ScalarType.FLOAT*/ } },
            { no: 5, name: "skill_depot_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "core_proud_skill_level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "inherent_proud_skill_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "skill_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 9, name: "proud_skill_extra_level_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 10, name: "equip_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShowEquip },
            { no: 11, name: "fetter_info", kind: "message", T: () => AvatarFetterInfo },
            { no: 12, name: "costume_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "excel_info", kind: "message", T: () => AvatarExcelInfo }
        ]);
    }
    create(value?: PartialMessage<ShowAvatarInfo>): ShowAvatarInfo {
        const message = { avatarId: 0, propMap: {}, talentIdList: [], fightPropMap: {}, skillDepotId: 0, coreProudSkillLevel: 0, inherentProudSkillList: [], skillLevelMap: {}, proudSkillExtraLevelMap: {}, equipList: [], costumeId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShowAvatarInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShowAvatarInfo): ShowAvatarInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 avatar_id */ 1:
                    message.avatarId = reader.uint32();
                    break;
                case /* map<uint32, PropValue> prop_map */ 2:
                    this.binaryReadMap2(message.propMap, reader, options);
                    break;
                case /* repeated uint32 talent_id_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.talentIdList.push(reader.uint32());
                    else
                        message.talentIdList.push(reader.uint32());
                    break;
                case /* map<uint32, float> fight_prop_map */ 4:
                    this.binaryReadMap4(message.fightPropMap, reader, options);
                    break;
                case /* uint32 skill_depot_id */ 5:
                    message.skillDepotId = reader.uint32();
                    break;
                case /* uint32 core_proud_skill_level */ 6:
                    message.coreProudSkillLevel = reader.uint32();
                    break;
                case /* repeated uint32 inherent_proud_skill_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.inherentProudSkillList.push(reader.uint32());
                    else
                        message.inherentProudSkillList.push(reader.uint32());
                    break;
                case /* map<uint32, uint32> skill_level_map */ 8:
                    this.binaryReadMap8(message.skillLevelMap, reader, options);
                    break;
                case /* map<uint32, uint32> proud_skill_extra_level_map */ 9:
                    this.binaryReadMap9(message.proudSkillExtraLevelMap, reader, options);
                    break;
                case /* repeated ShowEquip equip_list */ 10:
                    message.equipList.push(ShowEquip.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* AvatarFetterInfo fetter_info */ 11:
                    message.fetterInfo = AvatarFetterInfo.internalBinaryRead(reader, reader.uint32(), options, message.fetterInfo);
                    break;
                case /* uint32 costume_id */ 12:
                    message.costumeId = reader.uint32();
                    break;
                case /* AvatarExcelInfo excel_info */ 13:
                    message.excelInfo = AvatarExcelInfo.internalBinaryRead(reader, reader.uint32(), options, message.excelInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2(map: ShowAvatarInfo["propMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ShowAvatarInfo["propMap"] | undefined, val: ShowAvatarInfo["propMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = PropValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ShowAvatarInfo.prop_map");
            }
        }
        map[key ?? 0] = val ?? PropValue.create();
    }
    private binaryReadMap4(map: ShowAvatarInfo["fightPropMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ShowAvatarInfo["fightPropMap"] | undefined, val: ShowAvatarInfo["fightPropMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.float();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ShowAvatarInfo.fight_prop_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap8(map: ShowAvatarInfo["skillLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ShowAvatarInfo["skillLevelMap"] | undefined, val: ShowAvatarInfo["skillLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ShowAvatarInfo.skill_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap9(map: ShowAvatarInfo["proudSkillExtraLevelMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ShowAvatarInfo["proudSkillExtraLevelMap"] | undefined, val: ShowAvatarInfo["proudSkillExtraLevelMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field ShowAvatarInfo.proud_skill_extra_level_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: ShowAvatarInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 avatar_id = 1; */
        if (message.avatarId !== 0)
            writer.tag(1, WireType.Varint).uint32(message.avatarId);
        /* map<uint32, PropValue> prop_map = 2; */
        for (let k of Object.keys(message.propMap)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            PropValue.internalBinaryWrite(message.propMap[k as any], writer, options);
            writer.join().join();
        }
        /* repeated uint32 talent_id_list = 3; */
        if (message.talentIdList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.talentIdList.length; i++)
                writer.uint32(message.talentIdList[i]);
            writer.join();
        }
        /* map<uint32, float> fight_prop_map = 4; */
        for (let k of Object.keys(message.fightPropMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Bit32).float(message.fightPropMap[k as any]).join();
        /* uint32 skill_depot_id = 5; */
        if (message.skillDepotId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.skillDepotId);
        /* uint32 core_proud_skill_level = 6; */
        if (message.coreProudSkillLevel !== 0)
            writer.tag(6, WireType.Varint).uint32(message.coreProudSkillLevel);
        /* repeated uint32 inherent_proud_skill_list = 7; */
        if (message.inherentProudSkillList.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.inherentProudSkillList.length; i++)
                writer.uint32(message.inherentProudSkillList[i]);
            writer.join();
        }
        /* map<uint32, uint32> skill_level_map = 8; */
        for (let k of Object.keys(message.skillLevelMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.skillLevelMap[k as any]).join();
        /* map<uint32, uint32> proud_skill_extra_level_map = 9; */
        for (let k of Object.keys(message.proudSkillExtraLevelMap))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.proudSkillExtraLevelMap[k as any]).join();
        /* repeated ShowEquip equip_list = 10; */
        for (let i = 0; i < message.equipList.length; i++)
            ShowEquip.internalBinaryWrite(message.equipList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* AvatarFetterInfo fetter_info = 11; */
        if (message.fetterInfo)
            AvatarFetterInfo.internalBinaryWrite(message.fetterInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* uint32 costume_id = 12; */
        if (message.costumeId !== 0)
            writer.tag(12, WireType.Varint).uint32(message.costumeId);
        /* AvatarExcelInfo excel_info = 13; */
        if (message.excelInfo)
            AvatarExcelInfo.internalBinaryWrite(message.excelInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ShowAvatarInfo
 */
export const ShowAvatarInfo = new ShowAvatarInfo$Type();
