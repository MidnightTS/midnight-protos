/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarSkillDepotChangeNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class AvatarSkillDepotChangeNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        skill_depot_id?: number;
        proud_skill_extra_level_map?: Map<number, number>;
        talent_id_list?: number[];
        proud_skill_list?: number[];
        core_proud_skill_level?: number;
        entity_id?: number;
        avatar_guid?: number;
        skill_level_map?: Map<number, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("skill_depot_id" in data && data.skill_depot_id != undefined) {
                this.skill_depot_id = data.skill_depot_id;
            }
            if ("proud_skill_extra_level_map" in data && data.proud_skill_extra_level_map != undefined) {
                this.proud_skill_extra_level_map = data.proud_skill_extra_level_map;
            }
            if ("talent_id_list" in data && data.talent_id_list != undefined) {
                this.talent_id_list = data.talent_id_list;
            }
            if ("proud_skill_list" in data && data.proud_skill_list != undefined) {
                this.proud_skill_list = data.proud_skill_list;
            }
            if ("core_proud_skill_level" in data && data.core_proud_skill_level != undefined) {
                this.core_proud_skill_level = data.core_proud_skill_level;
            }
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("avatar_guid" in data && data.avatar_guid != undefined) {
                this.avatar_guid = data.avatar_guid;
            }
            if ("skill_level_map" in data && data.skill_level_map != undefined) {
                this.skill_level_map = data.skill_level_map;
            }
        }
        if (!this.proud_skill_extra_level_map)
            this.proud_skill_extra_level_map = new Map();
        if (!this.skill_level_map)
            this.skill_level_map = new Map();
    }
    get skill_depot_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set skill_depot_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get proud_skill_extra_level_map() {
        return pb_1.Message.getField(this, 14) as any as Map<number, number>;
    }
    set proud_skill_extra_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 14, value as any);
    }
    get talent_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set talent_id_list(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get proud_skill_list() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set proud_skill_list(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get core_proud_skill_level() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set core_proud_skill_level(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set entity_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get avatar_guid() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set avatar_guid(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get skill_level_map() {
        return pb_1.Message.getField(this, 3) as any as Map<number, number>;
    }
    set skill_level_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    static fromObject(data: {
        skill_depot_id?: number;
        proud_skill_extra_level_map?: {
            [key: number]: number;
        };
        talent_id_list?: number[];
        proud_skill_list?: number[];
        core_proud_skill_level?: number;
        entity_id?: number;
        avatar_guid?: number;
        skill_level_map?: {
            [key: number]: number;
        };
    }): AvatarSkillDepotChangeNotify {
        const message = new AvatarSkillDepotChangeNotify({});
        if (data.skill_depot_id != null) {
            message.skill_depot_id = data.skill_depot_id;
        }
        if (typeof data.proud_skill_extra_level_map == "object") {
            message.proud_skill_extra_level_map = new Map(Object.entries(data.proud_skill_extra_level_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.talent_id_list != null) {
            message.talent_id_list = data.talent_id_list;
        }
        if (data.proud_skill_list != null) {
            message.proud_skill_list = data.proud_skill_list;
        }
        if (data.core_proud_skill_level != null) {
            message.core_proud_skill_level = data.core_proud_skill_level;
        }
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.avatar_guid != null) {
            message.avatar_guid = data.avatar_guid;
        }
        if (typeof data.skill_level_map == "object") {
            message.skill_level_map = new Map(Object.entries(data.skill_level_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            skill_depot_id?: number;
            proud_skill_extra_level_map?: {
                [key: number]: number;
            };
            talent_id_list?: number[];
            proud_skill_list?: number[];
            core_proud_skill_level?: number;
            entity_id?: number;
            avatar_guid?: number;
            skill_level_map?: {
                [key: number]: number;
            };
        } = {};
        if (this.skill_depot_id != null) {
            data.skill_depot_id = this.skill_depot_id;
        }
        if (this.proud_skill_extra_level_map.size > 0) {
            data.proud_skill_extra_level_map = (Object.fromEntries)(this.proud_skill_extra_level_map);
        }
        if (this.talent_id_list != null) {
            data.talent_id_list = this.talent_id_list;
        }
        if (this.proud_skill_list != null) {
            data.proud_skill_list = this.proud_skill_list;
        }
        if (this.core_proud_skill_level != null) {
            data.core_proud_skill_level = this.core_proud_skill_level;
        }
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.avatar_guid != null) {
            data.avatar_guid = this.avatar_guid;
        }
        if (this.skill_level_map.size > 0) {
            data.skill_level_map = (Object.fromEntries)(this.skill_level_map);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.skill_depot_id != 0)
            writer.writeUint32(15, this.skill_depot_id);
        for (const [key, value] of this.proud_skill_extra_level_map) {
            writer.writeMessage(14, this.proud_skill_extra_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.talent_id_list.length)
            writer.writePackedUint32(9, this.talent_id_list);
        if (this.proud_skill_list.length)
            writer.writePackedUint32(4, this.proud_skill_list);
        if (this.core_proud_skill_level != 0)
            writer.writeUint32(2, this.core_proud_skill_level);
        if (this.entity_id != 0)
            writer.writeUint32(7, this.entity_id);
        if (this.avatar_guid != 0)
            writer.writeUint64(12, this.avatar_guid);
        for (const [key, value] of this.skill_level_map) {
            writer.writeMessage(3, this.skill_level_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvatarSkillDepotChangeNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarSkillDepotChangeNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.skill_depot_id = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.proud_skill_extra_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 9:
                    message.talent_id_list = reader.readPackedUint32();
                    break;
                case 4:
                    message.proud_skill_list = reader.readPackedUint32();
                    break;
                case 2:
                    message.core_proud_skill_level = reader.readUint32();
                    break;
                case 7:
                    message.entity_id = reader.readUint32();
                    break;
                case 12:
                    message.avatar_guid = reader.readUint64();
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_level_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AvatarSkillDepotChangeNotify {
        return AvatarSkillDepotChangeNotify.deserialize(bytes);
    }
}
