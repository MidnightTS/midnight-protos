/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TreasureMapRegionInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class TreasureMapRegionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        start_time?: number;
        current_progress?: number;
        is_done_mp_spot?: boolean;
        scene_id?: number;
        goal_points?: number;
        is_find_mp_spot?: boolean;
        region_radius?: number;
        region_center_pos?: dependency_1.Vector;
        region_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("start_time" in data && data.start_time != undefined) {
                this.start_time = data.start_time;
            }
            if ("current_progress" in data && data.current_progress != undefined) {
                this.current_progress = data.current_progress;
            }
            if ("is_done_mp_spot" in data && data.is_done_mp_spot != undefined) {
                this.is_done_mp_spot = data.is_done_mp_spot;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("goal_points" in data && data.goal_points != undefined) {
                this.goal_points = data.goal_points;
            }
            if ("is_find_mp_spot" in data && data.is_find_mp_spot != undefined) {
                this.is_find_mp_spot = data.is_find_mp_spot;
            }
            if ("region_radius" in data && data.region_radius != undefined) {
                this.region_radius = data.region_radius;
            }
            if ("region_center_pos" in data && data.region_center_pos != undefined) {
                this.region_center_pos = data.region_center_pos;
            }
            if ("region_id" in data && data.region_id != undefined) {
                this.region_id = data.region_id;
            }
        }
    }
    get start_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set start_time(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get current_progress() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set current_progress(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_done_mp_spot() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_done_mp_spot(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get goal_points() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set goal_points(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_find_mp_spot() {
        return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
    }
    set is_find_mp_spot(value: boolean) {
        pb_1.Message.setField(this, 4, value);
    }
    get region_radius() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set region_radius(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get region_center_pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 9) as dependency_1.Vector;
    }
    set region_center_pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_region_center_pos() {
        return pb_1.Message.getField(this, 9) != null;
    }
    get region_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set region_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data: {
        start_time?: number;
        current_progress?: number;
        is_done_mp_spot?: boolean;
        scene_id?: number;
        goal_points?: number;
        is_find_mp_spot?: boolean;
        region_radius?: number;
        region_center_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        region_id?: number;
    }): TreasureMapRegionInfo {
        const message = new TreasureMapRegionInfo({});
        if (data.start_time != null) {
            message.start_time = data.start_time;
        }
        if (data.current_progress != null) {
            message.current_progress = data.current_progress;
        }
        if (data.is_done_mp_spot != null) {
            message.is_done_mp_spot = data.is_done_mp_spot;
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.goal_points != null) {
            message.goal_points = data.goal_points;
        }
        if (data.is_find_mp_spot != null) {
            message.is_find_mp_spot = data.is_find_mp_spot;
        }
        if (data.region_radius != null) {
            message.region_radius = data.region_radius;
        }
        if (data.region_center_pos != null) {
            message.region_center_pos = dependency_1.Vector.fromObject(data.region_center_pos);
        }
        if (data.region_id != null) {
            message.region_id = data.region_id;
        }
        return message;
    }
    toObject() {
        const data: {
            start_time?: number;
            current_progress?: number;
            is_done_mp_spot?: boolean;
            scene_id?: number;
            goal_points?: number;
            is_find_mp_spot?: boolean;
            region_radius?: number;
            region_center_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            region_id?: number;
        } = {};
        if (this.start_time != null) {
            data.start_time = this.start_time;
        }
        if (this.current_progress != null) {
            data.current_progress = this.current_progress;
        }
        if (this.is_done_mp_spot != null) {
            data.is_done_mp_spot = this.is_done_mp_spot;
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.goal_points != null) {
            data.goal_points = this.goal_points;
        }
        if (this.is_find_mp_spot != null) {
            data.is_find_mp_spot = this.is_find_mp_spot;
        }
        if (this.region_radius != null) {
            data.region_radius = this.region_radius;
        }
        if (this.region_center_pos != null) {
            data.region_center_pos = this.region_center_pos.toObject();
        }
        if (this.region_id != null) {
            data.region_id = this.region_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.start_time != 0)
            writer.writeUint32(6, this.start_time);
        if (this.current_progress != 0)
            writer.writeUint32(11, this.current_progress);
        if (this.is_done_mp_spot != false)
            writer.writeBool(3, this.is_done_mp_spot);
        if (this.scene_id != 0)
            writer.writeUint32(2, this.scene_id);
        if (this.goal_points != 0)
            writer.writeUint32(12, this.goal_points);
        if (this.is_find_mp_spot != false)
            writer.writeBool(4, this.is_find_mp_spot);
        if (this.region_radius != 0)
            writer.writeUint32(1, this.region_radius);
        if (this.has_region_center_pos)
            writer.writeMessage(9, this.region_center_pos, () => this.region_center_pos.serialize(writer));
        if (this.region_id != 0)
            writer.writeUint32(5, this.region_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TreasureMapRegionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TreasureMapRegionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.start_time = reader.readUint32();
                    break;
                case 11:
                    message.current_progress = reader.readUint32();
                    break;
                case 3:
                    message.is_done_mp_spot = reader.readBool();
                    break;
                case 2:
                    message.scene_id = reader.readUint32();
                    break;
                case 12:
                    message.goal_points = reader.readUint32();
                    break;
                case 4:
                    message.is_find_mp_spot = reader.readBool();
                    break;
                case 1:
                    message.region_radius = reader.readUint32();
                    break;
                case 9:
                    reader.readMessage(message.region_center_pos, () => message.region_center_pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 5:
                    message.region_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TreasureMapRegionInfo {
        return TreasureMapRegionInfo.deserialize(bytes);
    }
}
