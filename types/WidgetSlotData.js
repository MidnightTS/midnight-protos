"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _WidgetSlotData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.WidgetSlotData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: WidgetSlotData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./WidgetSlotTag");
const pb_1 = require("google-protobuf");
class WidgetSlotData extends pb_1.Message {
    constructor(data) {
        super();
        _WidgetSlotData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _WidgetSlotData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("cd_over_time" in data && data.cd_over_time != undefined) {
                this.cd_over_time = data.cd_over_time;
            }
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
            if ("material_id" in data && data.material_id != undefined) {
                this.material_id = data.material_id;
            }
            if ("is_active" in data && data.is_active != undefined) {
                this.is_active = data.is_active;
            }
        }
    }
    get cd_over_time() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set cd_over_time(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get tag() {
        return pb_1.Message.getFieldWithDefault(this, 14, dependency_1.WidgetSlotTag.WIDGET_SLOT_TAG_QUICK_USE);
    }
    set tag(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get material_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set material_id(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_active() {
        return pb_1.Message.getFieldWithDefault(this, 12, false);
    }
    set is_active(value) {
        pb_1.Message.setField(this, 12, value);
    }
    static fromObject(data) {
        const message = new WidgetSlotData({});
        if (data.cd_over_time != null) {
            message.cd_over_time = data.cd_over_time;
        }
        if (data.tag != null) {
            message.tag = data.tag;
        }
        if (data.material_id != null) {
            message.material_id = data.material_id;
        }
        if (data.is_active != null) {
            message.is_active = data.is_active;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.cd_over_time != null) {
            data.cd_over_time = this.cd_over_time;
        }
        if (this.tag != null) {
            data.tag = this.tag;
        }
        if (this.material_id != null) {
            data.material_id = this.material_id;
        }
        if (this.is_active != null) {
            data.is_active = this.is_active;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.cd_over_time != 0)
            writer.writeUint32(9, this.cd_over_time);
        if (this.tag != dependency_1.WidgetSlotTag.WIDGET_SLOT_TAG_QUICK_USE)
            writer.writeEnum(14, this.tag);
        if (this.material_id != 0)
            writer.writeUint32(11, this.material_id);
        if (this.is_active != false)
            writer.writeBool(12, this.is_active);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new WidgetSlotData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.cd_over_time = reader.readUint32();
                    break;
                case 14:
                    message.tag = reader.readEnum();
                    break;
                case 11:
                    message.material_id = reader.readUint32();
                    break;
                case 12:
                    message.is_active = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return WidgetSlotData.deserialize(bytes);
    }
}
exports.WidgetSlotData = WidgetSlotData;
_WidgetSlotData_one_of_decls = new WeakMap();
