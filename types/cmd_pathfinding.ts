// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_pathfinding.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MathQuaternion } from "./define";
import { Vector } from "./define";
import { Vector3Int } from "./define";
/**
 * @generated from protobuf message com.midnights.game.QueryFilter
 */
export interface QueryFilter {
    /**
     * @generated from protobuf field: optional int32 type_id = 9;
     */
    typeId?: number;
    /**
     * @generated from protobuf field: optional int32 area_mask = 13;
     */
    areaMask?: number;
}
/**
 * @generated from protobuf message com.midnights.game.QueryPathReq
 */
export interface QueryPathReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.QueryPathReq.OptionType query_type = 13;
     */
    queryType?: QueryPathReq_OptionType;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector3Int source_extend = 6;
     */
    sourceExtend?: Vector3Int;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector source_pos = 2;
     */
    sourcePos?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.QueryFilter filter = 12;
     */
    filter?: QueryFilter;
    /**
     * @generated from protobuf field: optional int32 query_id = 15;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector3Int destination_extend = 4;
     */
    destinationExtend?: Vector3Int;
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector destination_pos = 10;
     */
    destinationPos: Vector[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 11;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.QueryPathReq.OptionType
 */
export enum QueryPathReq_OptionType {
    /**
     * @generated from protobuf enum value: OPTION_NONE = 0;
     */
    OPTION_NONE = 0,
    /**
     * @generated from protobuf enum value: OPTION_NORMAL = 1;
     */
    OPTION_NORMAL = 1,
    /**
     * @generated from protobuf enum value: OPTION_FIRST_CAN_GO = 2;
     */
    OPTION_FIRST_CAN_GO = 2
}
/**
 * @generated from protobuf enum com.midnights.game.QueryPathReq.CmdId
 */
export enum QueryPathReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2372;
     */
    CMD_ID = 2372,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.QueryPathRsp
 */
export interface QueryPathRsp {
    /**
     * @generated from protobuf field: optional int32 query_id = 12;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector corners = 6;
     */
    corners: Vector[];
    /**
     * @generated from protobuf field: optional com.midnights.game.QueryPathRsp.PathStatusType query_status = 8;
     */
    queryStatus?: QueryPathRsp_PathStatusType;
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.QueryPathRsp.PathStatusType
 */
export enum QueryPathRsp_PathStatusType {
    /**
     * @generated from protobuf enum value: STATUS_FAIL = 0;
     */
    STATUS_FAIL = 0,
    /**
     * @generated from protobuf enum value: STATUS_SUCC = 1;
     */
    STATUS_SUCC = 1,
    /**
     * @generated from protobuf enum value: STATUS_PARTIAL = 2;
     */
    STATUS_PARTIAL = 2
}
/**
 * @generated from protobuf enum com.midnights.game.QueryPathRsp.CmdId
 */
export enum QueryPathRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2398;
     */
    CMD_ID = 2398,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ObstacleInfo
 */
export interface ObstacleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.MathQuaternion rotation = 4;
     */
    rotation?: MathQuaternion;
    /**
     * @generated from protobuf field: optional int32 obstacle_id = 2;
     */
    obstacleId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 14;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.ObstacleInfo.ShapeType shape = 6;
     */
    shape?: ObstacleInfo_ShapeType;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector3Int extents = 12;
     */
    extents?: Vector3Int;
}
/**
 * @generated from protobuf enum com.midnights.game.ObstacleInfo.ShapeType
 */
export enum ObstacleInfo_ShapeType {
    /**
     * @generated from protobuf enum value: OBSTACLE_SHAPE_CAPSULE = 0;
     */
    OBSTACLE_SHAPE_CAPSULE = 0,
    /**
     * @generated from protobuf enum value: OBSTACLE_SHAPE_BOX = 1;
     */
    OBSTACLE_SHAPE_BOX = 1
}
/**
 * @generated from protobuf message com.midnights.game.ObstacleModifyNotify
 */
export interface ObstacleModifyNotify {
    /**
     * @generated from protobuf field: repeated int32 remove_obstacle_ids = 9;
     */
    removeObstacleIds: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ObstacleInfo add_obstacles = 6;
     */
    addObstacles: ObstacleInfo[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 5;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ObstacleModifyNotify.CmdId
 */
export enum ObstacleModifyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2312;
     */
    CMD_ID = 2312,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PathfindingPingNotify
 */
export interface PathfindingPingNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.PathfindingPingNotify.CmdId
 */
export enum PathfindingPingNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2335;
     */
    CMD_ID = 2335,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PathfindingEnterSceneReq
 */
export interface PathfindingEnterSceneReq {
    /**
     * @generated from protobuf field: optional uint32 scene_id = 12;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: repeated uint32 activity_id = 14;
     */
    activityId: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_tag_hash = 15;
     */
    sceneTagHash?: number;
    /**
     * @generated from protobuf field: optional uint32 version = 6;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional bool is_editor = 11;
     */
    isEditor?: boolean;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ObstacleInfo obstacles = 13;
     */
    obstacles: ObstacleInfo[];
    /**
     * @generated from protobuf field: optional uint32 polygon_id = 4;
     */
    polygonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PathfindingEnterSceneReq.CmdId
 */
export enum PathfindingEnterSceneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2307;
     */
    CMD_ID = 2307,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PathfindingEnterSceneRsp
 */
export interface PathfindingEnterSceneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PathfindingEnterSceneRsp.CmdId
 */
export enum PathfindingEnterSceneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2321;
     */
    CMD_ID = 2321,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GMShowObstacleReq
 */
export interface GMShowObstacleReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GMShowObstacleReq.CmdId
 */
export enum GMShowObstacleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2361;
     */
    CMD_ID = 2361,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GMObstacleInfo
 */
export interface GMObstacleInfo {
    /**
     * @generated from protobuf field: optional int64 timestamp = 14;
     */
    timestamp?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.ObstacleInfo.ShapeType shape = 2;
     */
    shape?: ObstacleInfo_ShapeType;
    /**
     * @generated from protobuf field: optional int32 obstacle_id = 13;
     */
    obstacleId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MathQuaternion rotation = 3;
     */
    rotation?: MathQuaternion;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 8;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector3Int extents = 15;
     */
    extents?: Vector3Int;
}
/**
 * @generated from protobuf message com.midnights.game.GMShowObstacleRsp
 */
export interface GMShowObstacleRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GMObstacleInfo obstacles = 6;
     */
    obstacles: GMObstacleInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.GMShowObstacleRsp.CmdId
 */
export enum GMShowObstacleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2329;
     */
    CMD_ID = 2329,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GMShowNavMeshReq
 */
export interface GMShowNavMeshReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 1;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector extent = 5;
     */
    extent?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.GMShowNavMeshReq.CmdId
 */
export enum GMShowNavMeshReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2357;
     */
    CMD_ID = 2357,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PBNavMeshPoly
 */
export interface PBNavMeshPoly {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PBNavMeshPoly.EdgeType edge_types = 10;
     */
    edgeTypes: PBNavMeshPoly_EdgeType[];
    /**
     * @generated from protobuf field: optional int32 area = 6;
     */
    area?: number;
    /**
     * @generated from protobuf field: repeated int32 vects = 7;
     */
    vects: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.PBNavMeshPoly.EdgeType
 */
export enum PBNavMeshPoly_EdgeType {
    /**
     * @generated from protobuf enum value: INNER = 0;
     */
    INNER = 0,
    /**
     * @generated from protobuf enum value: TILE_BOUND = 1;
     */
    TILE_BOUND = 1,
    /**
     * @generated from protobuf enum value: TILE_BOUND_UNCONNECT = 2;
     */
    TILE_BOUND_UNCONNECT = 2,
    /**
     * @generated from protobuf enum value: TILE_BOUND_OVERIDE = 3;
     */
    TILE_BOUND_OVERIDE = 3
}
/**
 * @generated from protobuf message com.midnights.game.PBNavMeshTile
 */
export interface PBNavMeshTile {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector vecs = 4;
     */
    vecs: Vector[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.PBNavMeshPoly polys = 8;
     */
    polys: PBNavMeshPoly[];
}
/**
 * @generated from protobuf message com.midnights.game.GMShowNavMeshRsp
 */
export interface GMShowNavMeshRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PBNavMeshTile tiles = 11;
     */
    tiles: PBNavMeshTile[];
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GMShowNavMeshRsp.CmdId
 */
export enum GMShowNavMeshRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2400;
     */
    CMD_ID = 2400,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PbNavMeshStatsInfo
 */
export interface PbNavMeshStatsInfo {
    /**
     * @generated from protobuf field: optional int32 authority_ai_in_combat = 10;
     */
    authorityAiInCombat?: number;
    /**
     * @generated from protobuf field: optional int32 no_authority_ai_in_combat = 11;
     */
    noAuthorityAiInCombat?: number;
    /**
     * @generated from protobuf field: optional int32 total_authority_ai = 8;
     */
    totalAuthorityAi?: number;
    /**
     * @generated from protobuf field: optional int32 total_no_authority_ai = 13;
     */
    totalNoAuthorityAi?: number;
}
/**
 * @generated from protobuf message com.midnights.game.NavMeshStatsNotify
 */
export interface NavMeshStatsNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PbNavMeshStatsInfo infos = 4;
     */
    infos: PbNavMeshStatsInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.NavMeshStatsNotify.CmdId
 */
export enum NavMeshStatsNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 2316;
     */
    CMD_ID = 2316,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class QueryFilter$Type extends MessageType<QueryFilter> {
    constructor() {
        super("com.midnights.game.QueryFilter", [
            { no: 9, name: "type_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "area_mask", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryFilter>): QueryFilter {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryFilter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryFilter): QueryFilter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 type_id */ 9:
                    message.typeId = reader.int32();
                    break;
                case /* optional int32 area_mask */ 13:
                    message.areaMask = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryFilter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 type_id = 9; */
        if (message.typeId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.typeId);
        /* optional int32 area_mask = 13; */
        if (message.areaMask !== undefined)
            writer.tag(13, WireType.Varint).int32(message.areaMask);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QueryFilter
 */
export const QueryFilter = new QueryFilter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPathReq$Type extends MessageType<QueryPathReq> {
    constructor() {
        super("com.midnights.game.QueryPathReq", [
            { no: 13, name: "query_type", kind: "enum", opt: true, T: () => ["com.midnights.game.QueryPathReq.OptionType", QueryPathReq_OptionType] },
            { no: 6, name: "source_extend", kind: "message", T: () => Vector3Int },
            { no: 2, name: "source_pos", kind: "message", T: () => Vector },
            { no: 12, name: "filter", kind: "message", T: () => QueryFilter },
            { no: 15, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "destination_extend", kind: "message", T: () => Vector3Int },
            { no: 10, name: "destination_pos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Vector },
            { no: 11, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryPathReq>): QueryPathReq {
        const message = { destinationPos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPathReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPathReq): QueryPathReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.QueryPathReq.OptionType query_type */ 13:
                    message.queryType = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector3Int source_extend */ 6:
                    message.sourceExtend = Vector3Int.internalBinaryRead(reader, reader.uint32(), options, message.sourceExtend);
                    break;
                case /* optional com.midnights.game.Vector source_pos */ 2:
                    message.sourcePos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.sourcePos);
                    break;
                case /* optional com.midnights.game.QueryFilter filter */ 12:
                    message.filter = QueryFilter.internalBinaryRead(reader, reader.uint32(), options, message.filter);
                    break;
                case /* optional int32 query_id */ 15:
                    message.queryId = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector3Int destination_extend */ 4:
                    message.destinationExtend = Vector3Int.internalBinaryRead(reader, reader.uint32(), options, message.destinationExtend);
                    break;
                case /* repeated com.midnights.game.Vector destination_pos */ 10:
                    message.destinationPos.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 scene_id */ 11:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPathReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.QueryPathReq.OptionType query_type = 13; */
        if (message.queryType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.queryType);
        /* optional com.midnights.game.Vector3Int source_extend = 6; */
        if (message.sourceExtend)
            Vector3Int.internalBinaryWrite(message.sourceExtend, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector source_pos = 2; */
        if (message.sourcePos)
            Vector.internalBinaryWrite(message.sourcePos, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.QueryFilter filter = 12; */
        if (message.filter)
            QueryFilter.internalBinaryWrite(message.filter, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 query_id = 15; */
        if (message.queryId !== undefined)
            writer.tag(15, WireType.Varint).int32(message.queryId);
        /* optional com.midnights.game.Vector3Int destination_extend = 4; */
        if (message.destinationExtend)
            Vector3Int.internalBinaryWrite(message.destinationExtend, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.Vector destination_pos = 10; */
        for (let i = 0; i < message.destinationPos.length; i++)
            Vector.internalBinaryWrite(message.destinationPos[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 11; */
        if (message.sceneId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QueryPathReq
 */
export const QueryPathReq = new QueryPathReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class QueryPathRsp$Type extends MessageType<QueryPathRsp> {
    constructor() {
        super("com.midnights.game.QueryPathRsp", [
            { no: 12, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "corners", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Vector },
            { no: 8, name: "query_status", kind: "enum", opt: true, T: () => ["com.midnights.game.QueryPathRsp.PathStatusType", QueryPathRsp_PathStatusType] },
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<QueryPathRsp>): QueryPathRsp {
        const message = { corners: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<QueryPathRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: QueryPathRsp): QueryPathRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 query_id */ 12:
                    message.queryId = reader.int32();
                    break;
                case /* repeated com.midnights.game.Vector corners */ 6:
                    message.corners.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.QueryPathRsp.PathStatusType query_status */ 8:
                    message.queryStatus = reader.int32();
                    break;
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: QueryPathRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 query_id = 12; */
        if (message.queryId !== undefined)
            writer.tag(12, WireType.Varint).int32(message.queryId);
        /* repeated com.midnights.game.Vector corners = 6; */
        for (let i = 0; i < message.corners.length; i++)
            Vector.internalBinaryWrite(message.corners[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.QueryPathRsp.PathStatusType query_status = 8; */
        if (message.queryStatus !== undefined)
            writer.tag(8, WireType.Varint).int32(message.queryStatus);
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.QueryPathRsp
 */
export const QueryPathRsp = new QueryPathRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObstacleInfo$Type extends MessageType<ObstacleInfo> {
    constructor() {
        super("com.midnights.game.ObstacleInfo", [
            { no: 4, name: "rotation", kind: "message", T: () => MathQuaternion },
            { no: 2, name: "obstacle_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "center", kind: "message", T: () => Vector },
            { no: 6, name: "shape", kind: "enum", opt: true, T: () => ["com.midnights.game.ObstacleInfo.ShapeType", ObstacleInfo_ShapeType] },
            { no: 12, name: "extents", kind: "message", T: () => Vector3Int }
        ]);
    }
    create(value?: PartialMessage<ObstacleInfo>): ObstacleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ObstacleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObstacleInfo): ObstacleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MathQuaternion rotation */ 4:
                    message.rotation = MathQuaternion.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                case /* optional int32 obstacle_id */ 2:
                    message.obstacleId = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector center */ 14:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional com.midnights.game.ObstacleInfo.ShapeType shape */ 6:
                    message.shape = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector3Int extents */ 12:
                    message.extents = Vector3Int.internalBinaryRead(reader, reader.uint32(), options, message.extents);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObstacleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MathQuaternion rotation = 4; */
        if (message.rotation)
            MathQuaternion.internalBinaryWrite(message.rotation, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 obstacle_id = 2; */
        if (message.obstacleId !== undefined)
            writer.tag(2, WireType.Varint).int32(message.obstacleId);
        /* optional com.midnights.game.Vector center = 14; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.ObstacleInfo.ShapeType shape = 6; */
        if (message.shape !== undefined)
            writer.tag(6, WireType.Varint).int32(message.shape);
        /* optional com.midnights.game.Vector3Int extents = 12; */
        if (message.extents)
            Vector3Int.internalBinaryWrite(message.extents, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ObstacleInfo
 */
export const ObstacleInfo = new ObstacleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ObstacleModifyNotify$Type extends MessageType<ObstacleModifyNotify> {
    constructor() {
        super("com.midnights.game.ObstacleModifyNotify", [
            { no: 9, name: "remove_obstacle_ids", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "add_obstacles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ObstacleInfo },
            { no: 5, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ObstacleModifyNotify>): ObstacleModifyNotify {
        const message = { removeObstacleIds: [], addObstacles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ObstacleModifyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ObstacleModifyNotify): ObstacleModifyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int32 remove_obstacle_ids */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.removeObstacleIds.push(reader.int32());
                    else
                        message.removeObstacleIds.push(reader.int32());
                    break;
                case /* repeated com.midnights.game.ObstacleInfo add_obstacles */ 6:
                    message.addObstacles.push(ObstacleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 scene_id */ 5:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ObstacleModifyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int32 remove_obstacle_ids = 9; */
        for (let i = 0; i < message.removeObstacleIds.length; i++)
            writer.tag(9, WireType.Varint).int32(message.removeObstacleIds[i]);
        /* repeated com.midnights.game.ObstacleInfo add_obstacles = 6; */
        for (let i = 0; i < message.addObstacles.length; i++)
            ObstacleInfo.internalBinaryWrite(message.addObstacles[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 scene_id = 5; */
        if (message.sceneId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ObstacleModifyNotify
 */
export const ObstacleModifyNotify = new ObstacleModifyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PathfindingPingNotify$Type extends MessageType<PathfindingPingNotify> {
    constructor() {
        super("com.midnights.game.PathfindingPingNotify", []);
    }
    create(value?: PartialMessage<PathfindingPingNotify>): PathfindingPingNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PathfindingPingNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PathfindingPingNotify): PathfindingPingNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PathfindingPingNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PathfindingPingNotify
 */
export const PathfindingPingNotify = new PathfindingPingNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PathfindingEnterSceneReq$Type extends MessageType<PathfindingEnterSceneReq> {
    constructor() {
        super("com.midnights.game.PathfindingEnterSceneReq", [
            { no: 12, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "activity_id", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "scene_tag_hash", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_editor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "obstacles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ObstacleInfo },
            { no: 4, name: "polygon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PathfindingEnterSceneReq>): PathfindingEnterSceneReq {
        const message = { activityId: [], obstacles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PathfindingEnterSceneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PathfindingEnterSceneReq): PathfindingEnterSceneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 scene_id */ 12:
                    message.sceneId = reader.uint32();
                    break;
                case /* repeated uint32 activity_id */ 14:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.activityId.push(reader.uint32());
                    else
                        message.activityId.push(reader.uint32());
                    break;
                case /* optional uint32 scene_tag_hash */ 15:
                    message.sceneTagHash = reader.uint32();
                    break;
                case /* optional uint32 version */ 6:
                    message.version = reader.uint32();
                    break;
                case /* optional bool is_editor */ 11:
                    message.isEditor = reader.bool();
                    break;
                case /* repeated com.midnights.game.ObstacleInfo obstacles */ 13:
                    message.obstacles.push(ObstacleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 polygon_id */ 4:
                    message.polygonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PathfindingEnterSceneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 scene_id = 12; */
        if (message.sceneId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.sceneId);
        /* repeated uint32 activity_id = 14; */
        for (let i = 0; i < message.activityId.length; i++)
            writer.tag(14, WireType.Varint).uint32(message.activityId[i]);
        /* optional uint32 scene_tag_hash = 15; */
        if (message.sceneTagHash !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneTagHash);
        /* optional uint32 version = 6; */
        if (message.version !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.version);
        /* optional bool is_editor = 11; */
        if (message.isEditor !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isEditor);
        /* repeated com.midnights.game.ObstacleInfo obstacles = 13; */
        for (let i = 0; i < message.obstacles.length; i++)
            ObstacleInfo.internalBinaryWrite(message.obstacles[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 polygon_id = 4; */
        if (message.polygonId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.polygonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PathfindingEnterSceneReq
 */
export const PathfindingEnterSceneReq = new PathfindingEnterSceneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PathfindingEnterSceneRsp$Type extends MessageType<PathfindingEnterSceneRsp> {
    constructor() {
        super("com.midnights.game.PathfindingEnterSceneRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PathfindingEnterSceneRsp>): PathfindingEnterSceneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PathfindingEnterSceneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PathfindingEnterSceneRsp): PathfindingEnterSceneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PathfindingEnterSceneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PathfindingEnterSceneRsp
 */
export const PathfindingEnterSceneRsp = new PathfindingEnterSceneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMShowObstacleReq$Type extends MessageType<GMShowObstacleReq> {
    constructor() {
        super("com.midnights.game.GMShowObstacleReq", []);
    }
    create(value?: PartialMessage<GMShowObstacleReq>): GMShowObstacleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMShowObstacleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMShowObstacleReq): GMShowObstacleReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GMShowObstacleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GMShowObstacleReq
 */
export const GMShowObstacleReq = new GMShowObstacleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMObstacleInfo$Type extends MessageType<GMObstacleInfo> {
    constructor() {
        super("com.midnights.game.GMObstacleInfo", [
            { no: 14, name: "timestamp", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "shape", kind: "enum", opt: true, T: () => ["com.midnights.game.ObstacleInfo.ShapeType", ObstacleInfo_ShapeType] },
            { no: 13, name: "obstacle_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "rotation", kind: "message", T: () => MathQuaternion },
            { no: 8, name: "center", kind: "message", T: () => Vector },
            { no: 15, name: "extents", kind: "message", T: () => Vector3Int }
        ]);
    }
    create(value?: PartialMessage<GMObstacleInfo>): GMObstacleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMObstacleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMObstacleInfo): GMObstacleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 timestamp */ 14:
                    message.timestamp = reader.int64().toBigInt();
                    break;
                case /* optional com.midnights.game.ObstacleInfo.ShapeType shape */ 2:
                    message.shape = reader.int32();
                    break;
                case /* optional int32 obstacle_id */ 13:
                    message.obstacleId = reader.int32();
                    break;
                case /* optional com.midnights.game.MathQuaternion rotation */ 3:
                    message.rotation = MathQuaternion.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                case /* optional com.midnights.game.Vector center */ 8:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional com.midnights.game.Vector3Int extents */ 15:
                    message.extents = Vector3Int.internalBinaryRead(reader, reader.uint32(), options, message.extents);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMObstacleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 timestamp = 14; */
        if (message.timestamp !== undefined)
            writer.tag(14, WireType.Varint).int64(message.timestamp);
        /* optional com.midnights.game.ObstacleInfo.ShapeType shape = 2; */
        if (message.shape !== undefined)
            writer.tag(2, WireType.Varint).int32(message.shape);
        /* optional int32 obstacle_id = 13; */
        if (message.obstacleId !== undefined)
            writer.tag(13, WireType.Varint).int32(message.obstacleId);
        /* optional com.midnights.game.MathQuaternion rotation = 3; */
        if (message.rotation)
            MathQuaternion.internalBinaryWrite(message.rotation, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector center = 8; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector3Int extents = 15; */
        if (message.extents)
            Vector3Int.internalBinaryWrite(message.extents, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GMObstacleInfo
 */
export const GMObstacleInfo = new GMObstacleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMShowObstacleRsp$Type extends MessageType<GMShowObstacleRsp> {
    constructor() {
        super("com.midnights.game.GMShowObstacleRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "obstacles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GMObstacleInfo }
        ]);
    }
    create(value?: PartialMessage<GMShowObstacleRsp>): GMShowObstacleRsp {
        const message = { obstacles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMShowObstacleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMShowObstacleRsp): GMShowObstacleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.GMObstacleInfo obstacles */ 6:
                    message.obstacles.push(GMObstacleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMShowObstacleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.GMObstacleInfo obstacles = 6; */
        for (let i = 0; i < message.obstacles.length; i++)
            GMObstacleInfo.internalBinaryWrite(message.obstacles[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GMShowObstacleRsp
 */
export const GMShowObstacleRsp = new GMShowObstacleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMShowNavMeshReq$Type extends MessageType<GMShowNavMeshReq> {
    constructor() {
        super("com.midnights.game.GMShowNavMeshReq", [
            { no: 1, name: "center", kind: "message", T: () => Vector },
            { no: 5, name: "extent", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<GMShowNavMeshReq>): GMShowNavMeshReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMShowNavMeshReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMShowNavMeshReq): GMShowNavMeshReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector center */ 1:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional com.midnights.game.Vector extent */ 5:
                    message.extent = Vector.internalBinaryRead(reader, reader.uint32(), options, message.extent);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMShowNavMeshReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector center = 1; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector extent = 5; */
        if (message.extent)
            Vector.internalBinaryWrite(message.extent, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GMShowNavMeshReq
 */
export const GMShowNavMeshReq = new GMShowNavMeshReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBNavMeshPoly$Type extends MessageType<PBNavMeshPoly> {
    constructor() {
        super("com.midnights.game.PBNavMeshPoly", [
            { no: 10, name: "edge_types", kind: "enum", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ["com.midnights.game.PBNavMeshPoly.EdgeType", PBNavMeshPoly_EdgeType] },
            { no: 6, name: "area", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "vects", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PBNavMeshPoly>): PBNavMeshPoly {
        const message = { edgeTypes: [], vects: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBNavMeshPoly>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBNavMeshPoly): PBNavMeshPoly {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PBNavMeshPoly.EdgeType edge_types */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.edgeTypes.push(reader.int32());
                    else
                        message.edgeTypes.push(reader.int32());
                    break;
                case /* optional int32 area */ 6:
                    message.area = reader.int32();
                    break;
                case /* repeated int32 vects */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.vects.push(reader.int32());
                    else
                        message.vects.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBNavMeshPoly, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PBNavMeshPoly.EdgeType edge_types = 10; */
        for (let i = 0; i < message.edgeTypes.length; i++)
            writer.tag(10, WireType.Varint).int32(message.edgeTypes[i]);
        /* optional int32 area = 6; */
        if (message.area !== undefined)
            writer.tag(6, WireType.Varint).int32(message.area);
        /* repeated int32 vects = 7; */
        for (let i = 0; i < message.vects.length; i++)
            writer.tag(7, WireType.Varint).int32(message.vects[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PBNavMeshPoly
 */
export const PBNavMeshPoly = new PBNavMeshPoly$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PBNavMeshTile$Type extends MessageType<PBNavMeshTile> {
    constructor() {
        super("com.midnights.game.PBNavMeshTile", [
            { no: 4, name: "vecs", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Vector },
            { no: 8, name: "polys", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PBNavMeshPoly }
        ]);
    }
    create(value?: PartialMessage<PBNavMeshTile>): PBNavMeshTile {
        const message = { vecs: [], polys: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PBNavMeshTile>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PBNavMeshTile): PBNavMeshTile {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Vector vecs */ 4:
                    message.vecs.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.PBNavMeshPoly polys */ 8:
                    message.polys.push(PBNavMeshPoly.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PBNavMeshTile, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Vector vecs = 4; */
        for (let i = 0; i < message.vecs.length; i++)
            Vector.internalBinaryWrite(message.vecs[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.PBNavMeshPoly polys = 8; */
        for (let i = 0; i < message.polys.length; i++)
            PBNavMeshPoly.internalBinaryWrite(message.polys[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PBNavMeshTile
 */
export const PBNavMeshTile = new PBNavMeshTile$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GMShowNavMeshRsp$Type extends MessageType<GMShowNavMeshRsp> {
    constructor() {
        super("com.midnights.game.GMShowNavMeshRsp", [
            { no: 11, name: "tiles", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PBNavMeshTile },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GMShowNavMeshRsp>): GMShowNavMeshRsp {
        const message = { tiles: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GMShowNavMeshRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GMShowNavMeshRsp): GMShowNavMeshRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PBNavMeshTile tiles */ 11:
                    message.tiles.push(PBNavMeshTile.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GMShowNavMeshRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PBNavMeshTile tiles = 11; */
        for (let i = 0; i < message.tiles.length; i++)
            PBNavMeshTile.internalBinaryWrite(message.tiles[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GMShowNavMeshRsp
 */
export const GMShowNavMeshRsp = new GMShowNavMeshRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PbNavMeshStatsInfo$Type extends MessageType<PbNavMeshStatsInfo> {
    constructor() {
        super("com.midnights.game.PbNavMeshStatsInfo", [
            { no: 10, name: "authority_ai_in_combat", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "no_authority_ai_in_combat", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "total_authority_ai", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "total_no_authority_ai", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PbNavMeshStatsInfo>): PbNavMeshStatsInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PbNavMeshStatsInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PbNavMeshStatsInfo): PbNavMeshStatsInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 authority_ai_in_combat */ 10:
                    message.authorityAiInCombat = reader.int32();
                    break;
                case /* optional int32 no_authority_ai_in_combat */ 11:
                    message.noAuthorityAiInCombat = reader.int32();
                    break;
                case /* optional int32 total_authority_ai */ 8:
                    message.totalAuthorityAi = reader.int32();
                    break;
                case /* optional int32 total_no_authority_ai */ 13:
                    message.totalNoAuthorityAi = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PbNavMeshStatsInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 authority_ai_in_combat = 10; */
        if (message.authorityAiInCombat !== undefined)
            writer.tag(10, WireType.Varint).int32(message.authorityAiInCombat);
        /* optional int32 no_authority_ai_in_combat = 11; */
        if (message.noAuthorityAiInCombat !== undefined)
            writer.tag(11, WireType.Varint).int32(message.noAuthorityAiInCombat);
        /* optional int32 total_authority_ai = 8; */
        if (message.totalAuthorityAi !== undefined)
            writer.tag(8, WireType.Varint).int32(message.totalAuthorityAi);
        /* optional int32 total_no_authority_ai = 13; */
        if (message.totalNoAuthorityAi !== undefined)
            writer.tag(13, WireType.Varint).int32(message.totalNoAuthorityAi);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PbNavMeshStatsInfo
 */
export const PbNavMeshStatsInfo = new PbNavMeshStatsInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NavMeshStatsNotify$Type extends MessageType<NavMeshStatsNotify> {
    constructor() {
        super("com.midnights.game.NavMeshStatsNotify", [
            { no: 4, name: "infos", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PbNavMeshStatsInfo }
        ]);
    }
    create(value?: PartialMessage<NavMeshStatsNotify>): NavMeshStatsNotify {
        const message = { infos: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NavMeshStatsNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NavMeshStatsNotify): NavMeshStatsNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PbNavMeshStatsInfo infos */ 4:
                    message.infos.push(PbNavMeshStatsInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NavMeshStatsNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PbNavMeshStatsInfo infos = 4; */
        for (let i = 0; i < message.infos.length; i++)
            PbNavMeshStatsInfo.internalBinaryWrite(message.infos[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NavMeshStatsNotify
 */
export const NavMeshStatsNotify = new NavMeshStatsNotify$Type();
