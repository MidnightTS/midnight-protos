"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SumoStageData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SumoStageData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SumoStageData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./SumoTeamData");
const pb_1 = require("google-protobuf");
class SumoStageData extends pb_1.Message {
    constructor(data) {
        super();
        _SumoStageData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [7], __classPrivateFieldGet(this, _SumoStageData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("max_score" in data && data.max_score != undefined) {
                this.max_score = data.max_score;
            }
            if ("open_time" in data && data.open_time != undefined) {
                this.open_time = data.open_time;
            }
            if ("stage_id" in data && data.stage_id != undefined) {
                this.stage_id = data.stage_id;
            }
            if ("team_list" in data && data.team_list != undefined) {
                this.team_list = data.team_list;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
        }
    }
    get max_score() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set max_score(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get open_time() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set open_time(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get stage_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set stage_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get team_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.SumoTeamData, 7);
    }
    set team_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 11, false);
    }
    set is_open(value) {
        pb_1.Message.setField(this, 11, value);
    }
    static fromObject(data) {
        const message = new SumoStageData({});
        if (data.max_score != null) {
            message.max_score = data.max_score;
        }
        if (data.open_time != null) {
            message.open_time = data.open_time;
        }
        if (data.stage_id != null) {
            message.stage_id = data.stage_id;
        }
        if (data.team_list != null) {
            message.team_list = data.team_list.map(item => dependency_1.SumoTeamData.fromObject(item));
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.max_score != null) {
            data.max_score = this.max_score;
        }
        if (this.open_time != null) {
            data.open_time = this.open_time;
        }
        if (this.stage_id != null) {
            data.stage_id = this.stage_id;
        }
        if (this.team_list != null) {
            data.team_list = this.team_list.map((item) => item.toObject());
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.max_score != 0)
            writer.writeUint32(1, this.max_score);
        if (this.open_time != 0)
            writer.writeUint32(5, this.open_time);
        if (this.stage_id != 0)
            writer.writeUint32(3, this.stage_id);
        if (this.team_list.length)
            writer.writeRepeatedMessage(7, this.team_list, (item) => item.serialize(writer));
        if (this.is_open != false)
            writer.writeBool(11, this.is_open);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SumoStageData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.max_score = reader.readUint32();
                    break;
                case 5:
                    message.open_time = reader.readUint32();
                    break;
                case 3:
                    message.stage_id = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.team_list, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.SumoTeamData.deserialize(reader), dependency_1.SumoTeamData));
                    break;
                case 11:
                    message.is_open = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SumoStageData.deserialize(bytes);
    }
}
exports.SumoStageData = SumoStageData;
_SumoStageData_one_of_decls = new WeakMap();
