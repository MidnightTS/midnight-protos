// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "RegionalPlayInfoNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RegionalPlayVar } from "./RegionalPlayVar";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 6292;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message RegionalPlayInfoNotify
 */
export interface RegionalPlayInfoNotify {
    /**
     * @generated from protobuf field: uint32 play_type = 3;
     */
    playType: number;
    /**
     * @generated from protobuf field: repeated RegionalPlayVar var_list = 13;
     */
    varList: RegionalPlayVar[];
    /**
     * @generated from protobuf field: string play_name = 5;
     */
    playName: string;
    /**
     * @generated from protobuf field: bool Unk3300_FMEPEBIHNOL = 1 [json_name = "Unk3300FMEPEBIHNOL"];
     */
    unk3300FMEPEBIHNOL: boolean;
    /**
     * @generated from protobuf field: bool Unk3300_MBGOJOBNPNG = 14 [json_name = "Unk3300MBGOJOBNPNG"];
     */
    unk3300MBGOJOBNPNG: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RegionalPlayInfoNotify$Type extends MessageType<RegionalPlayInfoNotify> {
    constructor() {
        super("RegionalPlayInfoNotify", [
            { no: 3, name: "play_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "var_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RegionalPlayVar },
            { no: 5, name: "play_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "Unk3300_FMEPEBIHNOL", kind: "scalar", jsonName: "Unk3300FMEPEBIHNOL", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "Unk3300_MBGOJOBNPNG", kind: "scalar", jsonName: "Unk3300MBGOJOBNPNG", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RegionalPlayInfoNotify>): RegionalPlayInfoNotify {
        const message = { playType: 0, varList: [], playName: "", unk3300FMEPEBIHNOL: false, unk3300MBGOJOBNPNG: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RegionalPlayInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RegionalPlayInfoNotify): RegionalPlayInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 play_type */ 3:
                    message.playType = reader.uint32();
                    break;
                case /* repeated RegionalPlayVar var_list */ 13:
                    message.varList.push(RegionalPlayVar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* string play_name */ 5:
                    message.playName = reader.string();
                    break;
                case /* bool Unk3300_FMEPEBIHNOL = 1 [json_name = "Unk3300FMEPEBIHNOL"];*/ 1:
                    message.unk3300FMEPEBIHNOL = reader.bool();
                    break;
                case /* bool Unk3300_MBGOJOBNPNG = 14 [json_name = "Unk3300MBGOJOBNPNG"];*/ 14:
                    message.unk3300MBGOJOBNPNG = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RegionalPlayInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 play_type = 3; */
        if (message.playType !== 0)
            writer.tag(3, WireType.Varint).uint32(message.playType);
        /* repeated RegionalPlayVar var_list = 13; */
        for (let i = 0; i < message.varList.length; i++)
            RegionalPlayVar.internalBinaryWrite(message.varList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* string play_name = 5; */
        if (message.playName !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.playName);
        /* bool Unk3300_FMEPEBIHNOL = 1 [json_name = "Unk3300FMEPEBIHNOL"]; */
        if (message.unk3300FMEPEBIHNOL !== false)
            writer.tag(1, WireType.Varint).bool(message.unk3300FMEPEBIHNOL);
        /* bool Unk3300_MBGOJOBNPNG = 14 [json_name = "Unk3300MBGOJOBNPNG"]; */
        if (message.unk3300MBGOJOBNPNG !== false)
            writer.tag(14, WireType.Varint).bool(message.unk3300MBGOJOBNPNG);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RegionalPlayInfoNotify
 */
export const RegionalPlayInfoNotify = new RegionalPlayInfoNotify$Type();
