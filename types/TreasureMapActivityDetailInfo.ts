/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TreasureMapActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./TreasureMapBonusChallengeInfo";
import * as dependency_2 from "./TreasureMapRegionInfo";
import * as pb_1 from "google-protobuf";
export class TreasureMapActivityDetailInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        active_region_index?: number;
        region_info_list?: dependency_2.TreasureMapRegionInfo[];
        is_mp_challenge_touched?: boolean;
        treasure_close_time?: number;
        bonus_challenge_list?: dependency_1.TreasureMapBonusChallengeInfo[];
        currency_num?: number;
        preview_reward_id?: number;
        min_open_player_level?: number;
        total_mp_spot_num?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("active_region_index" in data && data.active_region_index != undefined) {
                this.active_region_index = data.active_region_index;
            }
            if ("region_info_list" in data && data.region_info_list != undefined) {
                this.region_info_list = data.region_info_list;
            }
            if ("is_mp_challenge_touched" in data && data.is_mp_challenge_touched != undefined) {
                this.is_mp_challenge_touched = data.is_mp_challenge_touched;
            }
            if ("treasure_close_time" in data && data.treasure_close_time != undefined) {
                this.treasure_close_time = data.treasure_close_time;
            }
            if ("bonus_challenge_list" in data && data.bonus_challenge_list != undefined) {
                this.bonus_challenge_list = data.bonus_challenge_list;
            }
            if ("currency_num" in data && data.currency_num != undefined) {
                this.currency_num = data.currency_num;
            }
            if ("preview_reward_id" in data && data.preview_reward_id != undefined) {
                this.preview_reward_id = data.preview_reward_id;
            }
            if ("min_open_player_level" in data && data.min_open_player_level != undefined) {
                this.min_open_player_level = data.min_open_player_level;
            }
            if ("total_mp_spot_num" in data && data.total_mp_spot_num != undefined) {
                this.total_mp_spot_num = data.total_mp_spot_num;
            }
        }
    }
    get active_region_index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set active_region_index(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get region_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.TreasureMapRegionInfo, 6) as dependency_2.TreasureMapRegionInfo[];
    }
    set region_info_list(value: dependency_2.TreasureMapRegionInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get is_mp_challenge_touched() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_mp_challenge_touched(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get treasure_close_time() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set treasure_close_time(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get bonus_challenge_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.TreasureMapBonusChallengeInfo, 5) as dependency_1.TreasureMapBonusChallengeInfo[];
    }
    set bonus_challenge_list(value: dependency_1.TreasureMapBonusChallengeInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get currency_num() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set currency_num(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get preview_reward_id() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set preview_reward_id(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get min_open_player_level() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set min_open_player_level(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get total_mp_spot_num() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set total_mp_spot_num(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    static fromObject(data: {
        active_region_index?: number;
        region_info_list?: ReturnType<typeof dependency_2.TreasureMapRegionInfo.prototype.toObject>[];
        is_mp_challenge_touched?: boolean;
        treasure_close_time?: number;
        bonus_challenge_list?: ReturnType<typeof dependency_1.TreasureMapBonusChallengeInfo.prototype.toObject>[];
        currency_num?: number;
        preview_reward_id?: number;
        min_open_player_level?: number;
        total_mp_spot_num?: number;
    }): TreasureMapActivityDetailInfo {
        const message = new TreasureMapActivityDetailInfo({});
        if (data.active_region_index != null) {
            message.active_region_index = data.active_region_index;
        }
        if (data.region_info_list != null) {
            message.region_info_list = data.region_info_list.map(item => dependency_2.TreasureMapRegionInfo.fromObject(item));
        }
        if (data.is_mp_challenge_touched != null) {
            message.is_mp_challenge_touched = data.is_mp_challenge_touched;
        }
        if (data.treasure_close_time != null) {
            message.treasure_close_time = data.treasure_close_time;
        }
        if (data.bonus_challenge_list != null) {
            message.bonus_challenge_list = data.bonus_challenge_list.map(item => dependency_1.TreasureMapBonusChallengeInfo.fromObject(item));
        }
        if (data.currency_num != null) {
            message.currency_num = data.currency_num;
        }
        if (data.preview_reward_id != null) {
            message.preview_reward_id = data.preview_reward_id;
        }
        if (data.min_open_player_level != null) {
            message.min_open_player_level = data.min_open_player_level;
        }
        if (data.total_mp_spot_num != null) {
            message.total_mp_spot_num = data.total_mp_spot_num;
        }
        return message;
    }
    toObject() {
        const data: {
            active_region_index?: number;
            region_info_list?: ReturnType<typeof dependency_2.TreasureMapRegionInfo.prototype.toObject>[];
            is_mp_challenge_touched?: boolean;
            treasure_close_time?: number;
            bonus_challenge_list?: ReturnType<typeof dependency_1.TreasureMapBonusChallengeInfo.prototype.toObject>[];
            currency_num?: number;
            preview_reward_id?: number;
            min_open_player_level?: number;
            total_mp_spot_num?: number;
        } = {};
        if (this.active_region_index != null) {
            data.active_region_index = this.active_region_index;
        }
        if (this.region_info_list != null) {
            data.region_info_list = this.region_info_list.map((item: dependency_2.TreasureMapRegionInfo) => item.toObject());
        }
        if (this.is_mp_challenge_touched != null) {
            data.is_mp_challenge_touched = this.is_mp_challenge_touched;
        }
        if (this.treasure_close_time != null) {
            data.treasure_close_time = this.treasure_close_time;
        }
        if (this.bonus_challenge_list != null) {
            data.bonus_challenge_list = this.bonus_challenge_list.map((item: dependency_1.TreasureMapBonusChallengeInfo) => item.toObject());
        }
        if (this.currency_num != null) {
            data.currency_num = this.currency_num;
        }
        if (this.preview_reward_id != null) {
            data.preview_reward_id = this.preview_reward_id;
        }
        if (this.min_open_player_level != null) {
            data.min_open_player_level = this.min_open_player_level;
        }
        if (this.total_mp_spot_num != null) {
            data.total_mp_spot_num = this.total_mp_spot_num;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.active_region_index != 0)
            writer.writeUint32(1, this.active_region_index);
        if (this.region_info_list.length)
            writer.writeRepeatedMessage(6, this.region_info_list, (item: dependency_2.TreasureMapRegionInfo) => item.serialize(writer));
        if (this.is_mp_challenge_touched != false)
            writer.writeBool(7, this.is_mp_challenge_touched);
        if (this.treasure_close_time != 0)
            writer.writeUint32(10, this.treasure_close_time);
        if (this.bonus_challenge_list.length)
            writer.writeRepeatedMessage(5, this.bonus_challenge_list, (item: dependency_1.TreasureMapBonusChallengeInfo) => item.serialize(writer));
        if (this.currency_num != 0)
            writer.writeUint32(2, this.currency_num);
        if (this.preview_reward_id != 0)
            writer.writeUint32(14, this.preview_reward_id);
        if (this.min_open_player_level != 0)
            writer.writeUint32(8, this.min_open_player_level);
        if (this.total_mp_spot_num != 0)
            writer.writeUint32(13, this.total_mp_spot_num);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TreasureMapActivityDetailInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TreasureMapActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.active_region_index = reader.readUint32();
                    break;
                case 6:
                    reader.readMessage(message.region_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.TreasureMapRegionInfo.deserialize(reader), dependency_2.TreasureMapRegionInfo));
                    break;
                case 7:
                    message.is_mp_challenge_touched = reader.readBool();
                    break;
                case 10:
                    message.treasure_close_time = reader.readUint32();
                    break;
                case 5:
                    reader.readMessage(message.bonus_challenge_list, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.TreasureMapBonusChallengeInfo.deserialize(reader), dependency_1.TreasureMapBonusChallengeInfo));
                    break;
                case 2:
                    message.currency_num = reader.readUint32();
                    break;
                case 14:
                    message.preview_reward_id = reader.readUint32();
                    break;
                case 8:
                    message.min_open_player_level = reader.readUint32();
                    break;
                case 13:
                    message.total_mp_spot_num = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TreasureMapActivityDetailInfo {
        return TreasureMapActivityDetailInfo.deserialize(bytes);
    }
}
