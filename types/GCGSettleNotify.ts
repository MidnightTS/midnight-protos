// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "GCGSettleNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GCGEndReason } from "./GCGEndReason";
import { GCGGameBusinessType } from "./GCGGameBusinessType";
import { ItemParam } from "./ItemParam";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 7562;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message GCGSettleNotify
 */
export interface GCGSettleNotify {
    /**
     * @generated from protobuf field: repeated ItemParam reward_item_list = 8;
     */
    rewardItemList: ItemParam[];
    /**
     * @generated from protobuf field: repeated uint32 finished_challenge_id_list = 1;
     */
    finishedChallengeIdList: number[];
    /**
     * @generated from protobuf field: uint32 game_id = 3;
     */
    gameId: number;
    /**
     * @generated from protobuf field: bool is_win = 2;
     */
    isWin: boolean;
    /**
     * @generated from protobuf field: GCGGameBusinessType business_type = 5;
     */
    businessType: GCGGameBusinessType;
    /**
     * @generated from protobuf field: uint32 win_controller_id = 11;
     */
    winControllerId: number;
    /**
     * @generated from protobuf field: repeated uint32 forbid_finish_challenge_list = 10;
     */
    forbidFinishChallengeList: number[];
    /**
     * @generated from protobuf field: GCGEndReason reason = 4;
     */
    reason: GCGEndReason;
}
// @generated message type with reflection information, may provide speed optimized methods
class GCGSettleNotify$Type extends MessageType<GCGSettleNotify> {
    constructor() {
        super("GCGSettleNotify", [
            { no: 8, name: "reward_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 1, name: "finished_challenge_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "game_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "is_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "business_type", kind: "enum", T: () => ["GCGGameBusinessType", GCGGameBusinessType] },
            { no: 11, name: "win_controller_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "forbid_finish_challenge_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "reason", kind: "enum", T: () => ["GCGEndReason", GCGEndReason] }
        ]);
    }
    create(value?: PartialMessage<GCGSettleNotify>): GCGSettleNotify {
        const message = { rewardItemList: [], finishedChallengeIdList: [], gameId: 0, isWin: false, businessType: 0, winControllerId: 0, forbidFinishChallengeList: [], reason: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GCGSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GCGSettleNotify): GCGSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ItemParam reward_item_list */ 8:
                    message.rewardItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 finished_challenge_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishedChallengeIdList.push(reader.uint32());
                    else
                        message.finishedChallengeIdList.push(reader.uint32());
                    break;
                case /* uint32 game_id */ 3:
                    message.gameId = reader.uint32();
                    break;
                case /* bool is_win */ 2:
                    message.isWin = reader.bool();
                    break;
                case /* GCGGameBusinessType business_type */ 5:
                    message.businessType = reader.int32();
                    break;
                case /* uint32 win_controller_id */ 11:
                    message.winControllerId = reader.uint32();
                    break;
                case /* repeated uint32 forbid_finish_challenge_list */ 10:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.forbidFinishChallengeList.push(reader.uint32());
                    else
                        message.forbidFinishChallengeList.push(reader.uint32());
                    break;
                case /* GCGEndReason reason */ 4:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GCGSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ItemParam reward_item_list = 8; */
        for (let i = 0; i < message.rewardItemList.length; i++)
            ItemParam.internalBinaryWrite(message.rewardItemList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 finished_challenge_id_list = 1; */
        if (message.finishedChallengeIdList.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishedChallengeIdList.length; i++)
                writer.uint32(message.finishedChallengeIdList[i]);
            writer.join();
        }
        /* uint32 game_id = 3; */
        if (message.gameId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.gameId);
        /* bool is_win = 2; */
        if (message.isWin !== false)
            writer.tag(2, WireType.Varint).bool(message.isWin);
        /* GCGGameBusinessType business_type = 5; */
        if (message.businessType !== 0)
            writer.tag(5, WireType.Varint).int32(message.businessType);
        /* uint32 win_controller_id = 11; */
        if (message.winControllerId !== 0)
            writer.tag(11, WireType.Varint).uint32(message.winControllerId);
        /* repeated uint32 forbid_finish_challenge_list = 10; */
        if (message.forbidFinishChallengeList.length) {
            writer.tag(10, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.forbidFinishChallengeList.length; i++)
                writer.uint32(message.forbidFinishChallengeList[i]);
            writer.join();
        }
        /* GCGEndReason reason = 4; */
        if (message.reason !== 0)
            writer.tag(4, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GCGSettleNotify
 */
export const GCGSettleNotify = new GCGSettleNotify$Type();
