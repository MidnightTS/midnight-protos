"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _InBattleMechanicusInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.InBattleMechanicusInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InBattleMechanicusInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./InBattleMechanicusCardInfo");
const dependency_2 = require("./InBattleMechanicusMonsterInfo");
const dependency_3 = require("./InBattleMechanicusPlayerInfo");
const dependency_4 = require("./InBattleMechanicusStageType");
const pb_1 = require("google-protobuf");
class InBattleMechanicusInfo extends pb_1.Message {
    constructor(data) {
        super();
        _InBattleMechanicusInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [410, 115, 11, 14, 15, 7], __classPrivateFieldGet(this, _InBattleMechanicusInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("left_monster" in data && data.left_monster != undefined) {
                this.left_monster = data.left_monster;
            }
            if ("wait_seconds" in data && data.wait_seconds != undefined) {
                this.wait_seconds = data.wait_seconds;
            }
            if ("entrance_list" in data && data.entrance_list != undefined) {
                this.entrance_list = data.entrance_list;
            }
            if ("exit_list" in data && data.exit_list != undefined) {
                this.exit_list = data.exit_list;
            }
            if ("history_card_list" in data && data.history_card_list != undefined) {
                this.history_card_list = data.history_card_list;
            }
            if ("max_escape_monster_num" in data && data.max_escape_monster_num != undefined) {
                this.max_escape_monster_num = data.max_escape_monster_num;
            }
            if ("building_stage_duration" in data && data.building_stage_duration != undefined) {
                this.building_stage_duration = data.building_stage_duration;
            }
            if ("duration_ms" in data && data.duration_ms != undefined) {
                this.duration_ms = data.duration_ms;
            }
            if ("stage" in data && data.stage != undefined) {
                this.stage = data.stage;
            }
            if ("total_round" in data && data.total_round != undefined) {
                this.total_round = data.total_round;
            }
            if ("monster_list" in data && data.monster_list != undefined) {
                this.monster_list = data.monster_list;
            }
            if ("escaped_monster_num" in data && data.escaped_monster_num != undefined) {
                this.escaped_monster_num = data.escaped_monster_num;
            }
            if ("round" in data && data.round != undefined) {
                this.round = data.round;
            }
            if ("pick_card_list" in data && data.pick_card_list != undefined) {
                this.pick_card_list = data.pick_card_list;
            }
            if ("player_list" in data && data.player_list != undefined) {
                this.player_list = data.player_list;
            }
            if ("wait_begin_time_us" in data && data.wait_begin_time_us != undefined) {
                this.wait_begin_time_us = data.wait_begin_time_us;
            }
            if ("begin_time_ms" in data && data.begin_time_ms != undefined) {
                this.begin_time_ms = data.begin_time_ms;
            }
        }
    }
    get left_monster() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set left_monster(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get wait_seconds() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set wait_seconds(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get entrance_list() {
        return pb_1.Message.getFieldWithDefault(this, 410, []);
    }
    set entrance_list(value) {
        pb_1.Message.setField(this, 410, value);
    }
    get exit_list() {
        return pb_1.Message.getFieldWithDefault(this, 115, []);
    }
    set exit_list(value) {
        pb_1.Message.setField(this, 115, value);
    }
    get history_card_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InBattleMechanicusCardInfo, 11);
    }
    set history_card_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 11, value);
    }
    get max_escape_monster_num() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set max_escape_monster_num(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get building_stage_duration() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set building_stage_duration(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get duration_ms() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set duration_ms(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get stage() {
        return pb_1.Message.getFieldWithDefault(this, 9, dependency_4.InBattleMechanicusStageType.IN_BATTLE_MECHANICUS_STAGE_TYPE_NONE);
    }
    set stage(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get total_round() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set total_round(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get monster_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.InBattleMechanicusMonsterInfo, 14);
    }
    set monster_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get escaped_monster_num() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set escaped_monster_num(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get round() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set round(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get pick_card_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.InBattleMechanicusCardInfo, 15);
    }
    set pick_card_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get player_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_3.InBattleMechanicusPlayerInfo, 7);
    }
    set player_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 7, value);
    }
    get wait_begin_time_us() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set wait_begin_time_us(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get begin_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set begin_time_ms(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new InBattleMechanicusInfo({});
        if (data.left_monster != null) {
            message.left_monster = data.left_monster;
        }
        if (data.wait_seconds != null) {
            message.wait_seconds = data.wait_seconds;
        }
        if (data.entrance_list != null) {
            message.entrance_list = data.entrance_list;
        }
        if (data.exit_list != null) {
            message.exit_list = data.exit_list;
        }
        if (data.history_card_list != null) {
            message.history_card_list = data.history_card_list.map(item => dependency_1.InBattleMechanicusCardInfo.fromObject(item));
        }
        if (data.max_escape_monster_num != null) {
            message.max_escape_monster_num = data.max_escape_monster_num;
        }
        if (data.building_stage_duration != null) {
            message.building_stage_duration = data.building_stage_duration;
        }
        if (data.duration_ms != null) {
            message.duration_ms = data.duration_ms;
        }
        if (data.stage != null) {
            message.stage = data.stage;
        }
        if (data.total_round != null) {
            message.total_round = data.total_round;
        }
        if (data.monster_list != null) {
            message.monster_list = data.monster_list.map(item => dependency_2.InBattleMechanicusMonsterInfo.fromObject(item));
        }
        if (data.escaped_monster_num != null) {
            message.escaped_monster_num = data.escaped_monster_num;
        }
        if (data.round != null) {
            message.round = data.round;
        }
        if (data.pick_card_list != null) {
            message.pick_card_list = data.pick_card_list.map(item => dependency_1.InBattleMechanicusCardInfo.fromObject(item));
        }
        if (data.player_list != null) {
            message.player_list = data.player_list.map(item => dependency_3.InBattleMechanicusPlayerInfo.fromObject(item));
        }
        if (data.wait_begin_time_us != null) {
            message.wait_begin_time_us = data.wait_begin_time_us;
        }
        if (data.begin_time_ms != null) {
            message.begin_time_ms = data.begin_time_ms;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.left_monster != null) {
            data.left_monster = this.left_monster;
        }
        if (this.wait_seconds != null) {
            data.wait_seconds = this.wait_seconds;
        }
        if (this.entrance_list != null) {
            data.entrance_list = this.entrance_list;
        }
        if (this.exit_list != null) {
            data.exit_list = this.exit_list;
        }
        if (this.history_card_list != null) {
            data.history_card_list = this.history_card_list.map((item) => item.toObject());
        }
        if (this.max_escape_monster_num != null) {
            data.max_escape_monster_num = this.max_escape_monster_num;
        }
        if (this.building_stage_duration != null) {
            data.building_stage_duration = this.building_stage_duration;
        }
        if (this.duration_ms != null) {
            data.duration_ms = this.duration_ms;
        }
        if (this.stage != null) {
            data.stage = this.stage;
        }
        if (this.total_round != null) {
            data.total_round = this.total_round;
        }
        if (this.monster_list != null) {
            data.monster_list = this.monster_list.map((item) => item.toObject());
        }
        if (this.escaped_monster_num != null) {
            data.escaped_monster_num = this.escaped_monster_num;
        }
        if (this.round != null) {
            data.round = this.round;
        }
        if (this.pick_card_list != null) {
            data.pick_card_list = this.pick_card_list.map((item) => item.toObject());
        }
        if (this.player_list != null) {
            data.player_list = this.player_list.map((item) => item.toObject());
        }
        if (this.wait_begin_time_us != null) {
            data.wait_begin_time_us = this.wait_begin_time_us;
        }
        if (this.begin_time_ms != null) {
            data.begin_time_ms = this.begin_time_ms;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.left_monster != 0)
            writer.writeUint32(5, this.left_monster);
        if (this.wait_seconds != 0)
            writer.writeUint32(13, this.wait_seconds);
        if (this.entrance_list.length)
            writer.writePackedUint32(410, this.entrance_list);
        if (this.exit_list.length)
            writer.writePackedUint32(115, this.exit_list);
        if (this.history_card_list.length)
            writer.writeRepeatedMessage(11, this.history_card_list, (item) => item.serialize(writer));
        if (this.max_escape_monster_num != 0)
            writer.writeUint32(10, this.max_escape_monster_num);
        if (this.building_stage_duration != 0)
            writer.writeUint32(4, this.building_stage_duration);
        if (this.duration_ms != 0)
            writer.writeUint64(8, this.duration_ms);
        if (this.stage != dependency_4.InBattleMechanicusStageType.IN_BATTLE_MECHANICUS_STAGE_TYPE_NONE)
            writer.writeEnum(9, this.stage);
        if (this.total_round != 0)
            writer.writeUint32(12, this.total_round);
        if (this.monster_list.length)
            writer.writeRepeatedMessage(14, this.monster_list, (item) => item.serialize(writer));
        if (this.escaped_monster_num != 0)
            writer.writeUint32(6, this.escaped_monster_num);
        if (this.round != 0)
            writer.writeUint32(3, this.round);
        if (this.pick_card_list.length)
            writer.writeRepeatedMessage(15, this.pick_card_list, (item) => item.serialize(writer));
        if (this.player_list.length)
            writer.writeRepeatedMessage(7, this.player_list, (item) => item.serialize(writer));
        if (this.wait_begin_time_us != 0)
            writer.writeUint64(1, this.wait_begin_time_us);
        if (this.begin_time_ms != 0)
            writer.writeUint64(2, this.begin_time_ms);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InBattleMechanicusInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    message.left_monster = reader.readUint32();
                    break;
                case 13:
                    message.wait_seconds = reader.readUint32();
                    break;
                case 410:
                    message.entrance_list = reader.readPackedUint32();
                    break;
                case 115:
                    message.exit_list = reader.readPackedUint32();
                    break;
                case 11:
                    reader.readMessage(message.history_card_list, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_1.InBattleMechanicusCardInfo.deserialize(reader), dependency_1.InBattleMechanicusCardInfo));
                    break;
                case 10:
                    message.max_escape_monster_num = reader.readUint32();
                    break;
                case 4:
                    message.building_stage_duration = reader.readUint32();
                    break;
                case 8:
                    message.duration_ms = reader.readUint64();
                    break;
                case 9:
                    message.stage = reader.readEnum();
                    break;
                case 12:
                    message.total_round = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message.monster_list, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_2.InBattleMechanicusMonsterInfo.deserialize(reader), dependency_2.InBattleMechanicusMonsterInfo));
                    break;
                case 6:
                    message.escaped_monster_num = reader.readUint32();
                    break;
                case 3:
                    message.round = reader.readUint32();
                    break;
                case 15:
                    reader.readMessage(message.pick_card_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_1.InBattleMechanicusCardInfo.deserialize(reader), dependency_1.InBattleMechanicusCardInfo));
                    break;
                case 7:
                    reader.readMessage(message.player_list, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_3.InBattleMechanicusPlayerInfo.deserialize(reader), dependency_3.InBattleMechanicusPlayerInfo));
                    break;
                case 1:
                    message.wait_begin_time_us = reader.readUint64();
                    break;
                case 2:
                    message.begin_time_ms = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return InBattleMechanicusInfo.deserialize(bytes);
    }
}
exports.InBattleMechanicusInfo = InBattleMechanicusInfo;
_InBattleMechanicusInfo_one_of_decls = new WeakMap();
