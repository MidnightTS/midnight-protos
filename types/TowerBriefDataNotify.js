"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TowerBriefDataNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TowerBriefDataNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TowerBriefDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class TowerBriefDataNotify extends pb_1.Message {
    constructor(data) {
        super();
        _TowerBriefDataNotify_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _TowerBriefDataNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("total_star_num" in data && data.total_star_num != undefined) {
                this.total_star_num = data.total_star_num;
            }
            if ("last_floor_index" in data && data.last_floor_index != undefined) {
                this.last_floor_index = data.last_floor_index;
            }
            if ("schedule_start_time" in data && data.schedule_start_time != undefined) {
                this.schedule_start_time = data.schedule_start_time;
            }
            if ("next_schedule_change_time" in data && data.next_schedule_change_time != undefined) {
                this.next_schedule_change_time = data.next_schedule_change_time;
            }
            if ("is_finished_entrance_floor" in data && data.is_finished_entrance_floor != undefined) {
                this.is_finished_entrance_floor = data.is_finished_entrance_floor;
            }
            if ("last_level_index" in data && data.last_level_index != undefined) {
                this.last_level_index = data.last_level_index;
            }
            if ("tower_schedule_id" in data && data.tower_schedule_id != undefined) {
                this.tower_schedule_id = data.tower_schedule_id;
            }
        }
    }
    get total_star_num() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set total_star_num(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get last_floor_index() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set last_floor_index(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get schedule_start_time() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set schedule_start_time(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get next_schedule_change_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set next_schedule_change_time(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_finished_entrance_floor() {
        return pb_1.Message.getFieldWithDefault(this, 14, false);
    }
    set is_finished_entrance_floor(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get last_level_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set last_level_index(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get tower_schedule_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set tower_schedule_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    static fromObject(data) {
        const message = new TowerBriefDataNotify({});
        if (data.total_star_num != null) {
            message.total_star_num = data.total_star_num;
        }
        if (data.last_floor_index != null) {
            message.last_floor_index = data.last_floor_index;
        }
        if (data.schedule_start_time != null) {
            message.schedule_start_time = data.schedule_start_time;
        }
        if (data.next_schedule_change_time != null) {
            message.next_schedule_change_time = data.next_schedule_change_time;
        }
        if (data.is_finished_entrance_floor != null) {
            message.is_finished_entrance_floor = data.is_finished_entrance_floor;
        }
        if (data.last_level_index != null) {
            message.last_level_index = data.last_level_index;
        }
        if (data.tower_schedule_id != null) {
            message.tower_schedule_id = data.tower_schedule_id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.total_star_num != null) {
            data.total_star_num = this.total_star_num;
        }
        if (this.last_floor_index != null) {
            data.last_floor_index = this.last_floor_index;
        }
        if (this.schedule_start_time != null) {
            data.schedule_start_time = this.schedule_start_time;
        }
        if (this.next_schedule_change_time != null) {
            data.next_schedule_change_time = this.next_schedule_change_time;
        }
        if (this.is_finished_entrance_floor != null) {
            data.is_finished_entrance_floor = this.is_finished_entrance_floor;
        }
        if (this.last_level_index != null) {
            data.last_level_index = this.last_level_index;
        }
        if (this.tower_schedule_id != null) {
            data.tower_schedule_id = this.tower_schedule_id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.total_star_num != 0)
            writer.writeUint32(11, this.total_star_num);
        if (this.last_floor_index != 0)
            writer.writeUint32(8, this.last_floor_index);
        if (this.schedule_start_time != 0)
            writer.writeUint32(15, this.schedule_start_time);
        if (this.next_schedule_change_time != 0)
            writer.writeUint32(6, this.next_schedule_change_time);
        if (this.is_finished_entrance_floor != false)
            writer.writeBool(14, this.is_finished_entrance_floor);
        if (this.last_level_index != 0)
            writer.writeUint32(4, this.last_level_index);
        if (this.tower_schedule_id != 0)
            writer.writeUint32(5, this.tower_schedule_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TowerBriefDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.total_star_num = reader.readUint32();
                    break;
                case 8:
                    message.last_floor_index = reader.readUint32();
                    break;
                case 15:
                    message.schedule_start_time = reader.readUint32();
                    break;
                case 6:
                    message.next_schedule_change_time = reader.readUint32();
                    break;
                case 14:
                    message.is_finished_entrance_floor = reader.readBool();
                    break;
                case 4:
                    message.last_level_index = reader.readUint32();
                    break;
                case 5:
                    message.tower_schedule_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return TowerBriefDataNotify.deserialize(bytes);
    }
}
exports.TowerBriefDataNotify = TowerBriefDataNotify;
_TowerBriefDataNotify_one_of_decls = new WeakMap();
