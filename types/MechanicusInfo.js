"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MechanicusInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MechanicusInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MechanicusInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Uint32Pair");
const pb_1 = require("google-protobuf");
class MechanicusInfo extends pb_1.Message {
    constructor(data) {
        super();
        _MechanicusInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14, 7, 13], __classPrivateFieldGet(this, _MechanicusInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("gear_level_pair_list" in data && data.gear_level_pair_list != undefined) {
                this.gear_level_pair_list = data.gear_level_pair_list;
            }
            if ("open_sequence_id_list" in data && data.open_sequence_id_list != undefined) {
                this.open_sequence_id_list = data.open_sequence_id_list;
            }
            if ("coin" in data && data.coin != undefined) {
                this.coin = data.coin;
            }
            if ("punish_over_time" in data && data.punish_over_time != undefined) {
                this.punish_over_time = data.punish_over_time;
            }
            if ("mechanicus_id" in data && data.mechanicus_id != undefined) {
                this.mechanicus_id = data.mechanicus_id;
            }
            if ("finish_difficult_level_list" in data && data.finish_difficult_level_list != undefined) {
                this.finish_difficult_level_list = data.finish_difficult_level_list;
            }
            if ("is_finish_teach_dungeon" in data && data.is_finish_teach_dungeon != undefined) {
                this.is_finish_teach_dungeon = data.is_finish_teach_dungeon;
            }
        }
    }
    get gear_level_pair_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Uint32Pair, 14);
    }
    set gear_level_pair_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get open_sequence_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 7, []);
    }
    set open_sequence_id_list(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get coin() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set coin(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get punish_over_time() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set punish_over_time(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get mechanicus_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set mechanicus_id(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get finish_difficult_level_list() {
        return pb_1.Message.getFieldWithDefault(this, 13, []);
    }
    set finish_difficult_level_list(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get is_finish_teach_dungeon() {
        return pb_1.Message.getFieldWithDefault(this, 4, false);
    }
    set is_finish_teach_dungeon(value) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data) {
        const message = new MechanicusInfo({});
        if (data.gear_level_pair_list != null) {
            message.gear_level_pair_list = data.gear_level_pair_list.map(item => dependency_1.Uint32Pair.fromObject(item));
        }
        if (data.open_sequence_id_list != null) {
            message.open_sequence_id_list = data.open_sequence_id_list;
        }
        if (data.coin != null) {
            message.coin = data.coin;
        }
        if (data.punish_over_time != null) {
            message.punish_over_time = data.punish_over_time;
        }
        if (data.mechanicus_id != null) {
            message.mechanicus_id = data.mechanicus_id;
        }
        if (data.finish_difficult_level_list != null) {
            message.finish_difficult_level_list = data.finish_difficult_level_list;
        }
        if (data.is_finish_teach_dungeon != null) {
            message.is_finish_teach_dungeon = data.is_finish_teach_dungeon;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.gear_level_pair_list != null) {
            data.gear_level_pair_list = this.gear_level_pair_list.map((item) => item.toObject());
        }
        if (this.open_sequence_id_list != null) {
            data.open_sequence_id_list = this.open_sequence_id_list;
        }
        if (this.coin != null) {
            data.coin = this.coin;
        }
        if (this.punish_over_time != null) {
            data.punish_over_time = this.punish_over_time;
        }
        if (this.mechanicus_id != null) {
            data.mechanicus_id = this.mechanicus_id;
        }
        if (this.finish_difficult_level_list != null) {
            data.finish_difficult_level_list = this.finish_difficult_level_list;
        }
        if (this.is_finish_teach_dungeon != null) {
            data.is_finish_teach_dungeon = this.is_finish_teach_dungeon;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.gear_level_pair_list.length)
            writer.writeRepeatedMessage(14, this.gear_level_pair_list, (item) => item.serialize(writer));
        if (this.open_sequence_id_list.length)
            writer.writePackedUint32(7, this.open_sequence_id_list);
        if (this.coin != 0)
            writer.writeUint32(8, this.coin);
        if (this.punish_over_time != 0)
            writer.writeUint32(12, this.punish_over_time);
        if (this.mechanicus_id != 0)
            writer.writeUint32(10, this.mechanicus_id);
        if (this.finish_difficult_level_list.length)
            writer.writePackedUint32(13, this.finish_difficult_level_list);
        if (this.is_finish_teach_dungeon != false)
            writer.writeBool(4, this.is_finish_teach_dungeon);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MechanicusInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    reader.readMessage(message.gear_level_pair_list, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_1.Uint32Pair.deserialize(reader), dependency_1.Uint32Pair));
                    break;
                case 7:
                    message.open_sequence_id_list = reader.readPackedUint32();
                    break;
                case 8:
                    message.coin = reader.readUint32();
                    break;
                case 12:
                    message.punish_over_time = reader.readUint32();
                    break;
                case 10:
                    message.mechanicus_id = reader.readUint32();
                    break;
                case 13:
                    message.finish_difficult_level_list = reader.readPackedUint32();
                    break;
                case 4:
                    message.is_finish_teach_dungeon = reader.readBool();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MechanicusInfo.deserialize(bytes);
    }
}
exports.MechanicusInfo = MechanicusInfo;
_MechanicusInfo_one_of_decls = new WeakMap();
