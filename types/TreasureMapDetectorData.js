"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _TreasureMapDetectorData_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.TreasureMapDetectorData = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TreasureMapDetectorData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Vector");
const pb_1 = require("google-protobuf");
class TreasureMapDetectorData extends pb_1.Message {
    constructor(data) {
        super();
        _TreasureMapDetectorData_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], __classPrivateFieldGet(this, _TreasureMapDetectorData_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("region_id" in data && data.region_id != undefined) {
                this.region_id = data.region_id;
            }
            if ("center_pos" in data && data.center_pos != undefined) {
                this.center_pos = data.center_pos;
            }
            if ("is_region_detected" in data && data.is_region_detected != undefined) {
                this.is_region_detected = data.is_region_detected;
            }
            if ("spot_list" in data && data.spot_list != undefined) {
                this.spot_list = data.spot_list;
            }
            if ("radius" in data && data.radius != undefined) {
                this.radius = data.radius;
            }
        }
    }
    get region_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set region_id(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get center_pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 7);
    }
    set center_pos(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_center_pos() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get is_region_detected() {
        return pb_1.Message.getFieldWithDefault(this, 6, false);
    }
    set is_region_detected(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get spot_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.Vector, 10);
    }
    set spot_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get radius() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set radius(value) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data) {
        const message = new TreasureMapDetectorData({});
        if (data.region_id != null) {
            message.region_id = data.region_id;
        }
        if (data.center_pos != null) {
            message.center_pos = dependency_1.Vector.fromObject(data.center_pos);
        }
        if (data.is_region_detected != null) {
            message.is_region_detected = data.is_region_detected;
        }
        if (data.spot_list != null) {
            message.spot_list = data.spot_list.map(item => dependency_1.Vector.fromObject(item));
        }
        if (data.radius != null) {
            message.radius = data.radius;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.region_id != null) {
            data.region_id = this.region_id;
        }
        if (this.center_pos != null) {
            data.center_pos = this.center_pos.toObject();
        }
        if (this.is_region_detected != null) {
            data.is_region_detected = this.is_region_detected;
        }
        if (this.spot_list != null) {
            data.spot_list = this.spot_list.map((item) => item.toObject());
        }
        if (this.radius != null) {
            data.radius = this.radius;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.region_id != 0)
            writer.writeUint32(4, this.region_id);
        if (this.has_center_pos)
            writer.writeMessage(7, this.center_pos, () => this.center_pos.serialize(writer));
        if (this.is_region_detected != false)
            writer.writeBool(6, this.is_region_detected);
        if (this.spot_list.length)
            writer.writeRepeatedMessage(10, this.spot_list, (item) => item.serialize(writer));
        if (this.radius != 0)
            writer.writeUint32(14, this.radius);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TreasureMapDetectorData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.region_id = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.center_pos, () => message.center_pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 6:
                    message.is_region_detected = reader.readBool();
                    break;
                case 10:
                    reader.readMessage(message.spot_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_1.Vector.deserialize(reader), dependency_1.Vector));
                    break;
                case 14:
                    message.radius = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return TreasureMapDetectorData.deserialize(bytes);
    }
}
exports.TreasureMapDetectorData = TreasureMapDetectorData;
_TreasureMapDetectorData_one_of_decls = new WeakMap();
