/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneEntityAiInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ServantInfo";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class SceneEntityAiInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_ai_open?: boolean;
        born_pos?: dependency_2.Vector;
        skill_cd_map?: Map<number, number>;
        servant_info?: dependency_1.ServantInfo;
        ai_threat_map?: Map<number, number>;
        skill_group_cd_map?: Map<number, number>;
        cur_tactic?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_ai_open" in data && data.is_ai_open != undefined) {
                this.is_ai_open = data.is_ai_open;
            }
            if ("born_pos" in data && data.born_pos != undefined) {
                this.born_pos = data.born_pos;
            }
            if ("skill_cd_map" in data && data.skill_cd_map != undefined) {
                this.skill_cd_map = data.skill_cd_map;
            }
            if ("servant_info" in data && data.servant_info != undefined) {
                this.servant_info = data.servant_info;
            }
            if ("ai_threat_map" in data && data.ai_threat_map != undefined) {
                this.ai_threat_map = data.ai_threat_map;
            }
            if ("skill_group_cd_map" in data && data.skill_group_cd_map != undefined) {
                this.skill_group_cd_map = data.skill_group_cd_map;
            }
            if ("cur_tactic" in data && data.cur_tactic != undefined) {
                this.cur_tactic = data.cur_tactic;
            }
        }
        if (!this.skill_cd_map)
            this.skill_cd_map = new Map();
        if (!this.ai_threat_map)
            this.ai_threat_map = new Map();
        if (!this.skill_group_cd_map)
            this.skill_group_cd_map = new Map();
    }
    get is_ai_open() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_ai_open(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get born_pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 2) as dependency_2.Vector;
    }
    set born_pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_born_pos() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get skill_cd_map() {
        return pb_1.Message.getField(this, 3) as any as Map<number, number>;
    }
    set skill_cd_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 3, value as any);
    }
    get servant_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.ServantInfo, 4) as dependency_1.ServantInfo;
    }
    set servant_info(value: dependency_1.ServantInfo) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_servant_info() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get ai_threat_map() {
        return pb_1.Message.getField(this, 5) as any as Map<number, number>;
    }
    set ai_threat_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 5, value as any);
    }
    get skill_group_cd_map() {
        return pb_1.Message.getField(this, 6) as any as Map<number, number>;
    }
    set skill_group_cd_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 6, value as any);
    }
    get cur_tactic() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set cur_tactic(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        is_ai_open?: boolean;
        born_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        skill_cd_map?: {
            [key: number]: number;
        };
        servant_info?: ReturnType<typeof dependency_1.ServantInfo.prototype.toObject>;
        ai_threat_map?: {
            [key: number]: number;
        };
        skill_group_cd_map?: {
            [key: number]: number;
        };
        cur_tactic?: number;
    }): SceneEntityAiInfo {
        const message = new SceneEntityAiInfo({});
        if (data.is_ai_open != null) {
            message.is_ai_open = data.is_ai_open;
        }
        if (data.born_pos != null) {
            message.born_pos = dependency_2.Vector.fromObject(data.born_pos);
        }
        if (typeof data.skill_cd_map == "object") {
            message.skill_cd_map = new Map(Object.entries(data.skill_cd_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.servant_info != null) {
            message.servant_info = dependency_1.ServantInfo.fromObject(data.servant_info);
        }
        if (typeof data.ai_threat_map == "object") {
            message.ai_threat_map = new Map(Object.entries(data.ai_threat_map).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.skill_group_cd_map == "object") {
            message.skill_group_cd_map = new Map(Object.entries(data.skill_group_cd_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.cur_tactic != null) {
            message.cur_tactic = data.cur_tactic;
        }
        return message;
    }
    toObject() {
        const data: {
            is_ai_open?: boolean;
            born_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            skill_cd_map?: {
                [key: number]: number;
            };
            servant_info?: ReturnType<typeof dependency_1.ServantInfo.prototype.toObject>;
            ai_threat_map?: {
                [key: number]: number;
            };
            skill_group_cd_map?: {
                [key: number]: number;
            };
            cur_tactic?: number;
        } = {};
        if (this.is_ai_open != null) {
            data.is_ai_open = this.is_ai_open;
        }
        if (this.born_pos != null) {
            data.born_pos = this.born_pos.toObject();
        }
        if (this.skill_cd_map.size > 0) {
            data.skill_cd_map = (Object.fromEntries)(this.skill_cd_map);
        }
        if (this.servant_info != null) {
            data.servant_info = this.servant_info.toObject();
        }
        if (this.ai_threat_map.size > 0) {
            data.ai_threat_map = (Object.fromEntries)(this.ai_threat_map);
        }
        if (this.skill_group_cd_map.size > 0) {
            data.skill_group_cd_map = (Object.fromEntries)(this.skill_group_cd_map);
        }
        if (this.cur_tactic != null) {
            data.cur_tactic = this.cur_tactic;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_ai_open != false)
            writer.writeBool(1, this.is_ai_open);
        if (this.has_born_pos)
            writer.writeMessage(2, this.born_pos, () => this.born_pos.serialize(writer));
        for (const [key, value] of this.skill_cd_map) {
            writer.writeMessage(3, this.skill_cd_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.has_servant_info)
            writer.writeMessage(4, this.servant_info, () => this.servant_info.serialize(writer));
        for (const [key, value] of this.ai_threat_map) {
            writer.writeMessage(5, this.ai_threat_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        for (const [key, value] of this.skill_group_cd_map) {
            writer.writeMessage(6, this.skill_group_cd_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.cur_tactic != 0)
            writer.writeUint32(7, this.cur_tactic);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneEntityAiInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneEntityAiInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.is_ai_open = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.born_pos, () => message.born_pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_cd_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 4:
                    reader.readMessage(message.servant_info, () => message.servant_info = dependency_1.ServantInfo.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ai_threat_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 6:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.skill_group_cd_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 7:
                    message.cur_tactic = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneEntityAiInfo {
        return SceneEntityAiInfo.deserialize(bytes);
    }
}
