/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ScenePlayerSoundNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class ScenePlayerSoundNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sound_name?: string;
        play_type?: ScenePlayerSoundNotify.PlaySoundType;
        play_pos?: dependency_1.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sound_name" in data && data.sound_name != undefined) {
                this.sound_name = data.sound_name;
            }
            if ("play_type" in data && data.play_type != undefined) {
                this.play_type = data.play_type;
            }
            if ("play_pos" in data && data.play_pos != undefined) {
                this.play_pos = data.play_pos;
            }
        }
    }
    get sound_name() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set sound_name(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get play_type() {
        return pb_1.Message.getFieldWithDefault(this, 8, ScenePlayerSoundNotify.PlaySoundType.PLAY_SOUND_TYPE_NONE) as ScenePlayerSoundNotify.PlaySoundType;
    }
    set play_type(value: ScenePlayerSoundNotify.PlaySoundType) {
        pb_1.Message.setField(this, 8, value);
    }
    get play_pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3) as dependency_1.Vector;
    }
    set play_pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_play_pos() {
        return pb_1.Message.getField(this, 3) != null;
    }
    static fromObject(data: {
        sound_name?: string;
        play_type?: ScenePlayerSoundNotify.PlaySoundType;
        play_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
    }): ScenePlayerSoundNotify {
        const message = new ScenePlayerSoundNotify({});
        if (data.sound_name != null) {
            message.sound_name = data.sound_name;
        }
        if (data.play_type != null) {
            message.play_type = data.play_type;
        }
        if (data.play_pos != null) {
            message.play_pos = dependency_1.Vector.fromObject(data.play_pos);
        }
        return message;
    }
    toObject() {
        const data: {
            sound_name?: string;
            play_type?: ScenePlayerSoundNotify.PlaySoundType;
            play_pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        } = {};
        if (this.sound_name != null) {
            data.sound_name = this.sound_name;
        }
        if (this.play_type != null) {
            data.play_type = this.play_type;
        }
        if (this.play_pos != null) {
            data.play_pos = this.play_pos.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sound_name.length)
            writer.writeString(4, this.sound_name);
        if (this.play_type != ScenePlayerSoundNotify.PlaySoundType.PLAY_SOUND_TYPE_NONE)
            writer.writeEnum(8, this.play_type);
        if (this.has_play_pos)
            writer.writeMessage(3, this.play_pos, () => this.play_pos.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ScenePlayerSoundNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ScenePlayerSoundNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.sound_name = reader.readString();
                    break;
                case 8:
                    message.play_type = reader.readEnum();
                    break;
                case 3:
                    reader.readMessage(message.play_pos, () => message.play_pos = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ScenePlayerSoundNotify {
        return ScenePlayerSoundNotify.deserialize(bytes);
    }
}
export namespace ScenePlayerSoundNotify {
    export enum PlaySoundType {
        PLAY_SOUND_TYPE_NONE = 0,
        PLAY_SOUND_TYPE_START = 1,
        PLAY_SOUND_TYPE_STOP = 2
    }
}
