"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _GetCityHuntingOfferRsp_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.GetCityHuntingOfferRsp = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetCityHuntingOfferRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./HuntingOfferData");
const dependency_2 = require("./HuntingPair");
const pb_1 = require("google-protobuf");
class GetCityHuntingOfferRsp extends pb_1.Message {
    constructor(data) {
        super();
        _GetCityHuntingOfferRsp_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], __classPrivateFieldGet(this, _GetCityHuntingOfferRsp_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("hunting_offer_list" in data && data.hunting_offer_list != undefined) {
                this.hunting_offer_list = data.hunting_offer_list;
            }
            if ("city_id" in data && data.city_id != undefined) {
                this.city_id = data.city_id;
            }
            if ("ongoing_hunting_pair" in data && data.ongoing_hunting_pair != undefined) {
                this.ongoing_hunting_pair = data.ongoing_hunting_pair;
            }
            if ("cur_week_finished_count" in data && data.cur_week_finished_count != undefined) {
                this.cur_week_finished_count = data.cur_week_finished_count;
            }
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
        }
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set retcode(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get hunting_offer_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.HuntingOfferData, 13);
    }
    set hunting_offer_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get city_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set city_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get ongoing_hunting_pair() {
        return pb_1.Message.getWrapperField(this, dependency_2.HuntingPair, 8);
    }
    set ongoing_hunting_pair(value) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_ongoing_hunting_pair() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get cur_week_finished_count() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set cur_week_finished_count(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set next_refresh_time(value) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data) {
        const message = new GetCityHuntingOfferRsp({});
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.hunting_offer_list != null) {
            message.hunting_offer_list = data.hunting_offer_list.map(item => dependency_1.HuntingOfferData.fromObject(item));
        }
        if (data.city_id != null) {
            message.city_id = data.city_id;
        }
        if (data.ongoing_hunting_pair != null) {
            message.ongoing_hunting_pair = dependency_2.HuntingPair.fromObject(data.ongoing_hunting_pair);
        }
        if (data.cur_week_finished_count != null) {
            message.cur_week_finished_count = data.cur_week_finished_count;
        }
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.hunting_offer_list != null) {
            data.hunting_offer_list = this.hunting_offer_list.map((item) => item.toObject());
        }
        if (this.city_id != null) {
            data.city_id = this.city_id;
        }
        if (this.ongoing_hunting_pair != null) {
            data.ongoing_hunting_pair = this.ongoing_hunting_pair.toObject();
        }
        if (this.cur_week_finished_count != null) {
            data.cur_week_finished_count = this.cur_week_finished_count;
        }
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.retcode != 0)
            writer.writeInt32(9, this.retcode);
        if (this.hunting_offer_list.length)
            writer.writeRepeatedMessage(13, this.hunting_offer_list, (item) => item.serialize(writer));
        if (this.city_id != 0)
            writer.writeUint32(2, this.city_id);
        if (this.has_ongoing_hunting_pair)
            writer.writeMessage(8, this.ongoing_hunting_pair, () => this.ongoing_hunting_pair.serialize(writer));
        if (this.cur_week_finished_count != 0)
            writer.writeUint32(1, this.cur_week_finished_count);
        if (this.next_refresh_time != 0)
            writer.writeUint32(4, this.next_refresh_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCityHuntingOfferRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.retcode = reader.readInt32();
                    break;
                case 13:
                    reader.readMessage(message.hunting_offer_list, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_1.HuntingOfferData.deserialize(reader), dependency_1.HuntingOfferData));
                    break;
                case 2:
                    message.city_id = reader.readUint32();
                    break;
                case 8:
                    reader.readMessage(message.ongoing_hunting_pair, () => message.ongoing_hunting_pair = dependency_2.HuntingPair.deserialize(reader));
                    break;
                case 1:
                    message.cur_week_finished_count = reader.readUint32();
                    break;
                case 4:
                    message.next_refresh_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return GetCityHuntingOfferRsp.deserialize(bytes);
    }
}
exports.GetCityHuntingOfferRsp = GetCityHuntingOfferRsp;
_GetCityHuntingOfferRsp_one_of_decls = new WeakMap();
