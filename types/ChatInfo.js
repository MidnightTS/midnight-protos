"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChatInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChatInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChatInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class ChatInfo extends pb_1.Message {
    constructor(data) {
        super();
        _ChatInfo_one_of_decls.set(this, [[1946, 914, 1753]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _ChatInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("sequence" in data && data.sequence != undefined) {
                this.sequence = data.sequence;
            }
            if ("to_uid" in data && data.to_uid != undefined) {
                this.to_uid = data.to_uid;
            }
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("is_read" in data && data.is_read != undefined) {
                this.is_read = data.is_read;
            }
            if ("text" in data && data.text != undefined) {
                this.text = data.text;
            }
            if ("icon" in data && data.icon != undefined) {
                this.icon = data.icon;
            }
            if ("system_hint" in data && data.system_hint != undefined) {
                this.system_hint = data.system_hint;
            }
        }
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set time(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get sequence() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set sequence(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get to_uid() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set to_uid(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get is_read() {
        return pb_1.Message.getFieldWithDefault(this, 5, false);
    }
    set is_read(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get text() {
        return pb_1.Message.getFieldWithDefault(this, 1946, "");
    }
    set text(value) {
        pb_1.Message.setOneofField(this, 1946, __classPrivateFieldGet(this, _ChatInfo_one_of_decls, "f")[0], value);
    }
    get has_text() {
        return pb_1.Message.getField(this, 1946) != null;
    }
    get icon() {
        return pb_1.Message.getFieldWithDefault(this, 914, 0);
    }
    set icon(value) {
        pb_1.Message.setOneofField(this, 914, __classPrivateFieldGet(this, _ChatInfo_one_of_decls, "f")[0], value);
    }
    get has_icon() {
        return pb_1.Message.getField(this, 914) != null;
    }
    get system_hint() {
        return pb_1.Message.getWrapperField(this, ChatInfo.SystemHint, 1753);
    }
    set system_hint(value) {
        pb_1.Message.setOneofWrapperField(this, 1753, __classPrivateFieldGet(this, _ChatInfo_one_of_decls, "f")[0], value);
    }
    get has_system_hint() {
        return pb_1.Message.getField(this, 1753) != null;
    }
    get content() {
        const cases = {
            0: "none",
            1946: "text",
            914: "icon",
            1753: "system_hint"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1946, 914, 1753])];
    }
    static fromObject(data) {
        const message = new ChatInfo({});
        if (data.time != null) {
            message.time = data.time;
        }
        if (data.sequence != null) {
            message.sequence = data.sequence;
        }
        if (data.to_uid != null) {
            message.to_uid = data.to_uid;
        }
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.is_read != null) {
            message.is_read = data.is_read;
        }
        if (data.text != null) {
            message.text = data.text;
        }
        if (data.icon != null) {
            message.icon = data.icon;
        }
        if (data.system_hint != null) {
            message.system_hint = ChatInfo.SystemHint.fromObject(data.system_hint);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.time != null) {
            data.time = this.time;
        }
        if (this.sequence != null) {
            data.sequence = this.sequence;
        }
        if (this.to_uid != null) {
            data.to_uid = this.to_uid;
        }
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.is_read != null) {
            data.is_read = this.is_read;
        }
        if (this.text != null) {
            data.text = this.text;
        }
        if (this.icon != null) {
            data.icon = this.icon;
        }
        if (this.system_hint != null) {
            data.system_hint = this.system_hint.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.time != 0)
            writer.writeUint32(13, this.time);
        if (this.sequence != 0)
            writer.writeUint32(10, this.sequence);
        if (this.to_uid != 0)
            writer.writeUint32(7, this.to_uid);
        if (this.uid != 0)
            writer.writeUint32(15, this.uid);
        if (this.is_read != false)
            writer.writeBool(5, this.is_read);
        if (this.has_text)
            writer.writeString(1946, this.text);
        if (this.has_icon)
            writer.writeUint32(914, this.icon);
        if (this.has_system_hint)
            writer.writeMessage(1753, this.system_hint, () => this.system_hint.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChatInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.time = reader.readUint32();
                    break;
                case 10:
                    message.sequence = reader.readUint32();
                    break;
                case 7:
                    message.to_uid = reader.readUint32();
                    break;
                case 15:
                    message.uid = reader.readUint32();
                    break;
                case 5:
                    message.is_read = reader.readBool();
                    break;
                case 1946:
                    message.text = reader.readString();
                    break;
                case 914:
                    message.icon = reader.readUint32();
                    break;
                case 1753:
                    reader.readMessage(message.system_hint, () => message.system_hint = ChatInfo.SystemHint.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ChatInfo.deserialize(bytes);
    }
}
exports.ChatInfo = ChatInfo;
_ChatInfo_one_of_decls = new WeakMap();
(function (ChatInfo) {
    var _SystemHint_one_of_decls;
    let SystemHintType;
    (function (SystemHintType) {
        SystemHintType[SystemHintType["SYSTEM_HINT_TYPE_CHAT_NONE"] = 0] = "SYSTEM_HINT_TYPE_CHAT_NONE";
        SystemHintType[SystemHintType["SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD"] = 1] = "SYSTEM_HINT_TYPE_CHAT_ENTER_WORLD";
        SystemHintType[SystemHintType["SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD"] = 2] = "SYSTEM_HINT_TYPE_CHAT_LEAVE_WORLD";
    })(SystemHintType = ChatInfo.SystemHintType || (ChatInfo.SystemHintType = {}));
    class SystemHint extends pb_1.Message {
        constructor(data) {
            super();
            _SystemHint_one_of_decls.set(this, []);
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SystemHint_one_of_decls, "f"));
            if (!Array.isArray(data) && typeof data == "object") {
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
            }
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 14, 0);
        }
        set type(value) {
            pb_1.Message.setField(this, 14, value);
        }
        static fromObject(data) {
            const message = new SystemHint({});
            if (data.type != null) {
                message.type = data.type;
            }
            return message;
        }
        toObject() {
            const data = {};
            if (this.type != null) {
                data.type = this.type;
            }
            return data;
        }
        serialize(w) {
            const writer = w || new pb_1.BinaryWriter();
            if (this.type != 0)
                writer.writeUint32(14, this.type);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes) {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SystemHint();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 14:
                        message.type = reader.readUint32();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary() {
            return this.serialize();
        }
        static deserializeBinary(bytes) {
            return SystemHint.deserialize(bytes);
        }
    }
    _SystemHint_one_of_decls = new WeakMap();
    ChatInfo.SystemHint = SystemHint;
})(ChatInfo = exports.ChatInfo || (exports.ChatInfo = {}));
