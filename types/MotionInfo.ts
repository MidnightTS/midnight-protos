/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MotionInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MotionState";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class MotionInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        pos?: dependency_2.Vector;
        rot?: dependency_2.Vector;
        speed?: dependency_2.Vector;
        state?: dependency_1.MotionState;
        params?: dependency_2.Vector[];
        ref_pos?: dependency_2.Vector;
        ref_id?: number;
        scene_time?: number;
        interval_velocity?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("rot" in data && data.rot != undefined) {
                this.rot = data.rot;
            }
            if ("speed" in data && data.speed != undefined) {
                this.speed = data.speed;
            }
            if ("state" in data && data.state != undefined) {
                this.state = data.state;
            }
            if ("params" in data && data.params != undefined) {
                this.params = data.params;
            }
            if ("ref_pos" in data && data.ref_pos != undefined) {
                this.ref_pos = data.ref_pos;
            }
            if ("ref_id" in data && data.ref_id != undefined) {
                this.ref_id = data.ref_id;
            }
            if ("scene_time" in data && data.scene_time != undefined) {
                this.scene_time = data.scene_time;
            }
            if ("interval_velocity" in data && data.interval_velocity != undefined) {
                this.interval_velocity = data.interval_velocity;
            }
        }
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 1) as dependency_2.Vector;
    }
    set pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get rot() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 2) as dependency_2.Vector;
    }
    set rot(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_rot() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get speed() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 3) as dependency_2.Vector;
    }
    set speed(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_speed() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get state() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.MotionState.MOTION_STATE_NONE) as dependency_1.MotionState;
    }
    set state(value: dependency_1.MotionState) {
        pb_1.Message.setField(this, 4, value);
    }
    get params() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.Vector, 5) as dependency_2.Vector[];
    }
    set params(value: dependency_2.Vector[]) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get ref_pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 6) as dependency_2.Vector;
    }
    set ref_pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_ref_pos() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get ref_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set ref_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get scene_time() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set scene_time(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get interval_velocity() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set interval_velocity(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        rot?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        speed?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        state?: dependency_1.MotionState;
        params?: ReturnType<typeof dependency_2.Vector.prototype.toObject>[];
        ref_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        ref_id?: number;
        scene_time?: number;
        interval_velocity?: number;
    }): MotionInfo {
        const message = new MotionInfo({});
        if (data.pos != null) {
            message.pos = dependency_2.Vector.fromObject(data.pos);
        }
        if (data.rot != null) {
            message.rot = dependency_2.Vector.fromObject(data.rot);
        }
        if (data.speed != null) {
            message.speed = dependency_2.Vector.fromObject(data.speed);
        }
        if (data.state != null) {
            message.state = data.state;
        }
        if (data.params != null) {
            message.params = data.params.map(item => dependency_2.Vector.fromObject(item));
        }
        if (data.ref_pos != null) {
            message.ref_pos = dependency_2.Vector.fromObject(data.ref_pos);
        }
        if (data.ref_id != null) {
            message.ref_id = data.ref_id;
        }
        if (data.scene_time != null) {
            message.scene_time = data.scene_time;
        }
        if (data.interval_velocity != null) {
            message.interval_velocity = data.interval_velocity;
        }
        return message;
    }
    toObject() {
        const data: {
            pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            rot?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            speed?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            state?: dependency_1.MotionState;
            params?: ReturnType<typeof dependency_2.Vector.prototype.toObject>[];
            ref_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            ref_id?: number;
            scene_time?: number;
            interval_velocity?: number;
        } = {};
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.rot != null) {
            data.rot = this.rot.toObject();
        }
        if (this.speed != null) {
            data.speed = this.speed.toObject();
        }
        if (this.state != null) {
            data.state = this.state;
        }
        if (this.params != null) {
            data.params = this.params.map((item: dependency_2.Vector) => item.toObject());
        }
        if (this.ref_pos != null) {
            data.ref_pos = this.ref_pos.toObject();
        }
        if (this.ref_id != null) {
            data.ref_id = this.ref_id;
        }
        if (this.scene_time != null) {
            data.scene_time = this.scene_time;
        }
        if (this.interval_velocity != null) {
            data.interval_velocity = this.interval_velocity;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_pos)
            writer.writeMessage(1, this.pos, () => this.pos.serialize(writer));
        if (this.has_rot)
            writer.writeMessage(2, this.rot, () => this.rot.serialize(writer));
        if (this.has_speed)
            writer.writeMessage(3, this.speed, () => this.speed.serialize(writer));
        if (this.state != dependency_1.MotionState.MOTION_STATE_NONE)
            writer.writeEnum(4, this.state);
        if (this.params.length)
            writer.writeRepeatedMessage(5, this.params, (item: dependency_2.Vector) => item.serialize(writer));
        if (this.has_ref_pos)
            writer.writeMessage(6, this.ref_pos, () => this.ref_pos.serialize(writer));
        if (this.ref_id != 0)
            writer.writeUint32(7, this.ref_id);
        if (this.scene_time != 0)
            writer.writeUint32(8, this.scene_time);
        if (this.interval_velocity != 0)
            writer.writeUint64(9, this.interval_velocity);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MotionInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MotionInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.pos, () => message.pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 2:
                    reader.readMessage(message.rot, () => message.rot = dependency_2.Vector.deserialize(reader));
                    break;
                case 3:
                    reader.readMessage(message.speed, () => message.speed = dependency_2.Vector.deserialize(reader));
                    break;
                case 4:
                    message.state = reader.readEnum();
                    break;
                case 5:
                    reader.readMessage(message.params, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.Vector.deserialize(reader), dependency_2.Vector));
                    break;
                case 6:
                    reader.readMessage(message.ref_pos, () => message.ref_pos = dependency_2.Vector.deserialize(reader));
                    break;
                case 7:
                    message.ref_id = reader.readUint32();
                    break;
                case 8:
                    message.scene_time = reader.readUint32();
                    break;
                case 9:
                    message.interval_velocity = reader.readUint64();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MotionInfo {
        return MotionInfo.deserialize(bytes);
    }
}
