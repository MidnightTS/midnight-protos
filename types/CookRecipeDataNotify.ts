/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CookRecipeDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./CookRecipeData";
import * as pb_1 from "google-protobuf";
export class CookRecipeDataNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        recipe_data?: dependency_1.CookRecipeData;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("recipe_data" in data && data.recipe_data != undefined) {
                this.recipe_data = data.recipe_data;
            }
        }
    }
    get recipe_data() {
        return pb_1.Message.getWrapperField(this, dependency_1.CookRecipeData, 4) as dependency_1.CookRecipeData;
    }
    set recipe_data(value: dependency_1.CookRecipeData) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_recipe_data() {
        return pb_1.Message.getField(this, 4) != null;
    }
    static fromObject(data: {
        recipe_data?: ReturnType<typeof dependency_1.CookRecipeData.prototype.toObject>;
    }): CookRecipeDataNotify {
        const message = new CookRecipeDataNotify({});
        if (data.recipe_data != null) {
            message.recipe_data = dependency_1.CookRecipeData.fromObject(data.recipe_data);
        }
        return message;
    }
    toObject() {
        const data: {
            recipe_data?: ReturnType<typeof dependency_1.CookRecipeData.prototype.toObject>;
        } = {};
        if (this.recipe_data != null) {
            data.recipe_data = this.recipe_data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_recipe_data)
            writer.writeMessage(4, this.recipe_data, () => this.recipe_data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CookRecipeDataNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CookRecipeDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    reader.readMessage(message.recipe_data, () => message.recipe_data = dependency_1.CookRecipeData.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CookRecipeDataNotify {
        return CookRecipeDataNotify.deserialize(bytes);
    }
}
