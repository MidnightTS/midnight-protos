"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MultistagePlayInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MultistagePlayInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MultistagePlayInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./HideAndSeekStageInfo");
const dependency_2 = require("./InBattleChessInfo");
const dependency_3 = require("./InBattleFleurFairInfo");
const dependency_4 = require("./InBattleMechanicusInfo");
const dependency_5 = require("./IrodoriChessInfo");
const pb_1 = require("google-protobuf");
class MultistagePlayInfo extends pb_1.Message {
    constructor(data) {
        super();
        _MultistagePlayInfo_one_of_decls.set(this, [[1334, 1064, 108, 1758, 531]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("play_index" in data && data.play_index != undefined) {
                this.play_index = data.play_index;
            }
            if ("play_type" in data && data.play_type != undefined) {
                this.play_type = data.play_type;
            }
            if ("stage_type" in data && data.stage_type != undefined) {
                this.stage_type = data.stage_type;
            }
            if ("duration" in data && data.duration != undefined) {
                this.duration = data.duration;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("begin_time" in data && data.begin_time != undefined) {
                this.begin_time = data.begin_time;
            }
            if ("stage_index" in data && data.stage_index != undefined) {
                this.stage_index = data.stage_index;
            }
            if ("mechanicus_info" in data && data.mechanicus_info != undefined) {
                this.mechanicus_info = data.mechanicus_info;
            }
            if ("fleur_fair_info" in data && data.fleur_fair_info != undefined) {
                this.fleur_fair_info = data.fleur_fair_info;
            }
            if ("hide_and_seek_info" in data && data.hide_and_seek_info != undefined) {
                this.hide_and_seek_info = data.hide_and_seek_info;
            }
            if ("chess_info" in data && data.chess_info != undefined) {
                this.chess_info = data.chess_info;
            }
            if ("irodori_chess_info" in data && data.irodori_chess_info != undefined) {
                this.irodori_chess_info = data.irodori_chess_info;
            }
        }
    }
    get play_index() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set play_index(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get play_type() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set play_type(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get stage_type() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set stage_type(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get duration() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set duration(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set group_id(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get begin_time() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set begin_time(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get stage_index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set stage_index(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get mechanicus_info() {
        return pb_1.Message.getWrapperField(this, dependency_4.InBattleMechanicusInfo, 1334);
    }
    set mechanicus_info(value) {
        pb_1.Message.setOneofWrapperField(this, 1334, __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f")[0], value);
    }
    get has_mechanicus_info() {
        return pb_1.Message.getField(this, 1334) != null;
    }
    get fleur_fair_info() {
        return pb_1.Message.getWrapperField(this, dependency_3.InBattleFleurFairInfo, 1064);
    }
    set fleur_fair_info(value) {
        pb_1.Message.setOneofWrapperField(this, 1064, __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f")[0], value);
    }
    get has_fleur_fair_info() {
        return pb_1.Message.getField(this, 1064) != null;
    }
    get hide_and_seek_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.HideAndSeekStageInfo, 108);
    }
    set hide_and_seek_info(value) {
        pb_1.Message.setOneofWrapperField(this, 108, __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f")[0], value);
    }
    get has_hide_and_seek_info() {
        return pb_1.Message.getField(this, 108) != null;
    }
    get chess_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.InBattleChessInfo, 1758);
    }
    set chess_info(value) {
        pb_1.Message.setOneofWrapperField(this, 1758, __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f")[0], value);
    }
    get has_chess_info() {
        return pb_1.Message.getField(this, 1758) != null;
    }
    get irodori_chess_info() {
        return pb_1.Message.getWrapperField(this, dependency_5.IrodoriChessInfo, 531);
    }
    set irodori_chess_info(value) {
        pb_1.Message.setOneofWrapperField(this, 531, __classPrivateFieldGet(this, _MultistagePlayInfo_one_of_decls, "f")[0], value);
    }
    get has_irodori_chess_info() {
        return pb_1.Message.getField(this, 531) != null;
    }
    get detail() {
        const cases = {
            0: "none",
            1334: "mechanicus_info",
            1064: "fleur_fair_info",
            108: "hide_and_seek_info",
            1758: "chess_info",
            531: "irodori_chess_info"
        };
        return cases[pb_1.Message.computeOneofCase(this, [1334, 1064, 108, 1758, 531])];
    }
    static fromObject(data) {
        const message = new MultistagePlayInfo({});
        if (data.play_index != null) {
            message.play_index = data.play_index;
        }
        if (data.play_type != null) {
            message.play_type = data.play_type;
        }
        if (data.stage_type != null) {
            message.stage_type = data.stage_type;
        }
        if (data.duration != null) {
            message.duration = data.duration;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.begin_time != null) {
            message.begin_time = data.begin_time;
        }
        if (data.stage_index != null) {
            message.stage_index = data.stage_index;
        }
        if (data.mechanicus_info != null) {
            message.mechanicus_info = dependency_4.InBattleMechanicusInfo.fromObject(data.mechanicus_info);
        }
        if (data.fleur_fair_info != null) {
            message.fleur_fair_info = dependency_3.InBattleFleurFairInfo.fromObject(data.fleur_fair_info);
        }
        if (data.hide_and_seek_info != null) {
            message.hide_and_seek_info = dependency_1.HideAndSeekStageInfo.fromObject(data.hide_and_seek_info);
        }
        if (data.chess_info != null) {
            message.chess_info = dependency_2.InBattleChessInfo.fromObject(data.chess_info);
        }
        if (data.irodori_chess_info != null) {
            message.irodori_chess_info = dependency_5.IrodoriChessInfo.fromObject(data.irodori_chess_info);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.play_index != null) {
            data.play_index = this.play_index;
        }
        if (this.play_type != null) {
            data.play_type = this.play_type;
        }
        if (this.stage_type != null) {
            data.stage_type = this.stage_type;
        }
        if (this.duration != null) {
            data.duration = this.duration;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.begin_time != null) {
            data.begin_time = this.begin_time;
        }
        if (this.stage_index != null) {
            data.stage_index = this.stage_index;
        }
        if (this.mechanicus_info != null) {
            data.mechanicus_info = this.mechanicus_info.toObject();
        }
        if (this.fleur_fair_info != null) {
            data.fleur_fair_info = this.fleur_fair_info.toObject();
        }
        if (this.hide_and_seek_info != null) {
            data.hide_and_seek_info = this.hide_and_seek_info.toObject();
        }
        if (this.chess_info != null) {
            data.chess_info = this.chess_info.toObject();
        }
        if (this.irodori_chess_info != null) {
            data.irodori_chess_info = this.irodori_chess_info.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.play_index != 0)
            writer.writeUint32(13, this.play_index);
        if (this.play_type != 0)
            writer.writeUint32(11, this.play_type);
        if (this.stage_type != 0)
            writer.writeUint32(10, this.stage_type);
        if (this.duration != 0)
            writer.writeUint32(8, this.duration);
        if (this.group_id != 0)
            writer.writeUint32(12, this.group_id);
        if (this.begin_time != 0)
            writer.writeUint32(9, this.begin_time);
        if (this.stage_index != 0)
            writer.writeUint32(1, this.stage_index);
        if (this.has_mechanicus_info)
            writer.writeMessage(1334, this.mechanicus_info, () => this.mechanicus_info.serialize(writer));
        if (this.has_fleur_fair_info)
            writer.writeMessage(1064, this.fleur_fair_info, () => this.fleur_fair_info.serialize(writer));
        if (this.has_hide_and_seek_info)
            writer.writeMessage(108, this.hide_and_seek_info, () => this.hide_and_seek_info.serialize(writer));
        if (this.has_chess_info)
            writer.writeMessage(1758, this.chess_info, () => this.chess_info.serialize(writer));
        if (this.has_irodori_chess_info)
            writer.writeMessage(531, this.irodori_chess_info, () => this.irodori_chess_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MultistagePlayInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    message.play_index = reader.readUint32();
                    break;
                case 11:
                    message.play_type = reader.readUint32();
                    break;
                case 10:
                    message.stage_type = reader.readUint32();
                    break;
                case 8:
                    message.duration = reader.readUint32();
                    break;
                case 12:
                    message.group_id = reader.readUint32();
                    break;
                case 9:
                    message.begin_time = reader.readUint32();
                    break;
                case 1:
                    message.stage_index = reader.readUint32();
                    break;
                case 1334:
                    reader.readMessage(message.mechanicus_info, () => message.mechanicus_info = dependency_4.InBattleMechanicusInfo.deserialize(reader));
                    break;
                case 1064:
                    reader.readMessage(message.fleur_fair_info, () => message.fleur_fair_info = dependency_3.InBattleFleurFairInfo.deserialize(reader));
                    break;
                case 108:
                    reader.readMessage(message.hide_and_seek_info, () => message.hide_and_seek_info = dependency_1.HideAndSeekStageInfo.deserialize(reader));
                    break;
                case 1758:
                    reader.readMessage(message.chess_info, () => message.chess_info = dependency_2.InBattleChessInfo.deserialize(reader));
                    break;
                case 531:
                    reader.readMessage(message.irodori_chess_info, () => message.irodori_chess_info = dependency_5.IrodoriChessInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MultistagePlayInfo.deserialize(bytes);
    }
}
exports.MultistagePlayInfo = MultistagePlayInfo;
_MultistagePlayInfo_one_of_decls = new WeakMap();
