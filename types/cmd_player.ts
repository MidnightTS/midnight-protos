// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_player.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ContentAuditInfo } from "./define";
import { LuaShellType } from "./define";
import { Vector } from "./define";
import { ItemParam } from "./define";
import { EventTriggerType } from "./define";
import { PropValue } from "./define";
import { FeatureBlockInfo } from "./define";
import { ResVersionConfig } from "./define";
import { BlockInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GetPlayerTokenReq
 */
export interface GetPlayerTokenReq {
    /**
     * @generated from protobuf field: optional string account_token = 10;
     */
    accountToken?: string;
    /**
     * @generated from protobuf field: optional string account_uid = 11;
     */
    accountUid?: string;
    /**
     * @generated from protobuf field: optional string psn_region = 4;
     */
    psnRegion?: string;
    /**
     * @generated from protobuf field: optional string online_id = 7;
     */
    onlineId?: string;
    /**
     * @generated from protobuf field: optional uint32 channel_id = 15;
     */
    channelId?: number;
    /**
     * @generated from protobuf field: optional string account_ext = 9;
     */
    accountExt?: string;
    /**
     * @generated from protobuf field: optional string country_code = 5;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional string client_rand_key = 760;
     */
    clientRandKey?: string;
    /**
     * @generated from protobuf field: optional bool is_guest = 6;
     */
    isGuest?: boolean;
    /**
     * @generated from protobuf field: optional string birthday = 1718;
     */
    birthday?: string;
    /**
     * @generated from protobuf field: optional uint32 sub_channel_id = 8;
     */
    subChannelId?: number;
    /**
     * @generated from protobuf field: optional uint32 platform_type = 12;
     */
    platformType?: number;
    /**
     * @generated from protobuf field: optional string client_ip_str = 3;
     */
    clientIpStr?: string;
    /**
     * @generated from protobuf field: optional string psn_id = 13;
     */
    psnId?: string;
    /**
     * @generated from protobuf field: optional uint32 account_type = 1;
     */
    accountType?: number;
    /**
     * @generated from protobuf field: optional uint32 minors_reg_min_age = 995;
     */
    minorsRegMinAge?: number;
    /**
     * @generated from protobuf field: optional uint32 cloud_client_ip = 14;
     */
    cloudClientIp?: number;
    /**
     * @generated from protobuf field: optional uint32 key_id = 1787;
     */
    keyId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 2;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetPlayerTokenReq.CmdId
 */
export enum GetPlayerTokenReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 172;
     */
    CMD_ID = 172,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetPlayerTokenRsp
 */
export interface GetPlayerTokenRsp {
    /**
     * @generated from protobuf field: optional string birthday = 937;
     */
    birthday?: string;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bytes security_cmd_buffer = 6;
     */
    securityCmdBuffer?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint64 secret_key_seed = 13;
     */
    secretKeySeed?: bigint;
    /**
     * @generated from protobuf field: optional string country_code = 2013;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional bytes extra_bin_data = 3;
     */
    extraBinData?: Uint8Array;
    /**
     * @generated from protobuf field: optional string secret_key = 15;
     */
    secretKey?: string;
    /**
     * @generated from protobuf field: optional uint32 minors_reg_min_age = 1561;
     */
    minorsRegMinAge?: number;
    /**
     * @generated from protobuf field: optional uint32 black_uid_end_time = 14;
     */
    blackUidEndTime?: number;
    /**
     * @generated from protobuf field: optional uint32 tag = 1635;
     */
    tag?: number;
    /**
     * @generated from protobuf field: optional string token = 11;
     */
    token?: string;
    /**
     * @generated from protobuf field: optional uint32 gm_uid = 10;
     */
    gmUid?: number;
    /**
     * @generated from protobuf field: optional uint32 channel_id = 896;
     */
    channelId?: number;
    /**
     * @generated from protobuf field: optional string psn_id = 1811;
     */
    psnId?: string;
    /**
     * @generated from protobuf field: optional string client_ip_str = 860;
     */
    clientIpStr?: string;
    /**
     * @generated from protobuf field: optional string msg = 7;
     */
    msg?: string;
    /**
     * @generated from protobuf field: optional uint32 account_type = 5;
     */
    accountType?: number;
    /**
     * @generated from protobuf field: optional uint32 sub_channel_id = 1802;
     */
    subChannelId?: number;
    /**
     * @generated from protobuf field: optional bool is_watchdog_uid = 2028;
     */
    isWatchdogUid?: boolean;
    /**
     * @generated from protobuf field: optional string server_rand_key = 1493;
     */
    serverRandKey?: string;
    /**
     * @generated from protobuf field: optional bool is_proficient_player = 9;
     */
    isProficientPlayer?: boolean;
    /**
     * @generated from protobuf field: optional uint32 key_id = 1172;
     */
    keyId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 1;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional string account_uid = 12;
     */
    accountUid?: string;
    /**
     * @generated from protobuf field: optional bool is_guest = 4;
     */
    isGuest?: boolean;
    /**
     * @generated from protobuf field: optional string client_version_random_key = 1529;
     */
    clientVersionRandomKey?: string;
    /**
     * @generated from protobuf field: repeated uint32 finish_collection_id_list = 1640;
     */
    finishCollectionIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 platform_type = 8;
     */
    platformType?: number;
    /**
     * @generated from protobuf field: optional uint32 reg_platform = 1112;
     */
    regPlatform?: number;
    /**
     * @generated from protobuf field: optional bool is_login_white_list = 573;
     */
    isLoginWhiteList?: boolean;
    /**
     * @generated from protobuf field: optional string sign = 1140;
     */
    sign?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.GetPlayerTokenRsp.CmdId
 */
export enum GetPlayerTokenRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 198;
     */
    CMD_ID = 198,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TrackingIOInfo
 */
export interface TrackingIOInfo {
    /**
     * @generated from protobuf field: optional string rydevicetype = 11;
     */
    rydevicetype?: string;
    /**
     * @generated from protobuf field: optional string mac = 6;
     */
    mac?: string;
    /**
     * @generated from protobuf field: optional string deviceid = 9;
     */
    deviceid?: string;
    /**
     * @generated from protobuf field: optional string client_tz = 5;
     */
    clientTz?: string;
    /**
     * @generated from protobuf field: optional string current_caid = 7;
     */
    currentCaid?: string;
    /**
     * @generated from protobuf field: optional string cached_caid = 15;
     */
    cachedCaid?: string;
    /**
     * @generated from protobuf field: optional string appid = 1;
     */
    appid?: string;
}
/**
 * @generated from protobuf message com.midnights.game.AdjustTrackingInfo
 */
export interface AdjustTrackingInfo {
    /**
     * @generated from protobuf field: optional string event_token = 9;
     */
    eventToken?: string;
    /**
     * @generated from protobuf field: optional string adid = 4;
     */
    adid?: string;
    /**
     * @generated from protobuf field: optional string idfa = 2;
     */
    idfa?: string;
    /**
     * @generated from protobuf field: optional string app_token = 14;
     */
    appToken?: string;
    /**
     * @generated from protobuf field: optional string gps_adid = 3;
     */
    gpsAdid?: string;
    /**
     * @generated from protobuf field: optional string fire_adid = 13;
     */
    fireAdid?: string;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLoginReq
 */
export interface PlayerLoginReq {
    /**
     * @generated from protobuf field: optional uint32 language_type = 6;
     */
    languageType?: number;
    /**
     * @generated from protobuf field: optional uint32 reg_platform = 615;
     */
    regPlatform?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.TrackingIOInfo tracking_io_info = 1660;
     */
    trackingIoInfo?: TrackingIOInfo;
    /**
     * @generated from protobuf field: optional uint32 account_type = 13;
     */
    accountType?: number;
    /**
     * @generated from protobuf field: optional string token = 15;
     */
    token?: string;
    /**
     * @generated from protobuf field: optional bytes extra_bin_data = 1458;
     */
    extraBinData?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 channel_id = 1314;
     */
    channelId?: number;
    /**
     * @generated from protobuf field: optional uint32 client_data_version = 688;
     */
    clientDataVersion?: number;
    /**
     * @generated from protobuf field: optional string account_uid = 2;
     */
    accountUid?: string;
    /**
     * @generated from protobuf field: optional string client_version = 12;
     */
    clientVersion?: string;
    /**
     * @generated from protobuf field: optional string security_library_md5 = 772;
     */
    securityLibraryMd5?: string;
    /**
     * @generated from protobuf field: optional string country_code = 2000;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional string psn_id = 1268;
     */
    psnId?: string;
    /**
     * @generated from protobuf field: optional uint32 client_port = 431;
     */
    clientPort?: number;
    /**
     * @generated from protobuf field: optional string device_name = 9;
     */
    deviceName?: string;
    /**
     * @generated from protobuf field: optional string cps = 1163;
     */
    cps?: string;
    /**
     * @generated from protobuf field: optional uint64 login_rand = 3;
     */
    loginRand?: bigint;
    /**
     * @generated from protobuf field: optional uint32 target_home_param = 984;
     */
    targetHomeParam?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.AdjustTrackingInfo adjust_tracking_info = 1816;
     */
    adjustTrackingInfo?: AdjustTrackingInfo;
    /**
     * @generated from protobuf field: optional bool is_transfer = 908;
     */
    isTransfer?: boolean;
    /**
     * @generated from protobuf field: optional uint32 tag = 1787;
     */
    tag?: number;
    /**
     * @generated from protobuf field: optional bool is_guest = 5;
     */
    isGuest?: boolean;
    /**
     * @generated from protobuf field: optional bytes environment_error_code = 2026;
     */
    environmentErrorCode?: Uint8Array;
    /**
     * @generated from protobuf field: optional string online_id = 903;
     */
    onlineId?: string;
    /**
     * @generated from protobuf field: optional bool is_editor = 8;
     */
    isEditor?: boolean;
    /**
     * @generated from protobuf field: optional string checksum_client_version = 861;
     */
    checksumClientVersion?: string;
    /**
     * @generated from protobuf field: optional bytes security_cmd_reply = 1995;
     */
    securityCmdReply?: Uint8Array;
    /**
     * @generated from protobuf field: optional string security_library_version = 1213;
     */
    securityLibraryVersion?: string;
    /**
     * @generated from protobuf field: optional string birthday = 1652;
     */
    birthday?: string;
    /**
     * @generated from protobuf field: optional string device_uuid = 4;
     */
    deviceUuid?: string;
    /**
     * @generated from protobuf field: optional uint32 client_token = 1546;
     */
    clientToken?: number;
    /**
     * @generated from protobuf field: optional uint32 sub_channel_id = 23;
     */
    subChannelId?: number;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 11;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional string device_info = 1;
     */
    deviceInfo?: string;
    /**
     * @generated from protobuf field: optional string client_verison_hash = 1707;
     */
    clientVerisonHash?: string;
    /**
     * @generated from protobuf field: optional string checksum = 1532;
     */
    checksum?: string;
    /**
     * @generated from protobuf field: optional uint32 platform_type = 14;
     */
    platformType?: number;
    /**
     * @generated from protobuf field: optional uint32 target_home_owner_uid = 1864;
     */
    targetHomeOwnerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 cloud_client_ip = 1335;
     */
    cloudClientIp?: number;
    /**
     * @generated from protobuf field: optional uint32 gm_uid = 612;
     */
    gmUid?: number;
    /**
     * @generated from protobuf field: optional string system_version = 10;
     */
    systemVersion?: string;
    /**
     * @generated from protobuf field: optional string platform = 7;
     */
    platform?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLoginReq.CmdId
 */
export enum PlayerLoginReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 112;
     */
    CMD_ID = 112,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ShortAbilityHashPair
 */
export interface ShortAbilityHashPair {
    /**
     * @generated from protobuf field: optional sfixed32 ability_config_hash = 15;
     */
    abilityConfigHash?: number;
    /**
     * @generated from protobuf field: optional sfixed32 ability_name_hash = 1;
     */
    abilityNameHash?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLoginRsp
 */
export interface PlayerLoginRsp {
    /**
     * @generated from protobuf field: optional uint32 client_data_version = 1;
     */
    clientDataVersion?: number;
    /**
     * @generated from protobuf field: optional bool is_sc_open = 1429;
     */
    isScOpen?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.BlockInfo> block_info_map = 571;
     */
    blockInfoMap: {
        [key: number]: BlockInfo;
    };
    /**
     * @generated from protobuf field: optional bool is_audit = 1685;
     */
    isAudit?: boolean;
    /**
     * @generated from protobuf field: optional bool is_transfer = 2018;
     */
    isTransfer?: boolean;
    /**
     * @generated from protobuf field: optional string client_silence_md5 = 1746;
     */
    clientSilenceMd5?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ResVersionConfig next_res_version_config = 1573;
     */
    nextResVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: optional uint32 client_silence_data_version = 6;
     */
    clientSilenceDataVersion?: number;
    /**
     * @generated from protobuf field: optional uint64 login_rand = 4;
     */
    loginRand?: bigint;
    /**
     * @generated from protobuf field: optional bool is_new_player = 8;
     */
    isNewPlayer?: boolean;
    /**
     * @generated from protobuf field: optional string client_version_suffix = 1047;
     */
    clientVersionSuffix?: string;
    /**
     * @generated from protobuf field: optional string game_biz = 5;
     */
    gameBiz?: string;
    /**
     * @generated from protobuf field: optional string next_resource_url = 621;
     */
    nextResourceUrl?: string;
    /**
     * @generated from protobuf field: optional bool is_relogin = 10;
     */
    isRelogin?: boolean;
    /**
     * @generated from protobuf field: optional double total_tick_time = 125;
     */
    totalTickTime?: number;
    /**
     * @generated from protobuf field: optional bool is_enable_client_hash_debug = 932;
     */
    isEnableClientHashDebug?: boolean;
    /**
     * @generated from protobuf field: optional bytes sc_info = 2024;
     */
    scInfo?: Uint8Array;
    /**
     * @generated from protobuf field: optional int32 ability_hash_code = 12;
     */
    abilityHashCode?: number;
    /**
     * @generated from protobuf field: optional string register_cps = 2040;
     */
    registerCps?: string;
    /**
     * @generated from protobuf field: optional bool is_login_rsp_split = 1649;
     */
    isLoginRspSplit?: boolean;
    /**
     * @generated from protobuf field: optional bool is_use_ability_hash = 2;
     */
    isUseAbilityHash?: boolean;
    /**
     * @generated from protobuf field: map<string, int32> ability_hash_map = 11;
     */
    abilityHashMap: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: repeated com.midnights.game.ShortAbilityHashPair short_ability_hash_map = 250;
     */
    shortAbilityHashMap: ShortAbilityHashPair[];
    /**
     * @generated from protobuf field: optional string client_md5 = 1830;
     */
    clientMd5?: string;
    /**
     * @generated from protobuf field: optional string country_code = 1900;
     */
    countryCode?: string;
    /**
     * @generated from protobuf field: optional bool is_data_need_relogin = 951;
     */
    isDataNeedRelogin?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.ResVersionConfig res_version_config = 1969;
     */
    resVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: repeated com.midnights.game.FeatureBlockInfo feature_block_info_list = 1352;
     */
    featureBlockInfoList: FeatureBlockInfo[];
    /**
     * @generated from protobuf field: optional string birthday = 624;
     */
    birthday?: string;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 14;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional bytes player_data = 13;
     */
    playerData?: Uint8Array;
    /**
     * @generated from protobuf field: optional string client_silence_version_suffix = 1299;
     */
    clientSilenceVersionSuffix?: string;
    /**
     * @generated from protobuf field: optional uint32 target_home_owner_uid = 553;
     */
    targetHomeOwnerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 player_data_version = 7;
     */
    playerDataVersion?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLoginRsp.CmdId
 */
export enum PlayerLoginRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 135;
     */
    CMD_ID = 135,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLogoutReq
 */
export interface PlayerLogoutReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerLogoutReq.Reason reason = 6;
     */
    reason?: PlayerLogoutReq_Reason;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLogoutReq.Reason
 */
export enum PlayerLogoutReq_Reason {
    /**
     * @generated from protobuf enum value: DISCONNECT = 0;
     */
    DISCONNECT = 0,
    /**
     * @generated from protobuf enum value: CLIENT_REQ = 1;
     */
    CLIENT_REQ = 1,
    /**
     * @generated from protobuf enum value: TIMEOUT = 2;
     */
    TIMEOUT = 2,
    /**
     * @generated from protobuf enum value: ADMIN_REQ = 3;
     */
    ADMIN_REQ = 3,
    /**
     * @generated from protobuf enum value: SERVER_CLOSE = 4;
     */
    SERVER_CLOSE = 4,
    /**
     * @generated from protobuf enum value: GM_CLEAR = 5;
     */
    GM_CLEAR = 5,
    /**
     * @generated from protobuf enum value: PLAYER_TRANSFER = 6;
     */
    PLAYER_TRANSFER = 6,
    /**
     * @generated from protobuf enum value: CLIENT_CHECKSUM_INVALID = 7;
     */
    CLIENT_CHECKSUM_INVALID = 7
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLogoutReq.CmdId
 */
export enum PlayerLogoutReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 107;
     */
    CMD_ID = 107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLogoutRsp
 */
export interface PlayerLogoutRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLogoutRsp.CmdId
 */
export enum PlayerLogoutRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 121;
     */
    CMD_ID = 121,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLogoutNotify
 */
export interface PlayerLogoutNotify {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLogoutNotify.CmdId
 */
export enum PlayerLogoutNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 103;
     */
    CMD_ID = 103
}
/**
 * @generated from protobuf message com.midnights.game.PlayerDataNotify
 */
export interface PlayerDataNotify {
    /**
     * @generated from protobuf field: optional uint64 server_time = 7;
     */
    serverTime?: bigint;
    /**
     * @generated from protobuf field: optional string nick_name = 8;
     */
    nickName?: string;
    /**
     * @generated from protobuf field: optional bool is_first_login_today = 12;
     */
    isFirstLoginToday?: boolean;
    /**
     * @generated from protobuf field: optional uint32 region_id = 6;
     */
    regionId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.PropValue> prop_map = 15;
     */
    propMap: {
        [key: number]: PropValue;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerDataNotify.CmdId
 */
export enum PlayerDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 190;
     */
    CMD_ID = 190,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeGameTimeReq
 */
export interface ChangeGameTimeReq {
    /**
     * @generated from protobuf field: optional uint32 game_time = 6;
     */
    gameTime?: number;
    /**
     * @generated from protobuf field: optional bool is_force_set = 11;
     */
    isForceSet?: boolean;
    /**
     * @generated from protobuf field: optional uint32 extra_days = 12;
     */
    extraDays?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeGameTimeReq.CmdId
 */
export enum ChangeGameTimeReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 173;
     */
    CMD_ID = 173,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ChangeGameTimeRsp
 */
export interface ChangeGameTimeRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 extra_days = 5;
     */
    extraDays?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_game_time = 14;
     */
    curGameTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ChangeGameTimeRsp.CmdId
 */
export enum ChangeGameTimeRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 199;
     */
    CMD_ID = 199,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGameTimeNotify
 */
export interface PlayerGameTimeNotify {
    /**
     * @generated from protobuf field: optional uint32 uid = 7;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 game_time = 3;
     */
    gameTime?: number;
    /**
     * @generated from protobuf field: optional bool is_home = 13;
     */
    isHome?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGameTimeNotify.CmdId
 */
export enum PlayerGameTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 131;
     */
    CMD_ID = 131,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerPropNotify
 */
export interface PlayerPropNotify {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.PropValue> prop_map = 13;
     */
    propMap: {
        [key: number]: PropValue;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerPropNotify.CmdId
 */
export enum PlayerPropNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 175;
     */
    CMD_ID = 175,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientTriggerEventNotify
 */
export interface ClientTriggerEventNotify {
    /**
     * @generated from protobuf field: optional uint32 force_id = 3;
     */
    forceId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.EventTriggerType event_type = 2;
     */
    eventType?: EventTriggerType;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientTriggerEventNotify.CmdId
 */
export enum ClientTriggerEventNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 148;
     */
    CMD_ID = 148,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerPropReq
 */
export interface SetPlayerPropReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.PropValue prop_list = 7;
     */
    propList: PropValue[];
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerPropReq.CmdId
 */
export enum SetPlayerPropReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 197;
     */
    CMD_ID = 197,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerPropRsp
 */
export interface SetPlayerPropRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerPropRsp.CmdId
 */
export enum SetPlayerPropRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 181;
     */
    CMD_ID = 181,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerBornDataReq
 */
export interface SetPlayerBornDataReq {
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 2;
     */
    avatarId?: number;
    /**
     * @generated from protobuf field: optional string nick_name = 13;
     */
    nickName?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerBornDataReq.CmdId
 */
export enum SetPlayerBornDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 105;
     */
    CMD_ID = 105,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerBornDataRsp
 */
export interface SetPlayerBornDataRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerBornDataRsp.CmdId
 */
export enum SetPlayerBornDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 182;
     */
    CMD_ID = 182,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DoSetPlayerBornDataNotify
 */
export interface DoSetPlayerBornDataNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.DoSetPlayerBornDataNotify.CmdId
 */
export enum DoSetPlayerBornDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 147;
     */
    CMD_ID = 147,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerPropChangeNotify
 */
export interface PlayerPropChangeNotify {
    /**
     * @generated from protobuf field: optional uint32 prop_delta = 13;
     */
    propDelta?: number;
    /**
     * @generated from protobuf field: optional uint32 prop_type = 12;
     */
    propType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerPropChangeNotify.CmdId
 */
export enum PlayerPropChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 139;
     */
    CMD_ID = 139,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerNameReq
 */
export interface SetPlayerNameReq {
    /**
     * @generated from protobuf field: optional string nick_name = 1;
     */
    nickName?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerNameReq.CmdId
 */
export enum SetPlayerNameReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 153;
     */
    CMD_ID = 153,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetPlayerNameRsp
 */
export interface SetPlayerNameRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 9;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional string nick_name = 14;
     */
    nickName?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.SetPlayerNameRsp.CmdId
 */
export enum SetPlayerNameRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 122;
     */
    CMD_ID = 122,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetOpenStateReq
 */
export interface SetOpenStateReq {
    /**
     * @generated from protobuf field: optional uint32 key = 12;
     */
    key?: number;
    /**
     * @generated from protobuf field: optional uint32 value = 5;
     */
    value?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetOpenStateReq.CmdId
 */
export enum SetOpenStateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 165;
     */
    CMD_ID = 165,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SetOpenStateRsp
 */
export interface SetOpenStateRsp {
    /**
     * @generated from protobuf field: optional uint32 key = 9;
     */
    key?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 value = 15;
     */
    value?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.SetOpenStateRsp.CmdId
 */
export enum SetOpenStateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 104;
     */
    CMD_ID = 104,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OpenStateUpdateNotify
 */
export interface OpenStateUpdateNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> open_state_map = 6;
     */
    openStateMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.OpenStateUpdateNotify.CmdId
 */
export enum OpenStateUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 193;
     */
    CMD_ID = 193,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.OpenStateChangeNotify
 */
export interface OpenStateChangeNotify {
    /**
     * @generated from protobuf field: map<uint32, uint32> open_state_map = 4;
     */
    openStateMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.OpenStateChangeNotify.CmdId
 */
export enum OpenStateChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 127;
     */
    CMD_ID = 127,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCookReq
 */
export interface PlayerCookReq {
    /**
     * @generated from protobuf field: optional uint32 cook_count = 1;
     */
    cookCount?: number;
    /**
     * @generated from protobuf field: optional uint32 qte_quality = 12;
     */
    qteQuality?: number;
    /**
     * @generated from protobuf field: optional uint32 recipe_id = 8;
     */
    recipeId?: number;
    /**
     * @generated from protobuf field: optional uint32 assist_avatar = 14;
     */
    assistAvatar?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCookReq.CmdId
 */
export enum PlayerCookReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 194;
     */
    CMD_ID = 194,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCookRsp
 */
export interface PlayerCookRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam extral_item_list = 15;
     */
    extralItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 cook_count = 12;
     */
    cookCount?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 11;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 qte_quality = 5;
     */
    qteQuality?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.CookRecipeData recipe_data = 7;
     */
    recipeData?: CookRecipeData;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCookRsp.CmdId
 */
export enum PlayerCookRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 188;
     */
    CMD_ID = 188,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerRandomCookReq
 */
export interface PlayerRandomCookReq {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam material_list = 13;
     */
    materialList: ItemParam[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerRandomCookReq.CmdId
 */
export enum PlayerRandomCookReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 126;
     */
    CMD_ID = 126,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerRandomCookRsp
 */
export interface PlayerRandomCookRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerRandomCookRsp.CmdId
 */
export enum PlayerRandomCookRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 163;
     */
    CMD_ID = 163,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CookRecipeData
 */
export interface CookRecipeData {
    /**
     * @generated from protobuf field: optional uint32 proficiency = 13;
     */
    proficiency?: number;
    /**
     * @generated from protobuf field: optional uint32 recipe_id = 9;
     */
    recipeId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.CookDataNotify
 */
export interface CookDataNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.CookRecipeData recipe_data_list = 2;
     */
    recipeDataList: CookRecipeData[];
    /**
     * @generated from protobuf field: optional uint32 grade = 11;
     */
    grade?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CookDataNotify.CmdId
 */
export enum CookDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 195;
     */
    CMD_ID = 195,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CookRecipeDataNotify
 */
export interface CookRecipeDataNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.CookRecipeData recipe_data = 4;
     */
    recipeData?: CookRecipeData;
}
/**
 * @generated from protobuf enum com.midnights.game.CookRecipeDataNotify.CmdId
 */
export enum CookRecipeDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 106;
     */
    CMD_ID = 106,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CookGradeDataNotify
 */
export interface CookGradeDataNotify {
    /**
     * @generated from protobuf field: optional uint32 grade = 12;
     */
    grade?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CookGradeDataNotify.CmdId
 */
export enum CookGradeDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 134;
     */
    CMD_ID = 134,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCompoundMaterialReq
 */
export interface PlayerCompoundMaterialReq {
    /**
     * @generated from protobuf field: optional uint32 count = 11;
     */
    count?: number;
    /**
     * @generated from protobuf field: optional uint32 compound_id = 3;
     */
    compoundId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCompoundMaterialReq.CmdId
 */
export enum PlayerCompoundMaterialReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 150;
     */
    CMD_ID = 150,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CompoundQueueData
 */
export interface CompoundQueueData {
    /**
     * @generated from protobuf field: optional uint32 output_count = 1;
     */
    outputCount?: number;
    /**
     * @generated from protobuf field: optional uint32 compound_id = 4;
     */
    compoundId?: number;
    /**
     * @generated from protobuf field: optional uint32 output_time = 14;
     */
    outputTime?: number;
    /**
     * @generated from protobuf field: optional uint32 wait_count = 8;
     */
    waitCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCompoundMaterialRsp
 */
export interface PlayerCompoundMaterialRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.CompoundQueueData compound_que_data = 5;
     */
    compoundQueData?: CompoundQueueData;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCompoundMaterialRsp.CmdId
 */
export enum PlayerCompoundMaterialRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 143;
     */
    CMD_ID = 143,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCompoundOutputReq
 */
export interface TakeCompoundOutputReq {
    /**
     * @generated from protobuf field: optional uint32 compound_group_id = 3;
     */
    compoundGroupId?: number;
    /**
     * @generated from protobuf field: optional uint32 compound_id = 10;
     */
    compoundId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCompoundOutputReq.CmdId
 */
export enum TakeCompoundOutputReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 174;
     */
    CMD_ID = 174,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeCompoundOutputRsp
 */
export interface TakeCompoundOutputRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_list = 6;
     */
    itemList: ItemParam[];
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeCompoundOutputRsp.CmdId
 */
export enum TakeCompoundOutputRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 176;
     */
    CMD_ID = 176,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CompoundDataNotify
 */
export interface CompoundDataNotify {
    /**
     * @generated from protobuf field: repeated uint32 unlock_compound_list = 1;
     */
    unlockCompoundList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.CompoundQueueData compound_que_data_list = 9;
     */
    compoundQueDataList: CompoundQueueData[];
}
/**
 * @generated from protobuf enum com.midnights.game.CompoundDataNotify.CmdId
 */
export enum CompoundDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 146;
     */
    CMD_ID = 146,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCompoundDataReq
 */
export interface GetCompoundDataReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetCompoundDataReq.CmdId
 */
export enum GetCompoundDataReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 141;
     */
    CMD_ID = 141,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetCompoundDataRsp
 */
export interface GetCompoundDataRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 unlock_compound_list = 11;
     */
    unlockCompoundList: number[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.CompoundQueueData compound_que_data_list = 7;
     */
    compoundQueDataList: CompoundQueueData[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetCompoundDataRsp.CmdId
 */
export enum GetCompoundDataRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 149;
     */
    CMD_ID = 149,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerTimeNotify
 */
export interface PlayerTimeNotify {
    /**
     * @generated from protobuf field: optional uint64 server_time = 5;
     */
    serverTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 player_time = 11;
     */
    playerTime?: bigint;
    /**
     * @generated from protobuf field: optional bool is_paused = 14;
     */
    isPaused?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerTimeNotify.CmdId
 */
export enum PlayerTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 191;
     */
    CMD_ID = 191,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetPauseReq
 */
export interface PlayerSetPauseReq {
    /**
     * @generated from protobuf field: optional bool is_paused = 1;
     */
    isPaused?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetPauseReq.CmdId
 */
export enum PlayerSetPauseReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 124;
     */
    CMD_ID = 124,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetPauseRsp
 */
export interface PlayerSetPauseRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetPauseRsp.CmdId
 */
export enum PlayerSetPauseRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 156;
     */
    CMD_ID = 156,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetLanguageReq
 */
export interface PlayerSetLanguageReq {
    /**
     * @generated from protobuf field: optional uint32 language_type = 5;
     */
    languageType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetLanguageReq.CmdId
 */
export enum PlayerSetLanguageReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 142;
     */
    CMD_ID = 142,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetLanguageRsp
 */
export interface PlayerSetLanguageRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetLanguageRsp.CmdId
 */
export enum PlayerSetLanguageRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 130;
     */
    CMD_ID = 130,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DataResVersionNotify
 */
export interface DataResVersionNotify {
    /**
     * @generated from protobuf field: optional string client_silence_md5 = 10;
     */
    clientSilenceMd5?: string;
    /**
     * @generated from protobuf field: optional string client_silence_version_suffix = 15;
     */
    clientSilenceVersionSuffix?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ResVersionConfig res_version_config = 9;
     */
    resVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: optional bool is_data_need_relogin = 7;
     */
    isDataNeedRelogin?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.DataResVersionNotify.DataResVersionOpType op_type = 12;
     */
    opType?: DataResVersionNotify_DataResVersionOpType;
    /**
     * @generated from protobuf field: optional uint32 client_data_version = 2;
     */
    clientDataVersion?: number;
    /**
     * @generated from protobuf field: optional string client_version_suffix = 5;
     */
    clientVersionSuffix?: string;
    /**
     * @generated from protobuf field: optional uint32 client_silence_data_version = 1;
     */
    clientSilenceDataVersion?: number;
    /**
     * @generated from protobuf field: optional string client_md5 = 14;
     */
    clientMd5?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.DataResVersionNotify.DataResVersionOpType
 */
export enum DataResVersionNotify_DataResVersionOpType {
    /**
     * @generated from protobuf enum value: OP_TYPE_NONE = 0;
     */
    OP_TYPE_NONE = 0,
    /**
     * @generated from protobuf enum value: OP_TYPE_RELOGIN = 1;
     */
    OP_TYPE_RELOGIN = 1,
    /**
     * @generated from protobuf enum value: OP_TYPE_MP_RELOGIN = 2;
     */
    OP_TYPE_MP_RELOGIN = 2
}
/**
 * @generated from protobuf enum com.midnights.game.DataResVersionNotify.CmdId
 */
export enum DataResVersionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 167;
     */
    CMD_ID = 167,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskInfo
 */
export interface DailyTaskInfo {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 3;
     */
    rewardId?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 13;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 finish_progress = 10;
     */
    finishProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 daily_task_id = 4;
     */
    dailyTaskId?: number;
    /**
     * @generated from protobuf field: optional bool is_finished = 14;
     */
    isFinished?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskDataNotify
 */
export interface DailyTaskDataNotify {
    /**
     * @generated from protobuf field: optional uint32 score_reward_id = 11;
     */
    scoreRewardId?: number;
    /**
     * @generated from protobuf field: optional uint32 finished_num = 4;
     */
    finishedNum?: number;
    /**
     * @generated from protobuf field: optional bool is_taken_score_reward = 9;
     */
    isTakenScoreReward?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskDataNotify.CmdId
 */
export enum DailyTaskDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 158;
     */
    CMD_ID = 158,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskProgressNotify
 */
export interface DailyTaskProgressNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.DailyTaskInfo info = 12;
     */
    info?: DailyTaskInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskProgressNotify.CmdId
 */
export enum DailyTaskProgressNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 170;
     */
    CMD_ID = 170,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskScoreRewardNotify
 */
export interface DailyTaskScoreRewardNotify {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 14;
     */
    rewardId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskScoreRewardNotify.CmdId
 */
export enum DailyTaskScoreRewardNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 117;
     */
    CMD_ID = 117,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WorldOwnerDailyTaskNotify
 */
export interface WorldOwnerDailyTaskNotify {
    /**
     * @generated from protobuf field: optional uint32 filter_city_id = 2;
     */
    filterCityId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DailyTaskInfo task_list = 1;
     */
    taskList: DailyTaskInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.WorldOwnerDailyTaskNotify.CmdId
 */
export enum WorldOwnerDailyTaskNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 102;
     */
    CMD_ID = 102,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AddRandTaskInfoNotify
 */
export interface AddRandTaskInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 rand_task_id = 5;
     */
    randTaskId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector pos = 13;
     */
    pos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.AddRandTaskInfoNotify.CmdId
 */
export enum AddRandTaskInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 119;
     */
    CMD_ID = 119,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.RemoveRandTaskInfoNotify
 */
export interface RemoveRandTaskInfoNotify {
    /**
     * @generated from protobuf field: optional bool is_succ = 9;
     */
    isSucc?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.RemoveRandTaskInfoNotify.FinishReason reason = 10;
     */
    reason?: RemoveRandTaskInfoNotify_FinishReason;
    /**
     * @generated from protobuf field: optional uint32 rand_task_id = 13;
     */
    randTaskId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.RemoveRandTaskInfoNotify.FinishReason
 */
export enum RemoveRandTaskInfoNotify_FinishReason {
    /**
     * @generated from protobuf enum value: DEFAULT = 0;
     */
    DEFAULT = 0,
    /**
     * @generated from protobuf enum value: CLEAR = 1;
     */
    CLEAR = 1,
    /**
     * @generated from protobuf enum value: DISTANCE = 2;
     */
    DISTANCE = 2,
    /**
     * @generated from protobuf enum value: FINISH = 3;
     */
    FINISH = 3
}
/**
 * @generated from protobuf enum com.midnights.game.RemoveRandTaskInfoNotify.CmdId
 */
export enum RemoveRandTaskInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 161;
     */
    CMD_ID = 161,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakePlayerLevelRewardReq
 */
export interface TakePlayerLevelRewardReq {
    /**
     * @generated from protobuf field: optional uint32 level = 3;
     */
    level?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakePlayerLevelRewardReq.CmdId
 */
export enum TakePlayerLevelRewardReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 129;
     */
    CMD_ID = 129,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakePlayerLevelRewardRsp
 */
export interface TakePlayerLevelRewardRsp {
    /**
     * @generated from protobuf field: optional uint32 reward_id = 9;
     */
    rewardId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 level = 6;
     */
    level?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakePlayerLevelRewardRsp.CmdId
 */
export enum TakePlayerLevelRewardRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 157;
     */
    CMD_ID = 157,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLevelRewardUpdateNotify
 */
export interface PlayerLevelRewardUpdateNotify {
    /**
     * @generated from protobuf field: repeated uint32 level_list = 9;
     */
    levelList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLevelRewardUpdateNotify.CmdId
 */
export enum PlayerLevelRewardUpdateNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 200;
     */
    CMD_ID = 200,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GivingRecord
 */
export interface GivingRecord {
    /**
     * @generated from protobuf field: optional bool is_finished = 9;
     */
    isFinished?: boolean;
    /**
     * @generated from protobuf field: optional uint32 group_id = 5;
     */
    groupId?: number;
    /**
     * @generated from protobuf field: optional bool is_gadget_giving = 8;
     */
    isGadgetGiving?: boolean;
    /**
     * @generated from protobuf field: optional uint32 giving_id = 3;
     */
    givingId?: number;
    /**
     * @generated from protobuf field: optional uint32 last_group_id = 6;
     */
    lastGroupId?: number;
    /**
     * @generated from protobuf field: optional uint32 config_id = 2;
     */
    configId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> material_cnt_map = 15;
     */
    materialCntMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.GivingRecordNotify
 */
export interface GivingRecordNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GivingRecord giving_record_list = 14;
     */
    givingRecordList: GivingRecord[];
}
/**
 * @generated from protobuf enum com.midnights.game.GivingRecordNotify.CmdId
 */
export enum GivingRecordNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 116;
     */
    CMD_ID = 116,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GivingRecordChangeNotify
 */
export interface GivingRecordChangeNotify {
    /**
     * @generated from protobuf field: optional bool is_deactive = 11;
     */
    isDeactive?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.GivingRecord giving_record = 15;
     */
    givingRecord?: GivingRecord;
}
/**
 * @generated from protobuf enum com.midnights.game.GivingRecordChangeNotify.CmdId
 */
export enum GivingRecordChangeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 187;
     */
    CMD_ID = 187,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ItemGivingReq
 */
export interface ItemGivingReq {
    /**
     * @generated from protobuf field: map<uint64, uint32> item_guid_count_map = 15;
     */
    itemGuidCountMap: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 giving_id = 13;
     */
    givingId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam item_param_list = 4;
     */
    itemParamList: ItemParam[];
    /**
     * @generated from protobuf field: optional com.midnights.game.ItemGivingReq.ItemGivingType item_giving_type = 2;
     */
    itemGivingType?: ItemGivingReq_ItemGivingType;
}
/**
 * @generated from protobuf enum com.midnights.game.ItemGivingReq.ItemGivingType
 */
export enum ItemGivingReq_ItemGivingType {
    /**
     * @generated from protobuf enum value: QUEST = 0;
     */
    QUEST = 0,
    /**
     * @generated from protobuf enum value: GADGET = 1;
     */
    GADGET = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ItemGivingReq.CmdId
 */
export enum ItemGivingReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 140;
     */
    CMD_ID = 140,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ItemGivingRsp
 */
export interface ItemGivingRsp {
    /**
     * @generated from protobuf field: optional uint32 giving_group_id = 1;
     */
    givingGroupId?: number;
    /**
     * @generated from protobuf field: optional uint32 giving_id = 13;
     */
    givingId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ItemGivingRsp.CmdId
 */
export enum ItemGivingRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 118;
     */
    CMD_ID = 118,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCookArgsReq
 */
export interface PlayerCookArgsReq {
    /**
     * @generated from protobuf field: optional uint32 assist_avatar = 10;
     */
    assistAvatar?: number;
    /**
     * @generated from protobuf field: optional uint32 recipe_id = 11;
     */
    recipeId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCookArgsReq.CmdId
 */
export enum PlayerCookArgsReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 166;
     */
    CMD_ID = 166,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCookArgsRsp
 */
export interface PlayerCookArgsRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional float qte_range_ratio = 12;
     */
    qteRangeRatio?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCookArgsRsp.CmdId
 */
export enum PlayerCookArgsRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 168;
     */
    CMD_ID = 168,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerLuaShellNotify
 */
export interface PlayerLuaShellNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.LuaShellType shell_type = 7;
     */
    shellType?: LuaShellType;
    /**
     * @generated from protobuf field: optional uint32 id = 5;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional bytes lua_shell = 12;
     */
    luaShell?: Uint8Array;
    /**
     * @generated from protobuf field: optional uint32 use_type = 10;
     */
    useType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerLuaShellNotify.CmdId
 */
export enum PlayerLuaShellNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 133;
     */
    CMD_ID = 133,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerDisconnectClientNotify
 */
export interface ServerDisconnectClientNotify {
    /**
     * @generated from protobuf field: optional uint32 data = 10;
     */
    data?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerDisconnectClientNotify.CmdId
 */
export enum ServerDisconnectClientNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 184;
     */
    CMD_ID = 184,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AntiAddictNotify
 */
export interface AntiAddictNotify {
    /**
     * @generated from protobuf field: optional int32 msg_type = 6;
     */
    msgType?: number;
    /**
     * @generated from protobuf field: optional string msg = 3;
     */
    msg?: string;
    /**
     * @generated from protobuf field: optional string level = 5;
     */
    level?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.AntiAddictNotify.CmdId
 */
export enum AntiAddictNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 180;
     */
    CMD_ID = 180,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerForceExitReq
 */
export interface PlayerForceExitReq {
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerForceExitReq.CmdId
 */
export enum PlayerForceExitReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 189;
     */
    CMD_ID = 189,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerForceExitRsp
 */
export interface PlayerForceExitRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerForceExitRsp.CmdId
 */
export enum PlayerForceExitRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 159;
     */
    CMD_ID = 159,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerInjectFixNotify
 */
export interface PlayerInjectFixNotify {
    /**
     * @generated from protobuf field: optional uint32 id = 13;
     */
    id?: number;
    /**
     * @generated from protobuf field: optional bytes inject_fix = 10;
     */
    injectFix?: Uint8Array;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerInjectFixNotify.CmdId
 */
export enum PlayerInjectFixNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 132;
     */
    CMD_ID = 132,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TaskVar
 */
export interface TaskVar {
    /**
     * @generated from protobuf field: optional uint32 key = 8;
     */
    key?: number;
    /**
     * @generated from protobuf field: repeated int32 value_list = 6;
     */
    valueList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.TaskVarNotify
 */
export interface TaskVarNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.TaskVar task_var_list = 7;
     */
    taskVarList: TaskVar[];
}
/**
 * @generated from protobuf enum com.midnights.game.TaskVarNotify.CmdId
 */
export enum TaskVarNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 160;
     */
    CMD_ID = 160,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ClientLockGameTimeNotify
 */
export interface ClientLockGameTimeNotify {
    /**
     * @generated from protobuf field: optional bool is_lock = 5;
     */
    isLock?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ClientLockGameTimeNotify.CmdId
 */
export enum ClientLockGameTimeNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 114;
     */
    CMD_ID = 114,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetNextResourceInfoReq
 */
export interface GetNextResourceInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetNextResourceInfoReq.CmdId
 */
export enum GetNextResourceInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 192;
     */
    CMD_ID = 192,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetNextResourceInfoRsp
 */
export interface GetNextResourceInfoRsp {
    /**
     * @generated from protobuf field: optional string next_resource_url = 14;
     */
    nextResourceUrl?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.ResVersionConfig next_res_version_config = 2;
     */
    nextResVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetNextResourceInfoRsp.CmdId
 */
export enum GetNextResourceInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 120;
     */
    CMD_ID = 120,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.AdjustWorldLevelReq
 */
export interface AdjustWorldLevelReq {
    /**
     * @generated from protobuf field: optional uint32 expect_world_level = 8;
     */
    expectWorldLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_world_level = 9;
     */
    curWorldLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AdjustWorldLevelReq.CmdId
 */
export enum AdjustWorldLevelReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 164;
     */
    CMD_ID = 164,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.AdjustWorldLevelRsp
 */
export interface AdjustWorldLevelRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 13;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 cd_over_time = 15;
     */
    cdOverTime?: number;
    /**
     * @generated from protobuf field: optional uint32 after_world_level = 14;
     */
    afterWorldLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.AdjustWorldLevelRsp.CmdId
 */
export enum AdjustWorldLevelRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 138;
     */
    CMD_ID = 138,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskFilterCityReq
 */
export interface DailyTaskFilterCityReq {
    /**
     * @generated from protobuf field: optional uint32 city_id = 8;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskFilterCityReq.CmdId
 */
export enum DailyTaskFilterCityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 111;
     */
    CMD_ID = 111,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskFilterCityRsp
 */
export interface DailyTaskFilterCityRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 city_id = 9;
     */
    cityId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskFilterCityRsp.CmdId
 */
export enum DailyTaskFilterCityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 144;
     */
    CMD_ID = 144,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.DailyTaskUnlockedCitiesNotify
 */
export interface DailyTaskUnlockedCitiesNotify {
    /**
     * @generated from protobuf field: repeated uint32 unlocked_city_list = 12;
     */
    unlockedCityList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.DailyTaskUnlockedCitiesNotify.CmdId
 */
export enum DailyTaskUnlockedCitiesNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 186;
     */
    CMD_ID = 186,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ExclusiveRuleInfo
 */
export interface ExclusiveRuleInfo {
    /**
     * @generated from protobuf field: repeated uint32 object_id_list = 1;
     */
    objectIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 rule_type = 10;
     */
    ruleType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ExclusiveRuleNotify
 */
export interface ExclusiveRuleNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExclusiveRuleInfo rule_info_list = 5;
     */
    ruleInfoList: ExclusiveRuleInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ExclusiveRuleNotify.CmdId
 */
export enum ExclusiveRuleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 101;
     */
    CMD_ID = 101,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CompoundUnlockNotify
 */
export interface CompoundUnlockNotify {
    /**
     * @generated from protobuf field: optional uint32 compound_id = 3;
     */
    compoundId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CompoundUnlockNotify.CmdId
 */
export enum CompoundUnlockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 128;
     */
    CMD_ID = 128,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationSkillRequest
 */
export interface GameplayRecommendationSkillRequest {
    /**
     * @generated from protobuf field: optional uint32 skill_depot_id = 1;
     */
    skillDepotId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationReliquaryRequest
 */
export interface GameplayRecommendationReliquaryRequest {
    /**
     * @generated from protobuf field: optional uint32 equip_type = 6;
     */
    equipType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationElementReliquaryRequest
 */
export interface GameplayRecommendationElementReliquaryRequest {
    /**
     * @generated from protobuf field: optional uint32 equip_type = 9;
     */
    equipType?: number;
    /**
     * @generated from protobuf field: optional uint32 element_type = 12;
     */
    elementType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetGameplayRecommendationReq
 */
export interface GetGameplayRecommendationReq {
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 9;
     */
    avatarId?: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "skillRequest";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationSkillRequest skill_request = 553;
         */
        skillRequest: GameplayRecommendationSkillRequest;
    } | {
        oneofKind: "reliquaryRequest";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationReliquaryRequest reliquary_request = 1993;
         */
        reliquaryRequest: GameplayRecommendationReliquaryRequest;
    } | {
        oneofKind: "elementReliquaryRequest";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationElementReliquaryRequest element_reliquary_request = 1489;
         */
        elementReliquaryRequest: GameplayRecommendationElementReliquaryRequest;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GetGameplayRecommendationReq.CmdId
 */
export enum GetGameplayRecommendationReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 151;
     */
    CMD_ID = 151,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationSkillResponse
 */
export interface GameplayRecommendationSkillResponse {
    /**
     * @generated from protobuf field: optional uint32 skill_depot_id = 13;
     */
    skillDepotId?: number;
    /**
     * @generated from protobuf field: repeated uint32 skill_id_list = 9;
     */
    skillIdList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationReliquaryMainPropData
 */
export interface GameplayRecommendationReliquaryMainPropData {
    /**
     * @generated from protobuf field: optional uint32 permillage = 1;
     */
    permillage?: number;
    /**
     * @generated from protobuf field: optional uint32 main_prop_id = 12;
     */
    mainPropId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationReliquaryResponse
 */
export interface GameplayRecommendationReliquaryResponse {
    /**
     * @generated from protobuf field: repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list = 8;
     */
    mainPropDataList: GameplayRecommendationReliquaryMainPropData[];
    /**
     * @generated from protobuf field: optional uint32 equip_type = 3;
     */
    equipType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GameplayRecommendationElementReliquaryResponse
 */
export interface GameplayRecommendationElementReliquaryResponse {
    /**
     * @generated from protobuf field: optional uint32 element_type = 11;
     */
    elementType?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list = 5;
     */
    mainPropDataList: GameplayRecommendationReliquaryMainPropData[];
    /**
     * @generated from protobuf field: optional uint32 equip_type = 15;
     */
    equipType?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetGameplayRecommendationRsp
 */
export interface GetGameplayRecommendationRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 avatar_id = 15;
     */
    avatarId?: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "skillResponse";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationSkillResponse skill_response = 1022;
         */
        skillResponse: GameplayRecommendationSkillResponse;
    } | {
        oneofKind: "reliquaryResponse";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationReliquaryResponse reliquary_response = 196;
         */
        reliquaryResponse: GameplayRecommendationReliquaryResponse;
    } | {
        oneofKind: "elementReliquaryResponse";
        /**
         * @generated from protobuf field: com.midnights.game.GameplayRecommendationElementReliquaryResponse element_reliquary_response = 167;
         */
        elementReliquaryResponse: GameplayRecommendationElementReliquaryResponse;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GetGameplayRecommendationRsp.CmdId
 */
export enum GetGameplayRecommendationRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 123;
     */
    CMD_ID = 123,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeBackGivingItemReq
 */
export interface TakeBackGivingItemReq {
    /**
     * @generated from protobuf field: optional uint32 giving_id = 4;
     */
    givingId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBackGivingItemReq.CmdId
 */
export enum TakeBackGivingItemReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 171;
     */
    CMD_ID = 171,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.TakeBackGivingItemRsp
 */
export interface TakeBackGivingItemRsp {
    /**
     * @generated from protobuf field: optional uint32 giving_id = 10;
     */
    givingId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.TakeBackGivingItemRsp.CmdId
 */
export enum TakeBackGivingItemRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 145;
     */
    CMD_ID = 145,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerNicknameAuditDataNotify
 */
export interface PlayerNicknameAuditDataNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ContentAuditInfo info = 13;
     */
    info?: ContentAuditInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerNicknameAuditDataNotify.CmdId
 */
export enum PlayerNicknameAuditDataNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 108;
     */
    CMD_ID = 108,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerNicknameNotify
 */
export interface PlayerNicknameNotify {
    /**
     * @generated from protobuf field: optional string nickname = 7;
     */
    nickname?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerNicknameNotify.CmdId
 */
export enum PlayerNicknameNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 109;
     */
    CMD_ID = 109,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.NicknameAuditConfigNotify
 */
export interface NicknameAuditConfigNotify {
    /**
     * @generated from protobuf field: optional bool is_open = 8;
     */
    isOpen?: boolean;
    /**
     * @generated from protobuf field: optional uint32 submit_limit = 12;
     */
    submitLimit?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.NicknameAuditConfigNotify.CmdId
 */
export enum NicknameAuditConfigNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 152;
     */
    CMD_ID = 152,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReadNicknameAuditReq
 */
export interface ReadNicknameAuditReq {
}
/**
 * @generated from protobuf enum com.midnights.game.ReadNicknameAuditReq.CmdId
 */
export enum ReadNicknameAuditReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 177;
     */
    CMD_ID = 177,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ReadNicknameAuditRsp
 */
export interface ReadNicknameAuditRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ReadNicknameAuditRsp.CmdId
 */
export enum ReadNicknameAuditRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 137;
     */
    CMD_ID = 137,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCompoundMaterialBoostReq
 */
export interface PlayerCompoundMaterialBoostReq {
    /**
     * @generated from protobuf field: optional bool is_boost_all = 8;
     */
    isBoostAll?: boolean;
    /**
     * @generated from protobuf field: optional uint32 target_compound_group_id = 14;
     */
    targetCompoundGroupId?: number;
    /**
     * @generated from protobuf field: optional uint32 consume_material_id = 9;
     */
    consumeMaterialId?: number;
    /**
     * @generated from protobuf field: optional uint32 consume_material_count = 1;
     */
    consumeMaterialCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCompoundMaterialBoostReq.CmdId
 */
export enum PlayerCompoundMaterialBoostReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 185;
     */
    CMD_ID = 185,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCompoundMaterialBoostRsp
 */
export interface PlayerCompoundMaterialBoostRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam take_item_list = 2;
     */
    takeItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional com.midnights.game.CompoundBoostTakeStatusType take_status = 6;
     */
    takeStatus?: CompoundBoostTakeStatusType;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.CompoundQueueData compound_que_data_list = 1;
     */
    compoundQueDataList: CompoundQueueData[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCompoundMaterialBoostRsp.CmdId
 */
export enum PlayerCompoundMaterialBoostRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 125;
     */
    CMD_ID = 125,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.CompoundBoostTakeStatusType
 */
export enum CompoundBoostTakeStatusType {
    /**
     * @generated from protobuf enum value: COMPOUND_BOOST_TAKE_STATUS_NONE = 0;
     */
    COMPOUND_BOOST_TAKE_STATUS_NONE = 0,
    /**
     * @generated from protobuf enum value: COMPOUND_BOOST_TAKE_STATUS_BOOST_ONLY = 1;
     */
    COMPOUND_BOOST_TAKE_STATUS_BOOST_ONLY = 1,
    /**
     * @generated from protobuf enum value: COMPOUND_BOOST_TAKE_STATUS_BOOST_AND_TAKE = 2;
     */
    COMPOUND_BOOST_TAKE_STATUS_BOOST_AND_TAKE = 2,
    /**
     * @generated from protobuf enum value: COMPOUND_BOOST_TAKE_STATUS_BAG_FULL = 3;
     */
    COMPOUND_BOOST_TAKE_STATUS_BAG_FULL = 3
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerTokenReq$Type extends MessageType<GetPlayerTokenReq> {
    constructor() {
        super("com.midnights.game.GetPlayerTokenReq", [
            { no: 10, name: "account_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 11, name: "account_uid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "psn_region", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "account_ext", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 760, name: "client_rand_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "is_guest", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1718, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "sub_channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "platform_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "client_ip_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "psn_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "account_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 995, name: "minors_reg_min_age", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cloud_client_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1787, name: "key_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerTokenReq>): GetPlayerTokenReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerTokenReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerTokenReq): GetPlayerTokenReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string account_token */ 10:
                    message.accountToken = reader.string();
                    break;
                case /* optional string account_uid */ 11:
                    message.accountUid = reader.string();
                    break;
                case /* optional string psn_region */ 4:
                    message.psnRegion = reader.string();
                    break;
                case /* optional string online_id */ 7:
                    message.onlineId = reader.string();
                    break;
                case /* optional uint32 channel_id */ 15:
                    message.channelId = reader.uint32();
                    break;
                case /* optional string account_ext */ 9:
                    message.accountExt = reader.string();
                    break;
                case /* optional string country_code */ 5:
                    message.countryCode = reader.string();
                    break;
                case /* optional string client_rand_key */ 760:
                    message.clientRandKey = reader.string();
                    break;
                case /* optional bool is_guest */ 6:
                    message.isGuest = reader.bool();
                    break;
                case /* optional string birthday */ 1718:
                    message.birthday = reader.string();
                    break;
                case /* optional uint32 sub_channel_id */ 8:
                    message.subChannelId = reader.uint32();
                    break;
                case /* optional uint32 platform_type */ 12:
                    message.platformType = reader.uint32();
                    break;
                case /* optional string client_ip_str */ 3:
                    message.clientIpStr = reader.string();
                    break;
                case /* optional string psn_id */ 13:
                    message.psnId = reader.string();
                    break;
                case /* optional uint32 account_type */ 1:
                    message.accountType = reader.uint32();
                    break;
                case /* optional uint32 minors_reg_min_age */ 995:
                    message.minorsRegMinAge = reader.uint32();
                    break;
                case /* optional uint32 cloud_client_ip */ 14:
                    message.cloudClientIp = reader.uint32();
                    break;
                case /* optional uint32 key_id */ 1787:
                    message.keyId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 2:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerTokenReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string account_token = 10; */
        if (message.accountToken !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.accountToken);
        /* optional string account_uid = 11; */
        if (message.accountUid !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.accountUid);
        /* optional string psn_region = 4; */
        if (message.psnRegion !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.psnRegion);
        /* optional string online_id = 7; */
        if (message.onlineId !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.onlineId);
        /* optional uint32 channel_id = 15; */
        if (message.channelId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.channelId);
        /* optional string account_ext = 9; */
        if (message.accountExt !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.accountExt);
        /* optional string country_code = 5; */
        if (message.countryCode !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.countryCode);
        /* optional string client_rand_key = 760; */
        if (message.clientRandKey !== undefined)
            writer.tag(760, WireType.LengthDelimited).string(message.clientRandKey);
        /* optional bool is_guest = 6; */
        if (message.isGuest !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isGuest);
        /* optional string birthday = 1718; */
        if (message.birthday !== undefined)
            writer.tag(1718, WireType.LengthDelimited).string(message.birthday);
        /* optional uint32 sub_channel_id = 8; */
        if (message.subChannelId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.subChannelId);
        /* optional uint32 platform_type = 12; */
        if (message.platformType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.platformType);
        /* optional string client_ip_str = 3; */
        if (message.clientIpStr !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.clientIpStr);
        /* optional string psn_id = 13; */
        if (message.psnId !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.psnId);
        /* optional uint32 account_type = 1; */
        if (message.accountType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.accountType);
        /* optional uint32 minors_reg_min_age = 995; */
        if (message.minorsRegMinAge !== undefined)
            writer.tag(995, WireType.Varint).uint32(message.minorsRegMinAge);
        /* optional uint32 cloud_client_ip = 14; */
        if (message.cloudClientIp !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.cloudClientIp);
        /* optional uint32 key_id = 1787; */
        if (message.keyId !== undefined)
            writer.tag(1787, WireType.Varint).uint32(message.keyId);
        /* optional uint32 uid = 2; */
        if (message.uid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetPlayerTokenReq
 */
export const GetPlayerTokenReq = new GetPlayerTokenReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerTokenRsp$Type extends MessageType<GetPlayerTokenRsp> {
    constructor() {
        super("com.midnights.game.GetPlayerTokenRsp", [
            { no: 937, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "security_cmd_buffer", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 13, name: "secret_key_seed", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2013, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "extra_bin_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 15, name: "secret_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1561, name: "minors_reg_min_age", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "black_uid_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1635, name: "tag", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "gm_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 896, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1811, name: "psn_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 860, name: "client_ip_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "account_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1802, name: "sub_channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2028, name: "is_watchdog_uid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1493, name: "server_rand_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "is_proficient_player", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1172, name: "key_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "account_uid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "is_guest", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1529, name: "client_version_random_key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1640, name: "finish_collection_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "platform_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1112, name: "reg_platform", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 573, name: "is_login_white_list", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1140, name: "sign", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerTokenRsp>): GetPlayerTokenRsp {
        const message = { finishCollectionIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerTokenRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerTokenRsp): GetPlayerTokenRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string birthday */ 937:
                    message.birthday = reader.string();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional bytes security_cmd_buffer */ 6:
                    message.securityCmdBuffer = reader.bytes();
                    break;
                case /* optional uint64 secret_key_seed */ 13:
                    message.secretKeySeed = reader.uint64().toBigInt();
                    break;
                case /* optional string country_code */ 2013:
                    message.countryCode = reader.string();
                    break;
                case /* optional bytes extra_bin_data */ 3:
                    message.extraBinData = reader.bytes();
                    break;
                case /* optional string secret_key */ 15:
                    message.secretKey = reader.string();
                    break;
                case /* optional uint32 minors_reg_min_age */ 1561:
                    message.minorsRegMinAge = reader.uint32();
                    break;
                case /* optional uint32 black_uid_end_time */ 14:
                    message.blackUidEndTime = reader.uint32();
                    break;
                case /* optional uint32 tag */ 1635:
                    message.tag = reader.uint32();
                    break;
                case /* optional string token */ 11:
                    message.token = reader.string();
                    break;
                case /* optional uint32 gm_uid */ 10:
                    message.gmUid = reader.uint32();
                    break;
                case /* optional uint32 channel_id */ 896:
                    message.channelId = reader.uint32();
                    break;
                case /* optional string psn_id */ 1811:
                    message.psnId = reader.string();
                    break;
                case /* optional string client_ip_str */ 860:
                    message.clientIpStr = reader.string();
                    break;
                case /* optional string msg */ 7:
                    message.msg = reader.string();
                    break;
                case /* optional uint32 account_type */ 5:
                    message.accountType = reader.uint32();
                    break;
                case /* optional uint32 sub_channel_id */ 1802:
                    message.subChannelId = reader.uint32();
                    break;
                case /* optional bool is_watchdog_uid */ 2028:
                    message.isWatchdogUid = reader.bool();
                    break;
                case /* optional string server_rand_key */ 1493:
                    message.serverRandKey = reader.string();
                    break;
                case /* optional bool is_proficient_player */ 9:
                    message.isProficientPlayer = reader.bool();
                    break;
                case /* optional uint32 key_id */ 1172:
                    message.keyId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                case /* optional string account_uid */ 12:
                    message.accountUid = reader.string();
                    break;
                case /* optional bool is_guest */ 4:
                    message.isGuest = reader.bool();
                    break;
                case /* optional string client_version_random_key */ 1529:
                    message.clientVersionRandomKey = reader.string();
                    break;
                case /* repeated uint32 finish_collection_id_list */ 1640:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishCollectionIdList.push(reader.uint32());
                    else
                        message.finishCollectionIdList.push(reader.uint32());
                    break;
                case /* optional uint32 platform_type */ 8:
                    message.platformType = reader.uint32();
                    break;
                case /* optional uint32 reg_platform */ 1112:
                    message.regPlatform = reader.uint32();
                    break;
                case /* optional bool is_login_white_list */ 573:
                    message.isLoginWhiteList = reader.bool();
                    break;
                case /* optional string sign */ 1140:
                    message.sign = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerTokenRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string birthday = 937; */
        if (message.birthday !== undefined)
            writer.tag(937, WireType.LengthDelimited).string(message.birthday);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional bytes security_cmd_buffer = 6; */
        if (message.securityCmdBuffer !== undefined)
            writer.tag(6, WireType.LengthDelimited).bytes(message.securityCmdBuffer);
        /* optional uint64 secret_key_seed = 13; */
        if (message.secretKeySeed !== undefined)
            writer.tag(13, WireType.Varint).uint64(message.secretKeySeed);
        /* optional string country_code = 2013; */
        if (message.countryCode !== undefined)
            writer.tag(2013, WireType.LengthDelimited).string(message.countryCode);
        /* optional bytes extra_bin_data = 3; */
        if (message.extraBinData !== undefined)
            writer.tag(3, WireType.LengthDelimited).bytes(message.extraBinData);
        /* optional string secret_key = 15; */
        if (message.secretKey !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.secretKey);
        /* optional uint32 minors_reg_min_age = 1561; */
        if (message.minorsRegMinAge !== undefined)
            writer.tag(1561, WireType.Varint).uint32(message.minorsRegMinAge);
        /* optional uint32 black_uid_end_time = 14; */
        if (message.blackUidEndTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.blackUidEndTime);
        /* optional uint32 tag = 1635; */
        if (message.tag !== undefined)
            writer.tag(1635, WireType.Varint).uint32(message.tag);
        /* optional string token = 11; */
        if (message.token !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.token);
        /* optional uint32 gm_uid = 10; */
        if (message.gmUid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.gmUid);
        /* optional uint32 channel_id = 896; */
        if (message.channelId !== undefined)
            writer.tag(896, WireType.Varint).uint32(message.channelId);
        /* optional string psn_id = 1811; */
        if (message.psnId !== undefined)
            writer.tag(1811, WireType.LengthDelimited).string(message.psnId);
        /* optional string client_ip_str = 860; */
        if (message.clientIpStr !== undefined)
            writer.tag(860, WireType.LengthDelimited).string(message.clientIpStr);
        /* optional string msg = 7; */
        if (message.msg !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.msg);
        /* optional uint32 account_type = 5; */
        if (message.accountType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.accountType);
        /* optional uint32 sub_channel_id = 1802; */
        if (message.subChannelId !== undefined)
            writer.tag(1802, WireType.Varint).uint32(message.subChannelId);
        /* optional bool is_watchdog_uid = 2028; */
        if (message.isWatchdogUid !== undefined)
            writer.tag(2028, WireType.Varint).bool(message.isWatchdogUid);
        /* optional string server_rand_key = 1493; */
        if (message.serverRandKey !== undefined)
            writer.tag(1493, WireType.LengthDelimited).string(message.serverRandKey);
        /* optional bool is_proficient_player = 9; */
        if (message.isProficientPlayer !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isProficientPlayer);
        /* optional uint32 key_id = 1172; */
        if (message.keyId !== undefined)
            writer.tag(1172, WireType.Varint).uint32(message.keyId);
        /* optional uint32 uid = 1; */
        if (message.uid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        /* optional string account_uid = 12; */
        if (message.accountUid !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.accountUid);
        /* optional bool is_guest = 4; */
        if (message.isGuest !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isGuest);
        /* optional string client_version_random_key = 1529; */
        if (message.clientVersionRandomKey !== undefined)
            writer.tag(1529, WireType.LengthDelimited).string(message.clientVersionRandomKey);
        /* repeated uint32 finish_collection_id_list = 1640; */
        for (let i = 0; i < message.finishCollectionIdList.length; i++)
            writer.tag(1640, WireType.Varint).uint32(message.finishCollectionIdList[i]);
        /* optional uint32 platform_type = 8; */
        if (message.platformType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.platformType);
        /* optional uint32 reg_platform = 1112; */
        if (message.regPlatform !== undefined)
            writer.tag(1112, WireType.Varint).uint32(message.regPlatform);
        /* optional bool is_login_white_list = 573; */
        if (message.isLoginWhiteList !== undefined)
            writer.tag(573, WireType.Varint).bool(message.isLoginWhiteList);
        /* optional string sign = 1140; */
        if (message.sign !== undefined)
            writer.tag(1140, WireType.LengthDelimited).string(message.sign);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetPlayerTokenRsp
 */
export const GetPlayerTokenRsp = new GetPlayerTokenRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TrackingIOInfo$Type extends MessageType<TrackingIOInfo> {
    constructor() {
        super("com.midnights.game.TrackingIOInfo", [
            { no: 11, name: "rydevicetype", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "mac", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "deviceid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "client_tz", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "current_caid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "cached_caid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "appid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<TrackingIOInfo>): TrackingIOInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TrackingIOInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TrackingIOInfo): TrackingIOInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string rydevicetype */ 11:
                    message.rydevicetype = reader.string();
                    break;
                case /* optional string mac */ 6:
                    message.mac = reader.string();
                    break;
                case /* optional string deviceid */ 9:
                    message.deviceid = reader.string();
                    break;
                case /* optional string client_tz */ 5:
                    message.clientTz = reader.string();
                    break;
                case /* optional string current_caid */ 7:
                    message.currentCaid = reader.string();
                    break;
                case /* optional string cached_caid */ 15:
                    message.cachedCaid = reader.string();
                    break;
                case /* optional string appid */ 1:
                    message.appid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TrackingIOInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string rydevicetype = 11; */
        if (message.rydevicetype !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.rydevicetype);
        /* optional string mac = 6; */
        if (message.mac !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.mac);
        /* optional string deviceid = 9; */
        if (message.deviceid !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.deviceid);
        /* optional string client_tz = 5; */
        if (message.clientTz !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.clientTz);
        /* optional string current_caid = 7; */
        if (message.currentCaid !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.currentCaid);
        /* optional string cached_caid = 15; */
        if (message.cachedCaid !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.cachedCaid);
        /* optional string appid = 1; */
        if (message.appid !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.appid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TrackingIOInfo
 */
export const TrackingIOInfo = new TrackingIOInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdjustTrackingInfo$Type extends MessageType<AdjustTrackingInfo> {
    constructor() {
        super("com.midnights.game.AdjustTrackingInfo", [
            { no: 9, name: "event_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "adid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "idfa", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "app_token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "gps_adid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "fire_adid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AdjustTrackingInfo>): AdjustTrackingInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdjustTrackingInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdjustTrackingInfo): AdjustTrackingInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string event_token */ 9:
                    message.eventToken = reader.string();
                    break;
                case /* optional string adid */ 4:
                    message.adid = reader.string();
                    break;
                case /* optional string idfa */ 2:
                    message.idfa = reader.string();
                    break;
                case /* optional string app_token */ 14:
                    message.appToken = reader.string();
                    break;
                case /* optional string gps_adid */ 3:
                    message.gpsAdid = reader.string();
                    break;
                case /* optional string fire_adid */ 13:
                    message.fireAdid = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdjustTrackingInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string event_token = 9; */
        if (message.eventToken !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.eventToken);
        /* optional string adid = 4; */
        if (message.adid !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.adid);
        /* optional string idfa = 2; */
        if (message.idfa !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.idfa);
        /* optional string app_token = 14; */
        if (message.appToken !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.appToken);
        /* optional string gps_adid = 3; */
        if (message.gpsAdid !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.gpsAdid);
        /* optional string fire_adid = 13; */
        if (message.fireAdid !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.fireAdid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AdjustTrackingInfo
 */
export const AdjustTrackingInfo = new AdjustTrackingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLoginReq$Type extends MessageType<PlayerLoginReq> {
    constructor() {
        super("com.midnights.game.PlayerLoginReq", [
            { no: 6, name: "language_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 615, name: "reg_platform", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1660, name: "tracking_io_info", kind: "message", T: () => TrackingIOInfo },
            { no: 13, name: "account_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1458, name: "extra_bin_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 1314, name: "channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 688, name: "client_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "account_uid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "client_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 772, name: "security_library_md5", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2000, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1268, name: "psn_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 431, name: "client_port", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "device_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1163, name: "cps", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "login_rand", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 984, name: "target_home_param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1816, name: "adjust_tracking_info", kind: "message", T: () => AdjustTrackingInfo },
            { no: 908, name: "is_transfer", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1787, name: "tag", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_guest", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2026, name: "environment_error_code", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 903, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "is_editor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 861, name: "checksum_client_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1995, name: "security_cmd_reply", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 1213, name: "security_library_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1652, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "device_uuid", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1546, name: "client_token", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 23, name: "sub_channel_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "device_info", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1707, name: "client_verison_hash", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1532, name: "checksum", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "platform_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1864, name: "target_home_owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1335, name: "cloud_client_ip", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 612, name: "gm_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "system_version", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "platform", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLoginReq>): PlayerLoginReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLoginReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLoginReq): PlayerLoginReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 language_type */ 6:
                    message.languageType = reader.uint32();
                    break;
                case /* optional uint32 reg_platform */ 615:
                    message.regPlatform = reader.uint32();
                    break;
                case /* optional com.midnights.game.TrackingIOInfo tracking_io_info */ 1660:
                    message.trackingIoInfo = TrackingIOInfo.internalBinaryRead(reader, reader.uint32(), options, message.trackingIoInfo);
                    break;
                case /* optional uint32 account_type */ 13:
                    message.accountType = reader.uint32();
                    break;
                case /* optional string token */ 15:
                    message.token = reader.string();
                    break;
                case /* optional bytes extra_bin_data */ 1458:
                    message.extraBinData = reader.bytes();
                    break;
                case /* optional uint32 channel_id */ 1314:
                    message.channelId = reader.uint32();
                    break;
                case /* optional uint32 client_data_version */ 688:
                    message.clientDataVersion = reader.uint32();
                    break;
                case /* optional string account_uid */ 2:
                    message.accountUid = reader.string();
                    break;
                case /* optional string client_version */ 12:
                    message.clientVersion = reader.string();
                    break;
                case /* optional string security_library_md5 */ 772:
                    message.securityLibraryMd5 = reader.string();
                    break;
                case /* optional string country_code */ 2000:
                    message.countryCode = reader.string();
                    break;
                case /* optional string psn_id */ 1268:
                    message.psnId = reader.string();
                    break;
                case /* optional uint32 client_port */ 431:
                    message.clientPort = reader.uint32();
                    break;
                case /* optional string device_name */ 9:
                    message.deviceName = reader.string();
                    break;
                case /* optional string cps */ 1163:
                    message.cps = reader.string();
                    break;
                case /* optional uint64 login_rand */ 3:
                    message.loginRand = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 target_home_param */ 984:
                    message.targetHomeParam = reader.uint32();
                    break;
                case /* optional com.midnights.game.AdjustTrackingInfo adjust_tracking_info */ 1816:
                    message.adjustTrackingInfo = AdjustTrackingInfo.internalBinaryRead(reader, reader.uint32(), options, message.adjustTrackingInfo);
                    break;
                case /* optional bool is_transfer */ 908:
                    message.isTransfer = reader.bool();
                    break;
                case /* optional uint32 tag */ 1787:
                    message.tag = reader.uint32();
                    break;
                case /* optional bool is_guest */ 5:
                    message.isGuest = reader.bool();
                    break;
                case /* optional bytes environment_error_code */ 2026:
                    message.environmentErrorCode = reader.bytes();
                    break;
                case /* optional string online_id */ 903:
                    message.onlineId = reader.string();
                    break;
                case /* optional bool is_editor */ 8:
                    message.isEditor = reader.bool();
                    break;
                case /* optional string checksum_client_version */ 861:
                    message.checksumClientVersion = reader.string();
                    break;
                case /* optional bytes security_cmd_reply */ 1995:
                    message.securityCmdReply = reader.bytes();
                    break;
                case /* optional string security_library_version */ 1213:
                    message.securityLibraryVersion = reader.string();
                    break;
                case /* optional string birthday */ 1652:
                    message.birthday = reader.string();
                    break;
                case /* optional string device_uuid */ 4:
                    message.deviceUuid = reader.string();
                    break;
                case /* optional uint32 client_token */ 1546:
                    message.clientToken = reader.uint32();
                    break;
                case /* optional uint32 sub_channel_id */ 23:
                    message.subChannelId = reader.uint32();
                    break;
                case /* optional uint32 target_uid */ 11:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional string device_info */ 1:
                    message.deviceInfo = reader.string();
                    break;
                case /* optional string client_verison_hash */ 1707:
                    message.clientVerisonHash = reader.string();
                    break;
                case /* optional string checksum */ 1532:
                    message.checksum = reader.string();
                    break;
                case /* optional uint32 platform_type */ 14:
                    message.platformType = reader.uint32();
                    break;
                case /* optional uint32 target_home_owner_uid */ 1864:
                    message.targetHomeOwnerUid = reader.uint32();
                    break;
                case /* optional uint32 cloud_client_ip */ 1335:
                    message.cloudClientIp = reader.uint32();
                    break;
                case /* optional uint32 gm_uid */ 612:
                    message.gmUid = reader.uint32();
                    break;
                case /* optional string system_version */ 10:
                    message.systemVersion = reader.string();
                    break;
                case /* optional string platform */ 7:
                    message.platform = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLoginReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 language_type = 6; */
        if (message.languageType !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.languageType);
        /* optional uint32 reg_platform = 615; */
        if (message.regPlatform !== undefined)
            writer.tag(615, WireType.Varint).uint32(message.regPlatform);
        /* optional com.midnights.game.TrackingIOInfo tracking_io_info = 1660; */
        if (message.trackingIoInfo)
            TrackingIOInfo.internalBinaryWrite(message.trackingIoInfo, writer.tag(1660, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 account_type = 13; */
        if (message.accountType !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.accountType);
        /* optional string token = 15; */
        if (message.token !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.token);
        /* optional bytes extra_bin_data = 1458; */
        if (message.extraBinData !== undefined)
            writer.tag(1458, WireType.LengthDelimited).bytes(message.extraBinData);
        /* optional uint32 channel_id = 1314; */
        if (message.channelId !== undefined)
            writer.tag(1314, WireType.Varint).uint32(message.channelId);
        /* optional uint32 client_data_version = 688; */
        if (message.clientDataVersion !== undefined)
            writer.tag(688, WireType.Varint).uint32(message.clientDataVersion);
        /* optional string account_uid = 2; */
        if (message.accountUid !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.accountUid);
        /* optional string client_version = 12; */
        if (message.clientVersion !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.clientVersion);
        /* optional string security_library_md5 = 772; */
        if (message.securityLibraryMd5 !== undefined)
            writer.tag(772, WireType.LengthDelimited).string(message.securityLibraryMd5);
        /* optional string country_code = 2000; */
        if (message.countryCode !== undefined)
            writer.tag(2000, WireType.LengthDelimited).string(message.countryCode);
        /* optional string psn_id = 1268; */
        if (message.psnId !== undefined)
            writer.tag(1268, WireType.LengthDelimited).string(message.psnId);
        /* optional uint32 client_port = 431; */
        if (message.clientPort !== undefined)
            writer.tag(431, WireType.Varint).uint32(message.clientPort);
        /* optional string device_name = 9; */
        if (message.deviceName !== undefined)
            writer.tag(9, WireType.LengthDelimited).string(message.deviceName);
        /* optional string cps = 1163; */
        if (message.cps !== undefined)
            writer.tag(1163, WireType.LengthDelimited).string(message.cps);
        /* optional uint64 login_rand = 3; */
        if (message.loginRand !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.loginRand);
        /* optional uint32 target_home_param = 984; */
        if (message.targetHomeParam !== undefined)
            writer.tag(984, WireType.Varint).uint32(message.targetHomeParam);
        /* optional com.midnights.game.AdjustTrackingInfo adjust_tracking_info = 1816; */
        if (message.adjustTrackingInfo)
            AdjustTrackingInfo.internalBinaryWrite(message.adjustTrackingInfo, writer.tag(1816, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_transfer = 908; */
        if (message.isTransfer !== undefined)
            writer.tag(908, WireType.Varint).bool(message.isTransfer);
        /* optional uint32 tag = 1787; */
        if (message.tag !== undefined)
            writer.tag(1787, WireType.Varint).uint32(message.tag);
        /* optional bool is_guest = 5; */
        if (message.isGuest !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isGuest);
        /* optional bytes environment_error_code = 2026; */
        if (message.environmentErrorCode !== undefined)
            writer.tag(2026, WireType.LengthDelimited).bytes(message.environmentErrorCode);
        /* optional string online_id = 903; */
        if (message.onlineId !== undefined)
            writer.tag(903, WireType.LengthDelimited).string(message.onlineId);
        /* optional bool is_editor = 8; */
        if (message.isEditor !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isEditor);
        /* optional string checksum_client_version = 861; */
        if (message.checksumClientVersion !== undefined)
            writer.tag(861, WireType.LengthDelimited).string(message.checksumClientVersion);
        /* optional bytes security_cmd_reply = 1995; */
        if (message.securityCmdReply !== undefined)
            writer.tag(1995, WireType.LengthDelimited).bytes(message.securityCmdReply);
        /* optional string security_library_version = 1213; */
        if (message.securityLibraryVersion !== undefined)
            writer.tag(1213, WireType.LengthDelimited).string(message.securityLibraryVersion);
        /* optional string birthday = 1652; */
        if (message.birthday !== undefined)
            writer.tag(1652, WireType.LengthDelimited).string(message.birthday);
        /* optional string device_uuid = 4; */
        if (message.deviceUuid !== undefined)
            writer.tag(4, WireType.LengthDelimited).string(message.deviceUuid);
        /* optional uint32 client_token = 1546; */
        if (message.clientToken !== undefined)
            writer.tag(1546, WireType.Varint).uint32(message.clientToken);
        /* optional uint32 sub_channel_id = 23; */
        if (message.subChannelId !== undefined)
            writer.tag(23, WireType.Varint).uint32(message.subChannelId);
        /* optional uint32 target_uid = 11; */
        if (message.targetUid !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.targetUid);
        /* optional string device_info = 1; */
        if (message.deviceInfo !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.deviceInfo);
        /* optional string client_verison_hash = 1707; */
        if (message.clientVerisonHash !== undefined)
            writer.tag(1707, WireType.LengthDelimited).string(message.clientVerisonHash);
        /* optional string checksum = 1532; */
        if (message.checksum !== undefined)
            writer.tag(1532, WireType.LengthDelimited).string(message.checksum);
        /* optional uint32 platform_type = 14; */
        if (message.platformType !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.platformType);
        /* optional uint32 target_home_owner_uid = 1864; */
        if (message.targetHomeOwnerUid !== undefined)
            writer.tag(1864, WireType.Varint).uint32(message.targetHomeOwnerUid);
        /* optional uint32 cloud_client_ip = 1335; */
        if (message.cloudClientIp !== undefined)
            writer.tag(1335, WireType.Varint).uint32(message.cloudClientIp);
        /* optional uint32 gm_uid = 612; */
        if (message.gmUid !== undefined)
            writer.tag(612, WireType.Varint).uint32(message.gmUid);
        /* optional string system_version = 10; */
        if (message.systemVersion !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.systemVersion);
        /* optional string platform = 7; */
        if (message.platform !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.platform);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLoginReq
 */
export const PlayerLoginReq = new PlayerLoginReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ShortAbilityHashPair$Type extends MessageType<ShortAbilityHashPair> {
    constructor() {
        super("com.midnights.game.ShortAbilityHashPair", [
            { no: 15, name: "ability_config_hash", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ },
            { no: 1, name: "ability_name_hash", kind: "scalar", opt: true, T: 15 /*ScalarType.SFIXED32*/ }
        ]);
    }
    create(value?: PartialMessage<ShortAbilityHashPair>): ShortAbilityHashPair {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ShortAbilityHashPair>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ShortAbilityHashPair): ShortAbilityHashPair {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional sfixed32 ability_config_hash */ 15:
                    message.abilityConfigHash = reader.sfixed32();
                    break;
                case /* optional sfixed32 ability_name_hash */ 1:
                    message.abilityNameHash = reader.sfixed32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ShortAbilityHashPair, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional sfixed32 ability_config_hash = 15; */
        if (message.abilityConfigHash !== undefined)
            writer.tag(15, WireType.Bit32).sfixed32(message.abilityConfigHash);
        /* optional sfixed32 ability_name_hash = 1; */
        if (message.abilityNameHash !== undefined)
            writer.tag(1, WireType.Bit32).sfixed32(message.abilityNameHash);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ShortAbilityHashPair
 */
export const ShortAbilityHashPair = new ShortAbilityHashPair$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLoginRsp$Type extends MessageType<PlayerLoginRsp> {
    constructor() {
        super("com.midnights.game.PlayerLoginRsp", [
            { no: 1, name: "client_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1429, name: "is_sc_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 571, name: "block_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => BlockInfo } },
            { no: 1685, name: "is_audit", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2018, name: "is_transfer", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1746, name: "client_silence_md5", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1573, name: "next_res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 6, name: "client_silence_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "login_rand", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "is_new_player", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1047, name: "client_version_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "game_biz", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 621, name: "next_resource_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 10, name: "is_relogin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 125, name: "total_tick_time", kind: "scalar", opt: true, T: 1 /*ScalarType.DOUBLE*/ },
            { no: 932, name: "is_enable_client_hash_debug", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2024, name: "sc_info", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 12, name: "ability_hash_code", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2040, name: "register_cps", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1649, name: "is_login_rsp_split", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "is_use_ability_hash", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 11, name: "ability_hash_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 250, name: "short_ability_hash_map", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ShortAbilityHashPair },
            { no: 1830, name: "client_md5", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1900, name: "country_code", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 951, name: "is_data_need_relogin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1969, name: "res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 1352, name: "feature_block_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => FeatureBlockInfo },
            { no: 624, name: "birthday", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "player_data", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 1299, name: "client_silence_version_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 553, name: "target_home_owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "player_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLoginRsp>): PlayerLoginRsp {
        const message = { blockInfoMap: {}, abilityHashMap: {}, shortAbilityHashMap: [], featureBlockInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLoginRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLoginRsp): PlayerLoginRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 client_data_version */ 1:
                    message.clientDataVersion = reader.uint32();
                    break;
                case /* optional bool is_sc_open */ 1429:
                    message.isScOpen = reader.bool();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* map<uint32, com.midnights.game.BlockInfo> block_info_map */ 571:
                    this.binaryReadMap571(message.blockInfoMap, reader, options);
                    break;
                case /* optional bool is_audit */ 1685:
                    message.isAudit = reader.bool();
                    break;
                case /* optional bool is_transfer */ 2018:
                    message.isTransfer = reader.bool();
                    break;
                case /* optional string client_silence_md5 */ 1746:
                    message.clientSilenceMd5 = reader.string();
                    break;
                case /* optional com.midnights.game.ResVersionConfig next_res_version_config */ 1573:
                    message.nextResVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.nextResVersionConfig);
                    break;
                case /* optional uint32 client_silence_data_version */ 6:
                    message.clientSilenceDataVersion = reader.uint32();
                    break;
                case /* optional uint64 login_rand */ 4:
                    message.loginRand = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_new_player */ 8:
                    message.isNewPlayer = reader.bool();
                    break;
                case /* optional string client_version_suffix */ 1047:
                    message.clientVersionSuffix = reader.string();
                    break;
                case /* optional string game_biz */ 5:
                    message.gameBiz = reader.string();
                    break;
                case /* optional string next_resource_url */ 621:
                    message.nextResourceUrl = reader.string();
                    break;
                case /* optional bool is_relogin */ 10:
                    message.isRelogin = reader.bool();
                    break;
                case /* optional double total_tick_time */ 125:
                    message.totalTickTime = reader.double();
                    break;
                case /* optional bool is_enable_client_hash_debug */ 932:
                    message.isEnableClientHashDebug = reader.bool();
                    break;
                case /* optional bytes sc_info */ 2024:
                    message.scInfo = reader.bytes();
                    break;
                case /* optional int32 ability_hash_code */ 12:
                    message.abilityHashCode = reader.int32();
                    break;
                case /* optional string register_cps */ 2040:
                    message.registerCps = reader.string();
                    break;
                case /* optional bool is_login_rsp_split */ 1649:
                    message.isLoginRspSplit = reader.bool();
                    break;
                case /* optional bool is_use_ability_hash */ 2:
                    message.isUseAbilityHash = reader.bool();
                    break;
                case /* map<string, int32> ability_hash_map */ 11:
                    this.binaryReadMap11(message.abilityHashMap, reader, options);
                    break;
                case /* repeated com.midnights.game.ShortAbilityHashPair short_ability_hash_map */ 250:
                    message.shortAbilityHashMap.push(ShortAbilityHashPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string client_md5 */ 1830:
                    message.clientMd5 = reader.string();
                    break;
                case /* optional string country_code */ 1900:
                    message.countryCode = reader.string();
                    break;
                case /* optional bool is_data_need_relogin */ 951:
                    message.isDataNeedRelogin = reader.bool();
                    break;
                case /* optional com.midnights.game.ResVersionConfig res_version_config */ 1969:
                    message.resVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.resVersionConfig);
                    break;
                case /* repeated com.midnights.game.FeatureBlockInfo feature_block_info_list */ 1352:
                    message.featureBlockInfoList.push(FeatureBlockInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional string birthday */ 624:
                    message.birthday = reader.string();
                    break;
                case /* optional uint32 target_uid */ 14:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional bytes player_data */ 13:
                    message.playerData = reader.bytes();
                    break;
                case /* optional string client_silence_version_suffix */ 1299:
                    message.clientSilenceVersionSuffix = reader.string();
                    break;
                case /* optional uint32 target_home_owner_uid */ 553:
                    message.targetHomeOwnerUid = reader.uint32();
                    break;
                case /* optional uint32 player_data_version */ 7:
                    message.playerDataVersion = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap571(map: PlayerLoginRsp["blockInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerLoginRsp["blockInfoMap"] | undefined, val: PlayerLoginRsp["blockInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = BlockInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlayerLoginRsp.block_info_map");
            }
        }
        map[key ?? 0] = val ?? BlockInfo.create();
    }
    private binaryReadMap11(map: PlayerLoginRsp["abilityHashMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerLoginRsp["abilityHashMap"] | undefined, val: PlayerLoginRsp["abilityHashMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlayerLoginRsp.ability_hash_map");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: PlayerLoginRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 client_data_version = 1; */
        if (message.clientDataVersion !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.clientDataVersion);
        /* optional bool is_sc_open = 1429; */
        if (message.isScOpen !== undefined)
            writer.tag(1429, WireType.Varint).bool(message.isScOpen);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* map<uint32, com.midnights.game.BlockInfo> block_info_map = 571; */
        for (let k of Object.keys(message.blockInfoMap)) {
            writer.tag(571, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            BlockInfo.internalBinaryWrite(message.blockInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional bool is_audit = 1685; */
        if (message.isAudit !== undefined)
            writer.tag(1685, WireType.Varint).bool(message.isAudit);
        /* optional bool is_transfer = 2018; */
        if (message.isTransfer !== undefined)
            writer.tag(2018, WireType.Varint).bool(message.isTransfer);
        /* optional string client_silence_md5 = 1746; */
        if (message.clientSilenceMd5 !== undefined)
            writer.tag(1746, WireType.LengthDelimited).string(message.clientSilenceMd5);
        /* optional com.midnights.game.ResVersionConfig next_res_version_config = 1573; */
        if (message.nextResVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.nextResVersionConfig, writer.tag(1573, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 client_silence_data_version = 6; */
        if (message.clientSilenceDataVersion !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.clientSilenceDataVersion);
        /* optional uint64 login_rand = 4; */
        if (message.loginRand !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.loginRand);
        /* optional bool is_new_player = 8; */
        if (message.isNewPlayer !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isNewPlayer);
        /* optional string client_version_suffix = 1047; */
        if (message.clientVersionSuffix !== undefined)
            writer.tag(1047, WireType.LengthDelimited).string(message.clientVersionSuffix);
        /* optional string game_biz = 5; */
        if (message.gameBiz !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.gameBiz);
        /* optional string next_resource_url = 621; */
        if (message.nextResourceUrl !== undefined)
            writer.tag(621, WireType.LengthDelimited).string(message.nextResourceUrl);
        /* optional bool is_relogin = 10; */
        if (message.isRelogin !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isRelogin);
        /* optional double total_tick_time = 125; */
        if (message.totalTickTime !== undefined)
            writer.tag(125, WireType.Bit64).double(message.totalTickTime);
        /* optional bool is_enable_client_hash_debug = 932; */
        if (message.isEnableClientHashDebug !== undefined)
            writer.tag(932, WireType.Varint).bool(message.isEnableClientHashDebug);
        /* optional bytes sc_info = 2024; */
        if (message.scInfo !== undefined)
            writer.tag(2024, WireType.LengthDelimited).bytes(message.scInfo);
        /* optional int32 ability_hash_code = 12; */
        if (message.abilityHashCode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.abilityHashCode);
        /* optional string register_cps = 2040; */
        if (message.registerCps !== undefined)
            writer.tag(2040, WireType.LengthDelimited).string(message.registerCps);
        /* optional bool is_login_rsp_split = 1649; */
        if (message.isLoginRspSplit !== undefined)
            writer.tag(1649, WireType.Varint).bool(message.isLoginRspSplit);
        /* optional bool is_use_ability_hash = 2; */
        if (message.isUseAbilityHash !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isUseAbilityHash);
        /* map<string, int32> ability_hash_map = 11; */
        for (let k of Object.keys(message.abilityHashMap))
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.abilityHashMap[k]).join();
        /* repeated com.midnights.game.ShortAbilityHashPair short_ability_hash_map = 250; */
        for (let i = 0; i < message.shortAbilityHashMap.length; i++)
            ShortAbilityHashPair.internalBinaryWrite(message.shortAbilityHashMap[i], writer.tag(250, WireType.LengthDelimited).fork(), options).join();
        /* optional string client_md5 = 1830; */
        if (message.clientMd5 !== undefined)
            writer.tag(1830, WireType.LengthDelimited).string(message.clientMd5);
        /* optional string country_code = 1900; */
        if (message.countryCode !== undefined)
            writer.tag(1900, WireType.LengthDelimited).string(message.countryCode);
        /* optional bool is_data_need_relogin = 951; */
        if (message.isDataNeedRelogin !== undefined)
            writer.tag(951, WireType.Varint).bool(message.isDataNeedRelogin);
        /* optional com.midnights.game.ResVersionConfig res_version_config = 1969; */
        if (message.resVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.resVersionConfig, writer.tag(1969, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.FeatureBlockInfo feature_block_info_list = 1352; */
        for (let i = 0; i < message.featureBlockInfoList.length; i++)
            FeatureBlockInfo.internalBinaryWrite(message.featureBlockInfoList[i], writer.tag(1352, WireType.LengthDelimited).fork(), options).join();
        /* optional string birthday = 624; */
        if (message.birthday !== undefined)
            writer.tag(624, WireType.LengthDelimited).string(message.birthday);
        /* optional uint32 target_uid = 14; */
        if (message.targetUid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.targetUid);
        /* optional bytes player_data = 13; */
        if (message.playerData !== undefined)
            writer.tag(13, WireType.LengthDelimited).bytes(message.playerData);
        /* optional string client_silence_version_suffix = 1299; */
        if (message.clientSilenceVersionSuffix !== undefined)
            writer.tag(1299, WireType.LengthDelimited).string(message.clientSilenceVersionSuffix);
        /* optional uint32 target_home_owner_uid = 553; */
        if (message.targetHomeOwnerUid !== undefined)
            writer.tag(553, WireType.Varint).uint32(message.targetHomeOwnerUid);
        /* optional uint32 player_data_version = 7; */
        if (message.playerDataVersion !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.playerDataVersion);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLoginRsp
 */
export const PlayerLoginRsp = new PlayerLoginRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLogoutReq$Type extends MessageType<PlayerLogoutReq> {
    constructor() {
        super("com.midnights.game.PlayerLogoutReq", [
            { no: 6, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerLogoutReq.Reason", PlayerLogoutReq_Reason] }
        ]);
    }
    create(value?: PartialMessage<PlayerLogoutReq>): PlayerLogoutReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLogoutReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLogoutReq): PlayerLogoutReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerLogoutReq.Reason reason */ 6:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLogoutReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerLogoutReq.Reason reason = 6; */
        if (message.reason !== undefined)
            writer.tag(6, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLogoutReq
 */
export const PlayerLogoutReq = new PlayerLogoutReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLogoutRsp$Type extends MessageType<PlayerLogoutRsp> {
    constructor() {
        super("com.midnights.game.PlayerLogoutRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLogoutRsp>): PlayerLogoutRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLogoutRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLogoutRsp): PlayerLogoutRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLogoutRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLogoutRsp
 */
export const PlayerLogoutRsp = new PlayerLogoutRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLogoutNotify$Type extends MessageType<PlayerLogoutNotify> {
    constructor() {
        super("com.midnights.game.PlayerLogoutNotify", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLogoutNotify>): PlayerLogoutNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLogoutNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLogoutNotify): PlayerLogoutNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLogoutNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLogoutNotify
 */
export const PlayerLogoutNotify = new PlayerLogoutNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerDataNotify$Type extends MessageType<PlayerDataNotify> {
    constructor() {
        super("com.midnights.game.PlayerDataNotify", [
            { no: 7, name: "server_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 12, name: "is_first_login_today", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "region_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => PropValue } }
        ]);
    }
    create(value?: PartialMessage<PlayerDataNotify>): PlayerDataNotify {
        const message = { propMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerDataNotify): PlayerDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 server_time */ 7:
                    message.serverTime = reader.uint64().toBigInt();
                    break;
                case /* optional string nick_name */ 8:
                    message.nickName = reader.string();
                    break;
                case /* optional bool is_first_login_today */ 12:
                    message.isFirstLoginToday = reader.bool();
                    break;
                case /* optional uint32 region_id */ 6:
                    message.regionId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.PropValue> prop_map */ 15:
                    this.binaryReadMap15(message.propMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: PlayerDataNotify["propMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerDataNotify["propMap"] | undefined, val: PlayerDataNotify["propMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = PropValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlayerDataNotify.prop_map");
            }
        }
        map[key ?? 0] = val ?? PropValue.create();
    }
    internalBinaryWrite(message: PlayerDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 server_time = 7; */
        if (message.serverTime !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.serverTime);
        /* optional string nick_name = 8; */
        if (message.nickName !== undefined)
            writer.tag(8, WireType.LengthDelimited).string(message.nickName);
        /* optional bool is_first_login_today = 12; */
        if (message.isFirstLoginToday !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isFirstLoginToday);
        /* optional uint32 region_id = 6; */
        if (message.regionId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.regionId);
        /* map<uint32, com.midnights.game.PropValue> prop_map = 15; */
        for (let k of Object.keys(message.propMap)) {
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            PropValue.internalBinaryWrite(message.propMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerDataNotify
 */
export const PlayerDataNotify = new PlayerDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeGameTimeReq$Type extends MessageType<ChangeGameTimeReq> {
    constructor() {
        super("com.midnights.game.ChangeGameTimeReq", [
            { no: 6, name: "game_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_force_set", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "extra_days", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeGameTimeReq>): ChangeGameTimeReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeGameTimeReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeGameTimeReq): ChangeGameTimeReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 game_time */ 6:
                    message.gameTime = reader.uint32();
                    break;
                case /* optional bool is_force_set */ 11:
                    message.isForceSet = reader.bool();
                    break;
                case /* optional uint32 extra_days */ 12:
                    message.extraDays = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeGameTimeReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 game_time = 6; */
        if (message.gameTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.gameTime);
        /* optional bool is_force_set = 11; */
        if (message.isForceSet !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isForceSet);
        /* optional uint32 extra_days = 12; */
        if (message.extraDays !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.extraDays);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeGameTimeReq
 */
export const ChangeGameTimeReq = new ChangeGameTimeReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ChangeGameTimeRsp$Type extends MessageType<ChangeGameTimeRsp> {
    constructor() {
        super("com.midnights.game.ChangeGameTimeRsp", [
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "extra_days", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cur_game_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ChangeGameTimeRsp>): ChangeGameTimeRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ChangeGameTimeRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ChangeGameTimeRsp): ChangeGameTimeRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 extra_days */ 5:
                    message.extraDays = reader.uint32();
                    break;
                case /* optional uint32 cur_game_time */ 14:
                    message.curGameTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ChangeGameTimeRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional uint32 extra_days = 5; */
        if (message.extraDays !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.extraDays);
        /* optional uint32 cur_game_time = 14; */
        if (message.curGameTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.curGameTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ChangeGameTimeRsp
 */
export const ChangeGameTimeRsp = new ChangeGameTimeRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGameTimeNotify$Type extends MessageType<PlayerGameTimeNotify> {
    constructor() {
        super("com.midnights.game.PlayerGameTimeNotify", [
            { no: 7, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "game_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_home", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGameTimeNotify>): PlayerGameTimeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGameTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGameTimeNotify): PlayerGameTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 7:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 game_time */ 3:
                    message.gameTime = reader.uint32();
                    break;
                case /* optional bool is_home */ 13:
                    message.isHome = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGameTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 7; */
        if (message.uid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.uid);
        /* optional uint32 game_time = 3; */
        if (message.gameTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.gameTime);
        /* optional bool is_home = 13; */
        if (message.isHome !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isHome);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGameTimeNotify
 */
export const PlayerGameTimeNotify = new PlayerGameTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPropNotify$Type extends MessageType<PlayerPropNotify> {
    constructor() {
        super("com.midnights.game.PlayerPropNotify", [
            { no: 13, name: "prop_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => PropValue } }
        ]);
    }
    create(value?: PartialMessage<PlayerPropNotify>): PlayerPropNotify {
        const message = { propMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerPropNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPropNotify): PlayerPropNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.PropValue> prop_map */ 13:
                    this.binaryReadMap13(message.propMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap13(map: PlayerPropNotify["propMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerPropNotify["propMap"] | undefined, val: PlayerPropNotify["propMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = PropValue.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.PlayerPropNotify.prop_map");
            }
        }
        map[key ?? 0] = val ?? PropValue.create();
    }
    internalBinaryWrite(message: PlayerPropNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.PropValue> prop_map = 13; */
        for (let k of Object.keys(message.propMap)) {
            writer.tag(13, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            PropValue.internalBinaryWrite(message.propMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerPropNotify
 */
export const PlayerPropNotify = new PlayerPropNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientTriggerEventNotify$Type extends MessageType<ClientTriggerEventNotify> {
    constructor() {
        super("com.midnights.game.ClientTriggerEventNotify", [
            { no: 3, name: "force_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "event_type", kind: "enum", opt: true, T: () => ["com.midnights.game.EventTriggerType", EventTriggerType] }
        ]);
    }
    create(value?: PartialMessage<ClientTriggerEventNotify>): ClientTriggerEventNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientTriggerEventNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientTriggerEventNotify): ClientTriggerEventNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 force_id */ 3:
                    message.forceId = reader.uint32();
                    break;
                case /* optional com.midnights.game.EventTriggerType event_type */ 2:
                    message.eventType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientTriggerEventNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 force_id = 3; */
        if (message.forceId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.forceId);
        /* optional com.midnights.game.EventTriggerType event_type = 2; */
        if (message.eventType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.eventType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientTriggerEventNotify
 */
export const ClientTriggerEventNotify = new ClientTriggerEventNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerPropReq$Type extends MessageType<SetPlayerPropReq> {
    constructor() {
        super("com.midnights.game.SetPlayerPropReq", [
            { no: 7, name: "prop_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => PropValue }
        ]);
    }
    create(value?: PartialMessage<SetPlayerPropReq>): SetPlayerPropReq {
        const message = { propList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerPropReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerPropReq): SetPlayerPropReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.PropValue prop_list */ 7:
                    message.propList.push(PropValue.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerPropReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.PropValue prop_list = 7; */
        for (let i = 0; i < message.propList.length; i++)
            PropValue.internalBinaryWrite(message.propList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerPropReq
 */
export const SetPlayerPropReq = new SetPlayerPropReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerPropRsp$Type extends MessageType<SetPlayerPropRsp> {
    constructor() {
        super("com.midnights.game.SetPlayerPropRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerPropRsp>): SetPlayerPropRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerPropRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerPropRsp): SetPlayerPropRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerPropRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerPropRsp
 */
export const SetPlayerPropRsp = new SetPlayerPropRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerBornDataReq$Type extends MessageType<SetPlayerBornDataReq> {
    constructor() {
        super("com.midnights.game.SetPlayerBornDataReq", [
            { no: 2, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerBornDataReq>): SetPlayerBornDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerBornDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerBornDataReq): SetPlayerBornDataReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 avatar_id */ 2:
                    message.avatarId = reader.uint32();
                    break;
                case /* optional string nick_name */ 13:
                    message.nickName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerBornDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 avatar_id = 2; */
        if (message.avatarId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.avatarId);
        /* optional string nick_name = 13; */
        if (message.nickName !== undefined)
            writer.tag(13, WireType.LengthDelimited).string(message.nickName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerBornDataReq
 */
export const SetPlayerBornDataReq = new SetPlayerBornDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerBornDataRsp$Type extends MessageType<SetPlayerBornDataRsp> {
    constructor() {
        super("com.midnights.game.SetPlayerBornDataRsp", [
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerBornDataRsp>): SetPlayerBornDataRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerBornDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerBornDataRsp): SetPlayerBornDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerBornDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerBornDataRsp
 */
export const SetPlayerBornDataRsp = new SetPlayerBornDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DoSetPlayerBornDataNotify$Type extends MessageType<DoSetPlayerBornDataNotify> {
    constructor() {
        super("com.midnights.game.DoSetPlayerBornDataNotify", []);
    }
    create(value?: PartialMessage<DoSetPlayerBornDataNotify>): DoSetPlayerBornDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DoSetPlayerBornDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DoSetPlayerBornDataNotify): DoSetPlayerBornDataNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: DoSetPlayerBornDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DoSetPlayerBornDataNotify
 */
export const DoSetPlayerBornDataNotify = new DoSetPlayerBornDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPropChangeNotify$Type extends MessageType<PlayerPropChangeNotify> {
    constructor() {
        super("com.midnights.game.PlayerPropChangeNotify", [
            { no: 13, name: "prop_delta", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "prop_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerPropChangeNotify>): PlayerPropChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerPropChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPropChangeNotify): PlayerPropChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 prop_delta */ 13:
                    message.propDelta = reader.uint32();
                    break;
                case /* optional uint32 prop_type */ 12:
                    message.propType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPropChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 prop_delta = 13; */
        if (message.propDelta !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.propDelta);
        /* optional uint32 prop_type = 12; */
        if (message.propType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.propType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerPropChangeNotify
 */
export const PlayerPropChangeNotify = new PlayerPropChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerNameReq$Type extends MessageType<SetPlayerNameReq> {
    constructor() {
        super("com.midnights.game.SetPlayerNameReq", [
            { no: 1, name: "nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerNameReq>): SetPlayerNameReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerNameReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerNameReq): SetPlayerNameReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nick_name */ 1:
                    message.nickName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerNameReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string nick_name = 1; */
        if (message.nickName !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.nickName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerNameReq
 */
export const SetPlayerNameReq = new SetPlayerNameReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetPlayerNameRsp$Type extends MessageType<SetPlayerNameRsp> {
    constructor() {
        super("com.midnights.game.SetPlayerNameRsp", [
            { no: 9, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "nick_name", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<SetPlayerNameRsp>): SetPlayerNameRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetPlayerNameRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetPlayerNameRsp): SetPlayerNameRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 9:
                    message.retcode = reader.int32();
                    break;
                case /* optional string nick_name */ 14:
                    message.nickName = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetPlayerNameRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 9; */
        if (message.retcode !== undefined)
            writer.tag(9, WireType.Varint).int32(message.retcode);
        /* optional string nick_name = 14; */
        if (message.nickName !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.nickName);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetPlayerNameRsp
 */
export const SetPlayerNameRsp = new SetPlayerNameRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetOpenStateReq$Type extends MessageType<SetOpenStateReq> {
    constructor() {
        super("com.midnights.game.SetOpenStateReq", [
            { no: 12, name: "key", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetOpenStateReq>): SetOpenStateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetOpenStateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetOpenStateReq): SetOpenStateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 key */ 12:
                    message.key = reader.uint32();
                    break;
                case /* optional uint32 value */ 5:
                    message.value = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetOpenStateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 key = 12; */
        if (message.key !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.key);
        /* optional uint32 value = 5; */
        if (message.value !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetOpenStateReq
 */
export const SetOpenStateReq = new SetOpenStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SetOpenStateRsp$Type extends MessageType<SetOpenStateRsp> {
    constructor() {
        super("com.midnights.game.SetOpenStateRsp", [
            { no: 9, name: "key", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "value", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SetOpenStateRsp>): SetOpenStateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SetOpenStateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SetOpenStateRsp): SetOpenStateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 key */ 9:
                    message.key = reader.uint32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 value */ 15:
                    message.value = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SetOpenStateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 key = 9; */
        if (message.key !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.key);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 value = 15; */
        if (message.value !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.value);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SetOpenStateRsp
 */
export const SetOpenStateRsp = new SetOpenStateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenStateUpdateNotify$Type extends MessageType<OpenStateUpdateNotify> {
    constructor() {
        super("com.midnights.game.OpenStateUpdateNotify", [
            { no: 6, name: "open_state_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<OpenStateUpdateNotify>): OpenStateUpdateNotify {
        const message = { openStateMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenStateUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenStateUpdateNotify): OpenStateUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> open_state_map */ 6:
                    this.binaryReadMap6(message.openStateMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: OpenStateUpdateNotify["openStateMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof OpenStateUpdateNotify["openStateMap"] | undefined, val: OpenStateUpdateNotify["openStateMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.OpenStateUpdateNotify.open_state_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: OpenStateUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> open_state_map = 6; */
        for (let k of Object.keys(message.openStateMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.openStateMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OpenStateUpdateNotify
 */
export const OpenStateUpdateNotify = new OpenStateUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class OpenStateChangeNotify$Type extends MessageType<OpenStateChangeNotify> {
    constructor() {
        super("com.midnights.game.OpenStateChangeNotify", [
            { no: 4, name: "open_state_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<OpenStateChangeNotify>): OpenStateChangeNotify {
        const message = { openStateMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<OpenStateChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: OpenStateChangeNotify): OpenStateChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> open_state_map */ 4:
                    this.binaryReadMap4(message.openStateMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap4(map: OpenStateChangeNotify["openStateMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof OpenStateChangeNotify["openStateMap"] | undefined, val: OpenStateChangeNotify["openStateMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.OpenStateChangeNotify.open_state_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: OpenStateChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> open_state_map = 4; */
        for (let k of Object.keys(message.openStateMap))
            writer.tag(4, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.openStateMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.OpenStateChangeNotify
 */
export const OpenStateChangeNotify = new OpenStateChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCookReq$Type extends MessageType<PlayerCookReq> {
    constructor() {
        super("com.midnights.game.PlayerCookReq", [
            { no: 1, name: "cook_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "qte_quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "recipe_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "assist_avatar", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCookReq>): PlayerCookReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCookReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCookReq): PlayerCookReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cook_count */ 1:
                    message.cookCount = reader.uint32();
                    break;
                case /* optional uint32 qte_quality */ 12:
                    message.qteQuality = reader.uint32();
                    break;
                case /* optional uint32 recipe_id */ 8:
                    message.recipeId = reader.uint32();
                    break;
                case /* optional uint32 assist_avatar */ 14:
                    message.assistAvatar = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCookReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cook_count = 1; */
        if (message.cookCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.cookCount);
        /* optional uint32 qte_quality = 12; */
        if (message.qteQuality !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.qteQuality);
        /* optional uint32 recipe_id = 8; */
        if (message.recipeId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.recipeId);
        /* optional uint32 assist_avatar = 14; */
        if (message.assistAvatar !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.assistAvatar);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCookReq
 */
export const PlayerCookReq = new PlayerCookReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCookRsp$Type extends MessageType<PlayerCookRsp> {
    constructor() {
        super("com.midnights.game.PlayerCookRsp", [
            { no: 15, name: "extral_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 12, name: "cook_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "qte_quality", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "recipe_data", kind: "message", T: () => CookRecipeData }
        ]);
    }
    create(value?: PartialMessage<PlayerCookRsp>): PlayerCookRsp {
        const message = { extralItemList: [], itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCookRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCookRsp): PlayerCookRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam extral_item_list */ 15:
                    message.extralItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 cook_count */ 12:
                    message.cookCount = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_list */ 11:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 qte_quality */ 5:
                    message.qteQuality = reader.uint32();
                    break;
                case /* optional com.midnights.game.CookRecipeData recipe_data */ 7:
                    message.recipeData = CookRecipeData.internalBinaryRead(reader, reader.uint32(), options, message.recipeData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCookRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam extral_item_list = 15; */
        for (let i = 0; i < message.extralItemList.length; i++)
            ItemParam.internalBinaryWrite(message.extralItemList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 cook_count = 12; */
        if (message.cookCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.cookCount);
        /* repeated com.midnights.game.ItemParam item_list = 11; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 qte_quality = 5; */
        if (message.qteQuality !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.qteQuality);
        /* optional com.midnights.game.CookRecipeData recipe_data = 7; */
        if (message.recipeData)
            CookRecipeData.internalBinaryWrite(message.recipeData, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCookRsp
 */
export const PlayerCookRsp = new PlayerCookRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRandomCookReq$Type extends MessageType<PlayerRandomCookReq> {
    constructor() {
        super("com.midnights.game.PlayerRandomCookReq", [
            { no: 13, name: "material_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam }
        ]);
    }
    create(value?: PartialMessage<PlayerRandomCookReq>): PlayerRandomCookReq {
        const message = { materialList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerRandomCookReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerRandomCookReq): PlayerRandomCookReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam material_list */ 13:
                    message.materialList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerRandomCookReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam material_list = 13; */
        for (let i = 0; i < message.materialList.length; i++)
            ItemParam.internalBinaryWrite(message.materialList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerRandomCookReq
 */
export const PlayerRandomCookReq = new PlayerRandomCookReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerRandomCookRsp$Type extends MessageType<PlayerRandomCookRsp> {
    constructor() {
        super("com.midnights.game.PlayerRandomCookRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerRandomCookRsp>): PlayerRandomCookRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerRandomCookRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerRandomCookRsp): PlayerRandomCookRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerRandomCookRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerRandomCookRsp
 */
export const PlayerRandomCookRsp = new PlayerRandomCookRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CookRecipeData$Type extends MessageType<CookRecipeData> {
    constructor() {
        super("com.midnights.game.CookRecipeData", [
            { no: 13, name: "proficiency", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "recipe_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CookRecipeData>): CookRecipeData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CookRecipeData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CookRecipeData): CookRecipeData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 proficiency */ 13:
                    message.proficiency = reader.uint32();
                    break;
                case /* optional uint32 recipe_id */ 9:
                    message.recipeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CookRecipeData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 proficiency = 13; */
        if (message.proficiency !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.proficiency);
        /* optional uint32 recipe_id = 9; */
        if (message.recipeId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.recipeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CookRecipeData
 */
export const CookRecipeData = new CookRecipeData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CookDataNotify$Type extends MessageType<CookDataNotify> {
    constructor() {
        super("com.midnights.game.CookDataNotify", [
            { no: 2, name: "recipe_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CookRecipeData },
            { no: 11, name: "grade", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CookDataNotify>): CookDataNotify {
        const message = { recipeDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CookDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CookDataNotify): CookDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.CookRecipeData recipe_data_list */ 2:
                    message.recipeDataList.push(CookRecipeData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 grade */ 11:
                    message.grade = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CookDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.CookRecipeData recipe_data_list = 2; */
        for (let i = 0; i < message.recipeDataList.length; i++)
            CookRecipeData.internalBinaryWrite(message.recipeDataList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 grade = 11; */
        if (message.grade !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.grade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CookDataNotify
 */
export const CookDataNotify = new CookDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CookRecipeDataNotify$Type extends MessageType<CookRecipeDataNotify> {
    constructor() {
        super("com.midnights.game.CookRecipeDataNotify", [
            { no: 4, name: "recipe_data", kind: "message", T: () => CookRecipeData }
        ]);
    }
    create(value?: PartialMessage<CookRecipeDataNotify>): CookRecipeDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CookRecipeDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CookRecipeDataNotify): CookRecipeDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CookRecipeData recipe_data */ 4:
                    message.recipeData = CookRecipeData.internalBinaryRead(reader, reader.uint32(), options, message.recipeData);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CookRecipeDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.CookRecipeData recipe_data = 4; */
        if (message.recipeData)
            CookRecipeData.internalBinaryWrite(message.recipeData, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CookRecipeDataNotify
 */
export const CookRecipeDataNotify = new CookRecipeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CookGradeDataNotify$Type extends MessageType<CookGradeDataNotify> {
    constructor() {
        super("com.midnights.game.CookGradeDataNotify", [
            { no: 12, name: "grade", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CookGradeDataNotify>): CookGradeDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CookGradeDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CookGradeDataNotify): CookGradeDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 grade */ 12:
                    message.grade = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CookGradeDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 grade = 12; */
        if (message.grade !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.grade);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CookGradeDataNotify
 */
export const CookGradeDataNotify = new CookGradeDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCompoundMaterialReq$Type extends MessageType<PlayerCompoundMaterialReq> {
    constructor() {
        super("com.midnights.game.PlayerCompoundMaterialReq", [
            { no: 11, name: "count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "compound_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCompoundMaterialReq>): PlayerCompoundMaterialReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCompoundMaterialReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCompoundMaterialReq): PlayerCompoundMaterialReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 count */ 11:
                    message.count = reader.uint32();
                    break;
                case /* optional uint32 compound_id */ 3:
                    message.compoundId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCompoundMaterialReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 count = 11; */
        if (message.count !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.count);
        /* optional uint32 compound_id = 3; */
        if (message.compoundId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.compoundId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCompoundMaterialReq
 */
export const PlayerCompoundMaterialReq = new PlayerCompoundMaterialReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompoundQueueData$Type extends MessageType<CompoundQueueData> {
    constructor() {
        super("com.midnights.game.CompoundQueueData", [
            { no: 1, name: "output_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "compound_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "output_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "wait_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CompoundQueueData>): CompoundQueueData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompoundQueueData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompoundQueueData): CompoundQueueData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 output_count */ 1:
                    message.outputCount = reader.uint32();
                    break;
                case /* optional uint32 compound_id */ 4:
                    message.compoundId = reader.uint32();
                    break;
                case /* optional uint32 output_time */ 14:
                    message.outputTime = reader.uint32();
                    break;
                case /* optional uint32 wait_count */ 8:
                    message.waitCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompoundQueueData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 output_count = 1; */
        if (message.outputCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.outputCount);
        /* optional uint32 compound_id = 4; */
        if (message.compoundId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.compoundId);
        /* optional uint32 output_time = 14; */
        if (message.outputTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.outputTime);
        /* optional uint32 wait_count = 8; */
        if (message.waitCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.waitCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CompoundQueueData
 */
export const CompoundQueueData = new CompoundQueueData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCompoundMaterialRsp$Type extends MessageType<PlayerCompoundMaterialRsp> {
    constructor() {
        super("com.midnights.game.PlayerCompoundMaterialRsp", [
            { no: 5, name: "compound_que_data", kind: "message", T: () => CompoundQueueData },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCompoundMaterialRsp>): PlayerCompoundMaterialRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCompoundMaterialRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCompoundMaterialRsp): PlayerCompoundMaterialRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.CompoundQueueData compound_que_data */ 5:
                    message.compoundQueData = CompoundQueueData.internalBinaryRead(reader, reader.uint32(), options, message.compoundQueData);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCompoundMaterialRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.CompoundQueueData compound_que_data = 5; */
        if (message.compoundQueData)
            CompoundQueueData.internalBinaryWrite(message.compoundQueData, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCompoundMaterialRsp
 */
export const PlayerCompoundMaterialRsp = new PlayerCompoundMaterialRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCompoundOutputReq$Type extends MessageType<TakeCompoundOutputReq> {
    constructor() {
        super("com.midnights.game.TakeCompoundOutputReq", [
            { no: 3, name: "compound_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "compound_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCompoundOutputReq>): TakeCompoundOutputReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCompoundOutputReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCompoundOutputReq): TakeCompoundOutputReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 compound_group_id */ 3:
                    message.compoundGroupId = reader.uint32();
                    break;
                case /* optional uint32 compound_id */ 10:
                    message.compoundId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCompoundOutputReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 compound_group_id = 3; */
        if (message.compoundGroupId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.compoundGroupId);
        /* optional uint32 compound_id = 10; */
        if (message.compoundId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.compoundId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCompoundOutputReq
 */
export const TakeCompoundOutputReq = new TakeCompoundOutputReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeCompoundOutputRsp$Type extends MessageType<TakeCompoundOutputRsp> {
    constructor() {
        super("com.midnights.game.TakeCompoundOutputRsp", [
            { no: 6, name: "item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeCompoundOutputRsp>): TakeCompoundOutputRsp {
        const message = { itemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeCompoundOutputRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeCompoundOutputRsp): TakeCompoundOutputRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam item_list */ 6:
                    message.itemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeCompoundOutputRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam item_list = 6; */
        for (let i = 0; i < message.itemList.length; i++)
            ItemParam.internalBinaryWrite(message.itemList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeCompoundOutputRsp
 */
export const TakeCompoundOutputRsp = new TakeCompoundOutputRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompoundDataNotify$Type extends MessageType<CompoundDataNotify> {
    constructor() {
        super("com.midnights.game.CompoundDataNotify", [
            { no: 1, name: "unlock_compound_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "compound_que_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CompoundQueueData }
        ]);
    }
    create(value?: PartialMessage<CompoundDataNotify>): CompoundDataNotify {
        const message = { unlockCompoundList: [], compoundQueDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompoundDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompoundDataNotify): CompoundDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlock_compound_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCompoundList.push(reader.uint32());
                    else
                        message.unlockCompoundList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.CompoundQueueData compound_que_data_list */ 9:
                    message.compoundQueDataList.push(CompoundQueueData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompoundDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 unlock_compound_list = 1; */
        for (let i = 0; i < message.unlockCompoundList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.unlockCompoundList[i]);
        /* repeated com.midnights.game.CompoundQueueData compound_que_data_list = 9; */
        for (let i = 0; i < message.compoundQueDataList.length; i++)
            CompoundQueueData.internalBinaryWrite(message.compoundQueDataList[i], writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CompoundDataNotify
 */
export const CompoundDataNotify = new CompoundDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCompoundDataReq$Type extends MessageType<GetCompoundDataReq> {
    constructor() {
        super("com.midnights.game.GetCompoundDataReq", []);
    }
    create(value?: PartialMessage<GetCompoundDataReq>): GetCompoundDataReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCompoundDataReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCompoundDataReq): GetCompoundDataReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetCompoundDataReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCompoundDataReq
 */
export const GetCompoundDataReq = new GetCompoundDataReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetCompoundDataRsp$Type extends MessageType<GetCompoundDataRsp> {
    constructor() {
        super("com.midnights.game.GetCompoundDataRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "unlock_compound_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "compound_que_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CompoundQueueData }
        ]);
    }
    create(value?: PartialMessage<GetCompoundDataRsp>): GetCompoundDataRsp {
        const message = { unlockCompoundList: [], compoundQueDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetCompoundDataRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetCompoundDataRsp): GetCompoundDataRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 unlock_compound_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockCompoundList.push(reader.uint32());
                    else
                        message.unlockCompoundList.push(reader.uint32());
                    break;
                case /* repeated com.midnights.game.CompoundQueueData compound_que_data_list */ 7:
                    message.compoundQueDataList.push(CompoundQueueData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetCompoundDataRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* repeated uint32 unlock_compound_list = 11; */
        for (let i = 0; i < message.unlockCompoundList.length; i++)
            writer.tag(11, WireType.Varint).uint32(message.unlockCompoundList[i]);
        /* repeated com.midnights.game.CompoundQueueData compound_que_data_list = 7; */
        for (let i = 0; i < message.compoundQueDataList.length; i++)
            CompoundQueueData.internalBinaryWrite(message.compoundQueDataList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetCompoundDataRsp
 */
export const GetCompoundDataRsp = new GetCompoundDataRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerTimeNotify$Type extends MessageType<PlayerTimeNotify> {
    constructor() {
        super("com.midnights.game.PlayerTimeNotify", [
            { no: 5, name: "server_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "player_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "is_paused", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerTimeNotify>): PlayerTimeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerTimeNotify): PlayerTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 server_time */ 5:
                    message.serverTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 player_time */ 11:
                    message.playerTime = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_paused */ 14:
                    message.isPaused = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 server_time = 5; */
        if (message.serverTime !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.serverTime);
        /* optional uint64 player_time = 11; */
        if (message.playerTime !== undefined)
            writer.tag(11, WireType.Varint).uint64(message.playerTime);
        /* optional bool is_paused = 14; */
        if (message.isPaused !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isPaused);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerTimeNotify
 */
export const PlayerTimeNotify = new PlayerTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetPauseReq$Type extends MessageType<PlayerSetPauseReq> {
    constructor() {
        super("com.midnights.game.PlayerSetPauseReq", [
            { no: 1, name: "is_paused", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetPauseReq>): PlayerSetPauseReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetPauseReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetPauseReq): PlayerSetPauseReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_paused */ 1:
                    message.isPaused = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetPauseReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_paused = 1; */
        if (message.isPaused !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isPaused);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetPauseReq
 */
export const PlayerSetPauseReq = new PlayerSetPauseReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetPauseRsp$Type extends MessageType<PlayerSetPauseRsp> {
    constructor() {
        super("com.midnights.game.PlayerSetPauseRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetPauseRsp>): PlayerSetPauseRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetPauseRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetPauseRsp): PlayerSetPauseRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetPauseRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetPauseRsp
 */
export const PlayerSetPauseRsp = new PlayerSetPauseRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetLanguageReq$Type extends MessageType<PlayerSetLanguageReq> {
    constructor() {
        super("com.midnights.game.PlayerSetLanguageReq", [
            { no: 5, name: "language_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetLanguageReq>): PlayerSetLanguageReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetLanguageReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetLanguageReq): PlayerSetLanguageReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 language_type */ 5:
                    message.languageType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetLanguageReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 language_type = 5; */
        if (message.languageType !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.languageType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetLanguageReq
 */
export const PlayerSetLanguageReq = new PlayerSetLanguageReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetLanguageRsp$Type extends MessageType<PlayerSetLanguageRsp> {
    constructor() {
        super("com.midnights.game.PlayerSetLanguageRsp", [
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetLanguageRsp>): PlayerSetLanguageRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetLanguageRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetLanguageRsp): PlayerSetLanguageRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetLanguageRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetLanguageRsp
 */
export const PlayerSetLanguageRsp = new PlayerSetLanguageRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DataResVersionNotify$Type extends MessageType<DataResVersionNotify> {
    constructor() {
        super("com.midnights.game.DataResVersionNotify", [
            { no: 10, name: "client_silence_md5", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "client_silence_version_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 7, name: "is_data_need_relogin", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "op_type", kind: "enum", opt: true, T: () => ["com.midnights.game.DataResVersionNotify.DataResVersionOpType", DataResVersionNotify_DataResVersionOpType] },
            { no: 2, name: "client_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "client_version_suffix", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 1, name: "client_silence_data_version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "client_md5", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<DataResVersionNotify>): DataResVersionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DataResVersionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DataResVersionNotify): DataResVersionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string client_silence_md5 */ 10:
                    message.clientSilenceMd5 = reader.string();
                    break;
                case /* optional string client_silence_version_suffix */ 15:
                    message.clientSilenceVersionSuffix = reader.string();
                    break;
                case /* optional com.midnights.game.ResVersionConfig res_version_config */ 9:
                    message.resVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.resVersionConfig);
                    break;
                case /* optional bool is_data_need_relogin */ 7:
                    message.isDataNeedRelogin = reader.bool();
                    break;
                case /* optional com.midnights.game.DataResVersionNotify.DataResVersionOpType op_type */ 12:
                    message.opType = reader.int32();
                    break;
                case /* optional uint32 client_data_version */ 2:
                    message.clientDataVersion = reader.uint32();
                    break;
                case /* optional string client_version_suffix */ 5:
                    message.clientVersionSuffix = reader.string();
                    break;
                case /* optional uint32 client_silence_data_version */ 1:
                    message.clientSilenceDataVersion = reader.uint32();
                    break;
                case /* optional string client_md5 */ 14:
                    message.clientMd5 = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DataResVersionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string client_silence_md5 = 10; */
        if (message.clientSilenceMd5 !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.clientSilenceMd5);
        /* optional string client_silence_version_suffix = 15; */
        if (message.clientSilenceVersionSuffix !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.clientSilenceVersionSuffix);
        /* optional com.midnights.game.ResVersionConfig res_version_config = 9; */
        if (message.resVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.resVersionConfig, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_data_need_relogin = 7; */
        if (message.isDataNeedRelogin !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isDataNeedRelogin);
        /* optional com.midnights.game.DataResVersionNotify.DataResVersionOpType op_type = 12; */
        if (message.opType !== undefined)
            writer.tag(12, WireType.Varint).int32(message.opType);
        /* optional uint32 client_data_version = 2; */
        if (message.clientDataVersion !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.clientDataVersion);
        /* optional string client_version_suffix = 5; */
        if (message.clientVersionSuffix !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.clientVersionSuffix);
        /* optional uint32 client_silence_data_version = 1; */
        if (message.clientSilenceDataVersion !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.clientSilenceDataVersion);
        /* optional string client_md5 = 14; */
        if (message.clientMd5 !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.clientMd5);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DataResVersionNotify
 */
export const DataResVersionNotify = new DataResVersionNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskInfo$Type extends MessageType<DailyTaskInfo> {
    constructor() {
        super("com.midnights.game.DailyTaskInfo", [
            { no: 3, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "finish_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "daily_task_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskInfo>): DailyTaskInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskInfo): DailyTaskInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 3:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional uint32 progress */ 13:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 finish_progress */ 10:
                    message.finishProgress = reader.uint32();
                    break;
                case /* optional uint32 daily_task_id */ 4:
                    message.dailyTaskId = reader.uint32();
                    break;
                case /* optional bool is_finished */ 14:
                    message.isFinished = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 3; */
        if (message.rewardId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.rewardId);
        /* optional uint32 progress = 13; */
        if (message.progress !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.progress);
        /* optional uint32 finish_progress = 10; */
        if (message.finishProgress !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.finishProgress);
        /* optional uint32 daily_task_id = 4; */
        if (message.dailyTaskId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.dailyTaskId);
        /* optional bool is_finished = 14; */
        if (message.isFinished !== undefined)
            writer.tag(14, WireType.Varint).bool(message.isFinished);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskInfo
 */
export const DailyTaskInfo = new DailyTaskInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskDataNotify$Type extends MessageType<DailyTaskDataNotify> {
    constructor() {
        super("com.midnights.game.DailyTaskDataNotify", [
            { no: 11, name: "score_reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "finished_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_taken_score_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskDataNotify>): DailyTaskDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskDataNotify): DailyTaskDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score_reward_id */ 11:
                    message.scoreRewardId = reader.uint32();
                    break;
                case /* optional uint32 finished_num */ 4:
                    message.finishedNum = reader.uint32();
                    break;
                case /* optional bool is_taken_score_reward */ 9:
                    message.isTakenScoreReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score_reward_id = 11; */
        if (message.scoreRewardId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.scoreRewardId);
        /* optional uint32 finished_num = 4; */
        if (message.finishedNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.finishedNum);
        /* optional bool is_taken_score_reward = 9; */
        if (message.isTakenScoreReward !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isTakenScoreReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskDataNotify
 */
export const DailyTaskDataNotify = new DailyTaskDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskProgressNotify$Type extends MessageType<DailyTaskProgressNotify> {
    constructor() {
        super("com.midnights.game.DailyTaskProgressNotify", [
            { no: 12, name: "info", kind: "message", T: () => DailyTaskInfo }
        ]);
    }
    create(value?: PartialMessage<DailyTaskProgressNotify>): DailyTaskProgressNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskProgressNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskProgressNotify): DailyTaskProgressNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DailyTaskInfo info */ 12:
                    message.info = DailyTaskInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskProgressNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DailyTaskInfo info = 12; */
        if (message.info)
            DailyTaskInfo.internalBinaryWrite(message.info, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskProgressNotify
 */
export const DailyTaskProgressNotify = new DailyTaskProgressNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskScoreRewardNotify$Type extends MessageType<DailyTaskScoreRewardNotify> {
    constructor() {
        super("com.midnights.game.DailyTaskScoreRewardNotify", [
            { no: 14, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskScoreRewardNotify>): DailyTaskScoreRewardNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskScoreRewardNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskScoreRewardNotify): DailyTaskScoreRewardNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 14:
                    message.rewardId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskScoreRewardNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 14; */
        if (message.rewardId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.rewardId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskScoreRewardNotify
 */
export const DailyTaskScoreRewardNotify = new DailyTaskScoreRewardNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WorldOwnerDailyTaskNotify$Type extends MessageType<WorldOwnerDailyTaskNotify> {
    constructor() {
        super("com.midnights.game.WorldOwnerDailyTaskNotify", [
            { no: 2, name: "filter_city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "task_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => DailyTaskInfo }
        ]);
    }
    create(value?: PartialMessage<WorldOwnerDailyTaskNotify>): WorldOwnerDailyTaskNotify {
        const message = { taskList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WorldOwnerDailyTaskNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WorldOwnerDailyTaskNotify): WorldOwnerDailyTaskNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 filter_city_id */ 2:
                    message.filterCityId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.DailyTaskInfo task_list */ 1:
                    message.taskList.push(DailyTaskInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WorldOwnerDailyTaskNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 filter_city_id = 2; */
        if (message.filterCityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.filterCityId);
        /* repeated com.midnights.game.DailyTaskInfo task_list = 1; */
        for (let i = 0; i < message.taskList.length; i++)
            DailyTaskInfo.internalBinaryWrite(message.taskList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WorldOwnerDailyTaskNotify
 */
export const WorldOwnerDailyTaskNotify = new WorldOwnerDailyTaskNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AddRandTaskInfoNotify$Type extends MessageType<AddRandTaskInfoNotify> {
    constructor() {
        super("com.midnights.game.AddRandTaskInfoNotify", [
            { no: 5, name: "rand_task_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<AddRandTaskInfoNotify>): AddRandTaskInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AddRandTaskInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AddRandTaskInfoNotify): AddRandTaskInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 rand_task_id */ 5:
                    message.randTaskId = reader.uint32();
                    break;
                case /* optional com.midnights.game.Vector pos */ 13:
                    message.pos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.pos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AddRandTaskInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 rand_task_id = 5; */
        if (message.randTaskId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.randTaskId);
        /* optional com.midnights.game.Vector pos = 13; */
        if (message.pos)
            Vector.internalBinaryWrite(message.pos, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AddRandTaskInfoNotify
 */
export const AddRandTaskInfoNotify = new AddRandTaskInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RemoveRandTaskInfoNotify$Type extends MessageType<RemoveRandTaskInfoNotify> {
    constructor() {
        super("com.midnights.game.RemoveRandTaskInfoNotify", [
            { no: 9, name: "is_succ", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.RemoveRandTaskInfoNotify.FinishReason", RemoveRandTaskInfoNotify_FinishReason] },
            { no: 13, name: "rand_task_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RemoveRandTaskInfoNotify>): RemoveRandTaskInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RemoveRandTaskInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RemoveRandTaskInfoNotify): RemoveRandTaskInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_succ */ 9:
                    message.isSucc = reader.bool();
                    break;
                case /* optional com.midnights.game.RemoveRandTaskInfoNotify.FinishReason reason */ 10:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 rand_task_id */ 13:
                    message.randTaskId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RemoveRandTaskInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_succ = 9; */
        if (message.isSucc !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isSucc);
        /* optional com.midnights.game.RemoveRandTaskInfoNotify.FinishReason reason = 10; */
        if (message.reason !== undefined)
            writer.tag(10, WireType.Varint).int32(message.reason);
        /* optional uint32 rand_task_id = 13; */
        if (message.randTaskId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.randTaskId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RemoveRandTaskInfoNotify
 */
export const RemoveRandTaskInfoNotify = new RemoveRandTaskInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakePlayerLevelRewardReq$Type extends MessageType<TakePlayerLevelRewardReq> {
    constructor() {
        super("com.midnights.game.TakePlayerLevelRewardReq", [
            { no: 3, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakePlayerLevelRewardReq>): TakePlayerLevelRewardReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakePlayerLevelRewardReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakePlayerLevelRewardReq): TakePlayerLevelRewardReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level */ 3:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakePlayerLevelRewardReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level = 3; */
        if (message.level !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakePlayerLevelRewardReq
 */
export const TakePlayerLevelRewardReq = new TakePlayerLevelRewardReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakePlayerLevelRewardRsp$Type extends MessageType<TakePlayerLevelRewardRsp> {
    constructor() {
        super("com.midnights.game.TakePlayerLevelRewardRsp", [
            { no: 9, name: "reward_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakePlayerLevelRewardRsp>): TakePlayerLevelRewardRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakePlayerLevelRewardRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakePlayerLevelRewardRsp): TakePlayerLevelRewardRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 reward_id */ 9:
                    message.rewardId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 level */ 6:
                    message.level = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakePlayerLevelRewardRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 reward_id = 9; */
        if (message.rewardId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.rewardId);
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 level = 6; */
        if (message.level !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakePlayerLevelRewardRsp
 */
export const TakePlayerLevelRewardRsp = new TakePlayerLevelRewardRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLevelRewardUpdateNotify$Type extends MessageType<PlayerLevelRewardUpdateNotify> {
    constructor() {
        super("com.midnights.game.PlayerLevelRewardUpdateNotify", [
            { no: 9, name: "level_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLevelRewardUpdateNotify>): PlayerLevelRewardUpdateNotify {
        const message = { levelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLevelRewardUpdateNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLevelRewardUpdateNotify): PlayerLevelRewardUpdateNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 level_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.levelList.push(reader.uint32());
                    else
                        message.levelList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLevelRewardUpdateNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 level_list = 9; */
        for (let i = 0; i < message.levelList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.levelList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLevelRewardUpdateNotify
 */
export const PlayerLevelRewardUpdateNotify = new PlayerLevelRewardUpdateNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GivingRecord$Type extends MessageType<GivingRecord> {
    constructor() {
        super("com.midnights.game.GivingRecord", [
            { no: 9, name: "is_finished", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_gadget_giving", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "giving_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "last_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "config_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "material_cnt_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GivingRecord>): GivingRecord {
        const message = { materialCntMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GivingRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GivingRecord): GivingRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_finished */ 9:
                    message.isFinished = reader.bool();
                    break;
                case /* optional uint32 group_id */ 5:
                    message.groupId = reader.uint32();
                    break;
                case /* optional bool is_gadget_giving */ 8:
                    message.isGadgetGiving = reader.bool();
                    break;
                case /* optional uint32 giving_id */ 3:
                    message.givingId = reader.uint32();
                    break;
                case /* optional uint32 last_group_id */ 6:
                    message.lastGroupId = reader.uint32();
                    break;
                case /* optional uint32 config_id */ 2:
                    message.configId = reader.uint32();
                    break;
                case /* map<uint32, uint32> material_cnt_map */ 15:
                    this.binaryReadMap15(message.materialCntMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: GivingRecord["materialCntMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GivingRecord["materialCntMap"] | undefined, val: GivingRecord["materialCntMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GivingRecord.material_cnt_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GivingRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_finished = 9; */
        if (message.isFinished !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isFinished);
        /* optional uint32 group_id = 5; */
        if (message.groupId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.groupId);
        /* optional bool is_gadget_giving = 8; */
        if (message.isGadgetGiving !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isGadgetGiving);
        /* optional uint32 giving_id = 3; */
        if (message.givingId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.givingId);
        /* optional uint32 last_group_id = 6; */
        if (message.lastGroupId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.lastGroupId);
        /* optional uint32 config_id = 2; */
        if (message.configId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.configId);
        /* map<uint32, uint32> material_cnt_map = 15; */
        for (let k of Object.keys(message.materialCntMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.materialCntMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GivingRecord
 */
export const GivingRecord = new GivingRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GivingRecordNotify$Type extends MessageType<GivingRecordNotify> {
    constructor() {
        super("com.midnights.game.GivingRecordNotify", [
            { no: 14, name: "giving_record_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GivingRecord }
        ]);
    }
    create(value?: PartialMessage<GivingRecordNotify>): GivingRecordNotify {
        const message = { givingRecordList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GivingRecordNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GivingRecordNotify): GivingRecordNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GivingRecord giving_record_list */ 14:
                    message.givingRecordList.push(GivingRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GivingRecordNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GivingRecord giving_record_list = 14; */
        for (let i = 0; i < message.givingRecordList.length; i++)
            GivingRecord.internalBinaryWrite(message.givingRecordList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GivingRecordNotify
 */
export const GivingRecordNotify = new GivingRecordNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GivingRecordChangeNotify$Type extends MessageType<GivingRecordChangeNotify> {
    constructor() {
        super("com.midnights.game.GivingRecordChangeNotify", [
            { no: 11, name: "is_deactive", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "giving_record", kind: "message", T: () => GivingRecord }
        ]);
    }
    create(value?: PartialMessage<GivingRecordChangeNotify>): GivingRecordChangeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GivingRecordChangeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GivingRecordChangeNotify): GivingRecordChangeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_deactive */ 11:
                    message.isDeactive = reader.bool();
                    break;
                case /* optional com.midnights.game.GivingRecord giving_record */ 15:
                    message.givingRecord = GivingRecord.internalBinaryRead(reader, reader.uint32(), options, message.givingRecord);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GivingRecordChangeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_deactive = 11; */
        if (message.isDeactive !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isDeactive);
        /* optional com.midnights.game.GivingRecord giving_record = 15; */
        if (message.givingRecord)
            GivingRecord.internalBinaryWrite(message.givingRecord, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GivingRecordChangeNotify
 */
export const GivingRecordChangeNotify = new GivingRecordChangeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemGivingReq$Type extends MessageType<ItemGivingReq> {
    constructor() {
        super("com.midnights.game.ItemGivingReq", [
            { no: 15, name: "item_guid_count_map", kind: "map", K: 4 /*ScalarType.UINT64*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 13, name: "giving_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "item_param_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 2, name: "item_giving_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ItemGivingReq.ItemGivingType", ItemGivingReq_ItemGivingType] }
        ]);
    }
    create(value?: PartialMessage<ItemGivingReq>): ItemGivingReq {
        const message = { itemGuidCountMap: {}, itemParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemGivingReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemGivingReq): ItemGivingReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint64, uint32> item_guid_count_map */ 15:
                    this.binaryReadMap15(message.itemGuidCountMap, reader, options);
                    break;
                case /* optional uint32 giving_id */ 13:
                    message.givingId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ItemParam item_param_list */ 4:
                    message.itemParamList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.ItemGivingReq.ItemGivingType item_giving_type */ 2:
                    message.itemGivingType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: ItemGivingReq["itemGuidCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof ItemGivingReq["itemGuidCountMap"] | undefined, val: ItemGivingReq["itemGuidCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint64().toString();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.ItemGivingReq.item_guid_count_map");
            }
        }
        map[key ?? "0"] = val ?? 0;
    }
    internalBinaryWrite(message: ItemGivingReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint64, uint32> item_guid_count_map = 15; */
        for (let k of Object.keys(message.itemGuidCountMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint64(k).tag(2, WireType.Varint).uint32(message.itemGuidCountMap[k]).join();
        /* optional uint32 giving_id = 13; */
        if (message.givingId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.givingId);
        /* repeated com.midnights.game.ItemParam item_param_list = 4; */
        for (let i = 0; i < message.itemParamList.length; i++)
            ItemParam.internalBinaryWrite(message.itemParamList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.ItemGivingReq.ItemGivingType item_giving_type = 2; */
        if (message.itemGivingType !== undefined)
            writer.tag(2, WireType.Varint).int32(message.itemGivingType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ItemGivingReq
 */
export const ItemGivingReq = new ItemGivingReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ItemGivingRsp$Type extends MessageType<ItemGivingRsp> {
    constructor() {
        super("com.midnights.game.ItemGivingRsp", [
            { no: 1, name: "giving_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "giving_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ItemGivingRsp>): ItemGivingRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ItemGivingRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ItemGivingRsp): ItemGivingRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 giving_group_id */ 1:
                    message.givingGroupId = reader.uint32();
                    break;
                case /* optional uint32 giving_id */ 13:
                    message.givingId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ItemGivingRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 giving_group_id = 1; */
        if (message.givingGroupId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.givingGroupId);
        /* optional uint32 giving_id = 13; */
        if (message.givingId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.givingId);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ItemGivingRsp
 */
export const ItemGivingRsp = new ItemGivingRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCookArgsReq$Type extends MessageType<PlayerCookArgsReq> {
    constructor() {
        super("com.midnights.game.PlayerCookArgsReq", [
            { no: 10, name: "assist_avatar", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "recipe_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCookArgsReq>): PlayerCookArgsReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCookArgsReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCookArgsReq): PlayerCookArgsReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 assist_avatar */ 10:
                    message.assistAvatar = reader.uint32();
                    break;
                case /* optional uint32 recipe_id */ 11:
                    message.recipeId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCookArgsReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 assist_avatar = 10; */
        if (message.assistAvatar !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.assistAvatar);
        /* optional uint32 recipe_id = 11; */
        if (message.recipeId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.recipeId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCookArgsReq
 */
export const PlayerCookArgsReq = new PlayerCookArgsReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCookArgsRsp$Type extends MessageType<PlayerCookArgsRsp> {
    constructor() {
        super("com.midnights.game.PlayerCookArgsRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "qte_range_ratio", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCookArgsRsp>): PlayerCookArgsRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCookArgsRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCookArgsRsp): PlayerCookArgsRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional float qte_range_ratio */ 12:
                    message.qteRangeRatio = reader.float();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCookArgsRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional float qte_range_ratio = 12; */
        if (message.qteRangeRatio !== undefined)
            writer.tag(12, WireType.Bit32).float(message.qteRangeRatio);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCookArgsRsp
 */
export const PlayerCookArgsRsp = new PlayerCookArgsRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLuaShellNotify$Type extends MessageType<PlayerLuaShellNotify> {
    constructor() {
        super("com.midnights.game.PlayerLuaShellNotify", [
            { no: 7, name: "shell_type", kind: "enum", opt: true, T: () => ["com.midnights.game.LuaShellType", LuaShellType] },
            { no: 5, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "lua_shell", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ },
            { no: 10, name: "use_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerLuaShellNotify>): PlayerLuaShellNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLuaShellNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLuaShellNotify): PlayerLuaShellNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.LuaShellType shell_type */ 7:
                    message.shellType = reader.int32();
                    break;
                case /* optional uint32 id */ 5:
                    message.id = reader.uint32();
                    break;
                case /* optional bytes lua_shell */ 12:
                    message.luaShell = reader.bytes();
                    break;
                case /* optional uint32 use_type */ 10:
                    message.useType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerLuaShellNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.LuaShellType shell_type = 7; */
        if (message.shellType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.shellType);
        /* optional uint32 id = 5; */
        if (message.id !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.id);
        /* optional bytes lua_shell = 12; */
        if (message.luaShell !== undefined)
            writer.tag(12, WireType.LengthDelimited).bytes(message.luaShell);
        /* optional uint32 use_type = 10; */
        if (message.useType !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.useType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerLuaShellNotify
 */
export const PlayerLuaShellNotify = new PlayerLuaShellNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerDisconnectClientNotify$Type extends MessageType<ServerDisconnectClientNotify> {
    constructor() {
        super("com.midnights.game.ServerDisconnectClientNotify", [
            { no: 10, name: "data", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerDisconnectClientNotify>): ServerDisconnectClientNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerDisconnectClientNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerDisconnectClientNotify): ServerDisconnectClientNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 data */ 10:
                    message.data = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerDisconnectClientNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 data = 10; */
        if (message.data !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.data);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerDisconnectClientNotify
 */
export const ServerDisconnectClientNotify = new ServerDisconnectClientNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AntiAddictNotify$Type extends MessageType<AntiAddictNotify> {
    constructor() {
        super("com.midnights.game.AntiAddictNotify", [
            { no: 6, name: "msg_type", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "msg", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "level", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AntiAddictNotify>): AntiAddictNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AntiAddictNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AntiAddictNotify): AntiAddictNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 msg_type */ 6:
                    message.msgType = reader.int32();
                    break;
                case /* optional string msg */ 3:
                    message.msg = reader.string();
                    break;
                case /* optional string level */ 5:
                    message.level = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AntiAddictNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 msg_type = 6; */
        if (message.msgType !== undefined)
            writer.tag(6, WireType.Varint).int32(message.msgType);
        /* optional string msg = 3; */
        if (message.msg !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.msg);
        /* optional string level = 5; */
        if (message.level !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.level);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AntiAddictNotify
 */
export const AntiAddictNotify = new AntiAddictNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerForceExitReq$Type extends MessageType<PlayerForceExitReq> {
    constructor() {
        super("com.midnights.game.PlayerForceExitReq", []);
    }
    create(value?: PartialMessage<PlayerForceExitReq>): PlayerForceExitReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerForceExitReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerForceExitReq): PlayerForceExitReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlayerForceExitReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerForceExitReq
 */
export const PlayerForceExitReq = new PlayerForceExitReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerForceExitRsp$Type extends MessageType<PlayerForceExitRsp> {
    constructor() {
        super("com.midnights.game.PlayerForceExitRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerForceExitRsp>): PlayerForceExitRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerForceExitRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerForceExitRsp): PlayerForceExitRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerForceExitRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerForceExitRsp
 */
export const PlayerForceExitRsp = new PlayerForceExitRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerInjectFixNotify$Type extends MessageType<PlayerInjectFixNotify> {
    constructor() {
        super("com.midnights.game.PlayerInjectFixNotify", [
            { no: 13, name: "id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "inject_fix", kind: "scalar", opt: true, T: 12 /*ScalarType.BYTES*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerInjectFixNotify>): PlayerInjectFixNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerInjectFixNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerInjectFixNotify): PlayerInjectFixNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 id */ 13:
                    message.id = reader.uint32();
                    break;
                case /* optional bytes inject_fix */ 10:
                    message.injectFix = reader.bytes();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerInjectFixNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 id = 13; */
        if (message.id !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.id);
        /* optional bytes inject_fix = 10; */
        if (message.injectFix !== undefined)
            writer.tag(10, WireType.LengthDelimited).bytes(message.injectFix);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerInjectFixNotify
 */
export const PlayerInjectFixNotify = new PlayerInjectFixNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskVar$Type extends MessageType<TaskVar> {
    constructor() {
        super("com.midnights.game.TaskVar", [
            { no: 8, name: "key", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "value_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TaskVar>): TaskVar {
        const message = { valueList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskVar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskVar): TaskVar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 key */ 8:
                    message.key = reader.uint32();
                    break;
                case /* repeated int32 value_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.valueList.push(reader.int32());
                    else
                        message.valueList.push(reader.int32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskVar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 key = 8; */
        if (message.key !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.key);
        /* repeated int32 value_list = 6; */
        for (let i = 0; i < message.valueList.length; i++)
            writer.tag(6, WireType.Varint).int32(message.valueList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TaskVar
 */
export const TaskVar = new TaskVar$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TaskVarNotify$Type extends MessageType<TaskVarNotify> {
    constructor() {
        super("com.midnights.game.TaskVarNotify", [
            { no: 7, name: "task_var_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => TaskVar }
        ]);
    }
    create(value?: PartialMessage<TaskVarNotify>): TaskVarNotify {
        const message = { taskVarList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TaskVarNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TaskVarNotify): TaskVarNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.TaskVar task_var_list */ 7:
                    message.taskVarList.push(TaskVar.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TaskVarNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.TaskVar task_var_list = 7; */
        for (let i = 0; i < message.taskVarList.length; i++)
            TaskVar.internalBinaryWrite(message.taskVarList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TaskVarNotify
 */
export const TaskVarNotify = new TaskVarNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ClientLockGameTimeNotify$Type extends MessageType<ClientLockGameTimeNotify> {
    constructor() {
        super("com.midnights.game.ClientLockGameTimeNotify", [
            { no: 5, name: "is_lock", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ClientLockGameTimeNotify>): ClientLockGameTimeNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ClientLockGameTimeNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ClientLockGameTimeNotify): ClientLockGameTimeNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_lock */ 5:
                    message.isLock = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ClientLockGameTimeNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_lock = 5; */
        if (message.isLock !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isLock);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ClientLockGameTimeNotify
 */
export const ClientLockGameTimeNotify = new ClientLockGameTimeNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNextResourceInfoReq$Type extends MessageType<GetNextResourceInfoReq> {
    constructor() {
        super("com.midnights.game.GetNextResourceInfoReq", []);
    }
    create(value?: PartialMessage<GetNextResourceInfoReq>): GetNextResourceInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetNextResourceInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNextResourceInfoReq): GetNextResourceInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetNextResourceInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetNextResourceInfoReq
 */
export const GetNextResourceInfoReq = new GetNextResourceInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetNextResourceInfoRsp$Type extends MessageType<GetNextResourceInfoRsp> {
    constructor() {
        super("com.midnights.game.GetNextResourceInfoRsp", [
            { no: 14, name: "next_resource_url", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "next_res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetNextResourceInfoRsp>): GetNextResourceInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetNextResourceInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetNextResourceInfoRsp): GetNextResourceInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string next_resource_url */ 14:
                    message.nextResourceUrl = reader.string();
                    break;
                case /* optional com.midnights.game.ResVersionConfig next_res_version_config */ 2:
                    message.nextResVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.nextResVersionConfig);
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetNextResourceInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string next_resource_url = 14; */
        if (message.nextResourceUrl !== undefined)
            writer.tag(14, WireType.LengthDelimited).string(message.nextResourceUrl);
        /* optional com.midnights.game.ResVersionConfig next_res_version_config = 2; */
        if (message.nextResVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.nextResVersionConfig, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetNextResourceInfoRsp
 */
export const GetNextResourceInfoRsp = new GetNextResourceInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdjustWorldLevelReq$Type extends MessageType<AdjustWorldLevelReq> {
    constructor() {
        super("com.midnights.game.AdjustWorldLevelReq", [
            { no: 8, name: "expect_world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cur_world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AdjustWorldLevelReq>): AdjustWorldLevelReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdjustWorldLevelReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdjustWorldLevelReq): AdjustWorldLevelReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 expect_world_level */ 8:
                    message.expectWorldLevel = reader.uint32();
                    break;
                case /* optional uint32 cur_world_level */ 9:
                    message.curWorldLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdjustWorldLevelReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 expect_world_level = 8; */
        if (message.expectWorldLevel !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.expectWorldLevel);
        /* optional uint32 cur_world_level = 9; */
        if (message.curWorldLevel !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curWorldLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AdjustWorldLevelReq
 */
export const AdjustWorldLevelReq = new AdjustWorldLevelReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AdjustWorldLevelRsp$Type extends MessageType<AdjustWorldLevelRsp> {
    constructor() {
        super("com.midnights.game.AdjustWorldLevelRsp", [
            { no: 13, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "cd_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "after_world_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<AdjustWorldLevelRsp>): AdjustWorldLevelRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AdjustWorldLevelRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AdjustWorldLevelRsp): AdjustWorldLevelRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 13:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 cd_over_time */ 15:
                    message.cdOverTime = reader.uint32();
                    break;
                case /* optional uint32 after_world_level */ 14:
                    message.afterWorldLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AdjustWorldLevelRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 13; */
        if (message.retcode !== undefined)
            writer.tag(13, WireType.Varint).int32(message.retcode);
        /* optional uint32 cd_over_time = 15; */
        if (message.cdOverTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.cdOverTime);
        /* optional uint32 after_world_level = 14; */
        if (message.afterWorldLevel !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.afterWorldLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.AdjustWorldLevelRsp
 */
export const AdjustWorldLevelRsp = new AdjustWorldLevelRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskFilterCityReq$Type extends MessageType<DailyTaskFilterCityReq> {
    constructor() {
        super("com.midnights.game.DailyTaskFilterCityReq", [
            { no: 8, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskFilterCityReq>): DailyTaskFilterCityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskFilterCityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskFilterCityReq): DailyTaskFilterCityReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 city_id */ 8:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskFilterCityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 city_id = 8; */
        if (message.cityId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskFilterCityReq
 */
export const DailyTaskFilterCityReq = new DailyTaskFilterCityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskFilterCityRsp$Type extends MessageType<DailyTaskFilterCityRsp> {
    constructor() {
        super("com.midnights.game.DailyTaskFilterCityRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "city_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskFilterCityRsp>): DailyTaskFilterCityRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskFilterCityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskFilterCityRsp): DailyTaskFilterCityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 city_id */ 9:
                    message.cityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskFilterCityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 city_id = 9; */
        if (message.cityId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.cityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskFilterCityRsp
 */
export const DailyTaskFilterCityRsp = new DailyTaskFilterCityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DailyTaskUnlockedCitiesNotify$Type extends MessageType<DailyTaskUnlockedCitiesNotify> {
    constructor() {
        super("com.midnights.game.DailyTaskUnlockedCitiesNotify", [
            { no: 12, name: "unlocked_city_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<DailyTaskUnlockedCitiesNotify>): DailyTaskUnlockedCitiesNotify {
        const message = { unlockedCityList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DailyTaskUnlockedCitiesNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DailyTaskUnlockedCitiesNotify): DailyTaskUnlockedCitiesNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 unlocked_city_list */ 12:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.unlockedCityList.push(reader.uint32());
                    else
                        message.unlockedCityList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DailyTaskUnlockedCitiesNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 unlocked_city_list = 12; */
        for (let i = 0; i < message.unlockedCityList.length; i++)
            writer.tag(12, WireType.Varint).uint32(message.unlockedCityList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DailyTaskUnlockedCitiesNotify
 */
export const DailyTaskUnlockedCitiesNotify = new DailyTaskUnlockedCitiesNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExclusiveRuleInfo$Type extends MessageType<ExclusiveRuleInfo> {
    constructor() {
        super("com.midnights.game.ExclusiveRuleInfo", [
            { no: 1, name: "object_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "rule_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ExclusiveRuleInfo>): ExclusiveRuleInfo {
        const message = { objectIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExclusiveRuleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExclusiveRuleInfo): ExclusiveRuleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 object_id_list */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.objectIdList.push(reader.uint32());
                    else
                        message.objectIdList.push(reader.uint32());
                    break;
                case /* optional uint32 rule_type */ 10:
                    message.ruleType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExclusiveRuleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 object_id_list = 1; */
        for (let i = 0; i < message.objectIdList.length; i++)
            writer.tag(1, WireType.Varint).uint32(message.objectIdList[i]);
        /* optional uint32 rule_type = 10; */
        if (message.ruleType !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.ruleType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExclusiveRuleInfo
 */
export const ExclusiveRuleInfo = new ExclusiveRuleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ExclusiveRuleNotify$Type extends MessageType<ExclusiveRuleNotify> {
    constructor() {
        super("com.midnights.game.ExclusiveRuleNotify", [
            { no: 5, name: "rule_info_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ExclusiveRuleInfo }
        ]);
    }
    create(value?: PartialMessage<ExclusiveRuleNotify>): ExclusiveRuleNotify {
        const message = { ruleInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ExclusiveRuleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ExclusiveRuleNotify): ExclusiveRuleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ExclusiveRuleInfo rule_info_list */ 5:
                    message.ruleInfoList.push(ExclusiveRuleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ExclusiveRuleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ExclusiveRuleInfo rule_info_list = 5; */
        for (let i = 0; i < message.ruleInfoList.length; i++)
            ExclusiveRuleInfo.internalBinaryWrite(message.ruleInfoList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ExclusiveRuleNotify
 */
export const ExclusiveRuleNotify = new ExclusiveRuleNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CompoundUnlockNotify$Type extends MessageType<CompoundUnlockNotify> {
    constructor() {
        super("com.midnights.game.CompoundUnlockNotify", [
            { no: 3, name: "compound_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<CompoundUnlockNotify>): CompoundUnlockNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CompoundUnlockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CompoundUnlockNotify): CompoundUnlockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 compound_id */ 3:
                    message.compoundId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CompoundUnlockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 compound_id = 3; */
        if (message.compoundId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.compoundId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CompoundUnlockNotify
 */
export const CompoundUnlockNotify = new CompoundUnlockNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationSkillRequest$Type extends MessageType<GameplayRecommendationSkillRequest> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationSkillRequest", [
            { no: 1, name: "skill_depot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationSkillRequest>): GameplayRecommendationSkillRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationSkillRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationSkillRequest): GameplayRecommendationSkillRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 skill_depot_id */ 1:
                    message.skillDepotId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationSkillRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 skill_depot_id = 1; */
        if (message.skillDepotId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.skillDepotId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationSkillRequest
 */
export const GameplayRecommendationSkillRequest = new GameplayRecommendationSkillRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationReliquaryRequest$Type extends MessageType<GameplayRecommendationReliquaryRequest> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationReliquaryRequest", [
            { no: 6, name: "equip_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationReliquaryRequest>): GameplayRecommendationReliquaryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationReliquaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationReliquaryRequest): GameplayRecommendationReliquaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 equip_type */ 6:
                    message.equipType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationReliquaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 equip_type = 6; */
        if (message.equipType !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.equipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationReliquaryRequest
 */
export const GameplayRecommendationReliquaryRequest = new GameplayRecommendationReliquaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationElementReliquaryRequest$Type extends MessageType<GameplayRecommendationElementReliquaryRequest> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationElementReliquaryRequest", [
            { no: 9, name: "equip_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "element_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationElementReliquaryRequest>): GameplayRecommendationElementReliquaryRequest {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationElementReliquaryRequest>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationElementReliquaryRequest): GameplayRecommendationElementReliquaryRequest {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 equip_type */ 9:
                    message.equipType = reader.uint32();
                    break;
                case /* optional uint32 element_type */ 12:
                    message.elementType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationElementReliquaryRequest, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 equip_type = 9; */
        if (message.equipType !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.equipType);
        /* optional uint32 element_type = 12; */
        if (message.elementType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.elementType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationElementReliquaryRequest
 */
export const GameplayRecommendationElementReliquaryRequest = new GameplayRecommendationElementReliquaryRequest$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameplayRecommendationReq$Type extends MessageType<GetGameplayRecommendationReq> {
    constructor() {
        super("com.midnights.game.GetGameplayRecommendationReq", [
            { no: 9, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 553, name: "skill_request", kind: "message", oneof: "detail", T: () => GameplayRecommendationSkillRequest },
            { no: 1993, name: "reliquary_request", kind: "message", oneof: "detail", T: () => GameplayRecommendationReliquaryRequest },
            { no: 1489, name: "element_reliquary_request", kind: "message", oneof: "detail", T: () => GameplayRecommendationElementReliquaryRequest }
        ]);
    }
    create(value?: PartialMessage<GetGameplayRecommendationReq>): GetGameplayRecommendationReq {
        const message = { detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGameplayRecommendationReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameplayRecommendationReq): GetGameplayRecommendationReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 avatar_id */ 9:
                    message.avatarId = reader.uint32();
                    break;
                case /* com.midnights.game.GameplayRecommendationSkillRequest skill_request */ 553:
                    message.detail = {
                        oneofKind: "skillRequest",
                        skillRequest: GameplayRecommendationSkillRequest.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).skillRequest)
                    };
                    break;
                case /* com.midnights.game.GameplayRecommendationReliquaryRequest reliquary_request */ 1993:
                    message.detail = {
                        oneofKind: "reliquaryRequest",
                        reliquaryRequest: GameplayRecommendationReliquaryRequest.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).reliquaryRequest)
                    };
                    break;
                case /* com.midnights.game.GameplayRecommendationElementReliquaryRequest element_reliquary_request */ 1489:
                    message.detail = {
                        oneofKind: "elementReliquaryRequest",
                        elementReliquaryRequest: GameplayRecommendationElementReliquaryRequest.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).elementReliquaryRequest)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameplayRecommendationReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 avatar_id = 9; */
        if (message.avatarId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.avatarId);
        /* com.midnights.game.GameplayRecommendationSkillRequest skill_request = 553; */
        if (message.detail.oneofKind === "skillRequest")
            GameplayRecommendationSkillRequest.internalBinaryWrite(message.detail.skillRequest, writer.tag(553, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GameplayRecommendationReliquaryRequest reliquary_request = 1993; */
        if (message.detail.oneofKind === "reliquaryRequest")
            GameplayRecommendationReliquaryRequest.internalBinaryWrite(message.detail.reliquaryRequest, writer.tag(1993, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GameplayRecommendationElementReliquaryRequest element_reliquary_request = 1489; */
        if (message.detail.oneofKind === "elementReliquaryRequest")
            GameplayRecommendationElementReliquaryRequest.internalBinaryWrite(message.detail.elementReliquaryRequest, writer.tag(1489, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGameplayRecommendationReq
 */
export const GetGameplayRecommendationReq = new GetGameplayRecommendationReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationSkillResponse$Type extends MessageType<GameplayRecommendationSkillResponse> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationSkillResponse", [
            { no: 13, name: "skill_depot_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "skill_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationSkillResponse>): GameplayRecommendationSkillResponse {
        const message = { skillIdList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationSkillResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationSkillResponse): GameplayRecommendationSkillResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 skill_depot_id */ 13:
                    message.skillDepotId = reader.uint32();
                    break;
                case /* repeated uint32 skill_id_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.skillIdList.push(reader.uint32());
                    else
                        message.skillIdList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationSkillResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 skill_depot_id = 13; */
        if (message.skillDepotId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.skillDepotId);
        /* repeated uint32 skill_id_list = 9; */
        for (let i = 0; i < message.skillIdList.length; i++)
            writer.tag(9, WireType.Varint).uint32(message.skillIdList[i]);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationSkillResponse
 */
export const GameplayRecommendationSkillResponse = new GameplayRecommendationSkillResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationReliquaryMainPropData$Type extends MessageType<GameplayRecommendationReliquaryMainPropData> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationReliquaryMainPropData", [
            { no: 1, name: "permillage", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "main_prop_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationReliquaryMainPropData>): GameplayRecommendationReliquaryMainPropData {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationReliquaryMainPropData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationReliquaryMainPropData): GameplayRecommendationReliquaryMainPropData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 permillage */ 1:
                    message.permillage = reader.uint32();
                    break;
                case /* optional uint32 main_prop_id */ 12:
                    message.mainPropId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationReliquaryMainPropData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 permillage = 1; */
        if (message.permillage !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.permillage);
        /* optional uint32 main_prop_id = 12; */
        if (message.mainPropId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mainPropId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationReliquaryMainPropData
 */
export const GameplayRecommendationReliquaryMainPropData = new GameplayRecommendationReliquaryMainPropData$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationReliquaryResponse$Type extends MessageType<GameplayRecommendationReliquaryResponse> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationReliquaryResponse", [
            { no: 8, name: "main_prop_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GameplayRecommendationReliquaryMainPropData },
            { no: 3, name: "equip_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationReliquaryResponse>): GameplayRecommendationReliquaryResponse {
        const message = { mainPropDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationReliquaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationReliquaryResponse): GameplayRecommendationReliquaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list */ 8:
                    message.mainPropDataList.push(GameplayRecommendationReliquaryMainPropData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 equip_type */ 3:
                    message.equipType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationReliquaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list = 8; */
        for (let i = 0; i < message.mainPropDataList.length; i++)
            GameplayRecommendationReliquaryMainPropData.internalBinaryWrite(message.mainPropDataList[i], writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 equip_type = 3; */
        if (message.equipType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.equipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationReliquaryResponse
 */
export const GameplayRecommendationReliquaryResponse = new GameplayRecommendationReliquaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GameplayRecommendationElementReliquaryResponse$Type extends MessageType<GameplayRecommendationElementReliquaryResponse> {
    constructor() {
        super("com.midnights.game.GameplayRecommendationElementReliquaryResponse", [
            { no: 11, name: "element_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "main_prop_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => GameplayRecommendationReliquaryMainPropData },
            { no: 15, name: "equip_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GameplayRecommendationElementReliquaryResponse>): GameplayRecommendationElementReliquaryResponse {
        const message = { mainPropDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GameplayRecommendationElementReliquaryResponse>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GameplayRecommendationElementReliquaryResponse): GameplayRecommendationElementReliquaryResponse {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 element_type */ 11:
                    message.elementType = reader.uint32();
                    break;
                case /* repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list */ 5:
                    message.mainPropDataList.push(GameplayRecommendationReliquaryMainPropData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 equip_type */ 15:
                    message.equipType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GameplayRecommendationElementReliquaryResponse, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 element_type = 11; */
        if (message.elementType !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.elementType);
        /* repeated com.midnights.game.GameplayRecommendationReliquaryMainPropData main_prop_data_list = 5; */
        for (let i = 0; i < message.mainPropDataList.length; i++)
            GameplayRecommendationReliquaryMainPropData.internalBinaryWrite(message.mainPropDataList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 equip_type = 15; */
        if (message.equipType !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.equipType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GameplayRecommendationElementReliquaryResponse
 */
export const GameplayRecommendationElementReliquaryResponse = new GameplayRecommendationElementReliquaryResponse$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetGameplayRecommendationRsp$Type extends MessageType<GetGameplayRecommendationRsp> {
    constructor() {
        super("com.midnights.game.GetGameplayRecommendationRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "avatar_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1022, name: "skill_response", kind: "message", oneof: "detail", T: () => GameplayRecommendationSkillResponse },
            { no: 196, name: "reliquary_response", kind: "message", oneof: "detail", T: () => GameplayRecommendationReliquaryResponse },
            { no: 167, name: "element_reliquary_response", kind: "message", oneof: "detail", T: () => GameplayRecommendationElementReliquaryResponse }
        ]);
    }
    create(value?: PartialMessage<GetGameplayRecommendationRsp>): GetGameplayRecommendationRsp {
        const message = { detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetGameplayRecommendationRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetGameplayRecommendationRsp): GetGameplayRecommendationRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 avatar_id */ 15:
                    message.avatarId = reader.uint32();
                    break;
                case /* com.midnights.game.GameplayRecommendationSkillResponse skill_response */ 1022:
                    message.detail = {
                        oneofKind: "skillResponse",
                        skillResponse: GameplayRecommendationSkillResponse.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).skillResponse)
                    };
                    break;
                case /* com.midnights.game.GameplayRecommendationReliquaryResponse reliquary_response */ 196:
                    message.detail = {
                        oneofKind: "reliquaryResponse",
                        reliquaryResponse: GameplayRecommendationReliquaryResponse.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).reliquaryResponse)
                    };
                    break;
                case /* com.midnights.game.GameplayRecommendationElementReliquaryResponse element_reliquary_response */ 167:
                    message.detail = {
                        oneofKind: "elementReliquaryResponse",
                        elementReliquaryResponse: GameplayRecommendationElementReliquaryResponse.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).elementReliquaryResponse)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetGameplayRecommendationRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 avatar_id = 15; */
        if (message.avatarId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.avatarId);
        /* com.midnights.game.GameplayRecommendationSkillResponse skill_response = 1022; */
        if (message.detail.oneofKind === "skillResponse")
            GameplayRecommendationSkillResponse.internalBinaryWrite(message.detail.skillResponse, writer.tag(1022, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GameplayRecommendationReliquaryResponse reliquary_response = 196; */
        if (message.detail.oneofKind === "reliquaryResponse")
            GameplayRecommendationReliquaryResponse.internalBinaryWrite(message.detail.reliquaryResponse, writer.tag(196, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.GameplayRecommendationElementReliquaryResponse element_reliquary_response = 167; */
        if (message.detail.oneofKind === "elementReliquaryResponse")
            GameplayRecommendationElementReliquaryResponse.internalBinaryWrite(message.detail.elementReliquaryResponse, writer.tag(167, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetGameplayRecommendationRsp
 */
export const GetGameplayRecommendationRsp = new GetGameplayRecommendationRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBackGivingItemReq$Type extends MessageType<TakeBackGivingItemReq> {
    constructor() {
        super("com.midnights.game.TakeBackGivingItemReq", [
            { no: 4, name: "giving_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeBackGivingItemReq>): TakeBackGivingItemReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBackGivingItemReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBackGivingItemReq): TakeBackGivingItemReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 giving_id */ 4:
                    message.givingId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBackGivingItemReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 giving_id = 4; */
        if (message.givingId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.givingId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBackGivingItemReq
 */
export const TakeBackGivingItemReq = new TakeBackGivingItemReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class TakeBackGivingItemRsp$Type extends MessageType<TakeBackGivingItemRsp> {
    constructor() {
        super("com.midnights.game.TakeBackGivingItemRsp", [
            { no: 10, name: "giving_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<TakeBackGivingItemRsp>): TakeBackGivingItemRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<TakeBackGivingItemRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: TakeBackGivingItemRsp): TakeBackGivingItemRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 giving_id */ 10:
                    message.givingId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: TakeBackGivingItemRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 giving_id = 10; */
        if (message.givingId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.givingId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.TakeBackGivingItemRsp
 */
export const TakeBackGivingItemRsp = new TakeBackGivingItemRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerNicknameAuditDataNotify$Type extends MessageType<PlayerNicknameAuditDataNotify> {
    constructor() {
        super("com.midnights.game.PlayerNicknameAuditDataNotify", [
            { no: 13, name: "info", kind: "message", T: () => ContentAuditInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerNicknameAuditDataNotify>): PlayerNicknameAuditDataNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerNicknameAuditDataNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerNicknameAuditDataNotify): PlayerNicknameAuditDataNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ContentAuditInfo info */ 13:
                    message.info = ContentAuditInfo.internalBinaryRead(reader, reader.uint32(), options, message.info);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerNicknameAuditDataNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ContentAuditInfo info = 13; */
        if (message.info)
            ContentAuditInfo.internalBinaryWrite(message.info, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerNicknameAuditDataNotify
 */
export const PlayerNicknameAuditDataNotify = new PlayerNicknameAuditDataNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerNicknameNotify$Type extends MessageType<PlayerNicknameNotify> {
    constructor() {
        super("com.midnights.game.PlayerNicknameNotify", [
            { no: 7, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerNicknameNotify>): PlayerNicknameNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerNicknameNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerNicknameNotify): PlayerNicknameNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string nickname */ 7:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerNicknameNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string nickname = 7; */
        if (message.nickname !== undefined)
            writer.tag(7, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerNicknameNotify
 */
export const PlayerNicknameNotify = new PlayerNicknameNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class NicknameAuditConfigNotify$Type extends MessageType<NicknameAuditConfigNotify> {
    constructor() {
        super("com.midnights.game.NicknameAuditConfigNotify", [
            { no: 8, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "submit_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<NicknameAuditConfigNotify>): NicknameAuditConfigNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<NicknameAuditConfigNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: NicknameAuditConfigNotify): NicknameAuditConfigNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_open */ 8:
                    message.isOpen = reader.bool();
                    break;
                case /* optional uint32 submit_limit */ 12:
                    message.submitLimit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: NicknameAuditConfigNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_open = 8; */
        if (message.isOpen !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOpen);
        /* optional uint32 submit_limit = 12; */
        if (message.submitLimit !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.submitLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.NicknameAuditConfigNotify
 */
export const NicknameAuditConfigNotify = new NicknameAuditConfigNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadNicknameAuditReq$Type extends MessageType<ReadNicknameAuditReq> {
    constructor() {
        super("com.midnights.game.ReadNicknameAuditReq", []);
    }
    create(value?: PartialMessage<ReadNicknameAuditReq>): ReadNicknameAuditReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadNicknameAuditReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadNicknameAuditReq): ReadNicknameAuditReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ReadNicknameAuditReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReadNicknameAuditReq
 */
export const ReadNicknameAuditReq = new ReadNicknameAuditReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ReadNicknameAuditRsp$Type extends MessageType<ReadNicknameAuditRsp> {
    constructor() {
        super("com.midnights.game.ReadNicknameAuditRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ReadNicknameAuditRsp>): ReadNicknameAuditRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ReadNicknameAuditRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ReadNicknameAuditRsp): ReadNicknameAuditRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ReadNicknameAuditRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ReadNicknameAuditRsp
 */
export const ReadNicknameAuditRsp = new ReadNicknameAuditRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCompoundMaterialBoostReq$Type extends MessageType<PlayerCompoundMaterialBoostReq> {
    constructor() {
        super("com.midnights.game.PlayerCompoundMaterialBoostReq", [
            { no: 8, name: "is_boost_all", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "target_compound_group_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "consume_material_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "consume_material_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerCompoundMaterialBoostReq>): PlayerCompoundMaterialBoostReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCompoundMaterialBoostReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCompoundMaterialBoostReq): PlayerCompoundMaterialBoostReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_boost_all */ 8:
                    message.isBoostAll = reader.bool();
                    break;
                case /* optional uint32 target_compound_group_id */ 14:
                    message.targetCompoundGroupId = reader.uint32();
                    break;
                case /* optional uint32 consume_material_id */ 9:
                    message.consumeMaterialId = reader.uint32();
                    break;
                case /* optional uint32 consume_material_count */ 1:
                    message.consumeMaterialCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCompoundMaterialBoostReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_boost_all = 8; */
        if (message.isBoostAll !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isBoostAll);
        /* optional uint32 target_compound_group_id = 14; */
        if (message.targetCompoundGroupId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.targetCompoundGroupId);
        /* optional uint32 consume_material_id = 9; */
        if (message.consumeMaterialId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.consumeMaterialId);
        /* optional uint32 consume_material_count = 1; */
        if (message.consumeMaterialCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.consumeMaterialCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCompoundMaterialBoostReq
 */
export const PlayerCompoundMaterialBoostReq = new PlayerCompoundMaterialBoostReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCompoundMaterialBoostRsp$Type extends MessageType<PlayerCompoundMaterialBoostRsp> {
    constructor() {
        super("com.midnights.game.PlayerCompoundMaterialBoostRsp", [
            { no: 2, name: "take_item_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => ItemParam },
            { no: 6, name: "take_status", kind: "enum", opt: true, T: () => ["com.midnights.game.CompoundBoostTakeStatusType", CompoundBoostTakeStatusType] },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "compound_que_data_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => CompoundQueueData }
        ]);
    }
    create(value?: PartialMessage<PlayerCompoundMaterialBoostRsp>): PlayerCompoundMaterialBoostRsp {
        const message = { takeItemList: [], compoundQueDataList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCompoundMaterialBoostRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCompoundMaterialBoostRsp): PlayerCompoundMaterialBoostRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam take_item_list */ 2:
                    message.takeItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.CompoundBoostTakeStatusType take_status */ 6:
                    message.takeStatus = reader.int32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated com.midnights.game.CompoundQueueData compound_que_data_list */ 1:
                    message.compoundQueDataList.push(CompoundQueueData.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCompoundMaterialBoostRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam take_item_list = 2; */
        for (let i = 0; i < message.takeItemList.length; i++)
            ItemParam.internalBinaryWrite(message.takeItemList[i], writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.CompoundBoostTakeStatusType take_status = 6; */
        if (message.takeStatus !== undefined)
            writer.tag(6, WireType.Varint).int32(message.takeStatus);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated com.midnights.game.CompoundQueueData compound_que_data_list = 1; */
        for (let i = 0; i < message.compoundQueDataList.length; i++)
            CompoundQueueData.internalBinaryWrite(message.compoundQueDataList[i], writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCompoundMaterialBoostRsp
 */
export const PlayerCompoundMaterialBoostRsp = new PlayerCompoundMaterialBoostRsp$Type();
