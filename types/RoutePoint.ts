/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: RoutePoint.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./MathQuaternion";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class RoutePoint extends pb_1.Message {
    #one_of_decls: number[][] = [[11, 12], [21, 22, 23]];
    constructor(data?: any[] | ({
        position?: dependency_2.Vector;
        arrive_range?: number;
    } & (({
        velocity?: number;
        time?: never;
    } | {
        velocity?: never;
        time?: number;
    }) | ({
        rotation?: dependency_2.Vector;
        rotation_speed?: never;
        axis_speed?: never;
    } | {
        rotation?: never;
        rotation_speed?: dependency_1.MathQuaternion;
        axis_speed?: never;
    } | {
        rotation?: never;
        rotation_speed?: never;
        axis_speed?: dependency_1.MathQuaternion;
    })))) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("arrive_range" in data && data.arrive_range != undefined) {
                this.arrive_range = data.arrive_range;
            }
            if ("velocity" in data && data.velocity != undefined) {
                this.velocity = data.velocity;
            }
            if ("time" in data && data.time != undefined) {
                this.time = data.time;
            }
            if ("rotation" in data && data.rotation != undefined) {
                this.rotation = data.rotation;
            }
            if ("rotation_speed" in data && data.rotation_speed != undefined) {
                this.rotation_speed = data.rotation_speed;
            }
            if ("axis_speed" in data && data.axis_speed != undefined) {
                this.axis_speed = data.axis_speed;
            }
        }
    }
    get position() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 1) as dependency_2.Vector;
    }
    set position(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_position() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get arrive_range() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set arrive_range(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get velocity() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set velocity(value: number) {
        pb_1.Message.setOneofField(this, 11, this.#one_of_decls[0], value);
    }
    get has_velocity() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get time() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set time(value: number) {
        pb_1.Message.setOneofField(this, 12, this.#one_of_decls[0], value);
    }
    get has_time() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get rotation() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 21) as dependency_2.Vector;
    }
    set rotation(value: dependency_2.Vector) {
        pb_1.Message.setOneofWrapperField(this, 21, this.#one_of_decls[1], value);
    }
    get has_rotation() {
        return pb_1.Message.getField(this, 21) != null;
    }
    get rotation_speed() {
        return pb_1.Message.getWrapperField(this, dependency_1.MathQuaternion, 22) as dependency_1.MathQuaternion;
    }
    set rotation_speed(value: dependency_1.MathQuaternion) {
        pb_1.Message.setOneofWrapperField(this, 22, this.#one_of_decls[1], value);
    }
    get has_rotation_speed() {
        return pb_1.Message.getField(this, 22) != null;
    }
    get axis_speed() {
        return pb_1.Message.getWrapperField(this, dependency_1.MathQuaternion, 23) as dependency_1.MathQuaternion;
    }
    set axis_speed(value: dependency_1.MathQuaternion) {
        pb_1.Message.setOneofWrapperField(this, 23, this.#one_of_decls[1], value);
    }
    get has_axis_speed() {
        return pb_1.Message.getField(this, 23) != null;
    }
    get move_params() {
        const cases: {
            [index: number]: "none" | "velocity" | "time";
        } = {
            0: "none",
            11: "velocity",
            12: "time"
        };
        return cases[pb_1.Message.computeOneofCase(this, [11, 12])];
    }
    get rotate_params() {
        const cases: {
            [index: number]: "none" | "rotation" | "rotation_speed" | "axis_speed";
        } = {
            0: "none",
            21: "rotation",
            22: "rotation_speed",
            23: "axis_speed"
        };
        return cases[pb_1.Message.computeOneofCase(this, [21, 22, 23])];
    }
    static fromObject(data: {
        position?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        arrive_range?: number;
        velocity?: number;
        time?: number;
        rotation?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        rotation_speed?: ReturnType<typeof dependency_1.MathQuaternion.prototype.toObject>;
        axis_speed?: ReturnType<typeof dependency_1.MathQuaternion.prototype.toObject>;
    }): RoutePoint {
        const message = new RoutePoint({});
        if (data.position != null) {
            message.position = dependency_2.Vector.fromObject(data.position);
        }
        if (data.arrive_range != null) {
            message.arrive_range = data.arrive_range;
        }
        if (data.velocity != null) {
            message.velocity = data.velocity;
        }
        if (data.time != null) {
            message.time = data.time;
        }
        if (data.rotation != null) {
            message.rotation = dependency_2.Vector.fromObject(data.rotation);
        }
        if (data.rotation_speed != null) {
            message.rotation_speed = dependency_1.MathQuaternion.fromObject(data.rotation_speed);
        }
        if (data.axis_speed != null) {
            message.axis_speed = dependency_1.MathQuaternion.fromObject(data.axis_speed);
        }
        return message;
    }
    toObject() {
        const data: {
            position?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            arrive_range?: number;
            velocity?: number;
            time?: number;
            rotation?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
            rotation_speed?: ReturnType<typeof dependency_1.MathQuaternion.prototype.toObject>;
            axis_speed?: ReturnType<typeof dependency_1.MathQuaternion.prototype.toObject>;
        } = {};
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        if (this.arrive_range != null) {
            data.arrive_range = this.arrive_range;
        }
        if (this.velocity != null) {
            data.velocity = this.velocity;
        }
        if (this.time != null) {
            data.time = this.time;
        }
        if (this.rotation != null) {
            data.rotation = this.rotation.toObject();
        }
        if (this.rotation_speed != null) {
            data.rotation_speed = this.rotation_speed.toObject();
        }
        if (this.axis_speed != null) {
            data.axis_speed = this.axis_speed.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_position)
            writer.writeMessage(1, this.position, () => this.position.serialize(writer));
        if (this.arrive_range != 0)
            writer.writeFloat(2, this.arrive_range);
        if (this.has_velocity)
            writer.writeFloat(11, this.velocity);
        if (this.has_time)
            writer.writeFloat(12, this.time);
        if (this.has_rotation)
            writer.writeMessage(21, this.rotation, () => this.rotation.serialize(writer));
        if (this.has_rotation_speed)
            writer.writeMessage(22, this.rotation_speed, () => this.rotation_speed.serialize(writer));
        if (this.has_axis_speed)
            writer.writeMessage(23, this.axis_speed, () => this.axis_speed.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): RoutePoint {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoutePoint();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.position, () => message.position = dependency_2.Vector.deserialize(reader));
                    break;
                case 2:
                    message.arrive_range = reader.readFloat();
                    break;
                case 11:
                    message.velocity = reader.readFloat();
                    break;
                case 12:
                    message.time = reader.readFloat();
                    break;
                case 21:
                    reader.readMessage(message.rotation, () => message.rotation = dependency_2.Vector.deserialize(reader));
                    break;
                case 22:
                    reader.readMessage(message.rotation_speed, () => message.rotation_speed = dependency_1.MathQuaternion.deserialize(reader));
                    break;
                case 23:
                    reader.readMessage(message.axis_speed, () => message.axis_speed = dependency_1.MathQuaternion.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): RoutePoint {
        return RoutePoint.deserialize(bytes);
    }
}
