// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "RogueDiaryStageInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RogueDiaryDungeonRecord } from "./RogueDiaryDungeonRecord";
/**
 * @generated from protobuf message RogueDiaryStageInfo
 */
export interface RogueDiaryStageInfo {
    /**
     * @generated from protobuf field: uint32 stage_id = 15;
     */
    stageId: number;
    /**
     * @generated from protobuf field: RogueDiaryDungeonRecord best_record = 9;
     */
    bestRecord?: RogueDiaryDungeonRecord;
    /**
     * @generated from protobuf field: bool is_have_try = 11;
     */
    isHaveTry: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RogueDiaryStageInfo$Type extends MessageType<RogueDiaryStageInfo> {
    constructor() {
        super("RogueDiaryStageInfo", [
            { no: 15, name: "stage_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "best_record", kind: "message", T: () => RogueDiaryDungeonRecord },
            { no: 11, name: "is_have_try", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RogueDiaryStageInfo>): RogueDiaryStageInfo {
        const message = { stageId: 0, isHaveTry: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RogueDiaryStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RogueDiaryStageInfo): RogueDiaryStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 stage_id */ 15:
                    message.stageId = reader.uint32();
                    break;
                case /* RogueDiaryDungeonRecord best_record */ 9:
                    message.bestRecord = RogueDiaryDungeonRecord.internalBinaryRead(reader, reader.uint32(), options, message.bestRecord);
                    break;
                case /* bool is_have_try */ 11:
                    message.isHaveTry = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RogueDiaryStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 stage_id = 15; */
        if (message.stageId !== 0)
            writer.tag(15, WireType.Varint).uint32(message.stageId);
        /* RogueDiaryDungeonRecord best_record = 9; */
        if (message.bestRecord)
            RogueDiaryDungeonRecord.internalBinaryWrite(message.bestRecord, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* bool is_have_try = 11; */
        if (message.isHaveTry !== false)
            writer.tag(11, WireType.Varint).bool(message.isHaveTry);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RogueDiaryStageInfo
 */
export const RogueDiaryStageInfo = new RogueDiaryStageInfo$Type();
