"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _PlayerEyePointStateNotify_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.PlayerEyePointStateNotify = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerEyePointStateNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./CylinderRegionSize");
const dependency_2 = require("./PolygonRegionSize");
const dependency_3 = require("./Vector");
const pb_1 = require("google-protobuf");
class PlayerEyePointStateNotify extends pb_1.Message {
    constructor(data) {
        super();
        _PlayerEyePointStateNotify_one_of_decls.set(this, [[255, 1823, 1862, 877]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _PlayerEyePointStateNotify_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("region_entity_id" in data && data.region_entity_id != undefined) {
                this.region_entity_id = data.region_entity_id;
            }
            if ("eye_point_pos" in data && data.eye_point_pos != undefined) {
                this.eye_point_pos = data.eye_point_pos;
            }
            if ("is_use_eye_point" in data && data.is_use_eye_point != undefined) {
                this.is_use_eye_point = data.is_use_eye_point;
            }
            if ("region_config_id" in data && data.region_config_id != undefined) {
                this.region_config_id = data.region_config_id;
            }
            if ("region_shape" in data && data.region_shape != undefined) {
                this.region_shape = data.region_shape;
            }
            if ("is_filter_stream_pos" in data && data.is_filter_stream_pos != undefined) {
                this.is_filter_stream_pos = data.is_filter_stream_pos;
            }
            if ("Unk2800_GBBMMIGJFCF" in data && data.Unk2800_GBBMMIGJFCF != undefined) {
                this.Unk2800_GBBMMIGJFCF = data.Unk2800_GBBMMIGJFCF;
            }
            if ("region_group_id" in data && data.region_group_id != undefined) {
                this.region_group_id = data.region_group_id;
            }
            if ("sphere_radius" in data && data.sphere_radius != undefined) {
                this.sphere_radius = data.sphere_radius;
            }
            if ("cubic_size" in data && data.cubic_size != undefined) {
                this.cubic_size = data.cubic_size;
            }
            if ("cylinder_size" in data && data.cylinder_size != undefined) {
                this.cylinder_size = data.cylinder_size;
            }
            if ("polygon_size" in data && data.polygon_size != undefined) {
                this.polygon_size = data.polygon_size;
            }
        }
    }
    get region_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set region_entity_id(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get eye_point_pos() {
        return pb_1.Message.getWrapperField(this, dependency_3.Vector, 1);
    }
    set eye_point_pos(value) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_eye_point_pos() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get is_use_eye_point() {
        return pb_1.Message.getFieldWithDefault(this, 3, false);
    }
    set is_use_eye_point(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get region_config_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set region_config_id(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get region_shape() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0);
    }
    set region_shape(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_filter_stream_pos() {
        return pb_1.Message.getFieldWithDefault(this, 2, false);
    }
    set is_filter_stream_pos(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get Unk2800_GBBMMIGJFCF() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set Unk2800_GBBMMIGJFCF(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get region_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set region_group_id(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get sphere_radius() {
        return pb_1.Message.getFieldWithDefault(this, 255, 0);
    }
    set sphere_radius(value) {
        pb_1.Message.setOneofField(this, 255, __classPrivateFieldGet(this, _PlayerEyePointStateNotify_one_of_decls, "f")[0], value);
    }
    get has_sphere_radius() {
        return pb_1.Message.getField(this, 255) != null;
    }
    get cubic_size() {
        return pb_1.Message.getWrapperField(this, dependency_3.Vector, 1823);
    }
    set cubic_size(value) {
        pb_1.Message.setOneofWrapperField(this, 1823, __classPrivateFieldGet(this, _PlayerEyePointStateNotify_one_of_decls, "f")[0], value);
    }
    get has_cubic_size() {
        return pb_1.Message.getField(this, 1823) != null;
    }
    get cylinder_size() {
        return pb_1.Message.getWrapperField(this, dependency_1.CylinderRegionSize, 1862);
    }
    set cylinder_size(value) {
        pb_1.Message.setOneofWrapperField(this, 1862, __classPrivateFieldGet(this, _PlayerEyePointStateNotify_one_of_decls, "f")[0], value);
    }
    get has_cylinder_size() {
        return pb_1.Message.getField(this, 1862) != null;
    }
    get polygon_size() {
        return pb_1.Message.getWrapperField(this, dependency_2.PolygonRegionSize, 877);
    }
    set polygon_size(value) {
        pb_1.Message.setOneofWrapperField(this, 877, __classPrivateFieldGet(this, _PlayerEyePointStateNotify_one_of_decls, "f")[0], value);
    }
    get has_polygon_size() {
        return pb_1.Message.getField(this, 877) != null;
    }
    get region_size() {
        const cases = {
            0: "none",
            255: "sphere_radius",
            1823: "cubic_size",
            1862: "cylinder_size",
            877: "polygon_size"
        };
        return cases[pb_1.Message.computeOneofCase(this, [255, 1823, 1862, 877])];
    }
    static fromObject(data) {
        const message = new PlayerEyePointStateNotify({});
        if (data.region_entity_id != null) {
            message.region_entity_id = data.region_entity_id;
        }
        if (data.eye_point_pos != null) {
            message.eye_point_pos = dependency_3.Vector.fromObject(data.eye_point_pos);
        }
        if (data.is_use_eye_point != null) {
            message.is_use_eye_point = data.is_use_eye_point;
        }
        if (data.region_config_id != null) {
            message.region_config_id = data.region_config_id;
        }
        if (data.region_shape != null) {
            message.region_shape = data.region_shape;
        }
        if (data.is_filter_stream_pos != null) {
            message.is_filter_stream_pos = data.is_filter_stream_pos;
        }
        if (data.Unk2800_GBBMMIGJFCF != null) {
            message.Unk2800_GBBMMIGJFCF = data.Unk2800_GBBMMIGJFCF;
        }
        if (data.region_group_id != null) {
            message.region_group_id = data.region_group_id;
        }
        if (data.sphere_radius != null) {
            message.sphere_radius = data.sphere_radius;
        }
        if (data.cubic_size != null) {
            message.cubic_size = dependency_3.Vector.fromObject(data.cubic_size);
        }
        if (data.cylinder_size != null) {
            message.cylinder_size = dependency_1.CylinderRegionSize.fromObject(data.cylinder_size);
        }
        if (data.polygon_size != null) {
            message.polygon_size = dependency_2.PolygonRegionSize.fromObject(data.polygon_size);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.region_entity_id != null) {
            data.region_entity_id = this.region_entity_id;
        }
        if (this.eye_point_pos != null) {
            data.eye_point_pos = this.eye_point_pos.toObject();
        }
        if (this.is_use_eye_point != null) {
            data.is_use_eye_point = this.is_use_eye_point;
        }
        if (this.region_config_id != null) {
            data.region_config_id = this.region_config_id;
        }
        if (this.region_shape != null) {
            data.region_shape = this.region_shape;
        }
        if (this.is_filter_stream_pos != null) {
            data.is_filter_stream_pos = this.is_filter_stream_pos;
        }
        if (this.Unk2800_GBBMMIGJFCF != null) {
            data.Unk2800_GBBMMIGJFCF = this.Unk2800_GBBMMIGJFCF;
        }
        if (this.region_group_id != null) {
            data.region_group_id = this.region_group_id;
        }
        if (this.sphere_radius != null) {
            data.sphere_radius = this.sphere_radius;
        }
        if (this.cubic_size != null) {
            data.cubic_size = this.cubic_size.toObject();
        }
        if (this.cylinder_size != null) {
            data.cylinder_size = this.cylinder_size.toObject();
        }
        if (this.polygon_size != null) {
            data.polygon_size = this.polygon_size.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.region_entity_id != 0)
            writer.writeUint32(15, this.region_entity_id);
        if (this.has_eye_point_pos)
            writer.writeMessage(1, this.eye_point_pos, () => this.eye_point_pos.serialize(writer));
        if (this.is_use_eye_point != false)
            writer.writeBool(3, this.is_use_eye_point);
        if (this.region_config_id != 0)
            writer.writeUint32(7, this.region_config_id);
        if (this.region_shape != 0)
            writer.writeUint32(12, this.region_shape);
        if (this.is_filter_stream_pos != false)
            writer.writeBool(2, this.is_filter_stream_pos);
        if (this.Unk2800_GBBMMIGJFCF != 0)
            writer.writeInt32(5, this.Unk2800_GBBMMIGJFCF);
        if (this.region_group_id != 0)
            writer.writeUint32(4, this.region_group_id);
        if (this.has_sphere_radius)
            writer.writeFloat(255, this.sphere_radius);
        if (this.has_cubic_size)
            writer.writeMessage(1823, this.cubic_size, () => this.cubic_size.serialize(writer));
        if (this.has_cylinder_size)
            writer.writeMessage(1862, this.cylinder_size, () => this.cylinder_size.serialize(writer));
        if (this.has_polygon_size)
            writer.writeMessage(877, this.polygon_size, () => this.polygon_size.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerEyePointStateNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.region_entity_id = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.eye_point_pos, () => message.eye_point_pos = dependency_3.Vector.deserialize(reader));
                    break;
                case 3:
                    message.is_use_eye_point = reader.readBool();
                    break;
                case 7:
                    message.region_config_id = reader.readUint32();
                    break;
                case 12:
                    message.region_shape = reader.readUint32();
                    break;
                case 2:
                    message.is_filter_stream_pos = reader.readBool();
                    break;
                case 5:
                    message.Unk2800_GBBMMIGJFCF = reader.readInt32();
                    break;
                case 4:
                    message.region_group_id = reader.readUint32();
                    break;
                case 255:
                    message.sphere_radius = reader.readFloat();
                    break;
                case 1823:
                    reader.readMessage(message.cubic_size, () => message.cubic_size = dependency_3.Vector.deserialize(reader));
                    break;
                case 1862:
                    reader.readMessage(message.cylinder_size, () => message.cylinder_size = dependency_1.CylinderRegionSize.deserialize(reader));
                    break;
                case 877:
                    reader.readMessage(message.polygon_size, () => message.polygon_size = dependency_2.PolygonRegionSize.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return PlayerEyePointStateNotify.deserialize(bytes);
    }
}
exports.PlayerEyePointStateNotify = PlayerEyePointStateNotify;
_PlayerEyePointStateNotify_one_of_decls = new WeakMap();
