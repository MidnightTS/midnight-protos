// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "AbilityMixinBreakout.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { BreakoutSyncAction } from "./BreakoutSyncAction";
import { BreakoutSyncSnapShot } from "./BreakoutSyncSnapShot";
import { BreakoutSyncFinishGame } from "./BreakoutSyncFinishGame";
import { BreakoutSyncPing } from "./BreakoutSyncPing";
import { BreakoutSyncCreateConnect } from "./BreakoutSyncCreateConnect";
/**
 * @generated from protobuf message AbilityMixinBreakout
 */
export interface AbilityMixinBreakout {
    /**
     * @generated from protobuf field: int32 retcode = 8;
     */
    retcode: number;
    /**
     * @generated from protobuf field: AbilityMixinBreakout.SyncType sync_type = 4;
     */
    syncType: AbilityMixinBreakout_SyncType;
    /**
     * @generated from protobuf oneof: sync
     */
    sync: {
        oneofKind: "syncCreateConnect";
        /**
         * @generated from protobuf field: BreakoutSyncCreateConnect sync_create_connect = 2;
         */
        syncCreateConnect: BreakoutSyncCreateConnect;
    } | {
        oneofKind: "syncPing";
        /**
         * @generated from protobuf field: BreakoutSyncPing sync_ping = 1;
         */
        syncPing: BreakoutSyncPing;
    } | {
        oneofKind: "syncFinishGame";
        /**
         * @generated from protobuf field: BreakoutSyncFinishGame sync_finish_game = 5;
         */
        syncFinishGame: BreakoutSyncFinishGame;
    } | {
        oneofKind: "syncSnapShot";
        /**
         * @generated from protobuf field: BreakoutSyncSnapShot sync_snap_shot = 14;
         */
        syncSnapShot: BreakoutSyncSnapShot;
    } | {
        oneofKind: "syncAction";
        /**
         * @generated from protobuf field: BreakoutSyncAction sync_action = 3;
         */
        syncAction: BreakoutSyncAction;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum AbilityMixinBreakout.SyncType
 */
export enum AbilityMixinBreakout_SyncType {
    /**
     * @generated from protobuf enum value: SYNC_TYPE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_CREATE_CONNECT = 1;
     */
    CREATE_CONNECT = 1,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_START_GAME = 2;
     */
    START_GAME = 2,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_PING = 3;
     */
    PING = 3,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_FINISH_GAME = 4;
     */
    FINISH_GAME = 4,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_SNAP_SHOT = 5;
     */
    SNAP_SHOT = 5,
    /**
     * @generated from protobuf enum value: SYNC_TYPE_ACTION = 6;
     */
    ACTION = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class AbilityMixinBreakout$Type extends MessageType<AbilityMixinBreakout> {
    constructor() {
        super("AbilityMixinBreakout", [
            { no: 8, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 4, name: "sync_type", kind: "enum", T: () => ["AbilityMixinBreakout.SyncType", AbilityMixinBreakout_SyncType, "SYNC_TYPE_"] },
            { no: 2, name: "sync_create_connect", kind: "message", oneof: "sync", T: () => BreakoutSyncCreateConnect },
            { no: 1, name: "sync_ping", kind: "message", oneof: "sync", T: () => BreakoutSyncPing },
            { no: 5, name: "sync_finish_game", kind: "message", oneof: "sync", T: () => BreakoutSyncFinishGame },
            { no: 14, name: "sync_snap_shot", kind: "message", oneof: "sync", T: () => BreakoutSyncSnapShot },
            { no: 3, name: "sync_action", kind: "message", oneof: "sync", T: () => BreakoutSyncAction }
        ]);
    }
    create(value?: PartialMessage<AbilityMixinBreakout>): AbilityMixinBreakout {
        const message = { retcode: 0, syncType: 0, sync: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<AbilityMixinBreakout>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AbilityMixinBreakout): AbilityMixinBreakout {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* AbilityMixinBreakout.SyncType sync_type */ 4:
                    message.syncType = reader.int32();
                    break;
                case /* BreakoutSyncCreateConnect sync_create_connect */ 2:
                    message.sync = {
                        oneofKind: "syncCreateConnect",
                        syncCreateConnect: BreakoutSyncCreateConnect.internalBinaryRead(reader, reader.uint32(), options, (message.sync as any).syncCreateConnect)
                    };
                    break;
                case /* BreakoutSyncPing sync_ping */ 1:
                    message.sync = {
                        oneofKind: "syncPing",
                        syncPing: BreakoutSyncPing.internalBinaryRead(reader, reader.uint32(), options, (message.sync as any).syncPing)
                    };
                    break;
                case /* BreakoutSyncFinishGame sync_finish_game */ 5:
                    message.sync = {
                        oneofKind: "syncFinishGame",
                        syncFinishGame: BreakoutSyncFinishGame.internalBinaryRead(reader, reader.uint32(), options, (message.sync as any).syncFinishGame)
                    };
                    break;
                case /* BreakoutSyncSnapShot sync_snap_shot */ 14:
                    message.sync = {
                        oneofKind: "syncSnapShot",
                        syncSnapShot: BreakoutSyncSnapShot.internalBinaryRead(reader, reader.uint32(), options, (message.sync as any).syncSnapShot)
                    };
                    break;
                case /* BreakoutSyncAction sync_action */ 3:
                    message.sync = {
                        oneofKind: "syncAction",
                        syncAction: BreakoutSyncAction.internalBinaryRead(reader, reader.uint32(), options, (message.sync as any).syncAction)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AbilityMixinBreakout, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* int32 retcode = 8; */
        if (message.retcode !== 0)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* AbilityMixinBreakout.SyncType sync_type = 4; */
        if (message.syncType !== 0)
            writer.tag(4, WireType.Varint).int32(message.syncType);
        /* BreakoutSyncCreateConnect sync_create_connect = 2; */
        if (message.sync.oneofKind === "syncCreateConnect")
            BreakoutSyncCreateConnect.internalBinaryWrite(message.sync.syncCreateConnect, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* BreakoutSyncPing sync_ping = 1; */
        if (message.sync.oneofKind === "syncPing")
            BreakoutSyncPing.internalBinaryWrite(message.sync.syncPing, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* BreakoutSyncFinishGame sync_finish_game = 5; */
        if (message.sync.oneofKind === "syncFinishGame")
            BreakoutSyncFinishGame.internalBinaryWrite(message.sync.syncFinishGame, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* BreakoutSyncSnapShot sync_snap_shot = 14; */
        if (message.sync.oneofKind === "syncSnapShot")
            BreakoutSyncSnapShot.internalBinaryWrite(message.sync.syncSnapShot, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* BreakoutSyncAction sync_action = 3; */
        if (message.sync.oneofKind === "syncAction")
            BreakoutSyncAction.internalBinaryWrite(message.sync.syncAction, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message AbilityMixinBreakout
 */
export const AbilityMixinBreakout = new AbilityMixinBreakout$Type();
