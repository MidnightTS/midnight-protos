/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneForceLockNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SceneForceLockNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        force_id_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("force_id_list" in data && data.force_id_list != undefined) {
                this.force_id_list = data.force_id_list;
            }
        }
    }
    get force_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set force_id_list(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        force_id_list?: number[];
    }): SceneForceLockNotify {
        const message = new SceneForceLockNotify({});
        if (data.force_id_list != null) {
            message.force_id_list = data.force_id_list;
        }
        return message;
    }
    toObject() {
        const data: {
            force_id_list?: number[];
        } = {};
        if (this.force_id_list != null) {
            data.force_id_list = this.force_id_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.force_id_list.length)
            writer.writePackedUint32(9, this.force_id_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneForceLockNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneForceLockNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.force_id_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneForceLockNotify {
        return SceneForceLockNotify.deserialize(bytes);
    }
}
