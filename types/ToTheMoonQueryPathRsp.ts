// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "ToTheMoonQueryPathRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Vector } from "./Vector";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 6130;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message ToTheMoonQueryPathRsp
 */
export interface ToTheMoonQueryPathRsp {
    /**
     * @generated from protobuf field: repeated int64 index = 5;
     */
    index: bigint[];
    /**
     * @generated from protobuf field: repeated Vector corners = 3;
     */
    corners: Vector[];
    /**
     * @generated from protobuf field: int32 query_id = 15;
     */
    queryId: number;
    /**
     * @generated from protobuf field: int32 retcode = 10;
     */
    retcode: number;
    /**
     * @generated from protobuf field: repeated int32 level = 8;
     */
    level: number[];
    /**
     * @generated from protobuf field: ToTheMoonQueryPathRsp.PathStatusType query_status = 14;
     */
    queryStatus: ToTheMoonQueryPathRsp_PathStatusType;
}
/**
 * @generated from protobuf enum ToTheMoonQueryPathRsp.PathStatusType
 */
export enum ToTheMoonQueryPathRsp_PathStatusType {
    /**
     * @generated from protobuf enum value: PATH_STATUS_TYPE_FAIL = 0;
     */
    FAIL = 0,
    /**
     * @generated from protobuf enum value: PATH_STATUS_TYPE_SUCC = 1;
     */
    SUCC = 1,
    /**
     * @generated from protobuf enum value: PATH_STATUS_TYPE_PARTIAL = 2;
     */
    PARTIAL = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonQueryPathRsp$Type extends MessageType<ToTheMoonQueryPathRsp> {
    constructor() {
        super("ToTheMoonQueryPathRsp", [
            { no: 5, name: "index", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 3, name: "corners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vector },
            { no: 15, name: "query_id", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "level", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "query_status", kind: "enum", T: () => ["ToTheMoonQueryPathRsp.PathStatusType", ToTheMoonQueryPathRsp_PathStatusType, "PATH_STATUS_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonQueryPathRsp>): ToTheMoonQueryPathRsp {
        const message = { index: [], corners: [], queryId: 0, retcode: 0, level: [], queryStatus: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonQueryPathRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonQueryPathRsp): ToTheMoonQueryPathRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated int64 index */ 5:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.index.push(reader.int64().toBigInt());
                    else
                        message.index.push(reader.int64().toBigInt());
                    break;
                case /* repeated Vector corners */ 3:
                    message.corners.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* int32 query_id */ 15:
                    message.queryId = reader.int32();
                    break;
                case /* int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* repeated int32 level */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.level.push(reader.int32());
                    else
                        message.level.push(reader.int32());
                    break;
                case /* ToTheMoonQueryPathRsp.PathStatusType query_status */ 14:
                    message.queryStatus = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonQueryPathRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated int64 index = 5; */
        if (message.index.length) {
            writer.tag(5, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.index.length; i++)
                writer.int64(message.index[i]);
            writer.join();
        }
        /* repeated Vector corners = 3; */
        for (let i = 0; i < message.corners.length; i++)
            Vector.internalBinaryWrite(message.corners[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* int32 query_id = 15; */
        if (message.queryId !== 0)
            writer.tag(15, WireType.Varint).int32(message.queryId);
        /* int32 retcode = 10; */
        if (message.retcode !== 0)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* repeated int32 level = 8; */
        if (message.level.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.level.length; i++)
                writer.int32(message.level[i]);
            writer.join();
        }
        /* ToTheMoonQueryPathRsp.PathStatusType query_status = 14; */
        if (message.queryStatus !== 0)
            writer.tag(14, WireType.Varint).int32(message.queryStatus);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ToTheMoonQueryPathRsp
 */
export const ToTheMoonQueryPathRsp = new ToTheMoonQueryPathRsp$Type();
