// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "GetPlayerTokenRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { StopServerInfo } from "./StopServerInfo";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 130;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message GetPlayerTokenRsp
 */
export interface GetPlayerTokenRsp {
    /**
     * @generated from protobuf field: bytes security_cmd_buffer = 6;
     */
    securityCmdBuffer: Uint8Array;
    /**
     * @generated from protobuf field: uint32 Unk3300_PIPLDEAPMMN = 7 [json_name = "Unk3300PIPLDEAPMMN"];
     */
    unk3300PIPLDEAPMMN: number;
    /**
     * @generated from protobuf field: bool is_guest = 11;
     */
    isGuest: boolean;
    /**
     * @generated from protobuf field: bool Unk3300_AJBBIPFMBEL = 126 [json_name = "Unk3300AJBBIPFMBEL"];
     */
    unk3300AJBBIPFMBEL: boolean;
    /**
     * @generated from protobuf field: uint32 key_id = 134;
     */
    keyId: number;
    /**
     * @generated from protobuf field: string sign = 1666;
     */
    sign: string;
    /**
     * @generated from protobuf field: string secret_key = 15;
     */
    secretKey: string;
    /**
     * @generated from protobuf field: uint32 account_type = 8;
     */
    accountType: number;
    /**
     * @generated from protobuf field: uint32 channel_id = 676;
     */
    channelId: number;
    /**
     * @generated from protobuf field: bytes extra_bin_data = 5;
     */
    extraBinData: Uint8Array;
    /**
     * @generated from protobuf field: uint64 secret_key_seed = 3;
     */
    secretKeySeed: bigint;
    /**
     * @generated from protobuf field: string token = 13;
     */
    token: string;
    /**
     * @generated from protobuf field: string server_rand_key = 1188;
     */
    serverRandKey: string;
    /**
     * @generated from protobuf field: uint32 Unk3300_DILMOPPLPEM = 1670 [json_name = "Unk3300DILMOPPLPEM"];
     */
    unk3300DILMOPPLPEM: number;
    /**
     * @generated from protobuf field: string birthday = 1847;
     */
    birthday: string;
    /**
     * @generated from protobuf field: uint32 tag = 1099;
     */
    tag: number;
    /**
     * @generated from protobuf field: string client_ip_str = 1382;
     */
    clientIpStr: string;
    /**
     * @generated from protobuf field: uint32 Unk3300_IADFJHNFKIB = 1038 [json_name = "Unk3300IADFJHNFKIB"];
     */
    unk3300IADFJHNFKIB: number;
    /**
     * @generated from protobuf field: int32 retcode = 2;
     */
    retcode: number;
    /**
     * @generated from protobuf field: string client_version_random_key = 1152;
     */
    clientVersionRandomKey: string;
    /**
     * @generated from protobuf field: string psn_id = 242;
     */
    psnId: string;
    /**
     * @generated from protobuf field: bool Unk3300_PPGJMLBGJED = 9 [json_name = "Unk3300PPGJMLBGJED"];
     */
    unk3300PPGJMLBGJED: boolean;
    /**
     * @generated from protobuf field: uint32 platform_type = 10;
     */
    platformType: number;
    /**
     * @generated from protobuf field: uint32 reg_platform = 646;
     */
    regPlatform: number;
    /**
     * @generated from protobuf field: StopServerInfo stop_server = 1897;
     */
    stopServer?: StopServerInfo;
    /**
     * @generated from protobuf field: uint32 Unk3300_FHPCJMIILPA = 12 [json_name = "Unk3300FHPCJMIILPA"];
     */
    unk3300FHPCJMIILPA: number;
    /**
     * @generated from protobuf field: bool Unk3300_CFBHAHOHDKC = 746 [json_name = "Unk3300CFBHAHOHDKC"];
     */
    unk3300CFBHAHOHDKC: boolean;
    /**
     * @generated from protobuf field: string account_uid = 1;
     */
    accountUid: string;
    /**
     * @generated from protobuf field: repeated uint32 finish_collection_id_list = 1766;
     */
    finishCollectionIdList: number[];
    /**
     * @generated from protobuf field: string msg = 4;
     */
    msg: string;
    /**
     * @generated from protobuf field: string country_code = 245;
     */
    countryCode: string;
    /**
     * @generated from protobuf field: uint32 uid = 14;
     */
    uid: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerTokenRsp$Type extends MessageType<GetPlayerTokenRsp> {
    constructor() {
        super("GetPlayerTokenRsp", [
            { no: 6, name: "security_cmd_buffer", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 7, name: "Unk3300_PIPLDEAPMMN", kind: "scalar", jsonName: "Unk3300PIPLDEAPMMN", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_guest", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 126, name: "Unk3300_AJBBIPFMBEL", kind: "scalar", jsonName: "Unk3300AJBBIPFMBEL", T: 8 /*ScalarType.BOOL*/ },
            { no: 134, name: "key_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1666, name: "sign", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "secret_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "account_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 676, name: "channel_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "extra_bin_data", kind: "scalar", T: 12 /*ScalarType.BYTES*/ },
            { no: 3, name: "secret_key_seed", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1188, name: "server_rand_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1670, name: "Unk3300_DILMOPPLPEM", kind: "scalar", jsonName: "Unk3300DILMOPPLPEM", T: 13 /*ScalarType.UINT32*/ },
            { no: 1847, name: "birthday", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1099, name: "tag", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1382, name: "client_ip_str", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1038, name: "Unk3300_IADFJHNFKIB", kind: "scalar", jsonName: "Unk3300IADFJHNFKIB", T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 1152, name: "client_version_random_key", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 242, name: "psn_id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "Unk3300_PPGJMLBGJED", kind: "scalar", jsonName: "Unk3300PPGJMLBGJED", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "platform_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 646, name: "reg_platform", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1897, name: "stop_server", kind: "message", T: () => StopServerInfo },
            { no: 12, name: "Unk3300_FHPCJMIILPA", kind: "scalar", jsonName: "Unk3300FHPCJMIILPA", T: 13 /*ScalarType.UINT32*/ },
            { no: 746, name: "Unk3300_CFBHAHOHDKC", kind: "scalar", jsonName: "Unk3300CFBHAHOHDKC", T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "account_uid", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1766, name: "finish_collection_id_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "msg", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 245, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 14, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerTokenRsp>): GetPlayerTokenRsp {
        const message = { securityCmdBuffer: new Uint8Array(0), unk3300PIPLDEAPMMN: 0, isGuest: false, unk3300AJBBIPFMBEL: false, keyId: 0, sign: "", secretKey: "", accountType: 0, channelId: 0, extraBinData: new Uint8Array(0), secretKeySeed: 0n, token: "", serverRandKey: "", unk3300DILMOPPLPEM: 0, birthday: "", tag: 0, clientIpStr: "", unk3300IADFJHNFKIB: 0, retcode: 0, clientVersionRandomKey: "", psnId: "", unk3300PPGJMLBGJED: false, platformType: 0, regPlatform: 0, unk3300FHPCJMIILPA: 0, unk3300CFBHAHOHDKC: false, accountUid: "", finishCollectionIdList: [], msg: "", countryCode: "", uid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerTokenRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerTokenRsp): GetPlayerTokenRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bytes security_cmd_buffer */ 6:
                    message.securityCmdBuffer = reader.bytes();
                    break;
                case /* uint32 Unk3300_PIPLDEAPMMN = 7 [json_name = "Unk3300PIPLDEAPMMN"];*/ 7:
                    message.unk3300PIPLDEAPMMN = reader.uint32();
                    break;
                case /* bool is_guest */ 11:
                    message.isGuest = reader.bool();
                    break;
                case /* bool Unk3300_AJBBIPFMBEL = 126 [json_name = "Unk3300AJBBIPFMBEL"];*/ 126:
                    message.unk3300AJBBIPFMBEL = reader.bool();
                    break;
                case /* uint32 key_id */ 134:
                    message.keyId = reader.uint32();
                    break;
                case /* string sign */ 1666:
                    message.sign = reader.string();
                    break;
                case /* string secret_key */ 15:
                    message.secretKey = reader.string();
                    break;
                case /* uint32 account_type */ 8:
                    message.accountType = reader.uint32();
                    break;
                case /* uint32 channel_id */ 676:
                    message.channelId = reader.uint32();
                    break;
                case /* bytes extra_bin_data */ 5:
                    message.extraBinData = reader.bytes();
                    break;
                case /* uint64 secret_key_seed */ 3:
                    message.secretKeySeed = reader.uint64().toBigInt();
                    break;
                case /* string token */ 13:
                    message.token = reader.string();
                    break;
                case /* string server_rand_key */ 1188:
                    message.serverRandKey = reader.string();
                    break;
                case /* uint32 Unk3300_DILMOPPLPEM = 1670 [json_name = "Unk3300DILMOPPLPEM"];*/ 1670:
                    message.unk3300DILMOPPLPEM = reader.uint32();
                    break;
                case /* string birthday */ 1847:
                    message.birthday = reader.string();
                    break;
                case /* uint32 tag */ 1099:
                    message.tag = reader.uint32();
                    break;
                case /* string client_ip_str */ 1382:
                    message.clientIpStr = reader.string();
                    break;
                case /* uint32 Unk3300_IADFJHNFKIB = 1038 [json_name = "Unk3300IADFJHNFKIB"];*/ 1038:
                    message.unk3300IADFJHNFKIB = reader.uint32();
                    break;
                case /* int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* string client_version_random_key */ 1152:
                    message.clientVersionRandomKey = reader.string();
                    break;
                case /* string psn_id */ 242:
                    message.psnId = reader.string();
                    break;
                case /* bool Unk3300_PPGJMLBGJED = 9 [json_name = "Unk3300PPGJMLBGJED"];*/ 9:
                    message.unk3300PPGJMLBGJED = reader.bool();
                    break;
                case /* uint32 platform_type */ 10:
                    message.platformType = reader.uint32();
                    break;
                case /* uint32 reg_platform */ 646:
                    message.regPlatform = reader.uint32();
                    break;
                case /* StopServerInfo stop_server */ 1897:
                    message.stopServer = StopServerInfo.internalBinaryRead(reader, reader.uint32(), options, message.stopServer);
                    break;
                case /* uint32 Unk3300_FHPCJMIILPA = 12 [json_name = "Unk3300FHPCJMIILPA"];*/ 12:
                    message.unk3300FHPCJMIILPA = reader.uint32();
                    break;
                case /* bool Unk3300_CFBHAHOHDKC = 746 [json_name = "Unk3300CFBHAHOHDKC"];*/ 746:
                    message.unk3300CFBHAHOHDKC = reader.bool();
                    break;
                case /* string account_uid */ 1:
                    message.accountUid = reader.string();
                    break;
                case /* repeated uint32 finish_collection_id_list */ 1766:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishCollectionIdList.push(reader.uint32());
                    else
                        message.finishCollectionIdList.push(reader.uint32());
                    break;
                case /* string msg */ 4:
                    message.msg = reader.string();
                    break;
                case /* string country_code */ 245:
                    message.countryCode = reader.string();
                    break;
                case /* uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerTokenRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bytes security_cmd_buffer = 6; */
        if (message.securityCmdBuffer.length)
            writer.tag(6, WireType.LengthDelimited).bytes(message.securityCmdBuffer);
        /* uint32 Unk3300_PIPLDEAPMMN = 7 [json_name = "Unk3300PIPLDEAPMMN"]; */
        if (message.unk3300PIPLDEAPMMN !== 0)
            writer.tag(7, WireType.Varint).uint32(message.unk3300PIPLDEAPMMN);
        /* bool is_guest = 11; */
        if (message.isGuest !== false)
            writer.tag(11, WireType.Varint).bool(message.isGuest);
        /* bool Unk3300_AJBBIPFMBEL = 126 [json_name = "Unk3300AJBBIPFMBEL"]; */
        if (message.unk3300AJBBIPFMBEL !== false)
            writer.tag(126, WireType.Varint).bool(message.unk3300AJBBIPFMBEL);
        /* uint32 key_id = 134; */
        if (message.keyId !== 0)
            writer.tag(134, WireType.Varint).uint32(message.keyId);
        /* string sign = 1666; */
        if (message.sign !== "")
            writer.tag(1666, WireType.LengthDelimited).string(message.sign);
        /* string secret_key = 15; */
        if (message.secretKey !== "")
            writer.tag(15, WireType.LengthDelimited).string(message.secretKey);
        /* uint32 account_type = 8; */
        if (message.accountType !== 0)
            writer.tag(8, WireType.Varint).uint32(message.accountType);
        /* uint32 channel_id = 676; */
        if (message.channelId !== 0)
            writer.tag(676, WireType.Varint).uint32(message.channelId);
        /* bytes extra_bin_data = 5; */
        if (message.extraBinData.length)
            writer.tag(5, WireType.LengthDelimited).bytes(message.extraBinData);
        /* uint64 secret_key_seed = 3; */
        if (message.secretKeySeed !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.secretKeySeed);
        /* string token = 13; */
        if (message.token !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.token);
        /* string server_rand_key = 1188; */
        if (message.serverRandKey !== "")
            writer.tag(1188, WireType.LengthDelimited).string(message.serverRandKey);
        /* uint32 Unk3300_DILMOPPLPEM = 1670 [json_name = "Unk3300DILMOPPLPEM"]; */
        if (message.unk3300DILMOPPLPEM !== 0)
            writer.tag(1670, WireType.Varint).uint32(message.unk3300DILMOPPLPEM);
        /* string birthday = 1847; */
        if (message.birthday !== "")
            writer.tag(1847, WireType.LengthDelimited).string(message.birthday);
        /* uint32 tag = 1099; */
        if (message.tag !== 0)
            writer.tag(1099, WireType.Varint).uint32(message.tag);
        /* string client_ip_str = 1382; */
        if (message.clientIpStr !== "")
            writer.tag(1382, WireType.LengthDelimited).string(message.clientIpStr);
        /* uint32 Unk3300_IADFJHNFKIB = 1038 [json_name = "Unk3300IADFJHNFKIB"]; */
        if (message.unk3300IADFJHNFKIB !== 0)
            writer.tag(1038, WireType.Varint).uint32(message.unk3300IADFJHNFKIB);
        /* int32 retcode = 2; */
        if (message.retcode !== 0)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* string client_version_random_key = 1152; */
        if (message.clientVersionRandomKey !== "")
            writer.tag(1152, WireType.LengthDelimited).string(message.clientVersionRandomKey);
        /* string psn_id = 242; */
        if (message.psnId !== "")
            writer.tag(242, WireType.LengthDelimited).string(message.psnId);
        /* bool Unk3300_PPGJMLBGJED = 9 [json_name = "Unk3300PPGJMLBGJED"]; */
        if (message.unk3300PPGJMLBGJED !== false)
            writer.tag(9, WireType.Varint).bool(message.unk3300PPGJMLBGJED);
        /* uint32 platform_type = 10; */
        if (message.platformType !== 0)
            writer.tag(10, WireType.Varint).uint32(message.platformType);
        /* uint32 reg_platform = 646; */
        if (message.regPlatform !== 0)
            writer.tag(646, WireType.Varint).uint32(message.regPlatform);
        /* StopServerInfo stop_server = 1897; */
        if (message.stopServer)
            StopServerInfo.internalBinaryWrite(message.stopServer, writer.tag(1897, WireType.LengthDelimited).fork(), options).join();
        /* uint32 Unk3300_FHPCJMIILPA = 12 [json_name = "Unk3300FHPCJMIILPA"]; */
        if (message.unk3300FHPCJMIILPA !== 0)
            writer.tag(12, WireType.Varint).uint32(message.unk3300FHPCJMIILPA);
        /* bool Unk3300_CFBHAHOHDKC = 746 [json_name = "Unk3300CFBHAHOHDKC"]; */
        if (message.unk3300CFBHAHOHDKC !== false)
            writer.tag(746, WireType.Varint).bool(message.unk3300CFBHAHOHDKC);
        /* string account_uid = 1; */
        if (message.accountUid !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.accountUid);
        /* repeated uint32 finish_collection_id_list = 1766; */
        if (message.finishCollectionIdList.length) {
            writer.tag(1766, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.finishCollectionIdList.length; i++)
                writer.uint32(message.finishCollectionIdList[i]);
            writer.join();
        }
        /* string msg = 4; */
        if (message.msg !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.msg);
        /* string country_code = 245; */
        if (message.countryCode !== "")
            writer.tag(245, WireType.LengthDelimited).string(message.countryCode);
        /* uint32 uid = 14; */
        if (message.uid !== 0)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GetPlayerTokenRsp
 */
export const GetPlayerTokenRsp = new GetPlayerTokenRsp$Type();
