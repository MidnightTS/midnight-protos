/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlantFlowerActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PlantFlowerActivityDetailInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_content_closed?: boolean;
        wish_flower_num_map?: Map<number, number>;
        today_seed_reward_id?: number;
        day_index?: number;
        is_today_has_awarded?: boolean;
        used_flower_num_map?: Map<number, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("wish_flower_num_map" in data && data.wish_flower_num_map != undefined) {
                this.wish_flower_num_map = data.wish_flower_num_map;
            }
            if ("today_seed_reward_id" in data && data.today_seed_reward_id != undefined) {
                this.today_seed_reward_id = data.today_seed_reward_id;
            }
            if ("day_index" in data && data.day_index != undefined) {
                this.day_index = data.day_index;
            }
            if ("is_today_has_awarded" in data && data.is_today_has_awarded != undefined) {
                this.is_today_has_awarded = data.is_today_has_awarded;
            }
            if ("used_flower_num_map" in data && data.used_flower_num_map != undefined) {
                this.used_flower_num_map = data.used_flower_num_map;
            }
        }
        if (!this.wish_flower_num_map)
            this.wish_flower_num_map = new Map();
        if (!this.used_flower_num_map)
            this.used_flower_num_map = new Map();
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
    }
    set is_content_closed(value: boolean) {
        pb_1.Message.setField(this, 3, value);
    }
    get wish_flower_num_map() {
        return pb_1.Message.getField(this, 10) as any as Map<number, number>;
    }
    set wish_flower_num_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 10, value as any);
    }
    get today_seed_reward_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set today_seed_reward_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get day_index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set day_index(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_today_has_awarded() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set is_today_has_awarded(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get used_flower_num_map() {
        return pb_1.Message.getField(this, 7) as any as Map<number, number>;
    }
    set used_flower_num_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    static fromObject(data: {
        is_content_closed?: boolean;
        wish_flower_num_map?: {
            [key: number]: number;
        };
        today_seed_reward_id?: number;
        day_index?: number;
        is_today_has_awarded?: boolean;
        used_flower_num_map?: {
            [key: number]: number;
        };
    }): PlantFlowerActivityDetailInfo {
        const message = new PlantFlowerActivityDetailInfo({});
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (typeof data.wish_flower_num_map == "object") {
            message.wish_flower_num_map = new Map(Object.entries(data.wish_flower_num_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.today_seed_reward_id != null) {
            message.today_seed_reward_id = data.today_seed_reward_id;
        }
        if (data.day_index != null) {
            message.day_index = data.day_index;
        }
        if (data.is_today_has_awarded != null) {
            message.is_today_has_awarded = data.is_today_has_awarded;
        }
        if (typeof data.used_flower_num_map == "object") {
            message.used_flower_num_map = new Map(Object.entries(data.used_flower_num_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            is_content_closed?: boolean;
            wish_flower_num_map?: {
                [key: number]: number;
            };
            today_seed_reward_id?: number;
            day_index?: number;
            is_today_has_awarded?: boolean;
            used_flower_num_map?: {
                [key: number]: number;
            };
        } = {};
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.wish_flower_num_map.size > 0) {
            data.wish_flower_num_map = (Object.fromEntries)(this.wish_flower_num_map);
        }
        if (this.today_seed_reward_id != null) {
            data.today_seed_reward_id = this.today_seed_reward_id;
        }
        if (this.day_index != null) {
            data.day_index = this.day_index;
        }
        if (this.is_today_has_awarded != null) {
            data.is_today_has_awarded = this.is_today_has_awarded;
        }
        if (this.used_flower_num_map.size > 0) {
            data.used_flower_num_map = (Object.fromEntries)(this.used_flower_num_map);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_content_closed != false)
            writer.writeBool(3, this.is_content_closed);
        for (const [key, value] of this.wish_flower_num_map) {
            writer.writeMessage(10, this.wish_flower_num_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.today_seed_reward_id != 0)
            writer.writeUint32(11, this.today_seed_reward_id);
        if (this.day_index != 0)
            writer.writeUint32(1, this.day_index);
        if (this.is_today_has_awarded != false)
            writer.writeBool(13, this.is_today_has_awarded);
        for (const [key, value] of this.used_flower_num_map) {
            writer.writeMessage(7, this.used_flower_num_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlantFlowerActivityDetailInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlantFlowerActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.is_content_closed = reader.readBool();
                    break;
                case 10:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.wish_flower_num_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 11:
                    message.today_seed_reward_id = reader.readUint32();
                    break;
                case 1:
                    message.day_index = reader.readUint32();
                    break;
                case 13:
                    message.is_today_has_awarded = reader.readBool();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.used_flower_num_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlantFlowerActivityDetailInfo {
        return PlantFlowerActivityDetailInfo.deserialize(bytes);
    }
}
