// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "PlantFlowerActivityDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message PlantFlowerActivityDetailInfo
 */
export interface PlantFlowerActivityDetailInfo {
    /**
     * @generated from protobuf field: uint32 day_index = 1;
     */
    dayIndex: number;
    /**
     * @generated from protobuf field: uint32 today_seed_reward_id = 15;
     */
    todaySeedRewardId: number;
    /**
     * @generated from protobuf field: bool is_content_closed = 3;
     */
    isContentClosed: boolean;
    /**
     * @generated from protobuf field: map<uint32, uint32> Unk3300_EPMKDFOBLFK = 9 [json_name = "Unk3300EPMKDFOBLFK"];
     */
    unk3300EPMKDFOBLFK: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: map<uint32, uint32> Unk3300_ELAIBMDIBFJ = 5 [json_name = "Unk3300ELAIBMDIBFJ"];
     */
    unk3300ELAIBMDIBFJ: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: bool is_today_has_awarded = 8;
     */
    isTodayHasAwarded: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlantFlowerActivityDetailInfo$Type extends MessageType<PlantFlowerActivityDetailInfo> {
    constructor() {
        super("PlantFlowerActivityDetailInfo", [
            { no: 1, name: "day_index", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "today_seed_reward_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "Unk3300_EPMKDFOBLFK", kind: "map", jsonName: "Unk3300EPMKDFOBLFK", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 5, name: "Unk3300_ELAIBMDIBFJ", kind: "map", jsonName: "Unk3300ELAIBMDIBFJ", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 8, name: "is_today_has_awarded", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlantFlowerActivityDetailInfo>): PlantFlowerActivityDetailInfo {
        const message = { dayIndex: 0, todaySeedRewardId: 0, isContentClosed: false, unk3300EPMKDFOBLFK: {}, unk3300ELAIBMDIBFJ: {}, isTodayHasAwarded: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlantFlowerActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlantFlowerActivityDetailInfo): PlantFlowerActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint32 day_index */ 1:
                    message.dayIndex = reader.uint32();
                    break;
                case /* uint32 today_seed_reward_id */ 15:
                    message.todaySeedRewardId = reader.uint32();
                    break;
                case /* bool is_content_closed */ 3:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, uint32> Unk3300_EPMKDFOBLFK = 9 [json_name = "Unk3300EPMKDFOBLFK"];*/ 9:
                    this.binaryReadMap9(message.unk3300EPMKDFOBLFK, reader, options);
                    break;
                case /* map<uint32, uint32> Unk3300_ELAIBMDIBFJ = 5 [json_name = "Unk3300ELAIBMDIBFJ"];*/ 5:
                    this.binaryReadMap5(message.unk3300ELAIBMDIBFJ, reader, options);
                    break;
                case /* bool is_today_has_awarded */ 8:
                    message.isTodayHasAwarded = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap9(map: PlantFlowerActivityDetailInfo["unk3300EPMKDFOBLFK"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerActivityDetailInfo["unk3300EPMKDFOBLFK"] | undefined, val: PlantFlowerActivityDetailInfo["unk3300EPMKDFOBLFK"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlantFlowerActivityDetailInfo.Unk3300_EPMKDFOBLFK");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    private binaryReadMap5(map: PlantFlowerActivityDetailInfo["unk3300ELAIBMDIBFJ"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlantFlowerActivityDetailInfo["unk3300ELAIBMDIBFJ"] | undefined, val: PlantFlowerActivityDetailInfo["unk3300ELAIBMDIBFJ"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlantFlowerActivityDetailInfo.Unk3300_ELAIBMDIBFJ");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: PlantFlowerActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint32 day_index = 1; */
        if (message.dayIndex !== 0)
            writer.tag(1, WireType.Varint).uint32(message.dayIndex);
        /* uint32 today_seed_reward_id = 15; */
        if (message.todaySeedRewardId !== 0)
            writer.tag(15, WireType.Varint).uint32(message.todaySeedRewardId);
        /* bool is_content_closed = 3; */
        if (message.isContentClosed !== false)
            writer.tag(3, WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, uint32> Unk3300_EPMKDFOBLFK = 9 [json_name = "Unk3300EPMKDFOBLFK"]; */
        for (let k of Object.keys(message.unk3300EPMKDFOBLFK))
            writer.tag(9, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unk3300EPMKDFOBLFK[k as any]).join();
        /* map<uint32, uint32> Unk3300_ELAIBMDIBFJ = 5 [json_name = "Unk3300ELAIBMDIBFJ"]; */
        for (let k of Object.keys(message.unk3300ELAIBMDIBFJ))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.unk3300ELAIBMDIBFJ[k as any]).join();
        /* bool is_today_has_awarded = 8; */
        if (message.isTodayHasAwarded !== false)
            writer.tag(8, WireType.Varint).bool(message.isTodayHasAwarded);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlantFlowerActivityDetailInfo
 */
export const PlantFlowerActivityDetailInfo = new PlantFlowerActivityDetailInfo$Type();
