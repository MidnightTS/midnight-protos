// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_tothemoon.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MathQuaternion } from "./define";
import { Vector } from "./define";
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonQueryPathReq
 */
export interface ToTheMoonQueryPathReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector destination_pos = 9;
     */
    destinationPos?: Vector;
    /**
     * @generated from protobuf field: optional int32 fuzzy_range = 15;
     */
    fuzzyRange?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonQueryPathReq.OptionType query_type = 8;
     */
    queryType?: ToTheMoonQueryPathReq_OptionType;
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonQueryPathReq.AStarMethod astar_method = 1;
     */
    astarMethod?: ToTheMoonQueryPathReq_AStarMethod;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 6;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional int32 query_id = 11;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonQueryPathReq.FilterType filter_type = 3;
     */
    filterType?: ToTheMoonQueryPathReq_FilterType;
    /**
     * @generated from protobuf field: optional bool refined = 13;
     */
    refined?: boolean;
    /**
     * @generated from protobuf field: optional bool use_full_neighbor = 5;
     */
    useFullNeighbor?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector source_pos = 10;
     */
    sourcePos?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathReq.OptionType
 */
export enum ToTheMoonQueryPathReq_OptionType {
    /**
     * @generated from protobuf enum value: OPTION_NONE = 0;
     */
    OPTION_NONE = 0,
    /**
     * @generated from protobuf enum value: OPTION_NORMAL = 1;
     */
    OPTION_NORMAL = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathReq.AStarMethod
 */
export enum ToTheMoonQueryPathReq_AStarMethod {
    /**
     * @generated from protobuf enum value: Classic = 0;
     */
    Classic = 0,
    /**
     * @generated from protobuf enum value: Tendency = 1;
     */
    Tendency = 1,
    /**
     * @generated from protobuf enum value: Adaptive = 2;
     */
    Adaptive = 2,
    /**
     * @generated from protobuf enum value: Inflection = 3;
     */
    Inflection = 3
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathReq.FilterType
 */
export enum ToTheMoonQueryPathReq_FilterType {
    /**
     * @generated from protobuf enum value: All = 0;
     */
    All = 0,
    /**
     * @generated from protobuf enum value: Air = 1;
     */
    Air = 1,
    /**
     * @generated from protobuf enum value: Water = 2;
     */
    Water = 2
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathReq.CmdId
 */
export enum ToTheMoonQueryPathReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6172;
     */
    CMD_ID = 6172,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonQueryPathRsp
 */
export interface ToTheMoonQueryPathRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonQueryPathRsp.PathStatusType query_status = 7;
     */
    queryStatus?: ToTheMoonQueryPathRsp_PathStatusType;
    /**
     * @generated from protobuf field: repeated int64 index = 3;
     */
    index: bigint[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.Vector corners = 14;
     */
    corners: Vector[];
    /**
     * @generated from protobuf field: repeated int32 level = 1;
     */
    level: number[];
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional int32 query_id = 9;
     */
    queryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathRsp.PathStatusType
 */
export enum ToTheMoonQueryPathRsp_PathStatusType {
    /**
     * @generated from protobuf enum value: STATUS_FAIL = 0;
     */
    STATUS_FAIL = 0,
    /**
     * @generated from protobuf enum value: STATUS_SUCC = 1;
     */
    STATUS_SUCC = 1,
    /**
     * @generated from protobuf enum value: STATUS_PARTIAL = 2;
     */
    STATUS_PARTIAL = 2
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonQueryPathRsp.CmdId
 */
export enum ToTheMoonQueryPathRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6198;
     */
    CMD_ID = 6198,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonPingNotify
 */
export interface ToTheMoonPingNotify {
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonPingNotify.CmdId
 */
export enum ToTheMoonPingNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6112;
     */
    CMD_ID = 6112,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonEnterSceneReq
 */
export interface ToTheMoonEnterSceneReq {
    /**
     * @generated from protobuf field: optional uint32 version = 14;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 15;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonEnterSceneReq.CmdId
 */
export enum ToTheMoonEnterSceneReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6135;
     */
    CMD_ID = 6135,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonEnterSceneRsp
 */
export interface ToTheMoonEnterSceneRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonEnterSceneRsp.CmdId
 */
export enum ToTheMoonEnterSceneRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6107;
     */
    CMD_ID = 6107,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonObstacleInfo
 */
export interface ToTheMoonObstacleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonObstacleInfo.ShapeType type = 2;
     */
    type?: ToTheMoonObstacleInfo_ShapeType;
    /**
     * @generated from protobuf field: optional int32 handle_id = 11;
     */
    handleId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MathQuaternion rotation = 7;
     */
    rotation?: MathQuaternion;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector center = 13;
     */
    center?: Vector;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector half_extents = 14;
     */
    halfExtents?: Vector;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonObstacleInfo.ShapeType
 */
export enum ToTheMoonObstacleInfo_ShapeType {
    /**
     * @generated from protobuf enum value: OBSTACLE_SHAPE_CAPSULE = 0;
     */
    OBSTACLE_SHAPE_CAPSULE = 0,
    /**
     * @generated from protobuf enum value: OBSTACLE_SHAPE_BOX = 1;
     */
    OBSTACLE_SHAPE_BOX = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonAddObstacleReq
 */
export interface ToTheMoonAddObstacleReq {
    /**
     * @generated from protobuf field: optional bool use_edge = 12;
     */
    useEdge?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.ToTheMoonObstacleInfo obstacle = 13;
     */
    obstacle?: ToTheMoonObstacleInfo;
    /**
     * @generated from protobuf field: optional int32 query_id = 9;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 3;
     */
    sceneId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonAddObstacleReq.CmdId
 */
export enum ToTheMoonAddObstacleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6121;
     */
    CMD_ID = 6121,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.DynamicSVONode
 */
export interface DynamicSVONode {
    /**
     * @generated from protobuf field: optional int64 index = 8;
     */
    index?: bigint;
    /**
     * @generated from protobuf field: optional int32 area = 5;
     */
    area?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.Vector refer_pos = 1;
     */
    referPos?: Vector;
}
/**
 * @generated from protobuf message com.midnights.game.DynamicLayerNodes
 */
export interface DynamicLayerNodes {
    /**
     * @generated from protobuf field: optional int32 level = 10;
     */
    level?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.DynamicSVONode nodes = 6;
     */
    nodes: DynamicSVONode[];
}
/**
 * @generated from protobuf message com.midnights.game.DynamicNodes
 */
export interface DynamicNodes {
    /**
     * @generated from protobuf field: repeated com.midnights.game.DynamicLayerNodes nodes = 3;
     */
    nodes: DynamicLayerNodes[];
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonAddObstacleRsp
 */
export interface ToTheMoonAddObstacleRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.DynamicNodes dynamic_nodes = 2;
     */
    dynamicNodes?: DynamicNodes;
    /**
     * @generated from protobuf field: optional int32 query_id = 13;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 11;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonAddObstacleRsp.CmdId
 */
export enum ToTheMoonAddObstacleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6103;
     */
    CMD_ID = 6103,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonRemoveObstacleReq
 */
export interface ToTheMoonRemoveObstacleReq {
    /**
     * @generated from protobuf field: optional int32 handle = 12;
     */
    handle?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_id = 10;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional int32 query_id = 11;
     */
    queryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonRemoveObstacleReq.CmdId
 */
export enum ToTheMoonRemoveObstacleReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6190;
     */
    CMD_ID = 6190,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonRemoveObstacleReq.ObstacleType
 */
export enum ToTheMoonRemoveObstacleReq_ObstacleType {
    /**
     * @generated from protobuf enum value: Box = 0;
     */
    Box = 0,
    /**
     * @generated from protobuf enum value: Capsule = 1;
     */
    Capsule = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonRemoveObstacleRsp
 */
export interface ToTheMoonRemoveObstacleRsp {
    /**
     * @generated from protobuf field: optional int32 query_id = 3;
     */
    queryId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.DynamicNodes dynamic_nodes = 8;
     */
    dynamicNodes?: DynamicNodes;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonRemoveObstacleRsp.CmdId
 */
export enum ToTheMoonRemoveObstacleRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6173;
     */
    CMD_ID = 6173,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ToTheMoonObstaclesModifyNotify
 */
export interface ToTheMoonObstaclesModifyNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ToTheMoonObstacleInfo add_obstacles = 4;
     */
    addObstacles: ToTheMoonObstacleInfo[];
    /**
     * @generated from protobuf field: repeated int32 remove_obstacle_ids = 13;
     */
    removeObstacleIds: number[];
    /**
     * @generated from protobuf field: optional uint32 scene_id = 15;
     */
    sceneId?: number;
    /**
     * @generated from protobuf field: optional bool use_edge = 1;
     */
    useEdge?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ToTheMoonObstaclesModifyNotify.CmdId
 */
export enum ToTheMoonObstaclesModifyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6199;
     */
    CMD_ID = 6199,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonQueryPathReq$Type extends MessageType<ToTheMoonQueryPathReq> {
    constructor() {
        super("com.midnights.game.ToTheMoonQueryPathReq", [
            { no: 9, name: "destination_pos", kind: "message", T: () => Vector },
            { no: 15, name: "fuzzy_range", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "query_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ToTheMoonQueryPathReq.OptionType", ToTheMoonQueryPathReq_OptionType] },
            { no: 1, name: "astar_method", kind: "enum", opt: true, T: () => ["com.midnights.game.ToTheMoonQueryPathReq.AStarMethod", ToTheMoonQueryPathReq_AStarMethod] },
            { no: 6, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "filter_type", kind: "enum", opt: true, T: () => ["com.midnights.game.ToTheMoonQueryPathReq.FilterType", ToTheMoonQueryPathReq_FilterType] },
            { no: 13, name: "refined", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "use_full_neighbor", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "source_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonQueryPathReq>): ToTheMoonQueryPathReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonQueryPathReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonQueryPathReq): ToTheMoonQueryPathReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.Vector destination_pos */ 9:
                    message.destinationPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.destinationPos);
                    break;
                case /* optional int32 fuzzy_range */ 15:
                    message.fuzzyRange = reader.int32();
                    break;
                case /* optional com.midnights.game.ToTheMoonQueryPathReq.OptionType query_type */ 8:
                    message.queryType = reader.int32();
                    break;
                case /* optional com.midnights.game.ToTheMoonQueryPathReq.AStarMethod astar_method */ 1:
                    message.astarMethod = reader.int32();
                    break;
                case /* optional uint32 scene_id */ 6:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional int32 query_id */ 11:
                    message.queryId = reader.int32();
                    break;
                case /* optional com.midnights.game.ToTheMoonQueryPathReq.FilterType filter_type */ 3:
                    message.filterType = reader.int32();
                    break;
                case /* optional bool refined */ 13:
                    message.refined = reader.bool();
                    break;
                case /* optional bool use_full_neighbor */ 5:
                    message.useFullNeighbor = reader.bool();
                    break;
                case /* optional com.midnights.game.Vector source_pos */ 10:
                    message.sourcePos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.sourcePos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonQueryPathReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.Vector destination_pos = 9; */
        if (message.destinationPos)
            Vector.internalBinaryWrite(message.destinationPos, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 fuzzy_range = 15; */
        if (message.fuzzyRange !== undefined)
            writer.tag(15, WireType.Varint).int32(message.fuzzyRange);
        /* optional com.midnights.game.ToTheMoonQueryPathReq.OptionType query_type = 8; */
        if (message.queryType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.queryType);
        /* optional com.midnights.game.ToTheMoonQueryPathReq.AStarMethod astar_method = 1; */
        if (message.astarMethod !== undefined)
            writer.tag(1, WireType.Varint).int32(message.astarMethod);
        /* optional uint32 scene_id = 6; */
        if (message.sceneId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.sceneId);
        /* optional int32 query_id = 11; */
        if (message.queryId !== undefined)
            writer.tag(11, WireType.Varint).int32(message.queryId);
        /* optional com.midnights.game.ToTheMoonQueryPathReq.FilterType filter_type = 3; */
        if (message.filterType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.filterType);
        /* optional bool refined = 13; */
        if (message.refined !== undefined)
            writer.tag(13, WireType.Varint).bool(message.refined);
        /* optional bool use_full_neighbor = 5; */
        if (message.useFullNeighbor !== undefined)
            writer.tag(5, WireType.Varint).bool(message.useFullNeighbor);
        /* optional com.midnights.game.Vector source_pos = 10; */
        if (message.sourcePos)
            Vector.internalBinaryWrite(message.sourcePos, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonQueryPathReq
 */
export const ToTheMoonQueryPathReq = new ToTheMoonQueryPathReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonQueryPathRsp$Type extends MessageType<ToTheMoonQueryPathRsp> {
    constructor() {
        super("com.midnights.game.ToTheMoonQueryPathRsp", [
            { no: 7, name: "query_status", kind: "enum", opt: true, T: () => ["com.midnights.game.ToTheMoonQueryPathRsp.PathStatusType", ToTheMoonQueryPathRsp_PathStatusType] },
            { no: 3, name: "index", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 14, name: "corners", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => Vector },
            { no: 1, name: "level", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonQueryPathRsp>): ToTheMoonQueryPathRsp {
        const message = { index: [], corners: [], level: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonQueryPathRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonQueryPathRsp): ToTheMoonQueryPathRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ToTheMoonQueryPathRsp.PathStatusType query_status */ 7:
                    message.queryStatus = reader.int32();
                    break;
                case /* repeated int64 index */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.index.push(reader.int64().toBigInt());
                    else
                        message.index.push(reader.int64().toBigInt());
                    break;
                case /* repeated com.midnights.game.Vector corners */ 14:
                    message.corners.push(Vector.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 level */ 1:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.level.push(reader.int32());
                    else
                        message.level.push(reader.int32());
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                case /* optional int32 query_id */ 9:
                    message.queryId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonQueryPathRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ToTheMoonQueryPathRsp.PathStatusType query_status = 7; */
        if (message.queryStatus !== undefined)
            writer.tag(7, WireType.Varint).int32(message.queryStatus);
        /* repeated int64 index = 3; */
        if (message.index.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.index.length; i++)
                writer.int64(message.index[i]);
            writer.join();
        }
        /* repeated com.midnights.game.Vector corners = 14; */
        for (let i = 0; i < message.corners.length; i++)
            Vector.internalBinaryWrite(message.corners[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 level = 1; */
        if (message.level.length) {
            writer.tag(1, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.level.length; i++)
                writer.int32(message.level[i]);
            writer.join();
        }
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        /* optional int32 query_id = 9; */
        if (message.queryId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.queryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonQueryPathRsp
 */
export const ToTheMoonQueryPathRsp = new ToTheMoonQueryPathRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonPingNotify$Type extends MessageType<ToTheMoonPingNotify> {
    constructor() {
        super("com.midnights.game.ToTheMoonPingNotify", []);
    }
    create(value?: PartialMessage<ToTheMoonPingNotify>): ToTheMoonPingNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonPingNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonPingNotify): ToTheMoonPingNotify {
        return target ?? this.create();
    }
    internalBinaryWrite(message: ToTheMoonPingNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonPingNotify
 */
export const ToTheMoonPingNotify = new ToTheMoonPingNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonEnterSceneReq$Type extends MessageType<ToTheMoonEnterSceneReq> {
    constructor() {
        super("com.midnights.game.ToTheMoonEnterSceneReq", [
            { no: 14, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonEnterSceneReq>): ToTheMoonEnterSceneReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonEnterSceneReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonEnterSceneReq): ToTheMoonEnterSceneReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 version */ 14:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 scene_id */ 15:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonEnterSceneReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 version = 14; */
        if (message.version !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.version);
        /* optional uint32 scene_id = 15; */
        if (message.sceneId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonEnterSceneReq
 */
export const ToTheMoonEnterSceneReq = new ToTheMoonEnterSceneReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonEnterSceneRsp$Type extends MessageType<ToTheMoonEnterSceneRsp> {
    constructor() {
        super("com.midnights.game.ToTheMoonEnterSceneRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonEnterSceneRsp>): ToTheMoonEnterSceneRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonEnterSceneRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonEnterSceneRsp): ToTheMoonEnterSceneRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonEnterSceneRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonEnterSceneRsp
 */
export const ToTheMoonEnterSceneRsp = new ToTheMoonEnterSceneRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonObstacleInfo$Type extends MessageType<ToTheMoonObstacleInfo> {
    constructor() {
        super("com.midnights.game.ToTheMoonObstacleInfo", [
            { no: 2, name: "type", kind: "enum", opt: true, T: () => ["com.midnights.game.ToTheMoonObstacleInfo.ShapeType", ToTheMoonObstacleInfo_ShapeType] },
            { no: 11, name: "handle_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "rotation", kind: "message", T: () => MathQuaternion },
            { no: 13, name: "center", kind: "message", T: () => Vector },
            { no: 14, name: "half_extents", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonObstacleInfo>): ToTheMoonObstacleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonObstacleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonObstacleInfo): ToTheMoonObstacleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ToTheMoonObstacleInfo.ShapeType type */ 2:
                    message.type = reader.int32();
                    break;
                case /* optional int32 handle_id */ 11:
                    message.handleId = reader.int32();
                    break;
                case /* optional com.midnights.game.MathQuaternion rotation */ 7:
                    message.rotation = MathQuaternion.internalBinaryRead(reader, reader.uint32(), options, message.rotation);
                    break;
                case /* optional com.midnights.game.Vector center */ 13:
                    message.center = Vector.internalBinaryRead(reader, reader.uint32(), options, message.center);
                    break;
                case /* optional com.midnights.game.Vector half_extents */ 14:
                    message.halfExtents = Vector.internalBinaryRead(reader, reader.uint32(), options, message.halfExtents);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonObstacleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ToTheMoonObstacleInfo.ShapeType type = 2; */
        if (message.type !== undefined)
            writer.tag(2, WireType.Varint).int32(message.type);
        /* optional int32 handle_id = 11; */
        if (message.handleId !== undefined)
            writer.tag(11, WireType.Varint).int32(message.handleId);
        /* optional com.midnights.game.MathQuaternion rotation = 7; */
        if (message.rotation)
            MathQuaternion.internalBinaryWrite(message.rotation, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector center = 13; */
        if (message.center)
            Vector.internalBinaryWrite(message.center, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.Vector half_extents = 14; */
        if (message.halfExtents)
            Vector.internalBinaryWrite(message.halfExtents, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonObstacleInfo
 */
export const ToTheMoonObstacleInfo = new ToTheMoonObstacleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonAddObstacleReq$Type extends MessageType<ToTheMoonAddObstacleReq> {
    constructor() {
        super("com.midnights.game.ToTheMoonAddObstacleReq", [
            { no: 12, name: "use_edge", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "obstacle", kind: "message", T: () => ToTheMoonObstacleInfo },
            { no: 9, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonAddObstacleReq>): ToTheMoonAddObstacleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonAddObstacleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonAddObstacleReq): ToTheMoonAddObstacleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool use_edge */ 12:
                    message.useEdge = reader.bool();
                    break;
                case /* optional com.midnights.game.ToTheMoonObstacleInfo obstacle */ 13:
                    message.obstacle = ToTheMoonObstacleInfo.internalBinaryRead(reader, reader.uint32(), options, message.obstacle);
                    break;
                case /* optional int32 query_id */ 9:
                    message.queryId = reader.int32();
                    break;
                case /* optional uint32 scene_id */ 3:
                    message.sceneId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonAddObstacleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool use_edge = 12; */
        if (message.useEdge !== undefined)
            writer.tag(12, WireType.Varint).bool(message.useEdge);
        /* optional com.midnights.game.ToTheMoonObstacleInfo obstacle = 13; */
        if (message.obstacle)
            ToTheMoonObstacleInfo.internalBinaryWrite(message.obstacle, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 query_id = 9; */
        if (message.queryId !== undefined)
            writer.tag(9, WireType.Varint).int32(message.queryId);
        /* optional uint32 scene_id = 3; */
        if (message.sceneId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.sceneId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonAddObstacleReq
 */
export const ToTheMoonAddObstacleReq = new ToTheMoonAddObstacleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DynamicSVONode$Type extends MessageType<DynamicSVONode> {
    constructor() {
        super("com.midnights.game.DynamicSVONode", [
            { no: 8, name: "index", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 5, name: "area", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 1, name: "refer_pos", kind: "message", T: () => Vector }
        ]);
    }
    create(value?: PartialMessage<DynamicSVONode>): DynamicSVONode {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DynamicSVONode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DynamicSVONode): DynamicSVONode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int64 index */ 8:
                    message.index = reader.int64().toBigInt();
                    break;
                case /* optional int32 area */ 5:
                    message.area = reader.int32();
                    break;
                case /* optional com.midnights.game.Vector refer_pos */ 1:
                    message.referPos = Vector.internalBinaryRead(reader, reader.uint32(), options, message.referPos);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DynamicSVONode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int64 index = 8; */
        if (message.index !== undefined)
            writer.tag(8, WireType.Varint).int64(message.index);
        /* optional int32 area = 5; */
        if (message.area !== undefined)
            writer.tag(5, WireType.Varint).int32(message.area);
        /* optional com.midnights.game.Vector refer_pos = 1; */
        if (message.referPos)
            Vector.internalBinaryWrite(message.referPos, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DynamicSVONode
 */
export const DynamicSVONode = new DynamicSVONode$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DynamicLayerNodes$Type extends MessageType<DynamicLayerNodes> {
    constructor() {
        super("com.midnights.game.DynamicLayerNodes", [
            { no: 10, name: "level", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DynamicSVONode }
        ]);
    }
    create(value?: PartialMessage<DynamicLayerNodes>): DynamicLayerNodes {
        const message = { nodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DynamicLayerNodes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DynamicLayerNodes): DynamicLayerNodes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 level */ 10:
                    message.level = reader.int32();
                    break;
                case /* repeated com.midnights.game.DynamicSVONode nodes */ 6:
                    message.nodes.push(DynamicSVONode.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DynamicLayerNodes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 level = 10; */
        if (message.level !== undefined)
            writer.tag(10, WireType.Varint).int32(message.level);
        /* repeated com.midnights.game.DynamicSVONode nodes = 6; */
        for (let i = 0; i < message.nodes.length; i++)
            DynamicSVONode.internalBinaryWrite(message.nodes[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DynamicLayerNodes
 */
export const DynamicLayerNodes = new DynamicLayerNodes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class DynamicNodes$Type extends MessageType<DynamicNodes> {
    constructor() {
        super("com.midnights.game.DynamicNodes", [
            { no: 3, name: "nodes", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => DynamicLayerNodes }
        ]);
    }
    create(value?: PartialMessage<DynamicNodes>): DynamicNodes {
        const message = { nodes: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<DynamicNodes>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: DynamicNodes): DynamicNodes {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.DynamicLayerNodes nodes */ 3:
                    message.nodes.push(DynamicLayerNodes.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: DynamicNodes, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.DynamicLayerNodes nodes = 3; */
        for (let i = 0; i < message.nodes.length; i++)
            DynamicLayerNodes.internalBinaryWrite(message.nodes[i], writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.DynamicNodes
 */
export const DynamicNodes = new DynamicNodes$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonAddObstacleRsp$Type extends MessageType<ToTheMoonAddObstacleRsp> {
    constructor() {
        super("com.midnights.game.ToTheMoonAddObstacleRsp", [
            { no: 2, name: "dynamic_nodes", kind: "message", T: () => DynamicNodes },
            { no: 13, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonAddObstacleRsp>): ToTheMoonAddObstacleRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonAddObstacleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonAddObstacleRsp): ToTheMoonAddObstacleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.DynamicNodes dynamic_nodes */ 2:
                    message.dynamicNodes = DynamicNodes.internalBinaryRead(reader, reader.uint32(), options, message.dynamicNodes);
                    break;
                case /* optional int32 query_id */ 13:
                    message.queryId = reader.int32();
                    break;
                case /* optional int32 retcode */ 11:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonAddObstacleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.DynamicNodes dynamic_nodes = 2; */
        if (message.dynamicNodes)
            DynamicNodes.internalBinaryWrite(message.dynamicNodes, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 query_id = 13; */
        if (message.queryId !== undefined)
            writer.tag(13, WireType.Varint).int32(message.queryId);
        /* optional int32 retcode = 11; */
        if (message.retcode !== undefined)
            writer.tag(11, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonAddObstacleRsp
 */
export const ToTheMoonAddObstacleRsp = new ToTheMoonAddObstacleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonRemoveObstacleReq$Type extends MessageType<ToTheMoonRemoveObstacleReq> {
    constructor() {
        super("com.midnights.game.ToTheMoonRemoveObstacleReq", [
            { no: 12, name: "handle", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonRemoveObstacleReq>): ToTheMoonRemoveObstacleReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonRemoveObstacleReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonRemoveObstacleReq): ToTheMoonRemoveObstacleReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 handle */ 12:
                    message.handle = reader.int32();
                    break;
                case /* optional uint32 scene_id */ 10:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional int32 query_id */ 11:
                    message.queryId = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonRemoveObstacleReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 handle = 12; */
        if (message.handle !== undefined)
            writer.tag(12, WireType.Varint).int32(message.handle);
        /* optional uint32 scene_id = 10; */
        if (message.sceneId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.sceneId);
        /* optional int32 query_id = 11; */
        if (message.queryId !== undefined)
            writer.tag(11, WireType.Varint).int32(message.queryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonRemoveObstacleReq
 */
export const ToTheMoonRemoveObstacleReq = new ToTheMoonRemoveObstacleReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonRemoveObstacleRsp$Type extends MessageType<ToTheMoonRemoveObstacleRsp> {
    constructor() {
        super("com.midnights.game.ToTheMoonRemoveObstacleRsp", [
            { no: 3, name: "query_id", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "dynamic_nodes", kind: "message", T: () => DynamicNodes }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonRemoveObstacleRsp>): ToTheMoonRemoveObstacleRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonRemoveObstacleRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonRemoveObstacleRsp): ToTheMoonRemoveObstacleRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 query_id */ 3:
                    message.queryId = reader.int32();
                    break;
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.DynamicNodes dynamic_nodes */ 8:
                    message.dynamicNodes = DynamicNodes.internalBinaryRead(reader, reader.uint32(), options, message.dynamicNodes);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonRemoveObstacleRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 query_id = 3; */
        if (message.queryId !== undefined)
            writer.tag(3, WireType.Varint).int32(message.queryId);
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.DynamicNodes dynamic_nodes = 8; */
        if (message.dynamicNodes)
            DynamicNodes.internalBinaryWrite(message.dynamicNodes, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonRemoveObstacleRsp
 */
export const ToTheMoonRemoveObstacleRsp = new ToTheMoonRemoveObstacleRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ToTheMoonObstaclesModifyNotify$Type extends MessageType<ToTheMoonObstaclesModifyNotify> {
    constructor() {
        super("com.midnights.game.ToTheMoonObstaclesModifyNotify", [
            { no: 4, name: "add_obstacles", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ToTheMoonObstacleInfo },
            { no: 13, name: "remove_obstacle_ids", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "scene_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "use_edge", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ToTheMoonObstaclesModifyNotify>): ToTheMoonObstaclesModifyNotify {
        const message = { addObstacles: [], removeObstacleIds: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ToTheMoonObstaclesModifyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ToTheMoonObstaclesModifyNotify): ToTheMoonObstaclesModifyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ToTheMoonObstacleInfo add_obstacles */ 4:
                    message.addObstacles.push(ToTheMoonObstacleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated int32 remove_obstacle_ids */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.removeObstacleIds.push(reader.int32());
                    else
                        message.removeObstacleIds.push(reader.int32());
                    break;
                case /* optional uint32 scene_id */ 15:
                    message.sceneId = reader.uint32();
                    break;
                case /* optional bool use_edge */ 1:
                    message.useEdge = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ToTheMoonObstaclesModifyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ToTheMoonObstacleInfo add_obstacles = 4; */
        for (let i = 0; i < message.addObstacles.length; i++)
            ToTheMoonObstacleInfo.internalBinaryWrite(message.addObstacles[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated int32 remove_obstacle_ids = 13; */
        if (message.removeObstacleIds.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.removeObstacleIds.length; i++)
                writer.int32(message.removeObstacleIds[i]);
            writer.join();
        }
        /* optional uint32 scene_id = 15; */
        if (message.sceneId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.sceneId);
        /* optional bool use_edge = 1; */
        if (message.useEdge !== undefined)
            writer.tag(1, WireType.Varint).bool(message.useEdge);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ToTheMoonObstaclesModifyNotify
 */
export const ToTheMoonObstaclesModifyNotify = new ToTheMoonObstaclesModifyNotify$Type();
