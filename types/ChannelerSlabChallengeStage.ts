/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabChallengeStage.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ChannelerSlabChallenge";
import * as dependency_2 from "./ChannelerSlabOneofDungeon";
import * as pb_1 from "google-protobuf";
export class ChannelerSlabChallengeStage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        open_time?: number;
        challenge_list?: dependency_1.ChannelerSlabChallenge[];
        is_open?: boolean;
        stage_id?: number;
        dungeon_info?: dependency_2.ChannelerSlabOneofDungeon;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("open_time" in data && data.open_time != undefined) {
                this.open_time = data.open_time;
            }
            if ("challenge_list" in data && data.challenge_list != undefined) {
                this.challenge_list = data.challenge_list;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
            if ("stage_id" in data && data.stage_id != undefined) {
                this.stage_id = data.stage_id;
            }
            if ("dungeon_info" in data && data.dungeon_info != undefined) {
                this.dungeon_info = data.dungeon_info;
            }
        }
    }
    get open_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set open_time(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get challenge_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ChannelerSlabChallenge, 14) as dependency_1.ChannelerSlabChallenge[];
    }
    set challenge_list(value: dependency_1.ChannelerSlabChallenge[]) {
        pb_1.Message.setRepeatedWrapperField(this, 14, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_open(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get stage_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set stage_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get dungeon_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.ChannelerSlabOneofDungeon, 13) as dependency_2.ChannelerSlabOneofDungeon;
    }
    set dungeon_info(value: dependency_2.ChannelerSlabOneofDungeon) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_dungeon_info() {
        return pb_1.Message.getField(this, 13) != null;
    }
    static fromObject(data: {
        open_time?: number;
        challenge_list?: ReturnType<typeof dependency_1.ChannelerSlabChallenge.prototype.toObject>[];
        is_open?: boolean;
        stage_id?: number;
        dungeon_info?: ReturnType<typeof dependency_2.ChannelerSlabOneofDungeon.prototype.toObject>;
    }): ChannelerSlabChallengeStage {
        const message = new ChannelerSlabChallengeStage({});
        if (data.open_time != null) {
            message.open_time = data.open_time;
        }
        if (data.challenge_list != null) {
            message.challenge_list = data.challenge_list.map(item => dependency_1.ChannelerSlabChallenge.fromObject(item));
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        if (data.stage_id != null) {
            message.stage_id = data.stage_id;
        }
        if (data.dungeon_info != null) {
            message.dungeon_info = dependency_2.ChannelerSlabOneofDungeon.fromObject(data.dungeon_info);
        }
        return message;
    }
    toObject() {
        const data: {
            open_time?: number;
            challenge_list?: ReturnType<typeof dependency_1.ChannelerSlabChallenge.prototype.toObject>[];
            is_open?: boolean;
            stage_id?: number;
            dungeon_info?: ReturnType<typeof dependency_2.ChannelerSlabOneofDungeon.prototype.toObject>;
        } = {};
        if (this.open_time != null) {
            data.open_time = this.open_time;
        }
        if (this.challenge_list != null) {
            data.challenge_list = this.challenge_list.map((item: dependency_1.ChannelerSlabChallenge) => item.toObject());
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        if (this.stage_id != null) {
            data.stage_id = this.stage_id;
        }
        if (this.dungeon_info != null) {
            data.dungeon_info = this.dungeon_info.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.open_time != 0)
            writer.writeUint32(3, this.open_time);
        if (this.challenge_list.length)
            writer.writeRepeatedMessage(14, this.challenge_list, (item: dependency_1.ChannelerSlabChallenge) => item.serialize(writer));
        if (this.is_open != false)
            writer.writeBool(7, this.is_open);
        if (this.stage_id != 0)
            writer.writeUint32(9, this.stage_id);
        if (this.has_dungeon_info)
            writer.writeMessage(13, this.dungeon_info, () => this.dungeon_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelerSlabChallengeStage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabChallengeStage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 3:
                    message.open_time = reader.readUint32();
                    break;
                case 14:
                    reader.readMessage(message.challenge_list, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_1.ChannelerSlabChallenge.deserialize(reader), dependency_1.ChannelerSlabChallenge));
                    break;
                case 7:
                    message.is_open = reader.readBool();
                    break;
                case 9:
                    message.stage_id = reader.readUint32();
                    break;
                case 13:
                    reader.readMessage(message.dungeon_info, () => message.dungeon_info = dependency_2.ChannelerSlabOneofDungeon.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelerSlabChallengeStage {
        return ChannelerSlabChallengeStage.deserialize(bytes);
    }
}
