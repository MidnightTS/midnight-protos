/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabLoopDungeonSelectConditionReq.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChannelerSlabLoopDungeonSelectConditionReq extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        dungeon_index?: number;
        condition_id_list?: number[];
        difficulty_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("dungeon_index" in data && data.dungeon_index != undefined) {
                this.dungeon_index = data.dungeon_index;
            }
            if ("condition_id_list" in data && data.condition_id_list != undefined) {
                this.condition_id_list = data.condition_id_list;
            }
            if ("difficulty_id" in data && data.difficulty_id != undefined) {
                this.difficulty_id = data.difficulty_id;
            }
        }
    }
    get dungeon_index() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set dungeon_index(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get condition_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set condition_id_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get difficulty_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set difficulty_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        dungeon_index?: number;
        condition_id_list?: number[];
        difficulty_id?: number;
    }): ChannelerSlabLoopDungeonSelectConditionReq {
        const message = new ChannelerSlabLoopDungeonSelectConditionReq({});
        if (data.dungeon_index != null) {
            message.dungeon_index = data.dungeon_index;
        }
        if (data.condition_id_list != null) {
            message.condition_id_list = data.condition_id_list;
        }
        if (data.difficulty_id != null) {
            message.difficulty_id = data.difficulty_id;
        }
        return message;
    }
    toObject() {
        const data: {
            dungeon_index?: number;
            condition_id_list?: number[];
            difficulty_id?: number;
        } = {};
        if (this.dungeon_index != null) {
            data.dungeon_index = this.dungeon_index;
        }
        if (this.condition_id_list != null) {
            data.condition_id_list = this.condition_id_list;
        }
        if (this.difficulty_id != null) {
            data.difficulty_id = this.difficulty_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.dungeon_index != 0)
            writer.writeUint32(4, this.dungeon_index);
        if (this.condition_id_list.length)
            writer.writePackedUint32(3, this.condition_id_list);
        if (this.difficulty_id != 0)
            writer.writeUint32(8, this.difficulty_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelerSlabLoopDungeonSelectConditionReq {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabLoopDungeonSelectConditionReq();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.dungeon_index = reader.readUint32();
                    break;
                case 3:
                    message.condition_id_list = reader.readPackedUint32();
                    break;
                case 8:
                    message.difficulty_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelerSlabLoopDungeonSelectConditionReq {
        return ChannelerSlabLoopDungeonSelectConditionReq.deserialize(bytes);
    }
}
