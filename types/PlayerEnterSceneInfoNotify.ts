// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "PlayerEnterSceneInfoNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { MPLevelEntityInfo } from "./MPLevelEntityInfo";
import { AvatarEnterSceneInfo } from "./AvatarEnterSceneInfo";
import { TeamEnterSceneInfo } from "./TeamEnterSceneInfo";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 241;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 *   IS_ALLOW_CLIENT = 1;
 * }
 *
 * @generated from protobuf message PlayerEnterSceneInfoNotify
 */
export interface PlayerEnterSceneInfoNotify {
    /**
     * @generated from protobuf field: TeamEnterSceneInfo team_enter_info = 6;
     */
    teamEnterInfo?: TeamEnterSceneInfo;
    /**
     * @generated from protobuf field: repeated AvatarEnterSceneInfo avatar_enter_info = 10;
     */
    avatarEnterInfo: AvatarEnterSceneInfo[];
    /**
     * @generated from protobuf field: uint32 cur_avatar_entity_id = 4;
     */
    curAvatarEntityId: number;
    /**
     * @generated from protobuf field: MPLevelEntityInfo mp_level_entity_info = 15;
     */
    mpLevelEntityInfo?: MPLevelEntityInfo;
    /**
     * @generated from protobuf field: uint32 enter_scene_token = 1;
     */
    enterSceneToken: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerEnterSceneInfoNotify$Type extends MessageType<PlayerEnterSceneInfoNotify> {
    constructor() {
        super("PlayerEnterSceneInfoNotify", [
            { no: 6, name: "team_enter_info", kind: "message", T: () => TeamEnterSceneInfo },
            { no: 10, name: "avatar_enter_info", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => AvatarEnterSceneInfo },
            { no: 4, name: "cur_avatar_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mp_level_entity_info", kind: "message", T: () => MPLevelEntityInfo },
            { no: 1, name: "enter_scene_token", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerEnterSceneInfoNotify>): PlayerEnterSceneInfoNotify {
        const message = { avatarEnterInfo: [], curAvatarEntityId: 0, enterSceneToken: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerEnterSceneInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerEnterSceneInfoNotify): PlayerEnterSceneInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* TeamEnterSceneInfo team_enter_info */ 6:
                    message.teamEnterInfo = TeamEnterSceneInfo.internalBinaryRead(reader, reader.uint32(), options, message.teamEnterInfo);
                    break;
                case /* repeated AvatarEnterSceneInfo avatar_enter_info */ 10:
                    message.avatarEnterInfo.push(AvatarEnterSceneInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 cur_avatar_entity_id */ 4:
                    message.curAvatarEntityId = reader.uint32();
                    break;
                case /* MPLevelEntityInfo mp_level_entity_info */ 15:
                    message.mpLevelEntityInfo = MPLevelEntityInfo.internalBinaryRead(reader, reader.uint32(), options, message.mpLevelEntityInfo);
                    break;
                case /* uint32 enter_scene_token */ 1:
                    message.enterSceneToken = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerEnterSceneInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* TeamEnterSceneInfo team_enter_info = 6; */
        if (message.teamEnterInfo)
            TeamEnterSceneInfo.internalBinaryWrite(message.teamEnterInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* repeated AvatarEnterSceneInfo avatar_enter_info = 10; */
        for (let i = 0; i < message.avatarEnterInfo.length; i++)
            AvatarEnterSceneInfo.internalBinaryWrite(message.avatarEnterInfo[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* uint32 cur_avatar_entity_id = 4; */
        if (message.curAvatarEntityId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.curAvatarEntityId);
        /* MPLevelEntityInfo mp_level_entity_info = 15; */
        if (message.mpLevelEntityInfo)
            MPLevelEntityInfo.internalBinaryWrite(message.mpLevelEntityInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* uint32 enter_scene_token = 1; */
        if (message.enterSceneToken !== 0)
            writer.tag(1, WireType.Varint).uint32(message.enterSceneToken);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerEnterSceneInfoNotify
 */
export const PlayerEnterSceneInfoNotify = new PlayerEnterSceneInfoNotify$Type();
