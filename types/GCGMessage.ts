// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "GCGMessage.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GCGMsgReactionEnd } from "./GCGMsgReactionEnd";
import { GCGMsgReactionBegin } from "./GCGMsgReactionBegin";
import { GCGMsgNoDamageSkillResult } from "./GCGMsgNoDamageSkillResult";
import { GCGMsgSkillLimitsChange } from "./GCGMsgSkillLimitsChange";
import { GCGMsgPVEIntentionChange } from "./GCGMsgPVEIntentionChange";
import { GCGMsgPVEIntentionInfo } from "./GCGMsgPVEIntentionInfo";
import { GCGMsgPhaseContinue } from "./GCGMsgPhaseContinue";
import { GCGMsgCostRevise } from "./GCGMsgCostRevise";
import { GCGMsgSelectOnStageByEffect } from "./GCGMsgSelectOnStageByEffect";
import { GCGMsgCardUpdate } from "./GCGMsgCardUpdate";
import { GCGMsgWaitingListChange } from "./GCGMsgWaitingListChange";
import { GCGMsgOpTimer } from "./GCGMsgOpTimer";
import { GCGMsgGameOver } from "./GCGMsgGameOver";
import { GCGMsgClientPerform } from "./GCGMsgClientPerform";
import { GCGMsgDuelDataChange } from "./GCGMsgDuelDataChange";
import { GCGMsgUseSkillEnd } from "./GCGMsgUseSkillEnd";
import { GCGMsgModifyRemove } from "./GCGMsgModifyRemove";
import { GCGMsgModifyAdd } from "./GCGMsgModifyAdd";
import { GCGMsgUpdateController } from "./GCGMsgUpdateController";
import { GCGMsgNewCard } from "./GCGMsgNewCard";
import { GCGMsgUseSkill } from "./GCGMsgUseSkill";
import { GCGMsgMoveCard } from "./GCGMsgMoveCard";
import { GCGMsgAddDice } from "./GCGMsgAddDice";
import { GCGMsgCostDice } from "./GCGMsgCostDice";
import { GCGMsgSkillResult } from "./GCGMsgSkillResult";
import { GCGMsgCharDie } from "./GCGMsgCharDie";
import { GCGMsgPass } from "./GCGMsgPass";
import { GCGMsgDiceReroll } from "./GCGMsgDiceReroll";
import { GCGMsgDiceRoll } from "./GCGMsgDiceRoll";
import { GCGMsgSelectOnStage } from "./GCGMsgSelectOnStage";
import { GCGMsgRemoveCards } from "./GCGMsgRemoveCards";
import { GCGMsgAddCards } from "./GCGMsgAddCards";
import { GCGMsgPhaseChange } from "./GCGMsgPhaseChange";
import { GCGMsgTokenChange } from "./GCGMsgTokenChange";
/**
 * @generated from protobuf message GCGMessage
 */
export interface GCGMessage {
    /**
     * @generated from protobuf oneof: message
     */
    message: {
        oneofKind: "tokenChange";
        /**
         * @generated from protobuf field: GCGMsgTokenChange token_change = 2;
         */
        tokenChange: GCGMsgTokenChange;
    } | {
        oneofKind: "phaseChange";
        /**
         * @generated from protobuf field: GCGMsgPhaseChange phase_change = 10;
         */
        phaseChange: GCGMsgPhaseChange;
    } | {
        oneofKind: "addCards";
        /**
         * @generated from protobuf field: GCGMsgAddCards add_cards = 5;
         */
        addCards: GCGMsgAddCards;
    } | {
        oneofKind: "removeCards";
        /**
         * @generated from protobuf field: GCGMsgRemoveCards remove_cards = 12;
         */
        removeCards: GCGMsgRemoveCards;
    } | {
        oneofKind: "selectOnStage";
        /**
         * @generated from protobuf field: GCGMsgSelectOnStage select_on_stage = 6;
         */
        selectOnStage: GCGMsgSelectOnStage;
    } | {
        oneofKind: "diceRoll";
        /**
         * @generated from protobuf field: GCGMsgDiceRoll dice_roll = 14;
         */
        diceRoll: GCGMsgDiceRoll;
    } | {
        oneofKind: "diceReroll";
        /**
         * @generated from protobuf field: GCGMsgDiceReroll dice_reroll = 15;
         */
        diceReroll: GCGMsgDiceReroll;
    } | {
        oneofKind: "pass";
        /**
         * @generated from protobuf field: GCGMsgPass pass = 8;
         */
        pass: GCGMsgPass;
    } | {
        oneofKind: "charDie";
        /**
         * @generated from protobuf field: GCGMsgCharDie char_die = 4;
         */
        charDie: GCGMsgCharDie;
    } | {
        oneofKind: "skillResult";
        /**
         * @generated from protobuf field: GCGMsgSkillResult skill_result = 3;
         */
        skillResult: GCGMsgSkillResult;
    } | {
        oneofKind: "costDice";
        /**
         * @generated from protobuf field: GCGMsgCostDice cost_dice = 13;
         */
        costDice: GCGMsgCostDice;
    } | {
        oneofKind: "addDice";
        /**
         * @generated from protobuf field: GCGMsgAddDice add_dice = 7;
         */
        addDice: GCGMsgAddDice;
    } | {
        oneofKind: "moveCard";
        /**
         * @generated from protobuf field: GCGMsgMoveCard move_card = 11;
         */
        moveCard: GCGMsgMoveCard;
    } | {
        oneofKind: "useSkill";
        /**
         * @generated from protobuf field: GCGMsgUseSkill use_skill = 1;
         */
        useSkill: GCGMsgUseSkill;
    } | {
        oneofKind: "newCard";
        /**
         * @generated from protobuf field: GCGMsgNewCard new_card = 296;
         */
        newCard: GCGMsgNewCard;
    } | {
        oneofKind: "updateController";
        /**
         * @generated from protobuf field: GCGMsgUpdateController update_controller = 1111;
         */
        updateController: GCGMsgUpdateController;
    } | {
        oneofKind: "modifyAdd";
        /**
         * @generated from protobuf field: GCGMsgModifyAdd modify_add = 1733;
         */
        modifyAdd: GCGMsgModifyAdd;
    } | {
        oneofKind: "modifyRemove";
        /**
         * @generated from protobuf field: GCGMsgModifyRemove modify_remove = 2014;
         */
        modifyRemove: GCGMsgModifyRemove;
    } | {
        oneofKind: "useSkillEnd";
        /**
         * @generated from protobuf field: GCGMsgUseSkillEnd use_skill_end = 1368;
         */
        useSkillEnd: GCGMsgUseSkillEnd;
    } | {
        oneofKind: "duelDataChange";
        /**
         * @generated from protobuf field: GCGMsgDuelDataChange duel_data_change = 1791;
         */
        duelDataChange: GCGMsgDuelDataChange;
    } | {
        oneofKind: "clientPerform";
        /**
         * @generated from protobuf field: GCGMsgClientPerform client_perform = 1677;
         */
        clientPerform: GCGMsgClientPerform;
    } | {
        oneofKind: "gameOver";
        /**
         * @generated from protobuf field: GCGMsgGameOver game_over = 632;
         */
        gameOver: GCGMsgGameOver;
    } | {
        oneofKind: "opTimer";
        /**
         * @generated from protobuf field: GCGMsgOpTimer op_timer = 154;
         */
        opTimer: GCGMsgOpTimer;
    } | {
        oneofKind: "waitingListChange";
        /**
         * @generated from protobuf field: GCGMsgWaitingListChange waiting_list_change = 1991;
         */
        waitingListChange: GCGMsgWaitingListChange;
    } | {
        oneofKind: "cardUpdate";
        /**
         * @generated from protobuf field: GCGMsgCardUpdate card_update = 1702;
         */
        cardUpdate: GCGMsgCardUpdate;
    } | {
        oneofKind: "selectOnStageByEffect";
        /**
         * @generated from protobuf field: GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 1737;
         */
        selectOnStageByEffect: GCGMsgSelectOnStageByEffect;
    } | {
        oneofKind: "costRevise";
        /**
         * @generated from protobuf field: GCGMsgCostRevise cost_revise = 468;
         */
        costRevise: GCGMsgCostRevise;
    } | {
        oneofKind: "phaseContinue";
        /**
         * @generated from protobuf field: GCGMsgPhaseContinue phase_continue = 1157;
         */
        phaseContinue: GCGMsgPhaseContinue;
    } | {
        oneofKind: "pveIntentionInfo";
        /**
         * @generated from protobuf field: GCGMsgPVEIntentionInfo pve_intention_info = 850;
         */
        pveIntentionInfo: GCGMsgPVEIntentionInfo;
    } | {
        oneofKind: "pveIntentionChange";
        /**
         * @generated from protobuf field: GCGMsgPVEIntentionChange pve_intention_change = 1268;
         */
        pveIntentionChange: GCGMsgPVEIntentionChange;
    } | {
        oneofKind: "skillLimitsChange";
        /**
         * @generated from protobuf field: GCGMsgSkillLimitsChange skill_limits_change = 710;
         */
        skillLimitsChange: GCGMsgSkillLimitsChange;
    } | {
        oneofKind: "noDamageSkillResult";
        /**
         * @generated from protobuf field: GCGMsgNoDamageSkillResult no_damage_skill_result = 773;
         */
        noDamageSkillResult: GCGMsgNoDamageSkillResult;
    } | {
        oneofKind: "reactionBegin";
        /**
         * @generated from protobuf field: GCGMsgReactionBegin reaction_begin = 243;
         */
        reactionBegin: GCGMsgReactionBegin;
    } | {
        oneofKind: "reactionEnd";
        /**
         * @generated from protobuf field: GCGMsgReactionEnd reaction_end = 1172;
         */
        reactionEnd: GCGMsgReactionEnd;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GCGMessage$Type extends MessageType<GCGMessage> {
    constructor() {
        super("GCGMessage", [
            { no: 2, name: "token_change", kind: "message", oneof: "message", T: () => GCGMsgTokenChange },
            { no: 10, name: "phase_change", kind: "message", oneof: "message", T: () => GCGMsgPhaseChange },
            { no: 5, name: "add_cards", kind: "message", oneof: "message", T: () => GCGMsgAddCards },
            { no: 12, name: "remove_cards", kind: "message", oneof: "message", T: () => GCGMsgRemoveCards },
            { no: 6, name: "select_on_stage", kind: "message", oneof: "message", T: () => GCGMsgSelectOnStage },
            { no: 14, name: "dice_roll", kind: "message", oneof: "message", T: () => GCGMsgDiceRoll },
            { no: 15, name: "dice_reroll", kind: "message", oneof: "message", T: () => GCGMsgDiceReroll },
            { no: 8, name: "pass", kind: "message", oneof: "message", T: () => GCGMsgPass },
            { no: 4, name: "char_die", kind: "message", oneof: "message", T: () => GCGMsgCharDie },
            { no: 3, name: "skill_result", kind: "message", oneof: "message", T: () => GCGMsgSkillResult },
            { no: 13, name: "cost_dice", kind: "message", oneof: "message", T: () => GCGMsgCostDice },
            { no: 7, name: "add_dice", kind: "message", oneof: "message", T: () => GCGMsgAddDice },
            { no: 11, name: "move_card", kind: "message", oneof: "message", T: () => GCGMsgMoveCard },
            { no: 1, name: "use_skill", kind: "message", oneof: "message", T: () => GCGMsgUseSkill },
            { no: 296, name: "new_card", kind: "message", oneof: "message", T: () => GCGMsgNewCard },
            { no: 1111, name: "update_controller", kind: "message", oneof: "message", T: () => GCGMsgUpdateController },
            { no: 1733, name: "modify_add", kind: "message", oneof: "message", T: () => GCGMsgModifyAdd },
            { no: 2014, name: "modify_remove", kind: "message", oneof: "message", T: () => GCGMsgModifyRemove },
            { no: 1368, name: "use_skill_end", kind: "message", oneof: "message", T: () => GCGMsgUseSkillEnd },
            { no: 1791, name: "duel_data_change", kind: "message", oneof: "message", T: () => GCGMsgDuelDataChange },
            { no: 1677, name: "client_perform", kind: "message", oneof: "message", T: () => GCGMsgClientPerform },
            { no: 632, name: "game_over", kind: "message", oneof: "message", T: () => GCGMsgGameOver },
            { no: 154, name: "op_timer", kind: "message", oneof: "message", T: () => GCGMsgOpTimer },
            { no: 1991, name: "waiting_list_change", kind: "message", oneof: "message", T: () => GCGMsgWaitingListChange },
            { no: 1702, name: "card_update", kind: "message", oneof: "message", T: () => GCGMsgCardUpdate },
            { no: 1737, name: "select_on_stage_by_effect", kind: "message", oneof: "message", T: () => GCGMsgSelectOnStageByEffect },
            { no: 468, name: "cost_revise", kind: "message", oneof: "message", T: () => GCGMsgCostRevise },
            { no: 1157, name: "phase_continue", kind: "message", oneof: "message", T: () => GCGMsgPhaseContinue },
            { no: 850, name: "pve_intention_info", kind: "message", oneof: "message", T: () => GCGMsgPVEIntentionInfo },
            { no: 1268, name: "pve_intention_change", kind: "message", oneof: "message", T: () => GCGMsgPVEIntentionChange },
            { no: 710, name: "skill_limits_change", kind: "message", oneof: "message", T: () => GCGMsgSkillLimitsChange },
            { no: 773, name: "no_damage_skill_result", kind: "message", oneof: "message", T: () => GCGMsgNoDamageSkillResult },
            { no: 243, name: "reaction_begin", kind: "message", oneof: "message", T: () => GCGMsgReactionBegin },
            { no: 1172, name: "reaction_end", kind: "message", oneof: "message", T: () => GCGMsgReactionEnd }
        ]);
    }
    create(value?: PartialMessage<GCGMessage>): GCGMessage {
        const message = { message: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GCGMessage>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GCGMessage): GCGMessage {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GCGMsgTokenChange token_change */ 2:
                    message.message = {
                        oneofKind: "tokenChange",
                        tokenChange: GCGMsgTokenChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).tokenChange)
                    };
                    break;
                case /* GCGMsgPhaseChange phase_change */ 10:
                    message.message = {
                        oneofKind: "phaseChange",
                        phaseChange: GCGMsgPhaseChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).phaseChange)
                    };
                    break;
                case /* GCGMsgAddCards add_cards */ 5:
                    message.message = {
                        oneofKind: "addCards",
                        addCards: GCGMsgAddCards.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).addCards)
                    };
                    break;
                case /* GCGMsgRemoveCards remove_cards */ 12:
                    message.message = {
                        oneofKind: "removeCards",
                        removeCards: GCGMsgRemoveCards.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).removeCards)
                    };
                    break;
                case /* GCGMsgSelectOnStage select_on_stage */ 6:
                    message.message = {
                        oneofKind: "selectOnStage",
                        selectOnStage: GCGMsgSelectOnStage.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).selectOnStage)
                    };
                    break;
                case /* GCGMsgDiceRoll dice_roll */ 14:
                    message.message = {
                        oneofKind: "diceRoll",
                        diceRoll: GCGMsgDiceRoll.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).diceRoll)
                    };
                    break;
                case /* GCGMsgDiceReroll dice_reroll */ 15:
                    message.message = {
                        oneofKind: "diceReroll",
                        diceReroll: GCGMsgDiceReroll.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).diceReroll)
                    };
                    break;
                case /* GCGMsgPass pass */ 8:
                    message.message = {
                        oneofKind: "pass",
                        pass: GCGMsgPass.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).pass)
                    };
                    break;
                case /* GCGMsgCharDie char_die */ 4:
                    message.message = {
                        oneofKind: "charDie",
                        charDie: GCGMsgCharDie.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).charDie)
                    };
                    break;
                case /* GCGMsgSkillResult skill_result */ 3:
                    message.message = {
                        oneofKind: "skillResult",
                        skillResult: GCGMsgSkillResult.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).skillResult)
                    };
                    break;
                case /* GCGMsgCostDice cost_dice */ 13:
                    message.message = {
                        oneofKind: "costDice",
                        costDice: GCGMsgCostDice.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).costDice)
                    };
                    break;
                case /* GCGMsgAddDice add_dice */ 7:
                    message.message = {
                        oneofKind: "addDice",
                        addDice: GCGMsgAddDice.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).addDice)
                    };
                    break;
                case /* GCGMsgMoveCard move_card */ 11:
                    message.message = {
                        oneofKind: "moveCard",
                        moveCard: GCGMsgMoveCard.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).moveCard)
                    };
                    break;
                case /* GCGMsgUseSkill use_skill */ 1:
                    message.message = {
                        oneofKind: "useSkill",
                        useSkill: GCGMsgUseSkill.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).useSkill)
                    };
                    break;
                case /* GCGMsgNewCard new_card */ 296:
                    message.message = {
                        oneofKind: "newCard",
                        newCard: GCGMsgNewCard.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).newCard)
                    };
                    break;
                case /* GCGMsgUpdateController update_controller */ 1111:
                    message.message = {
                        oneofKind: "updateController",
                        updateController: GCGMsgUpdateController.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).updateController)
                    };
                    break;
                case /* GCGMsgModifyAdd modify_add */ 1733:
                    message.message = {
                        oneofKind: "modifyAdd",
                        modifyAdd: GCGMsgModifyAdd.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).modifyAdd)
                    };
                    break;
                case /* GCGMsgModifyRemove modify_remove */ 2014:
                    message.message = {
                        oneofKind: "modifyRemove",
                        modifyRemove: GCGMsgModifyRemove.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).modifyRemove)
                    };
                    break;
                case /* GCGMsgUseSkillEnd use_skill_end */ 1368:
                    message.message = {
                        oneofKind: "useSkillEnd",
                        useSkillEnd: GCGMsgUseSkillEnd.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).useSkillEnd)
                    };
                    break;
                case /* GCGMsgDuelDataChange duel_data_change */ 1791:
                    message.message = {
                        oneofKind: "duelDataChange",
                        duelDataChange: GCGMsgDuelDataChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).duelDataChange)
                    };
                    break;
                case /* GCGMsgClientPerform client_perform */ 1677:
                    message.message = {
                        oneofKind: "clientPerform",
                        clientPerform: GCGMsgClientPerform.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).clientPerform)
                    };
                    break;
                case /* GCGMsgGameOver game_over */ 632:
                    message.message = {
                        oneofKind: "gameOver",
                        gameOver: GCGMsgGameOver.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).gameOver)
                    };
                    break;
                case /* GCGMsgOpTimer op_timer */ 154:
                    message.message = {
                        oneofKind: "opTimer",
                        opTimer: GCGMsgOpTimer.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).opTimer)
                    };
                    break;
                case /* GCGMsgWaitingListChange waiting_list_change */ 1991:
                    message.message = {
                        oneofKind: "waitingListChange",
                        waitingListChange: GCGMsgWaitingListChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).waitingListChange)
                    };
                    break;
                case /* GCGMsgCardUpdate card_update */ 1702:
                    message.message = {
                        oneofKind: "cardUpdate",
                        cardUpdate: GCGMsgCardUpdate.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).cardUpdate)
                    };
                    break;
                case /* GCGMsgSelectOnStageByEffect select_on_stage_by_effect */ 1737:
                    message.message = {
                        oneofKind: "selectOnStageByEffect",
                        selectOnStageByEffect: GCGMsgSelectOnStageByEffect.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).selectOnStageByEffect)
                    };
                    break;
                case /* GCGMsgCostRevise cost_revise */ 468:
                    message.message = {
                        oneofKind: "costRevise",
                        costRevise: GCGMsgCostRevise.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).costRevise)
                    };
                    break;
                case /* GCGMsgPhaseContinue phase_continue */ 1157:
                    message.message = {
                        oneofKind: "phaseContinue",
                        phaseContinue: GCGMsgPhaseContinue.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).phaseContinue)
                    };
                    break;
                case /* GCGMsgPVEIntentionInfo pve_intention_info */ 850:
                    message.message = {
                        oneofKind: "pveIntentionInfo",
                        pveIntentionInfo: GCGMsgPVEIntentionInfo.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).pveIntentionInfo)
                    };
                    break;
                case /* GCGMsgPVEIntentionChange pve_intention_change */ 1268:
                    message.message = {
                        oneofKind: "pveIntentionChange",
                        pveIntentionChange: GCGMsgPVEIntentionChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).pveIntentionChange)
                    };
                    break;
                case /* GCGMsgSkillLimitsChange skill_limits_change */ 710:
                    message.message = {
                        oneofKind: "skillLimitsChange",
                        skillLimitsChange: GCGMsgSkillLimitsChange.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).skillLimitsChange)
                    };
                    break;
                case /* GCGMsgNoDamageSkillResult no_damage_skill_result */ 773:
                    message.message = {
                        oneofKind: "noDamageSkillResult",
                        noDamageSkillResult: GCGMsgNoDamageSkillResult.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).noDamageSkillResult)
                    };
                    break;
                case /* GCGMsgReactionBegin reaction_begin */ 243:
                    message.message = {
                        oneofKind: "reactionBegin",
                        reactionBegin: GCGMsgReactionBegin.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).reactionBegin)
                    };
                    break;
                case /* GCGMsgReactionEnd reaction_end */ 1172:
                    message.message = {
                        oneofKind: "reactionEnd",
                        reactionEnd: GCGMsgReactionEnd.internalBinaryRead(reader, reader.uint32(), options, (message.message as any).reactionEnd)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GCGMessage, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GCGMsgTokenChange token_change = 2; */
        if (message.message.oneofKind === "tokenChange")
            GCGMsgTokenChange.internalBinaryWrite(message.message.tokenChange, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgPhaseChange phase_change = 10; */
        if (message.message.oneofKind === "phaseChange")
            GCGMsgPhaseChange.internalBinaryWrite(message.message.phaseChange, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgAddCards add_cards = 5; */
        if (message.message.oneofKind === "addCards")
            GCGMsgAddCards.internalBinaryWrite(message.message.addCards, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgRemoveCards remove_cards = 12; */
        if (message.message.oneofKind === "removeCards")
            GCGMsgRemoveCards.internalBinaryWrite(message.message.removeCards, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgSelectOnStage select_on_stage = 6; */
        if (message.message.oneofKind === "selectOnStage")
            GCGMsgSelectOnStage.internalBinaryWrite(message.message.selectOnStage, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgDiceRoll dice_roll = 14; */
        if (message.message.oneofKind === "diceRoll")
            GCGMsgDiceRoll.internalBinaryWrite(message.message.diceRoll, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgDiceReroll dice_reroll = 15; */
        if (message.message.oneofKind === "diceReroll")
            GCGMsgDiceReroll.internalBinaryWrite(message.message.diceReroll, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgPass pass = 8; */
        if (message.message.oneofKind === "pass")
            GCGMsgPass.internalBinaryWrite(message.message.pass, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgCharDie char_die = 4; */
        if (message.message.oneofKind === "charDie")
            GCGMsgCharDie.internalBinaryWrite(message.message.charDie, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgSkillResult skill_result = 3; */
        if (message.message.oneofKind === "skillResult")
            GCGMsgSkillResult.internalBinaryWrite(message.message.skillResult, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgCostDice cost_dice = 13; */
        if (message.message.oneofKind === "costDice")
            GCGMsgCostDice.internalBinaryWrite(message.message.costDice, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgAddDice add_dice = 7; */
        if (message.message.oneofKind === "addDice")
            GCGMsgAddDice.internalBinaryWrite(message.message.addDice, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgMoveCard move_card = 11; */
        if (message.message.oneofKind === "moveCard")
            GCGMsgMoveCard.internalBinaryWrite(message.message.moveCard, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgUseSkill use_skill = 1; */
        if (message.message.oneofKind === "useSkill")
            GCGMsgUseSkill.internalBinaryWrite(message.message.useSkill, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgNewCard new_card = 296; */
        if (message.message.oneofKind === "newCard")
            GCGMsgNewCard.internalBinaryWrite(message.message.newCard, writer.tag(296, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgUpdateController update_controller = 1111; */
        if (message.message.oneofKind === "updateController")
            GCGMsgUpdateController.internalBinaryWrite(message.message.updateController, writer.tag(1111, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgModifyAdd modify_add = 1733; */
        if (message.message.oneofKind === "modifyAdd")
            GCGMsgModifyAdd.internalBinaryWrite(message.message.modifyAdd, writer.tag(1733, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgModifyRemove modify_remove = 2014; */
        if (message.message.oneofKind === "modifyRemove")
            GCGMsgModifyRemove.internalBinaryWrite(message.message.modifyRemove, writer.tag(2014, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgUseSkillEnd use_skill_end = 1368; */
        if (message.message.oneofKind === "useSkillEnd")
            GCGMsgUseSkillEnd.internalBinaryWrite(message.message.useSkillEnd, writer.tag(1368, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgDuelDataChange duel_data_change = 1791; */
        if (message.message.oneofKind === "duelDataChange")
            GCGMsgDuelDataChange.internalBinaryWrite(message.message.duelDataChange, writer.tag(1791, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgClientPerform client_perform = 1677; */
        if (message.message.oneofKind === "clientPerform")
            GCGMsgClientPerform.internalBinaryWrite(message.message.clientPerform, writer.tag(1677, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgGameOver game_over = 632; */
        if (message.message.oneofKind === "gameOver")
            GCGMsgGameOver.internalBinaryWrite(message.message.gameOver, writer.tag(632, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgOpTimer op_timer = 154; */
        if (message.message.oneofKind === "opTimer")
            GCGMsgOpTimer.internalBinaryWrite(message.message.opTimer, writer.tag(154, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgWaitingListChange waiting_list_change = 1991; */
        if (message.message.oneofKind === "waitingListChange")
            GCGMsgWaitingListChange.internalBinaryWrite(message.message.waitingListChange, writer.tag(1991, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgCardUpdate card_update = 1702; */
        if (message.message.oneofKind === "cardUpdate")
            GCGMsgCardUpdate.internalBinaryWrite(message.message.cardUpdate, writer.tag(1702, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgSelectOnStageByEffect select_on_stage_by_effect = 1737; */
        if (message.message.oneofKind === "selectOnStageByEffect")
            GCGMsgSelectOnStageByEffect.internalBinaryWrite(message.message.selectOnStageByEffect, writer.tag(1737, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgCostRevise cost_revise = 468; */
        if (message.message.oneofKind === "costRevise")
            GCGMsgCostRevise.internalBinaryWrite(message.message.costRevise, writer.tag(468, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgPhaseContinue phase_continue = 1157; */
        if (message.message.oneofKind === "phaseContinue")
            GCGMsgPhaseContinue.internalBinaryWrite(message.message.phaseContinue, writer.tag(1157, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgPVEIntentionInfo pve_intention_info = 850; */
        if (message.message.oneofKind === "pveIntentionInfo")
            GCGMsgPVEIntentionInfo.internalBinaryWrite(message.message.pveIntentionInfo, writer.tag(850, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgPVEIntentionChange pve_intention_change = 1268; */
        if (message.message.oneofKind === "pveIntentionChange")
            GCGMsgPVEIntentionChange.internalBinaryWrite(message.message.pveIntentionChange, writer.tag(1268, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgSkillLimitsChange skill_limits_change = 710; */
        if (message.message.oneofKind === "skillLimitsChange")
            GCGMsgSkillLimitsChange.internalBinaryWrite(message.message.skillLimitsChange, writer.tag(710, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgNoDamageSkillResult no_damage_skill_result = 773; */
        if (message.message.oneofKind === "noDamageSkillResult")
            GCGMsgNoDamageSkillResult.internalBinaryWrite(message.message.noDamageSkillResult, writer.tag(773, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgReactionBegin reaction_begin = 243; */
        if (message.message.oneofKind === "reactionBegin")
            GCGMsgReactionBegin.internalBinaryWrite(message.message.reactionBegin, writer.tag(243, WireType.LengthDelimited).fork(), options).join();
        /* GCGMsgReactionEnd reaction_end = 1172; */
        if (message.message.oneofKind === "reactionEnd")
            GCGMsgReactionEnd.internalBinaryWrite(message.message.reactionEnd, writer.tag(1172, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GCGMessage
 */
export const GCGMessage = new GCGMessage$Type();
