/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: DungeonRestartInviteReplyRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class DungeonRestartInviteReplyRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_accept?: boolean;
        is_trans_point?: boolean;
        retcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_accept" in data && data.is_accept != undefined) {
                this.is_accept = data.is_accept;
            }
            if ("is_trans_point" in data && data.is_trans_point != undefined) {
                this.is_trans_point = data.is_trans_point;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
        }
    }
    get is_accept() {
        return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
    }
    set is_accept(value: boolean) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_trans_point() {
        return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
    }
    set is_trans_point(value: boolean) {
        pb_1.Message.setField(this, 1, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data: {
        is_accept?: boolean;
        is_trans_point?: boolean;
        retcode?: number;
    }): DungeonRestartInviteReplyRsp {
        const message = new DungeonRestartInviteReplyRsp({});
        if (data.is_accept != null) {
            message.is_accept = data.is_accept;
        }
        if (data.is_trans_point != null) {
            message.is_trans_point = data.is_trans_point;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        return message;
    }
    toObject() {
        const data: {
            is_accept?: boolean;
            is_trans_point?: boolean;
            retcode?: number;
        } = {};
        if (this.is_accept != null) {
            data.is_accept = this.is_accept;
        }
        if (this.is_trans_point != null) {
            data.is_trans_point = this.is_trans_point;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_accept != false)
            writer.writeBool(10, this.is_accept);
        if (this.is_trans_point != false)
            writer.writeBool(1, this.is_trans_point);
        if (this.retcode != 0)
            writer.writeInt32(9, this.retcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): DungeonRestartInviteReplyRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new DungeonRestartInviteReplyRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    message.is_accept = reader.readBool();
                    break;
                case 1:
                    message.is_trans_point = reader.readBool();
                    break;
                case 9:
                    message.retcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): DungeonRestartInviteReplyRsp {
        return DungeonRestartInviteReplyRsp.deserialize(bytes);
    }
}
