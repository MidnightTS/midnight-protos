/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MailTextContent.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class MailTextContent extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        title?: string;
        content?: string;
        sender?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("content" in data && data.content != undefined) {
                this.content = data.content;
            }
            if ("sender" in data && data.sender != undefined) {
                this.sender = data.sender;
            }
        }
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get content() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set content(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get sender() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set sender(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        title?: string;
        content?: string;
        sender?: string;
    }): MailTextContent {
        const message = new MailTextContent({});
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.content != null) {
            message.content = data.content;
        }
        if (data.sender != null) {
            message.sender = data.sender;
        }
        return message;
    }
    toObject() {
        const data: {
            title?: string;
            content?: string;
            sender?: string;
        } = {};
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.content != null) {
            data.content = this.content;
        }
        if (this.sender != null) {
            data.sender = this.sender;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.title.length)
            writer.writeString(1, this.title);
        if (this.content.length)
            writer.writeString(2, this.content);
        if (this.sender.length)
            writer.writeString(3, this.sender);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MailTextContent {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MailTextContent();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.title = reader.readString();
                    break;
                case 2:
                    message.content = reader.readString();
                    break;
                case 3:
                    message.sender = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MailTextContent {
        return MailTextContent.deserialize(bytes);
    }
}
