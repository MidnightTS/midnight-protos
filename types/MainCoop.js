"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _MainCoop_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.MainCoop = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MainCoop.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const pb_1 = require("google-protobuf");
class MainCoop extends pb_1.Message {
    constructor(data) {
        super();
        _MainCoop_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], __classPrivateFieldGet(this, _MainCoop_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("seen_ending_map" in data && data.seen_ending_map != undefined) {
                this.seen_ending_map = data.seen_ending_map;
            }
            if ("normal_var_map" in data && data.normal_var_map != undefined) {
                this.normal_var_map = data.normal_var_map;
            }
            if ("self_confidence" in data && data.self_confidence != undefined) {
                this.self_confidence = data.self_confidence;
            }
            if ("save_point_id_list" in data && data.save_point_id_list != undefined) {
                this.save_point_id_list = data.save_point_id_list;
            }
            if ("status" in data && data.status != undefined) {
                this.status = data.status;
            }
            if ("temp_var_map" in data && data.temp_var_map != undefined) {
                this.temp_var_map = data.temp_var_map;
            }
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
        }
        if (!this.seen_ending_map)
            this.seen_ending_map = new Map();
        if (!this.normal_var_map)
            this.normal_var_map = new Map();
        if (!this.temp_var_map)
            this.temp_var_map = new Map();
    }
    get seen_ending_map() {
        return pb_1.Message.getField(this, 13);
    }
    set seen_ending_map(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get normal_var_map() {
        return pb_1.Message.getField(this, 4);
    }
    set normal_var_map(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get self_confidence() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set self_confidence(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get save_point_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 1, []);
    }
    set save_point_id_list(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get status() {
        return pb_1.Message.getFieldWithDefault(this, 6, MainCoop.Status.STATUS_INVALID);
    }
    set status(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get temp_var_map() {
        return pb_1.Message.getField(this, 11);
    }
    set temp_var_map(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set id(value) {
        pb_1.Message.setField(this, 9, value);
    }
    static fromObject(data) {
        const message = new MainCoop({});
        if (typeof data.seen_ending_map == "object") {
            message.seen_ending_map = new Map(Object.entries(data.seen_ending_map).map(([key, value]) => [Number(key), value]));
        }
        if (typeof data.normal_var_map == "object") {
            message.normal_var_map = new Map(Object.entries(data.normal_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.self_confidence != null) {
            message.self_confidence = data.self_confidence;
        }
        if (data.save_point_id_list != null) {
            message.save_point_id_list = data.save_point_id_list;
        }
        if (data.status != null) {
            message.status = data.status;
        }
        if (typeof data.temp_var_map == "object") {
            message.temp_var_map = new Map(Object.entries(data.temp_var_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.id != null) {
            message.id = data.id;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.seen_ending_map.size > 0) {
            data.seen_ending_map = (Object.fromEntries)(this.seen_ending_map);
        }
        if (this.normal_var_map.size > 0) {
            data.normal_var_map = (Object.fromEntries)(this.normal_var_map);
        }
        if (this.self_confidence != null) {
            data.self_confidence = this.self_confidence;
        }
        if (this.save_point_id_list != null) {
            data.save_point_id_list = this.save_point_id_list;
        }
        if (this.status != null) {
            data.status = this.status;
        }
        if (this.temp_var_map.size > 0) {
            data.temp_var_map = (Object.fromEntries)(this.temp_var_map);
        }
        if (this.id != null) {
            data.id = this.id;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        for (const [key, value] of this.seen_ending_map) {
            writer.writeMessage(13, this.seen_ending_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        for (const [key, value] of this.normal_var_map) {
            writer.writeMessage(4, this.normal_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.self_confidence != 0)
            writer.writeUint32(5, this.self_confidence);
        if (this.save_point_id_list.length)
            writer.writePackedUint32(1, this.save_point_id_list);
        if (this.status != MainCoop.Status.STATUS_INVALID)
            writer.writeEnum(6, this.status);
        for (const [key, value] of this.temp_var_map) {
            writer.writeMessage(11, this.temp_var_map, () => {
                writer.writeUint32(1, key);
                writer.writeInt32(2, value);
            });
        }
        if (this.id != 0)
            writer.writeUint32(9, this.id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MainCoop();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.seen_ending_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 4:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.normal_var_map, reader, reader.readUint32, reader.readInt32));
                    break;
                case 5:
                    message.self_confidence = reader.readUint32();
                    break;
                case 1:
                    message.save_point_id_list = reader.readPackedUint32();
                    break;
                case 6:
                    message.status = reader.readEnum();
                    break;
                case 11:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.temp_var_map, reader, reader.readUint32, reader.readInt32));
                    break;
                case 9:
                    message.id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return MainCoop.deserialize(bytes);
    }
}
exports.MainCoop = MainCoop;
_MainCoop_one_of_decls = new WeakMap();
(function (MainCoop) {
    let Status;
    (function (Status) {
        Status[Status["STATUS_INVALID"] = 0] = "STATUS_INVALID";
        Status[Status["STATUS_RUNNING"] = 1] = "STATUS_RUNNING";
        Status[Status["STATUS_FINISHED"] = 2] = "STATUS_FINISHED";
    })(Status = MainCoop.Status || (MainCoop.Status = {}));
})(MainCoop = exports.MainCoop || (exports.MainCoop = {}));
