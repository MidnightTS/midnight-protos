// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "ScenePlayBattleResultNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ScenePlayBattleSettleRewardInfo } from "./ScenePlayBattleSettleRewardInfo";
import { ScenePlayBattleSettlePlayerInfo } from "./ScenePlayBattleSettlePlayerInfo";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 4398;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message ScenePlayBattleResultNotify
 */
export interface ScenePlayBattleResultNotify {
    /**
     * @generated from protobuf field: repeated ScenePlayBattleSettlePlayerInfo settle_player_info_list = 14;
     */
    settlePlayerInfoList: ScenePlayBattleSettlePlayerInfo[];
    /**
     * @generated from protobuf field: repeated ScenePlayBattleSettleRewardInfo settle_reward_info_list = 10;
     */
    settleRewardInfoList: ScenePlayBattleSettleRewardInfo[];
    /**
     * @generated from protobuf field: uint32 cost_time = 6;
     */
    costTime: number;
    /**
     * @generated from protobuf field: uint32 play_type = 4;
     */
    playType: number;
    /**
     * @generated from protobuf field: bool is_win = 15;
     */
    isWin: boolean;
    /**
     * @generated from protobuf field: uint32 play_id = 8;
     */
    playId: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleResultNotify$Type extends MessageType<ScenePlayBattleResultNotify> {
    constructor() {
        super("ScenePlayBattleResultNotify", [
            { no: 14, name: "settle_player_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayBattleSettlePlayerInfo },
            { no: 10, name: "settle_reward_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayBattleSettleRewardInfo },
            { no: 6, name: "cost_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "play_type", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_win", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "play_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleResultNotify>): ScenePlayBattleResultNotify {
        const message = { settlePlayerInfoList: [], settleRewardInfoList: [], costTime: 0, playType: 0, isWin: false, playId: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleResultNotify): ScenePlayBattleResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated ScenePlayBattleSettlePlayerInfo settle_player_info_list */ 14:
                    message.settlePlayerInfoList.push(ScenePlayBattleSettlePlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated ScenePlayBattleSettleRewardInfo settle_reward_info_list */ 10:
                    message.settleRewardInfoList.push(ScenePlayBattleSettleRewardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* uint32 cost_time */ 6:
                    message.costTime = reader.uint32();
                    break;
                case /* uint32 play_type */ 4:
                    message.playType = reader.uint32();
                    break;
                case /* bool is_win */ 15:
                    message.isWin = reader.bool();
                    break;
                case /* uint32 play_id */ 8:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated ScenePlayBattleSettlePlayerInfo settle_player_info_list = 14; */
        for (let i = 0; i < message.settlePlayerInfoList.length; i++)
            ScenePlayBattleSettlePlayerInfo.internalBinaryWrite(message.settlePlayerInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated ScenePlayBattleSettleRewardInfo settle_reward_info_list = 10; */
        for (let i = 0; i < message.settleRewardInfoList.length; i++)
            ScenePlayBattleSettleRewardInfo.internalBinaryWrite(message.settleRewardInfoList[i], writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* uint32 cost_time = 6; */
        if (message.costTime !== 0)
            writer.tag(6, WireType.Varint).uint32(message.costTime);
        /* uint32 play_type = 4; */
        if (message.playType !== 0)
            writer.tag(4, WireType.Varint).uint32(message.playType);
        /* bool is_win = 15; */
        if (message.isWin !== false)
            writer.tag(15, WireType.Varint).bool(message.isWin);
        /* uint32 play_id = 8; */
        if (message.playId !== 0)
            writer.tag(8, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message ScenePlayBattleResultNotify
 */
export const ScenePlayBattleResultNotify = new ScenePlayBattleResultNotify$Type();
