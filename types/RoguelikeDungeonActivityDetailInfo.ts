// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "RoguelikeDungeonActivityDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { RoguelikeShikigamiRecord } from "./RoguelikeShikigamiRecord";
import { RogueStageInfo } from "./RogueStageInfo";
/**
 * @generated from protobuf message RoguelikeDungeonActivityDetailInfo
 */
export interface RoguelikeDungeonActivityDetailInfo {
    /**
     * @generated from protobuf field: repeated RogueStageInfo stage_list = 14;
     */
    stageList: RogueStageInfo[];
    /**
     * @generated from protobuf field: repeated uint32 equipped_rune_list = 9;
     */
    equippedRuneList: number[];
    /**
     * @generated from protobuf field: uint32 content_close_time = 11;
     */
    contentCloseTime: number;
    /**
     * @generated from protobuf field: repeated uint32 rune_list = 3;
     */
    runeList: number[];
    /**
     * @generated from protobuf field: repeated RoguelikeShikigamiRecord shikigami_list = 4;
     */
    shikigamiList: RoguelikeShikigamiRecord[];
    /**
     * @generated from protobuf field: bool is_content_closed = 5;
     */
    isContentClosed: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class RoguelikeDungeonActivityDetailInfo$Type extends MessageType<RoguelikeDungeonActivityDetailInfo> {
    constructor() {
        super("RoguelikeDungeonActivityDetailInfo", [
            { no: 14, name: "stage_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RogueStageInfo },
            { no: 9, name: "equipped_rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "content_close_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "rune_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "shikigami_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => RoguelikeShikigamiRecord },
            { no: 5, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RoguelikeDungeonActivityDetailInfo>): RoguelikeDungeonActivityDetailInfo {
        const message = { stageList: [], equippedRuneList: [], contentCloseTime: 0, runeList: [], shikigamiList: [], isContentClosed: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RoguelikeDungeonActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RoguelikeDungeonActivityDetailInfo): RoguelikeDungeonActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated RogueStageInfo stage_list */ 14:
                    message.stageList.push(RogueStageInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 equipped_rune_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.equippedRuneList.push(reader.uint32());
                    else
                        message.equippedRuneList.push(reader.uint32());
                    break;
                case /* uint32 content_close_time */ 11:
                    message.contentCloseTime = reader.uint32();
                    break;
                case /* repeated uint32 rune_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.runeList.push(reader.uint32());
                    else
                        message.runeList.push(reader.uint32());
                    break;
                case /* repeated RoguelikeShikigamiRecord shikigami_list */ 4:
                    message.shikigamiList.push(RoguelikeShikigamiRecord.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_content_closed */ 5:
                    message.isContentClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RoguelikeDungeonActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated RogueStageInfo stage_list = 14; */
        for (let i = 0; i < message.stageList.length; i++)
            RogueStageInfo.internalBinaryWrite(message.stageList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 equipped_rune_list = 9; */
        if (message.equippedRuneList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.equippedRuneList.length; i++)
                writer.uint32(message.equippedRuneList[i]);
            writer.join();
        }
        /* uint32 content_close_time = 11; */
        if (message.contentCloseTime !== 0)
            writer.tag(11, WireType.Varint).uint32(message.contentCloseTime);
        /* repeated uint32 rune_list = 3; */
        if (message.runeList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.runeList.length; i++)
                writer.uint32(message.runeList[i]);
            writer.join();
        }
        /* repeated RoguelikeShikigamiRecord shikigami_list = 4; */
        for (let i = 0; i < message.shikigamiList.length; i++)
            RoguelikeShikigamiRecord.internalBinaryWrite(message.shikigamiList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* bool is_content_closed = 5; */
        if (message.isContentClosed !== false)
            writer.tag(5, WireType.Varint).bool(message.isContentClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message RoguelikeDungeonActivityDetailInfo
 */
export const RoguelikeDungeonActivityDetailInfo = new RoguelikeDungeonActivityDetailInfo$Type();
