/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabWearBuffRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class ChannelerSlabWearBuffRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        buff_id?: number;
        retcode?: number;
        is_mp?: boolean;
        slot_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("buff_id" in data && data.buff_id != undefined) {
                this.buff_id = data.buff_id;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("is_mp" in data && data.is_mp != undefined) {
                this.is_mp = data.is_mp;
            }
            if ("slot_id" in data && data.slot_id != undefined) {
                this.slot_id = data.slot_id;
            }
        }
    }
    get buff_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set buff_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get is_mp() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set is_mp(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get slot_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set slot_id(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        buff_id?: number;
        retcode?: number;
        is_mp?: boolean;
        slot_id?: number;
    }): ChannelerSlabWearBuffRsp {
        const message = new ChannelerSlabWearBuffRsp({});
        if (data.buff_id != null) {
            message.buff_id = data.buff_id;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.is_mp != null) {
            message.is_mp = data.is_mp;
        }
        if (data.slot_id != null) {
            message.slot_id = data.slot_id;
        }
        return message;
    }
    toObject() {
        const data: {
            buff_id?: number;
            retcode?: number;
            is_mp?: boolean;
            slot_id?: number;
        } = {};
        if (this.buff_id != null) {
            data.buff_id = this.buff_id;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.is_mp != null) {
            data.is_mp = this.is_mp;
        }
        if (this.slot_id != null) {
            data.slot_id = this.slot_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.buff_id != 0)
            writer.writeUint32(15, this.buff_id);
        if (this.retcode != 0)
            writer.writeInt32(1, this.retcode);
        if (this.is_mp != false)
            writer.writeBool(9, this.is_mp);
        if (this.slot_id != 0)
            writer.writeUint32(8, this.slot_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ChannelerSlabWearBuffRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabWearBuffRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.buff_id = reader.readUint32();
                    break;
                case 1:
                    message.retcode = reader.readInt32();
                    break;
                case 9:
                    message.is_mp = reader.readBool();
                    break;
                case 8:
                    message.slot_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ChannelerSlabWearBuffRsp {
        return ChannelerSlabWearBuffRsp.deserialize(bytes);
    }
}
