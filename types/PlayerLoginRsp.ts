// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "PlayerLoginRsp.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { FeatureBlockInfo } from "./FeatureBlockInfo";
import { BlockInfo } from "./BlockInfo";
import { ResVersionConfig } from "./ResVersionConfig";
import { ShortAbilityHashPair } from "./ShortAbilityHashPair";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 119;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message PlayerLoginRsp
 */
export interface PlayerLoginRsp {
    /**
     * @generated from protobuf field: uint64 login_rand = 9;
     */
    loginRand: bigint;
    /**
     * @generated from protobuf field: bytes Unk3300_DHCMDHHDLFF = 2 [json_name = "Unk3300DHCMDHHDLFF"];
     */
    unk3300DHCMDHHDLFF: Uint8Array;
    /**
     * @generated from protobuf field: string Unk3300_HMGCPAGLDHB = 16 [json_name = "Unk3300HMGCPAGLDHB"];
     */
    unk3300HMGCPAGLDHB: string;
    /**
     * @generated from protobuf field: double total_tick_time = 530;
     */
    totalTickTime: number;
    /**
     * @generated from protobuf field: bool Unk3300_LLIJKLDBHNN = 5 [json_name = "Unk3300LLIJKLDBHNN"];
     */
    unk3300LLIJKLDBHNN: boolean;
    /**
     * @generated from protobuf field: bool is_audit = 930;
     */
    isAudit: boolean;
    /**
     * @generated from protobuf field: string birthday = 1387;
     */
    birthday: string;
    /**
     * @generated from protobuf field: bool Unk3300_HGFNECIJDLN = 13 [json_name = "Unk3300HGFNECIJDLN"];
     */
    unk3300HGFNECIJDLN: boolean;
    /**
     * @generated from protobuf field: string client_silence_version_suffix = 908;
     */
    clientSilenceVersionSuffix: string;
    /**
     * @generated from protobuf field: string client_version_suffix = 1845;
     */
    clientVersionSuffix: string;
    /**
     * @generated from protobuf field: string next_resource_url = 1324;
     */
    nextResourceUrl: string;
    /**
     * @generated from protobuf field: bool Unk3300_EJKCNNDFAAI = 196 [json_name = "Unk3300EJKCNNDFAAI"];
     */
    unk3300EJKCNNDFAAI: boolean;
    /**
     * @generated from protobuf field: repeated ShortAbilityHashPair short_ability_hash_map = 1373;
     */
    shortAbilityHashMap: ShortAbilityHashPair[];
    /**
     * @generated from protobuf field: bool is_data_need_relogin = 1119;
     */
    isDataNeedRelogin: boolean;
    /**
     * @generated from protobuf field: ResVersionConfig res_version_config = 808;
     */
    resVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: uint32 client_silence_data_version = 1;
     */
    clientSilenceDataVersion: number;
    /**
     * @generated from protobuf field: uint32 target_uid = 15;
     */
    targetUid: number;
    /**
     * @generated from protobuf field: string Unk3300_NEICPFBPNPD = 99 [json_name = "Unk3300NEICPFBPNPD"];
     */
    unk3300NEICPFBPNPD: string;
    /**
     * @generated from protobuf field: bool Unk3300_CANONIPHMDI = 1522 [json_name = "Unk3300CANONIPHMDI"];
     */
    unk3300CANONIPHMDI: boolean;
    /**
     * @generated from protobuf field: bool Unk3300_IIHDKKNJPGD = 8 [json_name = "Unk3300IIHDKKNJPGD"];
     */
    unk3300IIHDKKNJPGD: boolean;
    /**
     * @generated from protobuf field: uint32 player_data_version = 14;
     */
    playerDataVersion: number;
    /**
     * @generated from protobuf field: bytes Unk3300_MOPDDGHMKBD = 1888 [json_name = "Unk3300MOPDDGHMKBD"];
     */
    unk3300MOPDDGHMKBD: Uint8Array;
    /**
     * @generated from protobuf field: string country_code = 360;
     */
    countryCode: string;
    /**
     * @generated from protobuf field: ResVersionConfig next_res_version_config = 1688;
     */
    nextResVersionConfig?: ResVersionConfig;
    /**
     * @generated from protobuf field: bool Unk3300_IADLIIMGDMC = 17 [json_name = "Unk3300IADLIIMGDMC"];
     */
    unk3300IADLIIMGDMC: boolean;
    /**
     * @generated from protobuf field: map<uint32, BlockInfo> block_info_map = 2018;
     */
    blockInfoMap: {
        [key: number]: BlockInfo;
    };
    /**
     * @generated from protobuf field: bool is_transfer = 295;
     */
    isTransfer: boolean;
    /**
     * @generated from protobuf field: uint32 target_home_owner_uid = 446;
     */
    targetHomeOwnerUid: number;
    /**
     * @generated from protobuf field: string game_biz = 4;
     */
    gameBiz: string;
    /**
     * @generated from protobuf field: map<string, int32> ability_hash_map = 3;
     */
    abilityHashMap: {
        [key: string]: number;
    };
    /**
     * @generated from protobuf field: int32 ability_hash_code = 12;
     */
    abilityHashCode: number;
    /**
     * @generated from protobuf field: uint32 client_data_version = 10;
     */
    clientDataVersion: number;
    /**
     * @generated from protobuf field: string Unk3300_OPGDBOLKLJA = 1299 [json_name = "Unk3300OPGDBOLKLJA"];
     */
    unk3300OPGDBOLKLJA: string;
    /**
     * @generated from protobuf field: int32 retcode = 7;
     */
    retcode: number;
    /**
     * @generated from protobuf field: repeated FeatureBlockInfo feature_block_info_list = 138;
     */
    featureBlockInfoList: FeatureBlockInfo[];
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerLoginRsp$Type extends MessageType<PlayerLoginRsp> {
    constructor() {
        super("PlayerLoginRsp", [
            { no: 9, name: "login_rand", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 2, name: "Unk3300_DHCMDHHDLFF", kind: "scalar", jsonName: "Unk3300DHCMDHHDLFF", T: 12 /*ScalarType.BYTES*/ },
            { no: 16, name: "Unk3300_HMGCPAGLDHB", kind: "scalar", jsonName: "Unk3300HMGCPAGLDHB", T: 9 /*ScalarType.STRING*/ },
            { no: 530, name: "total_tick_time", kind: "scalar", T: 1 /*ScalarType.DOUBLE*/ },
            { no: 5, name: "Unk3300_LLIJKLDBHNN", kind: "scalar", jsonName: "Unk3300LLIJKLDBHNN", T: 8 /*ScalarType.BOOL*/ },
            { no: 930, name: "is_audit", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 1387, name: "birthday", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "Unk3300_HGFNECIJDLN", kind: "scalar", jsonName: "Unk3300HGFNECIJDLN", T: 8 /*ScalarType.BOOL*/ },
            { no: 908, name: "client_silence_version_suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1845, name: "client_version_suffix", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1324, name: "next_resource_url", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 196, name: "Unk3300_EJKCNNDFAAI", kind: "scalar", jsonName: "Unk3300EJKCNNDFAAI", T: 8 /*ScalarType.BOOL*/ },
            { no: 1373, name: "short_ability_hash_map", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ShortAbilityHashPair },
            { no: 1119, name: "is_data_need_relogin", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 808, name: "res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 1, name: "client_silence_data_version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "target_uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 99, name: "Unk3300_NEICPFBPNPD", kind: "scalar", jsonName: "Unk3300NEICPFBPNPD", T: 9 /*ScalarType.STRING*/ },
            { no: 1522, name: "Unk3300_CANONIPHMDI", kind: "scalar", jsonName: "Unk3300CANONIPHMDI", T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "Unk3300_IIHDKKNJPGD", kind: "scalar", jsonName: "Unk3300IIHDKKNJPGD", T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "player_data_version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1888, name: "Unk3300_MOPDDGHMKBD", kind: "scalar", jsonName: "Unk3300MOPDDGHMKBD", T: 12 /*ScalarType.BYTES*/ },
            { no: 360, name: "country_code", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 1688, name: "next_res_version_config", kind: "message", T: () => ResVersionConfig },
            { no: 17, name: "Unk3300_IADLIIMGDMC", kind: "scalar", jsonName: "Unk3300IADLIIMGDMC", T: 8 /*ScalarType.BOOL*/ },
            { no: 2018, name: "block_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => BlockInfo } },
            { no: 295, name: "is_transfer", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 446, name: "target_home_owner_uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "game_biz", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "ability_hash_map", kind: "map", K: 9 /*ScalarType.STRING*/, V: { kind: "scalar", T: 5 /*ScalarType.INT32*/ } },
            { no: 12, name: "ability_hash_code", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "client_data_version", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 1299, name: "Unk3300_OPGDBOLKLJA", kind: "scalar", jsonName: "Unk3300OPGDBOLKLJA", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "retcode", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 138, name: "feature_block_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FeatureBlockInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerLoginRsp>): PlayerLoginRsp {
        const message = { loginRand: 0n, unk3300DHCMDHHDLFF: new Uint8Array(0), unk3300HMGCPAGLDHB: "", totalTickTime: 0, unk3300LLIJKLDBHNN: false, isAudit: false, birthday: "", unk3300HGFNECIJDLN: false, clientSilenceVersionSuffix: "", clientVersionSuffix: "", nextResourceUrl: "", unk3300EJKCNNDFAAI: false, shortAbilityHashMap: [], isDataNeedRelogin: false, clientSilenceDataVersion: 0, targetUid: 0, unk3300NEICPFBPNPD: "", unk3300CANONIPHMDI: false, unk3300IIHDKKNJPGD: false, playerDataVersion: 0, unk3300MOPDDGHMKBD: new Uint8Array(0), countryCode: "", unk3300IADLIIMGDMC: false, blockInfoMap: {}, isTransfer: false, targetHomeOwnerUid: 0, gameBiz: "", abilityHashMap: {}, abilityHashCode: 0, clientDataVersion: 0, unk3300OPGDBOLKLJA: "", retcode: 0, featureBlockInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerLoginRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerLoginRsp): PlayerLoginRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* uint64 login_rand */ 9:
                    message.loginRand = reader.uint64().toBigInt();
                    break;
                case /* bytes Unk3300_DHCMDHHDLFF = 2 [json_name = "Unk3300DHCMDHHDLFF"];*/ 2:
                    message.unk3300DHCMDHHDLFF = reader.bytes();
                    break;
                case /* string Unk3300_HMGCPAGLDHB = 16 [json_name = "Unk3300HMGCPAGLDHB"];*/ 16:
                    message.unk3300HMGCPAGLDHB = reader.string();
                    break;
                case /* double total_tick_time */ 530:
                    message.totalTickTime = reader.double();
                    break;
                case /* bool Unk3300_LLIJKLDBHNN = 5 [json_name = "Unk3300LLIJKLDBHNN"];*/ 5:
                    message.unk3300LLIJKLDBHNN = reader.bool();
                    break;
                case /* bool is_audit */ 930:
                    message.isAudit = reader.bool();
                    break;
                case /* string birthday */ 1387:
                    message.birthday = reader.string();
                    break;
                case /* bool Unk3300_HGFNECIJDLN = 13 [json_name = "Unk3300HGFNECIJDLN"];*/ 13:
                    message.unk3300HGFNECIJDLN = reader.bool();
                    break;
                case /* string client_silence_version_suffix */ 908:
                    message.clientSilenceVersionSuffix = reader.string();
                    break;
                case /* string client_version_suffix */ 1845:
                    message.clientVersionSuffix = reader.string();
                    break;
                case /* string next_resource_url */ 1324:
                    message.nextResourceUrl = reader.string();
                    break;
                case /* bool Unk3300_EJKCNNDFAAI = 196 [json_name = "Unk3300EJKCNNDFAAI"];*/ 196:
                    message.unk3300EJKCNNDFAAI = reader.bool();
                    break;
                case /* repeated ShortAbilityHashPair short_ability_hash_map */ 1373:
                    message.shortAbilityHashMap.push(ShortAbilityHashPair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* bool is_data_need_relogin */ 1119:
                    message.isDataNeedRelogin = reader.bool();
                    break;
                case /* ResVersionConfig res_version_config */ 808:
                    message.resVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.resVersionConfig);
                    break;
                case /* uint32 client_silence_data_version */ 1:
                    message.clientSilenceDataVersion = reader.uint32();
                    break;
                case /* uint32 target_uid */ 15:
                    message.targetUid = reader.uint32();
                    break;
                case /* string Unk3300_NEICPFBPNPD = 99 [json_name = "Unk3300NEICPFBPNPD"];*/ 99:
                    message.unk3300NEICPFBPNPD = reader.string();
                    break;
                case /* bool Unk3300_CANONIPHMDI = 1522 [json_name = "Unk3300CANONIPHMDI"];*/ 1522:
                    message.unk3300CANONIPHMDI = reader.bool();
                    break;
                case /* bool Unk3300_IIHDKKNJPGD = 8 [json_name = "Unk3300IIHDKKNJPGD"];*/ 8:
                    message.unk3300IIHDKKNJPGD = reader.bool();
                    break;
                case /* uint32 player_data_version */ 14:
                    message.playerDataVersion = reader.uint32();
                    break;
                case /* bytes Unk3300_MOPDDGHMKBD = 1888 [json_name = "Unk3300MOPDDGHMKBD"];*/ 1888:
                    message.unk3300MOPDDGHMKBD = reader.bytes();
                    break;
                case /* string country_code */ 360:
                    message.countryCode = reader.string();
                    break;
                case /* ResVersionConfig next_res_version_config */ 1688:
                    message.nextResVersionConfig = ResVersionConfig.internalBinaryRead(reader, reader.uint32(), options, message.nextResVersionConfig);
                    break;
                case /* bool Unk3300_IADLIIMGDMC = 17 [json_name = "Unk3300IADLIIMGDMC"];*/ 17:
                    message.unk3300IADLIIMGDMC = reader.bool();
                    break;
                case /* map<uint32, BlockInfo> block_info_map */ 2018:
                    this.binaryReadMap2018(message.blockInfoMap, reader, options);
                    break;
                case /* bool is_transfer */ 295:
                    message.isTransfer = reader.bool();
                    break;
                case /* uint32 target_home_owner_uid */ 446:
                    message.targetHomeOwnerUid = reader.uint32();
                    break;
                case /* string game_biz */ 4:
                    message.gameBiz = reader.string();
                    break;
                case /* map<string, int32> ability_hash_map */ 3:
                    this.binaryReadMap3(message.abilityHashMap, reader, options);
                    break;
                case /* int32 ability_hash_code */ 12:
                    message.abilityHashCode = reader.int32();
                    break;
                case /* uint32 client_data_version */ 10:
                    message.clientDataVersion = reader.uint32();
                    break;
                case /* string Unk3300_OPGDBOLKLJA = 1299 [json_name = "Unk3300OPGDBOLKLJA"];*/ 1299:
                    message.unk3300OPGDBOLKLJA = reader.string();
                    break;
                case /* int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* repeated FeatureBlockInfo feature_block_info_list */ 138:
                    message.featureBlockInfoList.push(FeatureBlockInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap2018(map: PlayerLoginRsp["blockInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerLoginRsp["blockInfoMap"] | undefined, val: PlayerLoginRsp["blockInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = BlockInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlayerLoginRsp.block_info_map");
            }
        }
        map[key ?? 0] = val ?? BlockInfo.create();
    }
    private binaryReadMap3(map: PlayerLoginRsp["abilityHashMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof PlayerLoginRsp["abilityHashMap"] | undefined, val: PlayerLoginRsp["abilityHashMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.string();
                    break;
                case 2:
                    val = reader.int32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field PlayerLoginRsp.ability_hash_map");
            }
        }
        map[key ?? ""] = val ?? 0;
    }
    internalBinaryWrite(message: PlayerLoginRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* uint64 login_rand = 9; */
        if (message.loginRand !== 0n)
            writer.tag(9, WireType.Varint).uint64(message.loginRand);
        /* bytes Unk3300_DHCMDHHDLFF = 2 [json_name = "Unk3300DHCMDHHDLFF"]; */
        if (message.unk3300DHCMDHHDLFF.length)
            writer.tag(2, WireType.LengthDelimited).bytes(message.unk3300DHCMDHHDLFF);
        /* string Unk3300_HMGCPAGLDHB = 16 [json_name = "Unk3300HMGCPAGLDHB"]; */
        if (message.unk3300HMGCPAGLDHB !== "")
            writer.tag(16, WireType.LengthDelimited).string(message.unk3300HMGCPAGLDHB);
        /* double total_tick_time = 530; */
        if (message.totalTickTime !== 0)
            writer.tag(530, WireType.Bit64).double(message.totalTickTime);
        /* bool Unk3300_LLIJKLDBHNN = 5 [json_name = "Unk3300LLIJKLDBHNN"]; */
        if (message.unk3300LLIJKLDBHNN !== false)
            writer.tag(5, WireType.Varint).bool(message.unk3300LLIJKLDBHNN);
        /* bool is_audit = 930; */
        if (message.isAudit !== false)
            writer.tag(930, WireType.Varint).bool(message.isAudit);
        /* string birthday = 1387; */
        if (message.birthday !== "")
            writer.tag(1387, WireType.LengthDelimited).string(message.birthday);
        /* bool Unk3300_HGFNECIJDLN = 13 [json_name = "Unk3300HGFNECIJDLN"]; */
        if (message.unk3300HGFNECIJDLN !== false)
            writer.tag(13, WireType.Varint).bool(message.unk3300HGFNECIJDLN);
        /* string client_silence_version_suffix = 908; */
        if (message.clientSilenceVersionSuffix !== "")
            writer.tag(908, WireType.LengthDelimited).string(message.clientSilenceVersionSuffix);
        /* string client_version_suffix = 1845; */
        if (message.clientVersionSuffix !== "")
            writer.tag(1845, WireType.LengthDelimited).string(message.clientVersionSuffix);
        /* string next_resource_url = 1324; */
        if (message.nextResourceUrl !== "")
            writer.tag(1324, WireType.LengthDelimited).string(message.nextResourceUrl);
        /* bool Unk3300_EJKCNNDFAAI = 196 [json_name = "Unk3300EJKCNNDFAAI"]; */
        if (message.unk3300EJKCNNDFAAI !== false)
            writer.tag(196, WireType.Varint).bool(message.unk3300EJKCNNDFAAI);
        /* repeated ShortAbilityHashPair short_ability_hash_map = 1373; */
        for (let i = 0; i < message.shortAbilityHashMap.length; i++)
            ShortAbilityHashPair.internalBinaryWrite(message.shortAbilityHashMap[i], writer.tag(1373, WireType.LengthDelimited).fork(), options).join();
        /* bool is_data_need_relogin = 1119; */
        if (message.isDataNeedRelogin !== false)
            writer.tag(1119, WireType.Varint).bool(message.isDataNeedRelogin);
        /* ResVersionConfig res_version_config = 808; */
        if (message.resVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.resVersionConfig, writer.tag(808, WireType.LengthDelimited).fork(), options).join();
        /* uint32 client_silence_data_version = 1; */
        if (message.clientSilenceDataVersion !== 0)
            writer.tag(1, WireType.Varint).uint32(message.clientSilenceDataVersion);
        /* uint32 target_uid = 15; */
        if (message.targetUid !== 0)
            writer.tag(15, WireType.Varint).uint32(message.targetUid);
        /* string Unk3300_NEICPFBPNPD = 99 [json_name = "Unk3300NEICPFBPNPD"]; */
        if (message.unk3300NEICPFBPNPD !== "")
            writer.tag(99, WireType.LengthDelimited).string(message.unk3300NEICPFBPNPD);
        /* bool Unk3300_CANONIPHMDI = 1522 [json_name = "Unk3300CANONIPHMDI"]; */
        if (message.unk3300CANONIPHMDI !== false)
            writer.tag(1522, WireType.Varint).bool(message.unk3300CANONIPHMDI);
        /* bool Unk3300_IIHDKKNJPGD = 8 [json_name = "Unk3300IIHDKKNJPGD"]; */
        if (message.unk3300IIHDKKNJPGD !== false)
            writer.tag(8, WireType.Varint).bool(message.unk3300IIHDKKNJPGD);
        /* uint32 player_data_version = 14; */
        if (message.playerDataVersion !== 0)
            writer.tag(14, WireType.Varint).uint32(message.playerDataVersion);
        /* bytes Unk3300_MOPDDGHMKBD = 1888 [json_name = "Unk3300MOPDDGHMKBD"]; */
        if (message.unk3300MOPDDGHMKBD.length)
            writer.tag(1888, WireType.LengthDelimited).bytes(message.unk3300MOPDDGHMKBD);
        /* string country_code = 360; */
        if (message.countryCode !== "")
            writer.tag(360, WireType.LengthDelimited).string(message.countryCode);
        /* ResVersionConfig next_res_version_config = 1688; */
        if (message.nextResVersionConfig)
            ResVersionConfig.internalBinaryWrite(message.nextResVersionConfig, writer.tag(1688, WireType.LengthDelimited).fork(), options).join();
        /* bool Unk3300_IADLIIMGDMC = 17 [json_name = "Unk3300IADLIIMGDMC"]; */
        if (message.unk3300IADLIIMGDMC !== false)
            writer.tag(17, WireType.Varint).bool(message.unk3300IADLIIMGDMC);
        /* map<uint32, BlockInfo> block_info_map = 2018; */
        for (let k of Object.keys(message.blockInfoMap)) {
            writer.tag(2018, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            BlockInfo.internalBinaryWrite(message.blockInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* bool is_transfer = 295; */
        if (message.isTransfer !== false)
            writer.tag(295, WireType.Varint).bool(message.isTransfer);
        /* uint32 target_home_owner_uid = 446; */
        if (message.targetHomeOwnerUid !== 0)
            writer.tag(446, WireType.Varint).uint32(message.targetHomeOwnerUid);
        /* string game_biz = 4; */
        if (message.gameBiz !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.gameBiz);
        /* map<string, int32> ability_hash_map = 3; */
        for (let k of Object.keys(message.abilityHashMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.LengthDelimited).string(k).tag(2, WireType.Varint).int32(message.abilityHashMap[k]).join();
        /* int32 ability_hash_code = 12; */
        if (message.abilityHashCode !== 0)
            writer.tag(12, WireType.Varint).int32(message.abilityHashCode);
        /* uint32 client_data_version = 10; */
        if (message.clientDataVersion !== 0)
            writer.tag(10, WireType.Varint).uint32(message.clientDataVersion);
        /* string Unk3300_OPGDBOLKLJA = 1299 [json_name = "Unk3300OPGDBOLKLJA"]; */
        if (message.unk3300OPGDBOLKLJA !== "")
            writer.tag(1299, WireType.LengthDelimited).string(message.unk3300OPGDBOLKLJA);
        /* int32 retcode = 7; */
        if (message.retcode !== 0)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* repeated FeatureBlockInfo feature_block_info_list = 138; */
        for (let i = 0; i < message.featureBlockInfoList.length; i++)
            FeatureBlockInfo.internalBinaryWrite(message.featureBlockInfoList[i], writer.tag(138, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerLoginRsp
 */
export const PlayerLoginRsp = new PlayerLoginRsp$Type();
