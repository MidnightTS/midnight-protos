/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerLocationInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class PlayerLocationInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        uid?: number;
        pos?: dependency_1.Vector;
        rot?: dependency_1.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
            if ("rot" in data && data.rot != undefined) {
                this.rot = data.rot;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set uid(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3) as dependency_1.Vector;
    }
    set pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get rot() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 13) as dependency_1.Vector;
    }
    set rot(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 13, value);
    }
    get has_rot() {
        return pb_1.Message.getField(this, 13) != null;
    }
    static fromObject(data: {
        uid?: number;
        pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        rot?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
    }): PlayerLocationInfo {
        const message = new PlayerLocationInfo({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.pos != null) {
            message.pos = dependency_1.Vector.fromObject(data.pos);
        }
        if (data.rot != null) {
            message.rot = dependency_1.Vector.fromObject(data.rot);
        }
        return message;
    }
    toObject() {
        const data: {
            uid?: number;
            pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            rot?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        } = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        if (this.rot != null) {
            data.rot = this.rot.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(15, this.uid);
        if (this.has_pos)
            writer.writeMessage(3, this.pos, () => this.pos.serialize(writer));
        if (this.has_rot)
            writer.writeMessage(13, this.rot, () => this.rot.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerLocationInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerLocationInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 15:
                    message.uid = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.pos, () => message.pos = dependency_1.Vector.deserialize(reader));
                    break;
                case 13:
                    reader.readMessage(message.rot, () => message.rot = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerLocationInfo {
        return PlayerLocationInfo.deserialize(bytes);
    }
}
