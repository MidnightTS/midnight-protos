/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ServerLogNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ServerLogLevel";
import * as dependency_2 from "./ServerLogType";
import * as pb_1 from "google-protobuf";
export class ServerLogNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        server_log?: string;
        log_type?: dependency_2.ServerLogType;
        log_level?: dependency_1.ServerLogLevel;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("server_log" in data && data.server_log != undefined) {
                this.server_log = data.server_log;
            }
            if ("log_type" in data && data.log_type != undefined) {
                this.log_type = data.log_type;
            }
            if ("log_level" in data && data.log_level != undefined) {
                this.log_level = data.log_level;
            }
        }
    }
    get server_log() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set server_log(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get log_type() {
        return pb_1.Message.getFieldWithDefault(this, 9, dependency_2.ServerLogType.SERVER_LOG_TYPE_NONE) as dependency_2.ServerLogType;
    }
    set log_type(value: dependency_2.ServerLogType) {
        pb_1.Message.setField(this, 9, value);
    }
    get log_level() {
        return pb_1.Message.getFieldWithDefault(this, 15, dependency_1.ServerLogLevel.SERVER_LOG_LEVEL_NONE) as dependency_1.ServerLogLevel;
    }
    set log_level(value: dependency_1.ServerLogLevel) {
        pb_1.Message.setField(this, 15, value);
    }
    static fromObject(data: {
        server_log?: string;
        log_type?: dependency_2.ServerLogType;
        log_level?: dependency_1.ServerLogLevel;
    }): ServerLogNotify {
        const message = new ServerLogNotify({});
        if (data.server_log != null) {
            message.server_log = data.server_log;
        }
        if (data.log_type != null) {
            message.log_type = data.log_type;
        }
        if (data.log_level != null) {
            message.log_level = data.log_level;
        }
        return message;
    }
    toObject() {
        const data: {
            server_log?: string;
            log_type?: dependency_2.ServerLogType;
            log_level?: dependency_1.ServerLogLevel;
        } = {};
        if (this.server_log != null) {
            data.server_log = this.server_log;
        }
        if (this.log_type != null) {
            data.log_type = this.log_type;
        }
        if (this.log_level != null) {
            data.log_level = this.log_level;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.server_log.length)
            writer.writeString(7, this.server_log);
        if (this.log_type != dependency_2.ServerLogType.SERVER_LOG_TYPE_NONE)
            writer.writeEnum(9, this.log_type);
        if (this.log_level != dependency_1.ServerLogLevel.SERVER_LOG_LEVEL_NONE)
            writer.writeEnum(15, this.log_level);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ServerLogNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ServerLogNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.server_log = reader.readString();
                    break;
                case 9:
                    message.log_type = reader.readEnum();
                    break;
                case 15:
                    message.log_level = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ServerLogNotify {
        return ServerLogNotify.deserialize(bytes);
    }
}
