/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: CustomCommonNodeInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class CustomCommonNodeInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        parent_index?: number;
        config_id?: number;
        slot_identifier?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("parent_index" in data && data.parent_index != undefined) {
                this.parent_index = data.parent_index;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("slot_identifier" in data && data.slot_identifier != undefined) {
                this.slot_identifier = data.slot_identifier;
            }
        }
    }
    get parent_index() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set parent_index(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set config_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get slot_identifier() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set slot_identifier(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        parent_index?: number;
        config_id?: number;
        slot_identifier?: string;
    }): CustomCommonNodeInfo {
        const message = new CustomCommonNodeInfo({});
        if (data.parent_index != null) {
            message.parent_index = data.parent_index;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.slot_identifier != null) {
            message.slot_identifier = data.slot_identifier;
        }
        return message;
    }
    toObject() {
        const data: {
            parent_index?: number;
            config_id?: number;
            slot_identifier?: string;
        } = {};
        if (this.parent_index != null) {
            data.parent_index = this.parent_index;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.slot_identifier != null) {
            data.slot_identifier = this.slot_identifier;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.parent_index != 0)
            writer.writeInt32(1, this.parent_index);
        if (this.config_id != 0)
            writer.writeUint32(2, this.config_id);
        if (this.slot_identifier.length)
            writer.writeString(3, this.slot_identifier);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomCommonNodeInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomCommonNodeInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.parent_index = reader.readInt32();
                    break;
                case 2:
                    message.config_id = reader.readUint32();
                    break;
                case 3:
                    message.slot_identifier = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CustomCommonNodeInfo {
        return CustomCommonNodeInfo.deserialize(bytes);
    }
}
