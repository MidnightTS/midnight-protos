// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "GCGOperation.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GCGOperationSurrender } from "./GCGOperationSurrender";
import { GCGOperationReboot } from "./GCGOperationReboot";
import { GCGOperationPlayCard } from "./GCGOperationPlayCard";
import { GCGOperationPass } from "./GCGOperationPass";
import { GCGOperationAttack } from "./GCGOperationAttack";
import { GCGOperationReroll } from "./GCGOperationReroll";
import { GCGOperationOnStageSelect } from "./GCGOperationOnStageSelect";
import { GCGOperationRedraw } from "./GCGOperationRedraw";
/**
 * @generated from protobuf message GCGOperation
 */
export interface GCGOperation {
    /**
     * @generated from protobuf oneof: op
     */
    op: {
        oneofKind: "opRedraw";
        /**
         * @generated from protobuf field: GCGOperationRedraw op_redraw = 3;
         */
        opRedraw: GCGOperationRedraw;
    } | {
        oneofKind: "opSelectOnStage";
        /**
         * @generated from protobuf field: GCGOperationOnStageSelect op_select_on_stage = 9;
         */
        opSelectOnStage: GCGOperationOnStageSelect;
    } | {
        oneofKind: "opReroll";
        /**
         * @generated from protobuf field: GCGOperationReroll op_reroll = 4;
         */
        opReroll: GCGOperationReroll;
    } | {
        oneofKind: "opAttack";
        /**
         * @generated from protobuf field: GCGOperationAttack op_attack = 7;
         */
        opAttack: GCGOperationAttack;
    } | {
        oneofKind: "opPass";
        /**
         * @generated from protobuf field: GCGOperationPass op_pass = 6;
         */
        opPass: GCGOperationPass;
    } | {
        oneofKind: "opPlayCard";
        /**
         * @generated from protobuf field: GCGOperationPlayCard op_play_card = 15;
         */
        opPlayCard: GCGOperationPlayCard;
    } | {
        oneofKind: "opReboot";
        /**
         * @generated from protobuf field: GCGOperationReboot op_reboot = 5;
         */
        opReboot: GCGOperationReboot;
    } | {
        oneofKind: "opSurrender";
        /**
         * @generated from protobuf field: GCGOperationSurrender op_surrender = 10;
         */
        opSurrender: GCGOperationSurrender;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class GCGOperation$Type extends MessageType<GCGOperation> {
    constructor() {
        super("GCGOperation", [
            { no: 3, name: "op_redraw", kind: "message", oneof: "op", T: () => GCGOperationRedraw },
            { no: 9, name: "op_select_on_stage", kind: "message", oneof: "op", T: () => GCGOperationOnStageSelect },
            { no: 4, name: "op_reroll", kind: "message", oneof: "op", T: () => GCGOperationReroll },
            { no: 7, name: "op_attack", kind: "message", oneof: "op", T: () => GCGOperationAttack },
            { no: 6, name: "op_pass", kind: "message", oneof: "op", T: () => GCGOperationPass },
            { no: 15, name: "op_play_card", kind: "message", oneof: "op", T: () => GCGOperationPlayCard },
            { no: 5, name: "op_reboot", kind: "message", oneof: "op", T: () => GCGOperationReboot },
            { no: 10, name: "op_surrender", kind: "message", oneof: "op", T: () => GCGOperationSurrender }
        ]);
    }
    create(value?: PartialMessage<GCGOperation>): GCGOperation {
        const message = { op: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GCGOperation>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GCGOperation): GCGOperation {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GCGOperationRedraw op_redraw */ 3:
                    message.op = {
                        oneofKind: "opRedraw",
                        opRedraw: GCGOperationRedraw.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opRedraw)
                    };
                    break;
                case /* GCGOperationOnStageSelect op_select_on_stage */ 9:
                    message.op = {
                        oneofKind: "opSelectOnStage",
                        opSelectOnStage: GCGOperationOnStageSelect.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opSelectOnStage)
                    };
                    break;
                case /* GCGOperationReroll op_reroll */ 4:
                    message.op = {
                        oneofKind: "opReroll",
                        opReroll: GCGOperationReroll.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opReroll)
                    };
                    break;
                case /* GCGOperationAttack op_attack */ 7:
                    message.op = {
                        oneofKind: "opAttack",
                        opAttack: GCGOperationAttack.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opAttack)
                    };
                    break;
                case /* GCGOperationPass op_pass */ 6:
                    message.op = {
                        oneofKind: "opPass",
                        opPass: GCGOperationPass.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opPass)
                    };
                    break;
                case /* GCGOperationPlayCard op_play_card */ 15:
                    message.op = {
                        oneofKind: "opPlayCard",
                        opPlayCard: GCGOperationPlayCard.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opPlayCard)
                    };
                    break;
                case /* GCGOperationReboot op_reboot */ 5:
                    message.op = {
                        oneofKind: "opReboot",
                        opReboot: GCGOperationReboot.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opReboot)
                    };
                    break;
                case /* GCGOperationSurrender op_surrender */ 10:
                    message.op = {
                        oneofKind: "opSurrender",
                        opSurrender: GCGOperationSurrender.internalBinaryRead(reader, reader.uint32(), options, (message.op as any).opSurrender)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GCGOperation, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GCGOperationRedraw op_redraw = 3; */
        if (message.op.oneofKind === "opRedraw")
            GCGOperationRedraw.internalBinaryWrite(message.op.opRedraw, writer.tag(3, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationOnStageSelect op_select_on_stage = 9; */
        if (message.op.oneofKind === "opSelectOnStage")
            GCGOperationOnStageSelect.internalBinaryWrite(message.op.opSelectOnStage, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationReroll op_reroll = 4; */
        if (message.op.oneofKind === "opReroll")
            GCGOperationReroll.internalBinaryWrite(message.op.opReroll, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationAttack op_attack = 7; */
        if (message.op.oneofKind === "opAttack")
            GCGOperationAttack.internalBinaryWrite(message.op.opAttack, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationPass op_pass = 6; */
        if (message.op.oneofKind === "opPass")
            GCGOperationPass.internalBinaryWrite(message.op.opPass, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationPlayCard op_play_card = 15; */
        if (message.op.oneofKind === "opPlayCard")
            GCGOperationPlayCard.internalBinaryWrite(message.op.opPlayCard, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationReboot op_reboot = 5; */
        if (message.op.oneofKind === "opReboot")
            GCGOperationReboot.internalBinaryWrite(message.op.opReboot, writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        /* GCGOperationSurrender op_surrender = 10; */
        if (message.op.oneofKind === "opSurrender")
            GCGOperationSurrender.internalBinaryWrite(message.op.opSurrender, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message GCGOperation
 */
export const GCGOperation = new GCGOperation$Type();
