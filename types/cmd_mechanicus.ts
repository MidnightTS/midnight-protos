// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_mechanicus.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { Uint32Pair } from "./define";
/**
 * @generated from protobuf message com.midnights.game.MechanicusInfo
 */
export interface MechanicusInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.Uint32Pair gear_level_pair_list = 14;
     */
    gearLevelPairList: Uint32Pair[];
    /**
     * @generated from protobuf field: repeated uint32 open_sequence_id_list = 7;
     */
    openSequenceIdList: number[];
    /**
     * @generated from protobuf field: optional uint32 coin = 8;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional uint32 punish_over_time = 12;
     */
    punishOverTime?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 10;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: repeated uint32 finish_difficult_level_list = 13;
     */
    finishDifficultLevelList: number[];
    /**
     * @generated from protobuf field: optional bool is_finish_teach_dungeon = 4;
     */
    isFinishTeachDungeon?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.GetMechanicusInfoReq
 */
export interface GetMechanicusInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetMechanicusInfoReq.CmdId
 */
export enum GetMechanicusInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3972;
     */
    CMD_ID = 3972,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetMechanicusInfoRsp
 */
export interface GetMechanicusInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MechanicusInfo mechanicus_info = 15;
     */
    mechanicusInfo?: MechanicusInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.GetMechanicusInfoRsp.CmdId
 */
export enum GetMechanicusInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3998;
     */
    CMD_ID = 3998,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusSequenceOpenNotify
 */
export interface MechanicusSequenceOpenNotify {
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 8;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional uint32 sequence_id = 7;
     */
    sequenceId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusSequenceOpenNotify.CmdId
 */
export enum MechanicusSequenceOpenNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3912;
     */
    CMD_ID = 3912,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusCoinNotify
 */
export interface MechanicusCoinNotify {
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 7;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 4;
     */
    coin?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusCoinNotify.CmdId
 */
export enum MechanicusCoinNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3935;
     */
    CMD_ID = 3935,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusOpenNotify
 */
export interface MechanicusOpenNotify {
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 2;
     */
    mechanicusId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusOpenNotify.CmdId
 */
export enum MechanicusOpenNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3907;
     */
    CMD_ID = 3907,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusCloseNotify
 */
export interface MechanicusCloseNotify {
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 6;
     */
    mechanicusId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusCloseNotify.CmdId
 */
export enum MechanicusCloseNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3921;
     */
    CMD_ID = 3921,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusUnlockGearReq
 */
export interface MechanicusUnlockGearReq {
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 7;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional uint32 gear_id = 6;
     */
    gearId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusUnlockGearReq.CmdId
 */
export enum MechanicusUnlockGearReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3903;
     */
    CMD_ID = 3903,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusUnlockGearRsp
 */
export interface MechanicusUnlockGearRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 8;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional uint32 gear_id = 14;
     */
    gearId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusUnlockGearRsp.CmdId
 */
export enum MechanicusUnlockGearRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3990;
     */
    CMD_ID = 3990,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusLevelupGearReq
 */
export interface MechanicusLevelupGearReq {
    /**
     * @generated from protobuf field: optional uint32 gear_id = 14;
     */
    gearId?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 12;
     */
    mechanicusId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusLevelupGearReq.CmdId
 */
export enum MechanicusLevelupGearReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3973;
     */
    CMD_ID = 3973,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusLevelupGearRsp
 */
export interface MechanicusLevelupGearRsp {
    /**
     * @generated from protobuf field: optional uint32 gear_id = 7;
     */
    gearId?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_id = 2;
     */
    mechanicusId?: number;
    /**
     * @generated from protobuf field: optional uint32 after_gear_level = 12;
     */
    afterGearLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 8;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusLevelupGearRsp.CmdId
 */
export enum MechanicusLevelupGearRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3999;
     */
    CMD_ID = 3999,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterMechanicusDungeonReq
 */
export interface EnterMechanicusDungeonReq {
    /**
     * @generated from protobuf field: optional uint32 difficult_level = 7;
     */
    difficultLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterMechanicusDungeonReq.CmdId
 */
export enum EnterMechanicusDungeonReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3931;
     */
    CMD_ID = 3931,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.EnterMechanicusDungeonRsp
 */
export interface EnterMechanicusDungeonRsp {
    /**
     * @generated from protobuf field: optional uint32 wrong_uid = 12;
     */
    wrongUid?: number;
    /**
     * @generated from protobuf field: optional uint32 difficult_level = 13;
     */
    difficultLevel?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 11;
     */
    dungeonId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.EnterMechanicusDungeonRsp.CmdId
 */
export enum EnterMechanicusDungeonRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3975;
     */
    CMD_ID = 3975,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusCandidateTeamCreateReq
 */
export interface MechanicusCandidateTeamCreateReq {
    /**
     * @generated from protobuf field: optional uint32 difficult_level = 6;
     */
    difficultLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusCandidateTeamCreateReq.CmdId
 */
export enum MechanicusCandidateTeamCreateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3981;
     */
    CMD_ID = 3981,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MechanicusCandidateTeamCreateRsp
 */
export interface MechanicusCandidateTeamCreateRsp {
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 1;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 difficult_level = 10;
     */
    difficultLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MechanicusCandidateTeamCreateRsp.CmdId
 */
export enum MechanicusCandidateTeamCreateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 3905;
     */
    CMD_ID = 3905,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusInfo$Type extends MessageType<MechanicusInfo> {
    constructor() {
        super("com.midnights.game.MechanicusInfo", [
            { no: 14, name: "gear_level_pair_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => Uint32Pair },
            { no: 7, name: "open_sequence_id_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "punish_over_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "finish_difficult_level_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_finish_teach_dungeon", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusInfo>): MechanicusInfo {
        const message = { gearLevelPairList: [], openSequenceIdList: [], finishDifficultLevelList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusInfo): MechanicusInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.Uint32Pair gear_level_pair_list */ 14:
                    message.gearLevelPairList.push(Uint32Pair.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated uint32 open_sequence_id_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.openSequenceIdList.push(reader.uint32());
                    else
                        message.openSequenceIdList.push(reader.uint32());
                    break;
                case /* optional uint32 coin */ 8:
                    message.coin = reader.uint32();
                    break;
                case /* optional uint32 punish_over_time */ 12:
                    message.punishOverTime = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_id */ 10:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* repeated uint32 finish_difficult_level_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.finishDifficultLevelList.push(reader.uint32());
                    else
                        message.finishDifficultLevelList.push(reader.uint32());
                    break;
                case /* optional bool is_finish_teach_dungeon */ 4:
                    message.isFinishTeachDungeon = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.Uint32Pair gear_level_pair_list = 14; */
        for (let i = 0; i < message.gearLevelPairList.length; i++)
            Uint32Pair.internalBinaryWrite(message.gearLevelPairList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* repeated uint32 open_sequence_id_list = 7; */
        for (let i = 0; i < message.openSequenceIdList.length; i++)
            writer.tag(7, WireType.Varint).uint32(message.openSequenceIdList[i]);
        /* optional uint32 coin = 8; */
        if (message.coin !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.coin);
        /* optional uint32 punish_over_time = 12; */
        if (message.punishOverTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.punishOverTime);
        /* optional uint32 mechanicus_id = 10; */
        if (message.mechanicusId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.mechanicusId);
        /* repeated uint32 finish_difficult_level_list = 13; */
        for (let i = 0; i < message.finishDifficultLevelList.length; i++)
            writer.tag(13, WireType.Varint).uint32(message.finishDifficultLevelList[i]);
        /* optional bool is_finish_teach_dungeon = 4; */
        if (message.isFinishTeachDungeon !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isFinishTeachDungeon);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusInfo
 */
export const MechanicusInfo = new MechanicusInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMechanicusInfoReq$Type extends MessageType<GetMechanicusInfoReq> {
    constructor() {
        super("com.midnights.game.GetMechanicusInfoReq", []);
    }
    create(value?: PartialMessage<GetMechanicusInfoReq>): GetMechanicusInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMechanicusInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMechanicusInfoReq): GetMechanicusInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetMechanicusInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMechanicusInfoReq
 */
export const GetMechanicusInfoReq = new GetMechanicusInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetMechanicusInfoRsp$Type extends MessageType<GetMechanicusInfoRsp> {
    constructor() {
        super("com.midnights.game.GetMechanicusInfoRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 15, name: "mechanicus_info", kind: "message", T: () => MechanicusInfo }
        ]);
    }
    create(value?: PartialMessage<GetMechanicusInfoRsp>): GetMechanicusInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetMechanicusInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetMechanicusInfoRsp): GetMechanicusInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.MechanicusInfo mechanicus_info */ 15:
                    message.mechanicusInfo = MechanicusInfo.internalBinaryRead(reader, reader.uint32(), options, message.mechanicusInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetMechanicusInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.MechanicusInfo mechanicus_info = 15; */
        if (message.mechanicusInfo)
            MechanicusInfo.internalBinaryWrite(message.mechanicusInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetMechanicusInfoRsp
 */
export const GetMechanicusInfoRsp = new GetMechanicusInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusSequenceOpenNotify$Type extends MessageType<MechanicusSequenceOpenNotify> {
    constructor() {
        super("com.midnights.game.MechanicusSequenceOpenNotify", [
            { no: 8, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "sequence_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusSequenceOpenNotify>): MechanicusSequenceOpenNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusSequenceOpenNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusSequenceOpenNotify): MechanicusSequenceOpenNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mechanicus_id */ 8:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional uint32 sequence_id */ 7:
                    message.sequenceId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusSequenceOpenNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mechanicus_id = 8; */
        if (message.mechanicusId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.mechanicusId);
        /* optional uint32 sequence_id = 7; */
        if (message.sequenceId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.sequenceId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusSequenceOpenNotify
 */
export const MechanicusSequenceOpenNotify = new MechanicusSequenceOpenNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusCoinNotify$Type extends MessageType<MechanicusCoinNotify> {
    constructor() {
        super("com.midnights.game.MechanicusCoinNotify", [
            { no: 7, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusCoinNotify>): MechanicusCoinNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusCoinNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusCoinNotify): MechanicusCoinNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mechanicus_id */ 7:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional uint32 coin */ 4:
                    message.coin = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusCoinNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mechanicus_id = 7; */
        if (message.mechanicusId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.mechanicusId);
        /* optional uint32 coin = 4; */
        if (message.coin !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.coin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusCoinNotify
 */
export const MechanicusCoinNotify = new MechanicusCoinNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusOpenNotify$Type extends MessageType<MechanicusOpenNotify> {
    constructor() {
        super("com.midnights.game.MechanicusOpenNotify", [
            { no: 2, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusOpenNotify>): MechanicusOpenNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusOpenNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusOpenNotify): MechanicusOpenNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mechanicus_id */ 2:
                    message.mechanicusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusOpenNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mechanicus_id = 2; */
        if (message.mechanicusId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.mechanicusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusOpenNotify
 */
export const MechanicusOpenNotify = new MechanicusOpenNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusCloseNotify$Type extends MessageType<MechanicusCloseNotify> {
    constructor() {
        super("com.midnights.game.MechanicusCloseNotify", [
            { no: 6, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusCloseNotify>): MechanicusCloseNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusCloseNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusCloseNotify): MechanicusCloseNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mechanicus_id */ 6:
                    message.mechanicusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusCloseNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mechanicus_id = 6; */
        if (message.mechanicusId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.mechanicusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusCloseNotify
 */
export const MechanicusCloseNotify = new MechanicusCloseNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusUnlockGearReq$Type extends MessageType<MechanicusUnlockGearReq> {
    constructor() {
        super("com.midnights.game.MechanicusUnlockGearReq", [
            { no: 7, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusUnlockGearReq>): MechanicusUnlockGearReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusUnlockGearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusUnlockGearReq): MechanicusUnlockGearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mechanicus_id */ 7:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional uint32 gear_id */ 6:
                    message.gearId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusUnlockGearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mechanicus_id = 7; */
        if (message.mechanicusId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.mechanicusId);
        /* optional uint32 gear_id = 6; */
        if (message.gearId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.gearId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusUnlockGearReq
 */
export const MechanicusUnlockGearReq = new MechanicusUnlockGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusUnlockGearRsp$Type extends MessageType<MechanicusUnlockGearRsp> {
    constructor() {
        super("com.midnights.game.MechanicusUnlockGearRsp", [
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusUnlockGearRsp>): MechanicusUnlockGearRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusUnlockGearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusUnlockGearRsp): MechanicusUnlockGearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 mechanicus_id */ 8:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional uint32 gear_id */ 14:
                    message.gearId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusUnlockGearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        /* optional uint32 mechanicus_id = 8; */
        if (message.mechanicusId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.mechanicusId);
        /* optional uint32 gear_id = 14; */
        if (message.gearId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.gearId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusUnlockGearRsp
 */
export const MechanicusUnlockGearRsp = new MechanicusUnlockGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusLevelupGearReq$Type extends MessageType<MechanicusLevelupGearReq> {
    constructor() {
        super("com.midnights.game.MechanicusLevelupGearReq", [
            { no: 14, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusLevelupGearReq>): MechanicusLevelupGearReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusLevelupGearReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusLevelupGearReq): MechanicusLevelupGearReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gear_id */ 14:
                    message.gearId = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_id */ 12:
                    message.mechanicusId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusLevelupGearReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gear_id = 14; */
        if (message.gearId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.gearId);
        /* optional uint32 mechanicus_id = 12; */
        if (message.mechanicusId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mechanicusId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusLevelupGearReq
 */
export const MechanicusLevelupGearReq = new MechanicusLevelupGearReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusLevelupGearRsp$Type extends MessageType<MechanicusLevelupGearRsp> {
    constructor() {
        super("com.midnights.game.MechanicusLevelupGearRsp", [
            { no: 7, name: "gear_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "mechanicus_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "after_gear_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusLevelupGearRsp>): MechanicusLevelupGearRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusLevelupGearRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusLevelupGearRsp): MechanicusLevelupGearRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gear_id */ 7:
                    message.gearId = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_id */ 2:
                    message.mechanicusId = reader.uint32();
                    break;
                case /* optional uint32 after_gear_level */ 12:
                    message.afterGearLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 8:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusLevelupGearRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gear_id = 7; */
        if (message.gearId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.gearId);
        /* optional uint32 mechanicus_id = 2; */
        if (message.mechanicusId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.mechanicusId);
        /* optional uint32 after_gear_level = 12; */
        if (message.afterGearLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.afterGearLevel);
        /* optional int32 retcode = 8; */
        if (message.retcode !== undefined)
            writer.tag(8, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusLevelupGearRsp
 */
export const MechanicusLevelupGearRsp = new MechanicusLevelupGearRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterMechanicusDungeonReq$Type extends MessageType<EnterMechanicusDungeonReq> {
    constructor() {
        super("com.midnights.game.EnterMechanicusDungeonReq", [
            { no: 7, name: "difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterMechanicusDungeonReq>): EnterMechanicusDungeonReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterMechanicusDungeonReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterMechanicusDungeonReq): EnterMechanicusDungeonReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficult_level */ 7:
                    message.difficultLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterMechanicusDungeonReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficult_level = 7; */
        if (message.difficultLevel !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.difficultLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterMechanicusDungeonReq
 */
export const EnterMechanicusDungeonReq = new EnterMechanicusDungeonReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class EnterMechanicusDungeonRsp$Type extends MessageType<EnterMechanicusDungeonRsp> {
    constructor() {
        super("com.midnights.game.EnterMechanicusDungeonRsp", [
            { no: 12, name: "wrong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<EnterMechanicusDungeonRsp>): EnterMechanicusDungeonRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<EnterMechanicusDungeonRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: EnterMechanicusDungeonRsp): EnterMechanicusDungeonRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 wrong_uid */ 12:
                    message.wrongUid = reader.uint32();
                    break;
                case /* optional uint32 difficult_level */ 13:
                    message.difficultLevel = reader.uint32();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 dungeon_id */ 11:
                    message.dungeonId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: EnterMechanicusDungeonRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 wrong_uid = 12; */
        if (message.wrongUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.wrongUid);
        /* optional uint32 difficult_level = 13; */
        if (message.difficultLevel !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.difficultLevel);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 dungeon_id = 11; */
        if (message.dungeonId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.dungeonId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.EnterMechanicusDungeonRsp
 */
export const EnterMechanicusDungeonRsp = new EnterMechanicusDungeonRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusCandidateTeamCreateReq$Type extends MessageType<MechanicusCandidateTeamCreateReq> {
    constructor() {
        super("com.midnights.game.MechanicusCandidateTeamCreateReq", [
            { no: 6, name: "difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusCandidateTeamCreateReq>): MechanicusCandidateTeamCreateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusCandidateTeamCreateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusCandidateTeamCreateReq): MechanicusCandidateTeamCreateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 difficult_level */ 6:
                    message.difficultLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusCandidateTeamCreateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 difficult_level = 6; */
        if (message.difficultLevel !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.difficultLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusCandidateTeamCreateReq
 */
export const MechanicusCandidateTeamCreateReq = new MechanicusCandidateTeamCreateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MechanicusCandidateTeamCreateRsp$Type extends MessageType<MechanicusCandidateTeamCreateRsp> {
    constructor() {
        super("com.midnights.game.MechanicusCandidateTeamCreateRsp", [
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MechanicusCandidateTeamCreateRsp>): MechanicusCandidateTeamCreateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MechanicusCandidateTeamCreateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MechanicusCandidateTeamCreateRsp): MechanicusCandidateTeamCreateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 difficult_level */ 10:
                    message.difficultLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MechanicusCandidateTeamCreateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dungeonId);
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        /* optional uint32 difficult_level = 10; */
        if (message.difficultLevel !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.difficultLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MechanicusCandidateTeamCreateRsp
 */
export const MechanicusCandidateTeamCreateRsp = new MechanicusCandidateTeamCreateRsp$Type();
