// @generated by protobuf-ts 2.8.1 with parameter generate_dependencies,output_typescript
// @generated from protobuf file "cmd_ugc.proto" (package "com.midnights.game", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message com.midnights.game.UgcMusicNote
 */
export interface UgcMusicNote {
    /**
     * @generated from protobuf field: optional uint32 start_time = 12;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 5;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.UgcMusicTrack
 */
export interface UgcMusicTrack {
    /**
     * @generated from protobuf field: repeated com.midnights.game.UgcMusicNote music_note_list = 6;
     */
    musicNoteList: UgcMusicNote[];
}
/**
 * @generated from protobuf message com.midnights.game.UgcMusicRecord
 */
export interface UgcMusicRecord {
    /**
     * @generated from protobuf field: repeated com.midnights.game.UgcMusicTrack music_track_list = 4;
     */
    musicTrackList: UgcMusicTrack[];
    /**
     * @generated from protobuf field: optional uint32 music_id = 13;
     */
    musicId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.UgcMusicBriefInfo
 */
export interface UgcMusicBriefInfo {
    /**
     * @generated from protobuf field: optional uint64 import_from_ugc_guid = 5;
     */
    importFromUgcGuid?: bigint;
    /**
     * @generated from protobuf field: optional bool is_published = 8;
     */
    isPublished?: boolean;
    /**
     * @generated from protobuf field: optional bool is_played = 1;
     */
    isPlayed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 music_id = 2;
     */
    musicId?: number;
    /**
     * @generated from protobuf field: optional uint32 save_page_type = 1182;
     */
    savePageType?: number;
    /**
     * @generated from protobuf field: optional uint32 save_idx = 12;
     */
    saveIdx?: number;
    /**
     * @generated from protobuf field: optional string creator_nickname = 10;
     */
    creatorNickname?: string;
    /**
     * @generated from protobuf field: optional uint32 version = 15;
     */
    version?: number;
    /**
     * @generated from protobuf field: optional uint32 save_time = 3;
     */
    saveTime?: number;
    /**
     * @generated from protobuf field: repeated uint32 after_note_list = 1002;
     */
    afterNoteList: number[];
    /**
     * @generated from protobuf field: repeated uint32 before_note_list = 982;
     */
    beforeNoteList: number[];
    /**
     * @generated from protobuf field: optional bool is_psn_platform = 9;
     */
    isPsnPlatform?: boolean;
    /**
     * @generated from protobuf field: optional uint32 time_line_edit_time = 1822;
     */
    timeLineEditTime?: number;
    /**
     * @generated from protobuf field: optional bool is_changed_after_publish = 11;
     */
    isChangedAfterPublish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 publish_time = 13;
     */
    publishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 max_score = 14;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 real_time_edit_time = 576;
     */
    realTimeEditTime?: number;
    /**
     * @generated from protobuf field: optional uint32 note_count = 7;
     */
    noteCount?: number;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 4;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional uint32 self_max_score = 6;
     */
    selfMaxScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GetUgcReq
 */
export interface GetUgcReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 8;
     */
    ugcType?: UgcType;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 5;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.RecordUsage ugc_record_usage = 6;
     */
    ugcRecordUsage?: RecordUsage;
    /**
     * @generated from protobuf field: optional bool is_require_brief = 11;
     */
    isRequireBrief?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.GetUgcType get_ugc_type = 13;
     */
    getUgcType?: GetUgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.GetUgcReq.CmdId
 */
export enum GetUgcReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6326;
     */
    CMD_ID = 6326,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetUgcRsp
 */
export interface GetUgcRsp {
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 15;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 10;
     */
    ugcType?: UgcType;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.RecordUsage ugc_record_usage = 14;
     */
    ugcRecordUsage?: RecordUsage;
    /**
     * @generated from protobuf oneof: record
     */
    record: {
        oneofKind: "musicRecord";
        /**
         * @generated from protobuf field: com.midnights.game.UgcMusicRecord music_record = 4;
         */
        musicRecord: UgcMusicRecord;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: brief
     */
    brief: {
        oneofKind: "musicBriefInfo";
        /**
         * @generated from protobuf field: com.midnights.game.UgcMusicBriefInfo music_brief_info = 1819;
         */
        musicBriefInfo: UgcMusicBriefInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GetUgcRsp.CmdId
 */
export enum GetUgcRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6318;
     */
    CMD_ID = 6318,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetUgcBriefInfoReq
 */
export interface GetUgcBriefInfoReq {
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 7;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 10;
     */
    ugcType?: UgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.GetUgcBriefInfoReq.CmdId
 */
export enum GetUgcBriefInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6325;
     */
    CMD_ID = 6325,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetUgcBriefInfoRsp
 */
export interface GetUgcBriefInfoRsp {
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 3;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 11;
     */
    ugcType?: UgcType;
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf oneof: brief
     */
    brief: {
        oneofKind: "musicBriefInfo";
        /**
         * @generated from protobuf field: com.midnights.game.UgcMusicBriefInfo music_brief_info = 2;
         */
        musicBriefInfo: UgcMusicBriefInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GetUgcBriefInfoRsp.CmdId
 */
export enum GetUgcBriefInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6307;
     */
    CMD_ID = 6307,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SaveUgcReq
 */
export interface SaveUgcReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 11;
     */
    ugcType?: UgcType;
    /**
     * @generated from protobuf oneof: record
     */
    record: {
        oneofKind: "musicRecord";
        /**
         * @generated from protobuf field: com.midnights.game.UgcMusicRecord music_record = 2;
         */
        musicRecord: UgcMusicRecord;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf oneof: brief
     */
    brief: {
        oneofKind: "musicBriefInfo";
        /**
         * @generated from protobuf field: com.midnights.game.UgcMusicBriefInfo music_brief_info = 1488;
         */
        musicBriefInfo: UgcMusicBriefInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.SaveUgcReq.CmdId
 */
export enum SaveUgcReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6329;
     */
    CMD_ID = 6329,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SaveUgcRsp
 */
export interface SaveUgcRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 8;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 1;
     */
    ugcType?: UgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.SaveUgcRsp.CmdId
 */
export enum SaveUgcRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6322;
     */
    CMD_ID = 6322,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PublishUgcReq
 */
export interface PublishUgcReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 7;
     */
    ugcType?: UgcType;
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 12;
     */
    ugcGuid?: bigint;
}
/**
 * @generated from protobuf enum com.midnights.game.PublishUgcReq.CmdId
 */
export enum PublishUgcReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6344;
     */
    CMD_ID = 6344,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PublishUgcRsp
 */
export interface PublishUgcRsp {
    /**
     * @generated from protobuf field: optional uint64 ugc_guid = 14;
     */
    ugcGuid?: bigint;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 13;
     */
    ugcType?: UgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.PublishUgcRsp.CmdId
 */
export enum PublishUgcRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6349;
     */
    CMD_ID = 6349,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckUgcUpdateReq
 */
export interface CheckUgcUpdateReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 13;
     */
    ugcType?: UgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.CheckUgcUpdateReq.CmdId
 */
export enum CheckUgcUpdateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6320;
     */
    CMD_ID = 6320,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckUgcUpdateRsp
 */
export interface CheckUgcUpdateRsp {
    /**
     * @generated from protobuf field: repeated uint64 update_ugc_guid_list = 15;
     */
    updateUgcGuidList: bigint[];
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.UgcType ugc_type = 12;
     */
    ugcType?: UgcType;
}
/**
 * @generated from protobuf enum com.midnights.game.CheckUgcUpdateRsp.CmdId
 */
export enum CheckUgcUpdateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6345;
     */
    CMD_ID = 6345,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.UgcNotify
 */
export interface UgcNotify {
    /**
     * @generated from protobuf field: optional bool is_ugc_publish_ban = 12;
     */
    isUgcPublishBan?: boolean;
    /**
     * @generated from protobuf field: optional bool is_ugc_publish_feature_closed = 8;
     */
    isUgcPublishFeatureClosed?: boolean;
    /**
     * @generated from protobuf field: optional bool is_ugc_feature_closed = 15;
     */
    isUgcFeatureClosed?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.UgcNotify.CmdId
 */
export enum UgcNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6341;
     */
    CMD_ID = 6341,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckUgcStateReq
 */
export interface CheckUgcStateReq {
}
/**
 * @generated from protobuf enum com.midnights.game.CheckUgcStateReq.CmdId
 */
export enum CheckUgcStateReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6342;
     */
    CMD_ID = 6342,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.CheckUgcStateRsp
 */
export interface CheckUgcStateRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 7;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.CheckUgcStateRsp.CmdId
 */
export enum CheckUgcStateRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 6314;
     */
    CMD_ID = 6314,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.UgcType
 */
export enum UgcType {
    /**
     * @generated from protobuf enum value: UGC_TYPE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: UGC_TYPE_MUSIC_GAME = 1;
     */
    MUSIC_GAME = 1
}
/**
 * @generated from protobuf enum com.midnights.game.GetUgcType
 */
export enum GetUgcType {
    /**
     * @generated from protobuf enum value: GET_UGC_NONE = 0;
     */
    GET_UGC_NONE = 0,
    /**
     * @generated from protobuf enum value: GET_UGC_TYPE_MINE = 1;
     */
    GET_UGC_TYPE_MINE = 1,
    /**
     * @generated from protobuf enum value: GET_UGC_TYPE_PUBLISH = 2;
     */
    GET_UGC_TYPE_PUBLISH = 2
}
/**
 * @generated from protobuf enum com.midnights.game.RecordUsage
 */
export enum RecordUsage {
    /**
     * @generated from protobuf enum value: UGC_RECORD_USAGE_NONE = 0;
     */
    UGC_RECORD_USAGE_NONE = 0,
    /**
     * @generated from protobuf enum value: UGC_RECORD_USAGE_IMPORT = 1;
     */
    UGC_RECORD_USAGE_IMPORT = 1,
    /**
     * @generated from protobuf enum value: UGC_RECORD_USAGE_PLAY = 2;
     */
    UGC_RECORD_USAGE_PLAY = 2,
    /**
     * @generated from protobuf enum value: UGC_RECORD_USAGE_TRIAL = 3;
     */
    UGC_RECORD_USAGE_TRIAL = 3,
    /**
     * @generated from protobuf enum value: UGC_RECORD_USAGE_COMPARE = 4;
     */
    UGC_RECORD_USAGE_COMPARE = 4
}
// @generated message type with reflection information, may provide speed optimized methods
class UgcMusicNote$Type extends MessageType<UgcMusicNote> {
    constructor() {
        super("com.midnights.game.UgcMusicNote", [
            { no: 12, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UgcMusicNote>): UgcMusicNote {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcMusicNote>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcMusicNote): UgcMusicNote {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 start_time */ 12:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 5:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcMusicNote, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 start_time = 12; */
        if (message.startTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.startTime);
        /* optional uint32 end_time = 5; */
        if (message.endTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcMusicNote
 */
export const UgcMusicNote = new UgcMusicNote$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcMusicTrack$Type extends MessageType<UgcMusicTrack> {
    constructor() {
        super("com.midnights.game.UgcMusicTrack", [
            { no: 6, name: "music_note_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UgcMusicNote }
        ]);
    }
    create(value?: PartialMessage<UgcMusicTrack>): UgcMusicTrack {
        const message = { musicNoteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcMusicTrack>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcMusicTrack): UgcMusicTrack {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.UgcMusicNote music_note_list */ 6:
                    message.musicNoteList.push(UgcMusicNote.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcMusicTrack, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.UgcMusicNote music_note_list = 6; */
        for (let i = 0; i < message.musicNoteList.length; i++)
            UgcMusicNote.internalBinaryWrite(message.musicNoteList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcMusicTrack
 */
export const UgcMusicTrack = new UgcMusicTrack$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcMusicRecord$Type extends MessageType<UgcMusicRecord> {
    constructor() {
        super("com.midnights.game.UgcMusicRecord", [
            { no: 4, name: "music_track_list", kind: "message", repeat: 2 /*RepeatType.UNPACKED*/, T: () => UgcMusicTrack },
            { no: 13, name: "music_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UgcMusicRecord>): UgcMusicRecord {
        const message = { musicTrackList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcMusicRecord>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcMusicRecord): UgcMusicRecord {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.UgcMusicTrack music_track_list */ 4:
                    message.musicTrackList.push(UgcMusicTrack.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 music_id */ 13:
                    message.musicId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcMusicRecord, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.UgcMusicTrack music_track_list = 4; */
        for (let i = 0; i < message.musicTrackList.length; i++)
            UgcMusicTrack.internalBinaryWrite(message.musicTrackList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 music_id = 13; */
        if (message.musicId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.musicId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcMusicRecord
 */
export const UgcMusicRecord = new UgcMusicRecord$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcMusicBriefInfo$Type extends MessageType<UgcMusicBriefInfo> {
    constructor() {
        super("com.midnights.game.UgcMusicBriefInfo", [
            { no: 5, name: "import_from_ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 8, name: "is_published", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "is_played", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "music_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1182, name: "save_page_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "save_idx", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "creator_nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "version", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "save_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1002, name: "after_note_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 982, name: "before_note_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_psn_platform", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1822, name: "time_line_edit_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_changed_after_publish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "publish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 576, name: "real_time_edit_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "note_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "self_max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<UgcMusicBriefInfo>): UgcMusicBriefInfo {
        const message = { afterNoteList: [], beforeNoteList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcMusicBriefInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcMusicBriefInfo): UgcMusicBriefInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 import_from_ugc_guid */ 5:
                    message.importFromUgcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional bool is_published */ 8:
                    message.isPublished = reader.bool();
                    break;
                case /* optional bool is_played */ 1:
                    message.isPlayed = reader.bool();
                    break;
                case /* optional uint32 music_id */ 2:
                    message.musicId = reader.uint32();
                    break;
                case /* optional uint32 save_page_type */ 1182:
                    message.savePageType = reader.uint32();
                    break;
                case /* optional uint32 save_idx */ 12:
                    message.saveIdx = reader.uint32();
                    break;
                case /* optional string creator_nickname */ 10:
                    message.creatorNickname = reader.string();
                    break;
                case /* optional uint32 version */ 15:
                    message.version = reader.uint32();
                    break;
                case /* optional uint32 save_time */ 3:
                    message.saveTime = reader.uint32();
                    break;
                case /* repeated uint32 after_note_list */ 1002:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.afterNoteList.push(reader.uint32());
                    else
                        message.afterNoteList.push(reader.uint32());
                    break;
                case /* repeated uint32 before_note_list */ 982:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.beforeNoteList.push(reader.uint32());
                    else
                        message.beforeNoteList.push(reader.uint32());
                    break;
                case /* optional bool is_psn_platform */ 9:
                    message.isPsnPlatform = reader.bool();
                    break;
                case /* optional uint32 time_line_edit_time */ 1822:
                    message.timeLineEditTime = reader.uint32();
                    break;
                case /* optional bool is_changed_after_publish */ 11:
                    message.isChangedAfterPublish = reader.bool();
                    break;
                case /* optional uint32 publish_time */ 13:
                    message.publishTime = reader.uint32();
                    break;
                case /* optional uint32 max_score */ 14:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 real_time_edit_time */ 576:
                    message.realTimeEditTime = reader.uint32();
                    break;
                case /* optional uint32 note_count */ 7:
                    message.noteCount = reader.uint32();
                    break;
                case /* optional uint64 ugc_guid */ 4:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional uint32 self_max_score */ 6:
                    message.selfMaxScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcMusicBriefInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 import_from_ugc_guid = 5; */
        if (message.importFromUgcGuid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.importFromUgcGuid);
        /* optional bool is_published = 8; */
        if (message.isPublished !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isPublished);
        /* optional bool is_played = 1; */
        if (message.isPlayed !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isPlayed);
        /* optional uint32 music_id = 2; */
        if (message.musicId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.musicId);
        /* optional uint32 save_page_type = 1182; */
        if (message.savePageType !== undefined)
            writer.tag(1182, WireType.Varint).uint32(message.savePageType);
        /* optional uint32 save_idx = 12; */
        if (message.saveIdx !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.saveIdx);
        /* optional string creator_nickname = 10; */
        if (message.creatorNickname !== undefined)
            writer.tag(10, WireType.LengthDelimited).string(message.creatorNickname);
        /* optional uint32 version = 15; */
        if (message.version !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.version);
        /* optional uint32 save_time = 3; */
        if (message.saveTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.saveTime);
        /* repeated uint32 after_note_list = 1002; */
        for (let i = 0; i < message.afterNoteList.length; i++)
            writer.tag(1002, WireType.Varint).uint32(message.afterNoteList[i]);
        /* repeated uint32 before_note_list = 982; */
        for (let i = 0; i < message.beforeNoteList.length; i++)
            writer.tag(982, WireType.Varint).uint32(message.beforeNoteList[i]);
        /* optional bool is_psn_platform = 9; */
        if (message.isPsnPlatform !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isPsnPlatform);
        /* optional uint32 time_line_edit_time = 1822; */
        if (message.timeLineEditTime !== undefined)
            writer.tag(1822, WireType.Varint).uint32(message.timeLineEditTime);
        /* optional bool is_changed_after_publish = 11; */
        if (message.isChangedAfterPublish !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isChangedAfterPublish);
        /* optional uint32 publish_time = 13; */
        if (message.publishTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.publishTime);
        /* optional uint32 max_score = 14; */
        if (message.maxScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 real_time_edit_time = 576; */
        if (message.realTimeEditTime !== undefined)
            writer.tag(576, WireType.Varint).uint32(message.realTimeEditTime);
        /* optional uint32 note_count = 7; */
        if (message.noteCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.noteCount);
        /* optional uint64 ugc_guid = 4; */
        if (message.ugcGuid !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.ugcGuid);
        /* optional uint32 self_max_score = 6; */
        if (message.selfMaxScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.selfMaxScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcMusicBriefInfo
 */
export const UgcMusicBriefInfo = new UgcMusicBriefInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUgcReq$Type extends MessageType<GetUgcReq> {
    constructor() {
        super("com.midnights.game.GetUgcReq", [
            { no: 8, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] },
            { no: 5, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 6, name: "ugc_record_usage", kind: "enum", opt: true, T: () => ["com.midnights.game.RecordUsage", RecordUsage] },
            { no: 11, name: "is_require_brief", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "get_ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.GetUgcType", GetUgcType] }
        ]);
    }
    create(value?: PartialMessage<GetUgcReq>): GetUgcReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUgcReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUgcReq): GetUgcReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.UgcType ugc_type */ 8:
                    message.ugcType = reader.int32();
                    break;
                case /* optional uint64 ugc_guid */ 5:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.RecordUsage ugc_record_usage */ 6:
                    message.ugcRecordUsage = reader.int32();
                    break;
                case /* optional bool is_require_brief */ 11:
                    message.isRequireBrief = reader.bool();
                    break;
                case /* optional com.midnights.game.GetUgcType get_ugc_type */ 13:
                    message.getUgcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUgcReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.UgcType ugc_type = 8; */
        if (message.ugcType !== undefined)
            writer.tag(8, WireType.Varint).int32(message.ugcType);
        /* optional uint64 ugc_guid = 5; */
        if (message.ugcGuid !== undefined)
            writer.tag(5, WireType.Varint).uint64(message.ugcGuid);
        /* optional com.midnights.game.RecordUsage ugc_record_usage = 6; */
        if (message.ugcRecordUsage !== undefined)
            writer.tag(6, WireType.Varint).int32(message.ugcRecordUsage);
        /* optional bool is_require_brief = 11; */
        if (message.isRequireBrief !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isRequireBrief);
        /* optional com.midnights.game.GetUgcType get_ugc_type = 13; */
        if (message.getUgcType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.getUgcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetUgcReq
 */
export const GetUgcReq = new GetUgcReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUgcRsp$Type extends MessageType<GetUgcRsp> {
    constructor() {
        super("com.midnights.game.GetUgcRsp", [
            { no: 15, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 14, name: "ugc_record_usage", kind: "enum", opt: true, T: () => ["com.midnights.game.RecordUsage", RecordUsage] },
            { no: 4, name: "music_record", kind: "message", oneof: "record", T: () => UgcMusicRecord },
            { no: 1819, name: "music_brief_info", kind: "message", oneof: "brief", T: () => UgcMusicBriefInfo }
        ]);
    }
    create(value?: PartialMessage<GetUgcRsp>): GetUgcRsp {
        const message = { record: { oneofKind: undefined }, brief: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUgcRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUgcRsp): GetUgcRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ugc_guid */ 15:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 10:
                    message.ugcType = reader.int32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.RecordUsage ugc_record_usage */ 14:
                    message.ugcRecordUsage = reader.int32();
                    break;
                case /* com.midnights.game.UgcMusicRecord music_record */ 4:
                    message.record = {
                        oneofKind: "musicRecord",
                        musicRecord: UgcMusicRecord.internalBinaryRead(reader, reader.uint32(), options, (message.record as any).musicRecord)
                    };
                    break;
                case /* com.midnights.game.UgcMusicBriefInfo music_brief_info */ 1819:
                    message.brief = {
                        oneofKind: "musicBriefInfo",
                        musicBriefInfo: UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options, (message.brief as any).musicBriefInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUgcRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ugc_guid = 15; */
        if (message.ugcGuid !== undefined)
            writer.tag(15, WireType.Varint).uint64(message.ugcGuid);
        /* optional com.midnights.game.UgcType ugc_type = 10; */
        if (message.ugcType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.ugcType);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.RecordUsage ugc_record_usage = 14; */
        if (message.ugcRecordUsage !== undefined)
            writer.tag(14, WireType.Varint).int32(message.ugcRecordUsage);
        /* com.midnights.game.UgcMusicRecord music_record = 4; */
        if (message.record.oneofKind === "musicRecord")
            UgcMusicRecord.internalBinaryWrite(message.record.musicRecord, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.UgcMusicBriefInfo music_brief_info = 1819; */
        if (message.brief.oneofKind === "musicBriefInfo")
            UgcMusicBriefInfo.internalBinaryWrite(message.brief.musicBriefInfo, writer.tag(1819, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetUgcRsp
 */
export const GetUgcRsp = new GetUgcRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUgcBriefInfoReq$Type extends MessageType<GetUgcBriefInfoReq> {
    constructor() {
        super("com.midnights.game.GetUgcBriefInfoReq", [
            { no: 7, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<GetUgcBriefInfoReq>): GetUgcBriefInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUgcBriefInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUgcBriefInfoReq): GetUgcBriefInfoReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ugc_guid */ 7:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 10:
                    message.ugcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUgcBriefInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ugc_guid = 7; */
        if (message.ugcGuid !== undefined)
            writer.tag(7, WireType.Varint).uint64(message.ugcGuid);
        /* optional com.midnights.game.UgcType ugc_type = 10; */
        if (message.ugcType !== undefined)
            writer.tag(10, WireType.Varint).int32(message.ugcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetUgcBriefInfoReq
 */
export const GetUgcBriefInfoReq = new GetUgcBriefInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetUgcBriefInfoRsp$Type extends MessageType<GetUgcBriefInfoRsp> {
    constructor() {
        super("com.midnights.game.GetUgcBriefInfoRsp", [
            { no: 3, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] },
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "music_brief_info", kind: "message", oneof: "brief", T: () => UgcMusicBriefInfo }
        ]);
    }
    create(value?: PartialMessage<GetUgcBriefInfoRsp>): GetUgcBriefInfoRsp {
        const message = { brief: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetUgcBriefInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetUgcBriefInfoRsp): GetUgcBriefInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ugc_guid */ 3:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 11:
                    message.ugcType = reader.int32();
                    break;
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* com.midnights.game.UgcMusicBriefInfo music_brief_info */ 2:
                    message.brief = {
                        oneofKind: "musicBriefInfo",
                        musicBriefInfo: UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options, (message.brief as any).musicBriefInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetUgcBriefInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ugc_guid = 3; */
        if (message.ugcGuid !== undefined)
            writer.tag(3, WireType.Varint).uint64(message.ugcGuid);
        /* optional com.midnights.game.UgcType ugc_type = 11; */
        if (message.ugcType !== undefined)
            writer.tag(11, WireType.Varint).int32(message.ugcType);
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* com.midnights.game.UgcMusicBriefInfo music_brief_info = 2; */
        if (message.brief.oneofKind === "musicBriefInfo")
            UgcMusicBriefInfo.internalBinaryWrite(message.brief.musicBriefInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetUgcBriefInfoRsp
 */
export const GetUgcBriefInfoRsp = new GetUgcBriefInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveUgcReq$Type extends MessageType<SaveUgcReq> {
    constructor() {
        super("com.midnights.game.SaveUgcReq", [
            { no: 11, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] },
            { no: 2, name: "music_record", kind: "message", oneof: "record", T: () => UgcMusicRecord },
            { no: 1488, name: "music_brief_info", kind: "message", oneof: "brief", T: () => UgcMusicBriefInfo }
        ]);
    }
    create(value?: PartialMessage<SaveUgcReq>): SaveUgcReq {
        const message = { record: { oneofKind: undefined }, brief: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveUgcReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveUgcReq): SaveUgcReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.UgcType ugc_type */ 11:
                    message.ugcType = reader.int32();
                    break;
                case /* com.midnights.game.UgcMusicRecord music_record */ 2:
                    message.record = {
                        oneofKind: "musicRecord",
                        musicRecord: UgcMusicRecord.internalBinaryRead(reader, reader.uint32(), options, (message.record as any).musicRecord)
                    };
                    break;
                case /* com.midnights.game.UgcMusicBriefInfo music_brief_info */ 1488:
                    message.brief = {
                        oneofKind: "musicBriefInfo",
                        musicBriefInfo: UgcMusicBriefInfo.internalBinaryRead(reader, reader.uint32(), options, (message.brief as any).musicBriefInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveUgcReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.UgcType ugc_type = 11; */
        if (message.ugcType !== undefined)
            writer.tag(11, WireType.Varint).int32(message.ugcType);
        /* com.midnights.game.UgcMusicRecord music_record = 2; */
        if (message.record.oneofKind === "musicRecord")
            UgcMusicRecord.internalBinaryWrite(message.record.musicRecord, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.UgcMusicBriefInfo music_brief_info = 1488; */
        if (message.brief.oneofKind === "musicBriefInfo")
            UgcMusicBriefInfo.internalBinaryWrite(message.brief.musicBriefInfo, writer.tag(1488, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SaveUgcReq
 */
export const SaveUgcReq = new SaveUgcReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SaveUgcRsp$Type extends MessageType<SaveUgcRsp> {
    constructor() {
        super("com.midnights.game.SaveUgcRsp", [
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<SaveUgcRsp>): SaveUgcRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SaveUgcRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SaveUgcRsp): SaveUgcRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint64 ugc_guid */ 8:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 1:
                    message.ugcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SaveUgcRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint64 ugc_guid = 8; */
        if (message.ugcGuid !== undefined)
            writer.tag(8, WireType.Varint).uint64(message.ugcGuid);
        /* optional com.midnights.game.UgcType ugc_type = 1; */
        if (message.ugcType !== undefined)
            writer.tag(1, WireType.Varint).int32(message.ugcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SaveUgcRsp
 */
export const SaveUgcRsp = new SaveUgcRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishUgcReq$Type extends MessageType<PublishUgcReq> {
    constructor() {
        super("com.midnights.game.PublishUgcReq", [
            { no: 7, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] },
            { no: 12, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<PublishUgcReq>): PublishUgcReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublishUgcReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishUgcReq): PublishUgcReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.UgcType ugc_type */ 7:
                    message.ugcType = reader.int32();
                    break;
                case /* optional uint64 ugc_guid */ 12:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublishUgcReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.UgcType ugc_type = 7; */
        if (message.ugcType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.ugcType);
        /* optional uint64 ugc_guid = 12; */
        if (message.ugcGuid !== undefined)
            writer.tag(12, WireType.Varint).uint64(message.ugcGuid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PublishUgcReq
 */
export const PublishUgcReq = new PublishUgcReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PublishUgcRsp$Type extends MessageType<PublishUgcRsp> {
    constructor() {
        super("com.midnights.game.PublishUgcRsp", [
            { no: 14, name: "ugc_guid", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PublishUgcRsp>): PublishUgcRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PublishUgcRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PublishUgcRsp): PublishUgcRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint64 ugc_guid */ 14:
                    message.ugcGuid = reader.uint64().toBigInt();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 13:
                    message.ugcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PublishUgcRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint64 ugc_guid = 14; */
        if (message.ugcGuid !== undefined)
            writer.tag(14, WireType.Varint).uint64(message.ugcGuid);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.UgcType ugc_type = 13; */
        if (message.ugcType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.ugcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PublishUgcRsp
 */
export const PublishUgcRsp = new PublishUgcRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckUgcUpdateReq$Type extends MessageType<CheckUgcUpdateReq> {
    constructor() {
        super("com.midnights.game.CheckUgcUpdateReq", [
            { no: 13, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<CheckUgcUpdateReq>): CheckUgcUpdateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckUgcUpdateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckUgcUpdateReq): CheckUgcUpdateReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.UgcType ugc_type */ 13:
                    message.ugcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckUgcUpdateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.UgcType ugc_type = 13; */
        if (message.ugcType !== undefined)
            writer.tag(13, WireType.Varint).int32(message.ugcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckUgcUpdateReq
 */
export const CheckUgcUpdateReq = new CheckUgcUpdateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckUgcUpdateRsp$Type extends MessageType<CheckUgcUpdateRsp> {
    constructor() {
        super("com.midnights.game.CheckUgcUpdateRsp", [
            { no: 15, name: "update_ugc_guid_list", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 12, name: "ugc_type", kind: "enum", opt: true, T: () => ["com.midnights.game.UgcType", UgcType, "UGC_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<CheckUgcUpdateRsp>): CheckUgcUpdateRsp {
        const message = { updateUgcGuidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckUgcUpdateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckUgcUpdateRsp): CheckUgcUpdateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint64 update_ugc_guid_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.updateUgcGuidList.push(reader.uint64().toBigInt());
                    else
                        message.updateUgcGuidList.push(reader.uint64().toBigInt());
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.UgcType ugc_type */ 12:
                    message.ugcType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckUgcUpdateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint64 update_ugc_guid_list = 15; */
        for (let i = 0; i < message.updateUgcGuidList.length; i++)
            writer.tag(15, WireType.Varint).uint64(message.updateUgcGuidList[i]);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.UgcType ugc_type = 12; */
        if (message.ugcType !== undefined)
            writer.tag(12, WireType.Varint).int32(message.ugcType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckUgcUpdateRsp
 */
export const CheckUgcUpdateRsp = new CheckUgcUpdateRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class UgcNotify$Type extends MessageType<UgcNotify> {
    constructor() {
        super("com.midnights.game.UgcNotify", [
            { no: 12, name: "is_ugc_publish_ban", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "is_ugc_publish_feature_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "is_ugc_feature_closed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<UgcNotify>): UgcNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<UgcNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: UgcNotify): UgcNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_ugc_publish_ban */ 12:
                    message.isUgcPublishBan = reader.bool();
                    break;
                case /* optional bool is_ugc_publish_feature_closed */ 8:
                    message.isUgcPublishFeatureClosed = reader.bool();
                    break;
                case /* optional bool is_ugc_feature_closed */ 15:
                    message.isUgcFeatureClosed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: UgcNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_ugc_publish_ban = 12; */
        if (message.isUgcPublishBan !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isUgcPublishBan);
        /* optional bool is_ugc_publish_feature_closed = 8; */
        if (message.isUgcPublishFeatureClosed !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isUgcPublishFeatureClosed);
        /* optional bool is_ugc_feature_closed = 15; */
        if (message.isUgcFeatureClosed !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isUgcFeatureClosed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.UgcNotify
 */
export const UgcNotify = new UgcNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckUgcStateReq$Type extends MessageType<CheckUgcStateReq> {
    constructor() {
        super("com.midnights.game.CheckUgcStateReq", []);
    }
    create(value?: PartialMessage<CheckUgcStateReq>): CheckUgcStateReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckUgcStateReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckUgcStateReq): CheckUgcStateReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CheckUgcStateReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckUgcStateReq
 */
export const CheckUgcStateReq = new CheckUgcStateReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckUgcStateRsp$Type extends MessageType<CheckUgcStateRsp> {
    constructor() {
        super("com.midnights.game.CheckUgcStateRsp", [
            { no: 7, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CheckUgcStateRsp>): CheckUgcStateRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckUgcStateRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckUgcStateRsp): CheckUgcStateRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 7:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckUgcStateRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 7; */
        if (message.retcode !== undefined)
            writer.tag(7, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.CheckUgcStateRsp
 */
export const CheckUgcStateRsp = new CheckUgcStateRsp$Type();
