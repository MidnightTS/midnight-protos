/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SummerTimeFloatSignalPositionNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class SummerTimeFloatSignalPositionNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        position?: dependency_1.Vector;
        is_transfer_anchor?: boolean;
        float_signal_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("position" in data && data.position != undefined) {
                this.position = data.position;
            }
            if ("is_transfer_anchor" in data && data.is_transfer_anchor != undefined) {
                this.is_transfer_anchor = data.is_transfer_anchor;
            }
            if ("float_signal_id" in data && data.float_signal_id != undefined) {
                this.float_signal_id = data.float_signal_id;
            }
        }
    }
    get position() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 1) as dependency_1.Vector;
    }
    set position(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_position() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get is_transfer_anchor() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_transfer_anchor(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get float_signal_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set float_signal_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    static fromObject(data: {
        position?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        is_transfer_anchor?: boolean;
        float_signal_id?: number;
    }): SummerTimeFloatSignalPositionNotify {
        const message = new SummerTimeFloatSignalPositionNotify({});
        if (data.position != null) {
            message.position = dependency_1.Vector.fromObject(data.position);
        }
        if (data.is_transfer_anchor != null) {
            message.is_transfer_anchor = data.is_transfer_anchor;
        }
        if (data.float_signal_id != null) {
            message.float_signal_id = data.float_signal_id;
        }
        return message;
    }
    toObject() {
        const data: {
            position?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            is_transfer_anchor?: boolean;
            float_signal_id?: number;
        } = {};
        if (this.position != null) {
            data.position = this.position.toObject();
        }
        if (this.is_transfer_anchor != null) {
            data.is_transfer_anchor = this.is_transfer_anchor;
        }
        if (this.float_signal_id != null) {
            data.float_signal_id = this.float_signal_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_position)
            writer.writeMessage(1, this.position, () => this.position.serialize(writer));
        if (this.is_transfer_anchor != false)
            writer.writeBool(5, this.is_transfer_anchor);
        if (this.float_signal_id != 0)
            writer.writeUint32(7, this.float_signal_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SummerTimeFloatSignalPositionNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SummerTimeFloatSignalPositionNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.position, () => message.position = dependency_1.Vector.deserialize(reader));
                    break;
                case 5:
                    message.is_transfer_anchor = reader.readBool();
                    break;
                case 7:
                    message.float_signal_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SummerTimeFloatSignalPositionNotify {
        return SummerTimeFloatSignalPositionNotify.deserialize(bytes);
    }
}
