"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SceneMonsterInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneMonsterInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneMonsterInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./FishtankFishInfo");
const dependency_2 = require("./MonsterBornType");
const dependency_3 = require("./MonsterRoute");
const dependency_4 = require("./SceneFishInfo");
const dependency_5 = require("./SceneWeaponInfo");
const pb_1 = require("google-protobuf");
class SceneMonsterInfo extends pb_1.Message {
    constructor(data) {
        super();
        _SceneMonsterInfo_one_of_decls.set(this, [[50, 51]]);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], __classPrivateFieldGet(this, _SceneMonsterInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("monster_id" in data && data.monster_id != undefined) {
                this.monster_id = data.monster_id;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("weapon_list" in data && data.weapon_list != undefined) {
                this.weapon_list = data.weapon_list;
            }
            if ("authority_peer_id" in data && data.authority_peer_id != undefined) {
                this.authority_peer_id = data.authority_peer_id;
            }
            if ("affix_list" in data && data.affix_list != undefined) {
                this.affix_list = data.affix_list;
            }
            if ("is_elite" in data && data.is_elite != undefined) {
                this.is_elite = data.is_elite;
            }
            if ("owner_entity_id" in data && data.owner_entity_id != undefined) {
                this.owner_entity_id = data.owner_entity_id;
            }
            if ("summoned_tag" in data && data.summoned_tag != undefined) {
                this.summoned_tag = data.summoned_tag;
            }
            if ("summon_tag_map" in data && data.summon_tag_map != undefined) {
                this.summon_tag_map = data.summon_tag_map;
            }
            if ("pose_id" in data && data.pose_id != undefined) {
                this.pose_id = data.pose_id;
            }
            if ("born_type" in data && data.born_type != undefined) {
                this.born_type = data.born_type;
            }
            if ("block_id" in data && data.block_id != undefined) {
                this.block_id = data.block_id;
            }
            if ("mark_flag" in data && data.mark_flag != undefined) {
                this.mark_flag = data.mark_flag;
            }
            if ("title_id" in data && data.title_id != undefined) {
                this.title_id = data.title_id;
            }
            if ("special_name_id" in data && data.special_name_id != undefined) {
                this.special_name_id = data.special_name_id;
            }
            if ("attack_target_id" in data && data.attack_target_id != undefined) {
                this.attack_target_id = data.attack_target_id;
            }
            if ("monster_route" in data && data.monster_route != undefined) {
                this.monster_route = data.monster_route;
            }
            if ("ai_config_id" in data && data.ai_config_id != undefined) {
                this.ai_config_id = data.ai_config_id;
            }
            if ("level_route_id" in data && data.level_route_id != undefined) {
                this.level_route_id = data.level_route_id;
            }
            if ("init_pose_id" in data && data.init_pose_id != undefined) {
                this.init_pose_id = data.init_pose_id;
            }
            if ("Unk2800_JEGLENPDPNI" in data && data.Unk2800_JEGLENPDPNI != undefined) {
                this.Unk2800_JEGLENPDPNI = data.Unk2800_JEGLENPDPNI;
            }
            if ("Unk3000_CCKJDCBDEKD" in data && data.Unk3000_CCKJDCBDEKD != undefined) {
                this.Unk3000_CCKJDCBDEKD = data.Unk3000_CCKJDCBDEKD;
            }
            if ("fish_info" in data && data.fish_info != undefined) {
                this.fish_info = data.fish_info;
            }
            if ("fishtank_fish_info" in data && data.fishtank_fish_info != undefined) {
                this.fishtank_fish_info = data.fishtank_fish_info;
            }
        }
        if (!this.summon_tag_map)
            this.summon_tag_map = new Map();
    }
    get monster_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set monster_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set group_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set config_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get weapon_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_5.SceneWeaponInfo, 4);
    }
    set weapon_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 4, value);
    }
    get authority_peer_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set authority_peer_id(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get affix_list() {
        return pb_1.Message.getFieldWithDefault(this, 6, []);
    }
    set affix_list(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_elite() {
        return pb_1.Message.getFieldWithDefault(this, 7, false);
    }
    set is_elite(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get owner_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0);
    }
    set owner_entity_id(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get summoned_tag() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0);
    }
    set summoned_tag(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get summon_tag_map() {
        return pb_1.Message.getField(this, 10);
    }
    set summon_tag_map(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get pose_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0);
    }
    set pose_id(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get born_type() {
        return pb_1.Message.getFieldWithDefault(this, 12, dependency_2.MonsterBornType.MONSTER_BORN_TYPE_NONE);
    }
    set born_type(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get block_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0);
    }
    set block_id(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get mark_flag() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set mark_flag(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get title_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0);
    }
    set title_id(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get special_name_id() {
        return pb_1.Message.getFieldWithDefault(this, 16, 0);
    }
    set special_name_id(value) {
        pb_1.Message.setField(this, 16, value);
    }
    get attack_target_id() {
        return pb_1.Message.getFieldWithDefault(this, 17, 0);
    }
    set attack_target_id(value) {
        pb_1.Message.setField(this, 17, value);
    }
    get monster_route() {
        return pb_1.Message.getWrapperField(this, dependency_3.MonsterRoute, 18);
    }
    set monster_route(value) {
        pb_1.Message.setWrapperField(this, 18, value);
    }
    get has_monster_route() {
        return pb_1.Message.getField(this, 18) != null;
    }
    get ai_config_id() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0);
    }
    set ai_config_id(value) {
        pb_1.Message.setField(this, 19, value);
    }
    get level_route_id() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0);
    }
    set level_route_id(value) {
        pb_1.Message.setField(this, 20, value);
    }
    get init_pose_id() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0);
    }
    set init_pose_id(value) {
        pb_1.Message.setField(this, 21, value);
    }
    get Unk2800_JEGLENPDPNI() {
        return pb_1.Message.getFieldWithDefault(this, 22, false);
    }
    set Unk2800_JEGLENPDPNI(value) {
        pb_1.Message.setField(this, 22, value);
    }
    get Unk3000_CCKJDCBDEKD() {
        return pb_1.Message.getFieldWithDefault(this, 23, 0);
    }
    set Unk3000_CCKJDCBDEKD(value) {
        pb_1.Message.setField(this, 23, value);
    }
    get fish_info() {
        return pb_1.Message.getWrapperField(this, dependency_4.SceneFishInfo, 50);
    }
    set fish_info(value) {
        pb_1.Message.setOneofWrapperField(this, 50, __classPrivateFieldGet(this, _SceneMonsterInfo_one_of_decls, "f")[0], value);
    }
    get has_fish_info() {
        return pb_1.Message.getField(this, 50) != null;
    }
    get fishtank_fish_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.FishtankFishInfo, 51);
    }
    set fishtank_fish_info(value) {
        pb_1.Message.setOneofWrapperField(this, 51, __classPrivateFieldGet(this, _SceneMonsterInfo_one_of_decls, "f")[0], value);
    }
    get has_fishtank_fish_info() {
        return pb_1.Message.getField(this, 51) != null;
    }
    get content() {
        const cases = {
            0: "none",
            50: "fish_info",
            51: "fishtank_fish_info"
        };
        return cases[pb_1.Message.computeOneofCase(this, [50, 51])];
    }
    static fromObject(data) {
        const message = new SceneMonsterInfo({});
        if (data.monster_id != null) {
            message.monster_id = data.monster_id;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.weapon_list != null) {
            message.weapon_list = data.weapon_list.map(item => dependency_5.SceneWeaponInfo.fromObject(item));
        }
        if (data.authority_peer_id != null) {
            message.authority_peer_id = data.authority_peer_id;
        }
        if (data.affix_list != null) {
            message.affix_list = data.affix_list;
        }
        if (data.is_elite != null) {
            message.is_elite = data.is_elite;
        }
        if (data.owner_entity_id != null) {
            message.owner_entity_id = data.owner_entity_id;
        }
        if (data.summoned_tag != null) {
            message.summoned_tag = data.summoned_tag;
        }
        if (typeof data.summon_tag_map == "object") {
            message.summon_tag_map = new Map(Object.entries(data.summon_tag_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.pose_id != null) {
            message.pose_id = data.pose_id;
        }
        if (data.born_type != null) {
            message.born_type = data.born_type;
        }
        if (data.block_id != null) {
            message.block_id = data.block_id;
        }
        if (data.mark_flag != null) {
            message.mark_flag = data.mark_flag;
        }
        if (data.title_id != null) {
            message.title_id = data.title_id;
        }
        if (data.special_name_id != null) {
            message.special_name_id = data.special_name_id;
        }
        if (data.attack_target_id != null) {
            message.attack_target_id = data.attack_target_id;
        }
        if (data.monster_route != null) {
            message.monster_route = dependency_3.MonsterRoute.fromObject(data.monster_route);
        }
        if (data.ai_config_id != null) {
            message.ai_config_id = data.ai_config_id;
        }
        if (data.level_route_id != null) {
            message.level_route_id = data.level_route_id;
        }
        if (data.init_pose_id != null) {
            message.init_pose_id = data.init_pose_id;
        }
        if (data.Unk2800_JEGLENPDPNI != null) {
            message.Unk2800_JEGLENPDPNI = data.Unk2800_JEGLENPDPNI;
        }
        if (data.Unk3000_CCKJDCBDEKD != null) {
            message.Unk3000_CCKJDCBDEKD = data.Unk3000_CCKJDCBDEKD;
        }
        if (data.fish_info != null) {
            message.fish_info = dependency_4.SceneFishInfo.fromObject(data.fish_info);
        }
        if (data.fishtank_fish_info != null) {
            message.fishtank_fish_info = dependency_1.FishtankFishInfo.fromObject(data.fishtank_fish_info);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.monster_id != null) {
            data.monster_id = this.monster_id;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.weapon_list != null) {
            data.weapon_list = this.weapon_list.map((item) => item.toObject());
        }
        if (this.authority_peer_id != null) {
            data.authority_peer_id = this.authority_peer_id;
        }
        if (this.affix_list != null) {
            data.affix_list = this.affix_list;
        }
        if (this.is_elite != null) {
            data.is_elite = this.is_elite;
        }
        if (this.owner_entity_id != null) {
            data.owner_entity_id = this.owner_entity_id;
        }
        if (this.summoned_tag != null) {
            data.summoned_tag = this.summoned_tag;
        }
        if (this.summon_tag_map.size > 0) {
            data.summon_tag_map = (Object.fromEntries)(this.summon_tag_map);
        }
        if (this.pose_id != null) {
            data.pose_id = this.pose_id;
        }
        if (this.born_type != null) {
            data.born_type = this.born_type;
        }
        if (this.block_id != null) {
            data.block_id = this.block_id;
        }
        if (this.mark_flag != null) {
            data.mark_flag = this.mark_flag;
        }
        if (this.title_id != null) {
            data.title_id = this.title_id;
        }
        if (this.special_name_id != null) {
            data.special_name_id = this.special_name_id;
        }
        if (this.attack_target_id != null) {
            data.attack_target_id = this.attack_target_id;
        }
        if (this.monster_route != null) {
            data.monster_route = this.monster_route.toObject();
        }
        if (this.ai_config_id != null) {
            data.ai_config_id = this.ai_config_id;
        }
        if (this.level_route_id != null) {
            data.level_route_id = this.level_route_id;
        }
        if (this.init_pose_id != null) {
            data.init_pose_id = this.init_pose_id;
        }
        if (this.Unk2800_JEGLENPDPNI != null) {
            data.Unk2800_JEGLENPDPNI = this.Unk2800_JEGLENPDPNI;
        }
        if (this.Unk3000_CCKJDCBDEKD != null) {
            data.Unk3000_CCKJDCBDEKD = this.Unk3000_CCKJDCBDEKD;
        }
        if (this.fish_info != null) {
            data.fish_info = this.fish_info.toObject();
        }
        if (this.fishtank_fish_info != null) {
            data.fishtank_fish_info = this.fishtank_fish_info.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.monster_id != 0)
            writer.writeUint32(1, this.monster_id);
        if (this.group_id != 0)
            writer.writeUint32(2, this.group_id);
        if (this.config_id != 0)
            writer.writeUint32(3, this.config_id);
        if (this.weapon_list.length)
            writer.writeRepeatedMessage(4, this.weapon_list, (item) => item.serialize(writer));
        if (this.authority_peer_id != 0)
            writer.writeUint32(5, this.authority_peer_id);
        if (this.affix_list.length)
            writer.writePackedUint32(6, this.affix_list);
        if (this.is_elite != false)
            writer.writeBool(7, this.is_elite);
        if (this.owner_entity_id != 0)
            writer.writeUint32(8, this.owner_entity_id);
        if (this.summoned_tag != 0)
            writer.writeUint32(9, this.summoned_tag);
        for (const [key, value] of this.summon_tag_map) {
            writer.writeMessage(10, this.summon_tag_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.pose_id != 0)
            writer.writeUint32(11, this.pose_id);
        if (this.born_type != dependency_2.MonsterBornType.MONSTER_BORN_TYPE_NONE)
            writer.writeEnum(12, this.born_type);
        if (this.block_id != 0)
            writer.writeUint32(13, this.block_id);
        if (this.mark_flag != 0)
            writer.writeUint32(14, this.mark_flag);
        if (this.title_id != 0)
            writer.writeUint32(15, this.title_id);
        if (this.special_name_id != 0)
            writer.writeUint32(16, this.special_name_id);
        if (this.attack_target_id != 0)
            writer.writeUint32(17, this.attack_target_id);
        if (this.has_monster_route)
            writer.writeMessage(18, this.monster_route, () => this.monster_route.serialize(writer));
        if (this.ai_config_id != 0)
            writer.writeUint32(19, this.ai_config_id);
        if (this.level_route_id != 0)
            writer.writeUint32(20, this.level_route_id);
        if (this.init_pose_id != 0)
            writer.writeUint32(21, this.init_pose_id);
        if (this.Unk2800_JEGLENPDPNI != false)
            writer.writeBool(22, this.Unk2800_JEGLENPDPNI);
        if (this.Unk3000_CCKJDCBDEKD != 0)
            writer.writeUint32(23, this.Unk3000_CCKJDCBDEKD);
        if (this.has_fish_info)
            writer.writeMessage(50, this.fish_info, () => this.fish_info.serialize(writer));
        if (this.has_fishtank_fish_info)
            writer.writeMessage(51, this.fishtank_fish_info, () => this.fishtank_fish_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneMonsterInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.monster_id = reader.readUint32();
                    break;
                case 2:
                    message.group_id = reader.readUint32();
                    break;
                case 3:
                    message.config_id = reader.readUint32();
                    break;
                case 4:
                    reader.readMessage(message.weapon_list, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_5.SceneWeaponInfo.deserialize(reader), dependency_5.SceneWeaponInfo));
                    break;
                case 5:
                    message.authority_peer_id = reader.readUint32();
                    break;
                case 6:
                    message.affix_list = reader.readPackedUint32();
                    break;
                case 7:
                    message.is_elite = reader.readBool();
                    break;
                case 8:
                    message.owner_entity_id = reader.readUint32();
                    break;
                case 9:
                    message.summoned_tag = reader.readUint32();
                    break;
                case 10:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.summon_tag_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 11:
                    message.pose_id = reader.readUint32();
                    break;
                case 12:
                    message.born_type = reader.readEnum();
                    break;
                case 13:
                    message.block_id = reader.readUint32();
                    break;
                case 14:
                    message.mark_flag = reader.readUint32();
                    break;
                case 15:
                    message.title_id = reader.readUint32();
                    break;
                case 16:
                    message.special_name_id = reader.readUint32();
                    break;
                case 17:
                    message.attack_target_id = reader.readUint32();
                    break;
                case 18:
                    reader.readMessage(message.monster_route, () => message.monster_route = dependency_3.MonsterRoute.deserialize(reader));
                    break;
                case 19:
                    message.ai_config_id = reader.readUint32();
                    break;
                case 20:
                    message.level_route_id = reader.readUint32();
                    break;
                case 21:
                    message.init_pose_id = reader.readUint32();
                    break;
                case 22:
                    message.Unk2800_JEGLENPDPNI = reader.readBool();
                    break;
                case 23:
                    message.Unk3000_CCKJDCBDEKD = reader.readUint32();
                    break;
                case 50:
                    reader.readMessage(message.fish_info, () => message.fish_info = dependency_4.SceneFishInfo.deserialize(reader));
                    break;
                case 51:
                    reader.readMessage(message.fishtank_fish_info, () => message.fishtank_fish_info = dependency_1.FishtankFishInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SceneMonsterInfo.deserialize(bytes);
    }
}
exports.SceneMonsterInfo = SceneMonsterInfo;
_SceneMonsterInfo_one_of_decls = new WeakMap();
