// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_gallery.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ExhibitionDisplayInfo } from "./define";
import { PlaceInfo } from "./define";
import { OnlinePlayerInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.GalleryFlowerStartParam
 */
export interface GalleryFlowerStartParam {
    /**
     * @generated from protobuf field: optional uint32 target_score = 5;
     */
    targetScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GalleryStartNotify
 */
export interface GalleryStartNotify {
    /**
     * @generated from protobuf field: optional uint32 end_time = 6;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 player_count = 11;
     */
    playerCount?: number;
    /**
     * @generated from protobuf field: optional uint32 owner_uid = 9;
     */
    ownerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 5;
     */
    startTime?: number;
    /**
     * @generated from protobuf oneof: detail
     */
    detail: {
        oneofKind: "flowerStartParam";
        /**
         * @generated from protobuf field: com.midnights.game.GalleryFlowerStartParam flower_start_param = 15;
         */
        flowerStartParam: GalleryFlowerStartParam;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryStartNotify.CmdId
 */
export enum GalleryStartNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5572;
     */
    CMD_ID = 5572,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryBalloonShootNotify
 */
export interface GalleryBalloonShootNotify {
    /**
     * @generated from protobuf field: optional uint32 trigger_entity_id = 12;
     */
    triggerEntityId?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 5;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 combo = 14;
     */
    combo?: number;
    /**
     * @generated from protobuf field: optional uint64 combo_disable_time = 6;
     */
    comboDisableTime?: bigint;
    /**
     * @generated from protobuf field: optional int32 add_score = 11;
     */
    addScore?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_score = 13;
     */
    curScore?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryBalloonShootNotify.CmdId
 */
export enum GalleryBalloonShootNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5598;
     */
    CMD_ID = 5598,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryBalloonScoreNotify
 */
export interface GalleryBalloonScoreNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 9;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> uid_score_map = 7;
     */
    uidScoreMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryBalloonScoreNotify.CmdId
 */
export enum GalleryBalloonScoreNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5512;
     */
    CMD_ID = 5512,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BalloonSettleInfo
 */
export interface BalloonSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 uid = 3;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 shoot_count = 12;
     */
    shootCount?: number;
    /**
     * @generated from protobuf field: optional uint32 max_combo = 9;
     */
    maxCombo?: number;
    /**
     * @generated from protobuf field: optional uint32 final_score = 7;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 2;
     */
    playerInfo?: OnlinePlayerInfo;
}
/**
 * @generated from protobuf message com.midnights.game.GalleryStopNotify
 */
export interface GalleryStopNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 8;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryStopNotify.CmdId
 */
export enum GalleryStopNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5535;
     */
    CMD_ID = 5535,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FallSettleInfo
 */
export interface FallSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 catch_count = 15;
     */
    catchCount?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 13;
     */
    playerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: optional uint32 uid = 14;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> flower_ring_catch_count_map = 3;
     */
    flowerRingCatchCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 remain_time = 10;
     */
    remainTime?: number;
    /**
     * @generated from protobuf field: optional uint32 final_score = 1;
     */
    finalScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GalleryFallCatchNotify
 */
export interface GalleryFallCatchNotify {
    /**
     * @generated from protobuf field: optional uint32 cur_score = 6;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional uint32 time_cost = 11;
     */
    timeCost?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> ball_catch_count_map = 15;
     */
    ballCatchCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 add_score = 1;
     */
    addScore?: number;
    /**
     * @generated from protobuf field: optional bool is_ground = 12;
     */
    isGround?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 10;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryFallCatchNotify.CmdId
 */
export enum GalleryFallCatchNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5507;
     */
    CMD_ID = 5507,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FallPlayerBrief
 */
export interface FallPlayerBrief {
    /**
     * @generated from protobuf field: optional uint32 uid = 13;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional bool is_ground = 5;
     */
    isGround?: boolean;
    /**
     * @generated from protobuf field: optional uint32 score = 10;
     */
    score?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GalleryFallScoreNotify
 */
export interface GalleryFallScoreNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 7;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FallPlayerBrief> uid_brief_map = 1;
     */
    uidBriefMap: {
        [key: number]: FallPlayerBrief;
    };
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryFallScoreNotify.CmdId
 */
export enum GalleryFallScoreNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5521;
     */
    CMD_ID = 5521,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BalloonPlayerInfo
 */
export interface BalloonPlayerInfo {
    /**
     * @generated from protobuf field: optional uint32 uid = 15;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_score = 2;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional uint32 combo_disable_time = 14;
     */
    comboDisableTime?: number;
    /**
     * @generated from protobuf field: optional uint32 combo = 11;
     */
    combo?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FallPlayerInfo
 */
export interface FallPlayerInfo {
    /**
     * @generated from protobuf field: optional uint32 time_cost = 11;
     */
    timeCost?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 9;
     */
    uid?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> ball_catch_count_map = 6;
     */
    ballCatchCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 cur_score = 7;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional bool is_ground = 15;
     */
    isGround?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryBalloonInfo
 */
export interface SceneGalleryBalloonInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.BalloonPlayerInfo> scene_player_balloon_info_map = 14;
     */
    scenePlayerBalloonInfoMap: {
        [key: number]: BalloonPlayerInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 end_time = 5;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryFallInfo
 */
export interface SceneGalleryFallInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FallPlayerInfo> scene_player_fall_info_map = 12;
     */
    scenePlayerFallInfoMap: {
        [key: number]: FallPlayerInfo;
    };
    /**
     * @generated from protobuf field: optional uint32 end_time = 2;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryFlowerInfo
 */
export interface SceneGalleryFlowerInfo {
    /**
     * @generated from protobuf field: optional uint32 end_time = 7;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 target_score = 13;
     */
    targetScore?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_score = 9;
     */
    curScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryBulletInfo
 */
export interface SceneGalleryBulletInfo {
    /**
     * @generated from protobuf field: optional uint32 end_time = 1;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> hit_count_map = 10;
     */
    hitCountMap: {
        [key: number]: number;
    };
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryBrokenFloorInfo
 */
export interface SceneGalleryBrokenFloorInfo {
    /**
     * @generated from protobuf field: map<uint32, uint32> fall_count_map = 3;
     */
    fallCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 end_time = 9;
     */
    endTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryHideAndSeekInfo
 */
export interface SceneGalleryHideAndSeekInfo {
    /**
     * @generated from protobuf field: repeated uint32 visible_uid_list = 13;
     */
    visibleUidList: number[];
    /**
     * @generated from protobuf field: repeated uint32 caught_uid_list = 4;
     */
    caughtUidList: number[];
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryBuoyantCombatInfo
 */
export interface SceneGalleryBuoyantCombatInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 6;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_special_monster_count = 1;
     */
    killSpecialMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_monster_count = 14;
     */
    killMonsterCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryProgressInfo
 */
export interface SceneGalleryProgressInfo {
    /**
     * @generated from protobuf field: repeated uint32 progress_stage_list = 8;
     */
    progressStageList: number[];
    /**
     * @generated from protobuf field: optional string key = 11;
     */
    key?: string;
    /**
     * @generated from protobuf field: optional uint32 progress = 5;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 ui_form = 12;
     */
    uiForm?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryBounceConjuringInfo
 */
export interface SceneGalleryBounceConjuringInfo {
    /**
     * @generated from protobuf field: optional uint32 total_destroyed_machine_count = 4;
     */
    totalDestroyedMachineCount?: number;
    /**
     * @generated from protobuf field: optional uint32 total_score = 6;
     */
    totalScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryHandballInfo
 */
export interface SceneGalleryHandballInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlaceInfo ball_place_info = 9;
     */
    ballPlaceInfo?: PlaceInfo;
    /**
     * @generated from protobuf field: optional bool is_have_ball = 15;
     */
    isHaveBall?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGallerySumoInfo
 */
export interface SceneGallerySumoInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 2;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_normal_mosnter_num = 15;
     */
    killNormalMosnterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_elite_monster_num = 14;
     */
    killEliteMonsterNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGallerySalvagePreventInfo
 */
export interface SceneGallerySalvagePreventInfo {
    /**
     * @generated from protobuf field: optional uint32 monster_count = 7;
     */
    monsterCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGallerySalvageEscortInfo
 */
export interface SceneGallerySalvageEscortInfo {
    /**
     * @generated from protobuf field: optional uint32 max_box_count = 14;
     */
    maxBoxCount?: number;
    /**
     * @generated from protobuf field: optional uint32 max_monster_count = 3;
     */
    maxMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 box_count = 7;
     */
    boxCount?: number;
    /**
     * @generated from protobuf field: optional uint32 monster_count = 11;
     */
    monsterCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryCrystalLinkInfo
 */
export interface SceneGalleryCrystalLinkInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 10;
     */
    score?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryIrodoriMasterInfo
 */
export interface SceneGalleryIrodoriMasterInfo {
    /**
     * @generated from protobuf field: optional uint32 level_id = 8;
     */
    levelId?: number;
    /**
     * @generated from protobuf field: optional uint32 difficulty = 1;
     */
    difficulty?: number;
    /**
     * @generated from protobuf field: optional bool is_cg_viewed = 5;
     */
    isCgViewed?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryHomeBalloonInfo
 */
export interface SceneGalleryHomeBalloonInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 7;
     */
    score?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo
 */
export interface SceneGalleryLuminanceStoneChallengeInfo {
    /**
     * @generated from protobuf field: optional uint32 kill_monster_count = 5;
     */
    killMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 3;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 clean_mud_count = 2;
     */
    cleanMudCount?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_special_monster_count = 6;
     */
    killSpecialMonsterCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryHomeSeekFurnitureInfo
 */
export interface SceneGalleryHomeSeekFurnitureInfo {
    /**
     * @generated from protobuf field: optional uint32 cur_tide_left_num = 6;
     */
    curTideLeftNum?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> player_score_map = 8;
     */
    playerScoreMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 cur_tide_duration_time = 12;
     */
    curTideDurationTime?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_tide_total_num = 9;
     */
    curTideTotalNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryIslandPartyDownHillInfo
 */
export interface SceneGalleryIslandPartyDownHillInfo {
    /**
     * @generated from protobuf field: optional uint32 total_kill_monster_count = 14;
     */
    totalKillMonsterCount?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStartSource start_source = 15;
     */
    startSource?: GalleryStartSource;
    /**
     * @generated from protobuf field: optional uint32 max_kill_monster_count = 5;
     */
    maxKillMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 13;
     */
    coin?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGallerySummerTimeV2BoatInfo
 */
export interface SceneGallerySummerTimeV2BoatInfo {
    /**
     * @generated from protobuf field: optional uint32 param1 = 15;
     */
    param1?: number;
    /**
     * @generated from protobuf field: optional uint32 param3 = 3;
     */
    param3?: number;
    /**
     * @generated from protobuf field: optional uint32 used_time = 11;
     */
    usedTime?: number;
    /**
     * @generated from protobuf field: optional uint32 param2 = 7;
     */
    param2?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryIslandPartyRaftInfo
 */
export interface SceneGalleryIslandPartyRaftInfo {
    /**
     * @generated from protobuf field: optional uint32 coin = 6;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStartSource start_source = 7;
     */
    startSource?: GalleryStartSource;
    /**
     * @generated from protobuf field: optional uint32 component = 1;
     */
    component?: number;
    /**
     * @generated from protobuf field: optional uint32 fuel = 15;
     */
    fuel?: number;
    /**
     * @generated from protobuf field: optional uint32 point_id = 12;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 raft_entity_id = 4;
     */
    raftEntityId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryIslandPartySailInfo
 */
export interface SceneGalleryIslandPartySailInfo {
    /**
     * @generated from protobuf field: optional uint32 max_clean_progress = 14;
     */
    maxCleanProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 clean_progress = 10;
     */
    cleanProgress?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStartSource start_source = 1;
     */
    startSource?: GalleryStartSource;
    /**
     * @generated from protobuf field: optional uint32 kill_progress = 11;
     */
    killProgress?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 15;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.IslandPartySailStage stage = 12;
     */
    stage?: IslandPartySailStage;
    /**
     * @generated from protobuf field: optional uint32 max_kill_progress = 8;
     */
    maxKillProgress?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryInstableSprayBuffInfo
 */
export interface SceneGalleryInstableSprayBuffInfo {
    /**
     * @generated from protobuf field: optional uint32 buff_id = 6;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional uint64 buff_end_time = 9;
     */
    buffEndTime?: bigint;
    /**
     * @generated from protobuf field: optional uint64 buff_max_time = 4;
     */
    buffMaxTime?: bigint;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryInstaleSprayInfo
 */
export interface SceneGalleryInstaleSprayInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 5;
     */
    score?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneGalleryInstableSprayBuffInfo buff_info_list = 12;
     */
    buffInfoList: SceneGalleryInstableSprayBuffInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryTreasureSeelieInfo
 */
export interface SceneGalleryTreasureSeelieInfo {
    /**
     * @generated from protobuf field: optional uint32 progress = 15;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 goal = 14;
     */
    goal?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryWindFieldInfo
 */
export interface SceneGalleryWindFieldInfo {
    /**
     * @generated from protobuf field: optional uint32 killed_monster_num = 5;
     */
    killedMonsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_max_count = 12;
     */
    challengeBallMaxCount?: number;
    /**
     * @generated from protobuf field: optional uint32 show_id = 15;
     */
    showId?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_total_time = 4;
     */
    challengeTotalTime?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_cur_count = 9;
     */
    challengeBallCurCount?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_num = 1;
     */
    coinNum?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_timestamp = 13;
     */
    challengeTimestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 element_ball_num = 10;
     */
    elementBallNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryFungusFighterTrainingInfo
 */
export interface SceneGalleryFungusFighterTrainingInfo {
    /**
     * @generated from protobuf field: optional uint32 max_monster_count = 4;
     */
    maxMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 killed_monster_count = 9;
     */
    killedMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_start_time = 13;
     */
    buffStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_id = 1;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional uint32 max_skill_count = 10;
     */
    maxSkillCount?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_last_time = 14;
     */
    buffLastTime?: number;
    /**
     * @generated from protobuf field: optional uint32 rest_skill_count = 5;
     */
    restSkillCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryFungusFighterCaptureInfo
 */
export interface SceneGalleryFungusFighterCaptureInfo {
    /**
     * @generated from protobuf field: optional bool is_hide_progress = 13;
     */
    isHideProgress?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryEffigyChallengeV2Info
 */
export interface SceneGalleryEffigyChallengeV2Info {
    /**
     * @generated from protobuf field: optional uint32 killed_monster_cnt = 10;
     */
    killedMonsterCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 total_target_kill_cnt = 15;
     */
    totalTargetKillCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 scene_start_time = 14;
     */
    sceneStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 t_remain_use_time = 6;
     */
    tRemainUseTime?: number;
    /**
     * @generated from protobuf field: optional uint32 boss_violent_level = 9;
     */
    bossViolentLevel?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryCharAmusementInfo
 */
export interface SceneGalleryCharAmusementInfo {
    /**
     * @generated from protobuf field: optional bool is_last_level = 2;
     */
    isLastLevel?: boolean;
    /**
     * @generated from protobuf field: optional uint32 max_score = 9;
     */
    maxScore?: number;
    /**
     * @generated from protobuf field: optional uint32 cur_score = 14;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional bool is_finish = 10;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional bool is_success = 1;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryInfo
 */
export interface SceneGalleryInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStageType stage = 5;
     */
    stage?: GalleryStageType;
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneGalleryProgressInfo progress_info_list = 4;
     */
    progressInfoList: SceneGalleryProgressInfo[];
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 2;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 start_time = 3;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 end_time = 11;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional uint32 owner_uid = 9;
     */
    ownerUid?: number;
    /**
     * @generated from protobuf field: optional uint32 player_count = 1;
     */
    playerCount?: number;
    /**
     * @generated from protobuf field: optional uint32 pre_start_end_time = 15;
     */
    preStartEndTime?: number;
    /**
     * @generated from protobuf oneof: info
     */
    info: {
        oneofKind: "balloonInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryBalloonInfo balloon_info = 14;
         */
        balloonInfo: SceneGalleryBalloonInfo;
    } | {
        oneofKind: "fallInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryFallInfo fall_info = 7;
         */
        fallInfo: SceneGalleryFallInfo;
    } | {
        oneofKind: "flowerInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryFlowerInfo flower_info = 8;
         */
        flowerInfo: SceneGalleryFlowerInfo;
    } | {
        oneofKind: "bulletInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryBulletInfo bullet_info = 13;
         */
        bulletInfo: SceneGalleryBulletInfo;
    } | {
        oneofKind: "brokenFloorInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryBrokenFloorInfo broken_floor_info = 10;
         */
        brokenFloorInfo: SceneGalleryBrokenFloorInfo;
    } | {
        oneofKind: "hideAndSeekInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6;
         */
        hideAndSeekInfo: SceneGalleryHideAndSeekInfo;
    } | {
        oneofKind: "buoyantCombatInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384;
         */
        buoyantCombatInfo: SceneGalleryBuoyantCombatInfo;
    } | {
        oneofKind: "bounceConjuringInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708;
         */
        bounceConjuringInfo: SceneGalleryBounceConjuringInfo;
    } | {
        oneofKind: "handballInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryHandballInfo handball_info = 1997;
         */
        handballInfo: SceneGalleryHandballInfo;
    } | {
        oneofKind: "sumoInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGallerySumoInfo sumo_info = 811;
         */
        sumoInfo: SceneGallerySumoInfo;
    } | {
        oneofKind: "salvagePreventInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700;
         */
        salvagePreventInfo: SceneGallerySalvagePreventInfo;
    } | {
        oneofKind: "salvageEscortInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGallerySalvageEscortInfo salvage_escort_info = 759;
         */
        salvageEscortInfo: SceneGallerySalvageEscortInfo;
    } | {
        oneofKind: "homeBalloonInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryHomeBalloonInfo home_balloon_info = 1034;
         */
        homeBalloonInfo: SceneGalleryHomeBalloonInfo;
    } | {
        oneofKind: "crystalLinkInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryCrystalLinkInfo crystal_link_info = 2004;
         */
        crystalLinkInfo: SceneGalleryCrystalLinkInfo;
    } | {
        oneofKind: "irodoriMasterInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953;
         */
        irodoriMasterInfo: SceneGalleryIrodoriMasterInfo;
    } | {
        oneofKind: "luminanceStoneChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106;
         */
        luminanceStoneChallengeInfo: SceneGalleryLuminanceStoneChallengeInfo;
    } | {
        oneofKind: "homeSeekFurnitureInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456;
         */
        homeSeekFurnitureInfo: SceneGalleryHomeSeekFurnitureInfo;
    } | {
        oneofKind: "islandPartyDownHillInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462;
         */
        islandPartyDownHillInfo: SceneGalleryIslandPartyDownHillInfo;
    } | {
        oneofKind: "summerTimeV2BoatInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296;
         */
        summerTimeV2BoatInfo: SceneGallerySummerTimeV2BoatInfo;
    } | {
        oneofKind: "islandPartyRaftInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805;
         */
        islandPartyRaftInfo: SceneGalleryIslandPartyRaftInfo;
    } | {
        oneofKind: "islandPartySailInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133;
         */
        islandPartySailInfo: SceneGalleryIslandPartySailInfo;
    } | {
        oneofKind: "instableSprayInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryInstaleSprayInfo instable_spray_info = 1196;
         */
        instableSprayInfo: SceneGalleryInstaleSprayInfo;
    } | {
        oneofKind: "muqadasPotionInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865;
         */
        muqadasPotionInfo: SceneGalleryMuqadasPotionInfo;
    } | {
        oneofKind: "treasureSeelieInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525;
         */
        treasureSeelieInfo: SceneGalleryTreasureSeelieInfo;
    } | {
        oneofKind: "vintageHuntingInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254;
         */
        vintageHuntingInfo: SceneGalleryVintageHuntingInfo;
    } | {
        oneofKind: "windFieldInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryWindFieldInfo wind_field_info = 1080;
         */
        windFieldInfo: SceneGalleryWindFieldInfo;
    } | {
        oneofKind: "fungusFighterTrainingInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328;
         */
        fungusFighterTrainingInfo: SceneGalleryFungusFighterTrainingInfo;
    } | {
        oneofKind: "effigyChallengeInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882;
         */
        effigyChallengeInfo: SceneGalleryEffigyChallengeV2Info;
    } | {
        oneofKind: "fungusFighterCaptureInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422;
         */
        fungusFighterCaptureInfo: SceneGalleryFungusFighterCaptureInfo;
    } | {
        oneofKind: "charAmusementInfo";
        /**
         * @generated from protobuf field: com.midnights.game.SceneGalleryCharAmusementInfo char_amusement_info = 1086;
         */
        charAmusementInfo: SceneGalleryCharAmusementInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.GetAllSceneGalleryInfoReq
 */
export interface GetAllSceneGalleryInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetAllSceneGalleryInfoReq.CmdId
 */
export enum GetAllSceneGalleryInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5503;
     */
    CMD_ID = 5503,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetAllSceneGalleryInfoRsp
 */
export interface GetAllSceneGalleryInfoRsp {
    /**
     * @generated from protobuf field: repeated com.midnights.game.SceneGalleryInfo gallery_info_list = 12;
     */
    galleryInfoList: SceneGalleryInfo[];
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GetAllSceneGalleryInfoRsp.CmdId
 */
export enum GetAllSceneGalleryInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5590;
     */
    CMD_ID = 5590,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryFlowerCatchNotify
 */
export interface GalleryFlowerCatchNotify {
    /**
     * @generated from protobuf field: optional uint32 cur_score = 12;
     */
    curScore?: number;
    /**
     * @generated from protobuf field: optional uint32 add_score = 14;
     */
    addScore?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 5;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryFlowerCatchNotify.CmdId
 */
export enum GalleryFlowerCatchNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5573;
     */
    CMD_ID = 5573,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryPreStartNotify
 */
export interface GalleryPreStartNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 10;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 pre_start_end_time = 9;
     */
    preStartEndTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryPreStartNotify.CmdId
 */
export enum GalleryPreStartNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5599;
     */
    CMD_ID = 5599,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryBulletHitNotify
 */
export interface GalleryBulletHitNotify {
    /**
     * @generated from protobuf field: optional uint32 hit_count = 14;
     */
    hitCount?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 12;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryBulletHitNotify.CmdId
 */
export enum GalleryBulletHitNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5531;
     */
    CMD_ID = 5531,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryBrokenFloorFallNotify
 */
export interface GalleryBrokenFloorFallNotify {
    /**
     * @generated from protobuf field: optional uint32 fall_count = 3;
     */
    fallCount?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 5;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryBrokenFloorFallNotify.CmdId
 */
export enum GalleryBrokenFloorFallNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5575;
     */
    CMD_ID = 5575,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InterruptGalleryReq
 */
export interface InterruptGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InterruptGalleryReq.CmdId
 */
export enum InterruptGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5548;
     */
    CMD_ID = 5548,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.InterruptGalleryRsp
 */
export interface InterruptGalleryRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 9;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InterruptGalleryRsp.CmdId
 */
export enum InterruptGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5597;
     */
    CMD_ID = 5597,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryInfoNotify
 */
export interface SceneGalleryInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.SceneGalleryInfo gallery_info = 4;
     */
    galleryInfo?: SceneGalleryInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.SceneGalleryInfoNotify.CmdId
 */
export enum SceneGalleryInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5581;
     */
    CMD_ID = 5581,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.BuoyantCombatGallerySettleInfo
 */
export interface BuoyantCombatGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 gallery_level = 12;
     */
    galleryLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 final_score = 15;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_monster_count = 9;
     */
    killMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_target_count = 1;
     */
    killTargetCount?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_special_monster_count = 4;
     */
    killSpecialMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 2;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_multiple = 11;
     */
    galleryMultiple?: number;
}
/**
 * @generated from protobuf message com.midnights.game.BounceConjuringGallerySettleInfo
 */
export interface BounceConjuringGallerySettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 14;
     */
    playerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: optional uint32 destroyed_machine_count = 5;
     */
    destroyedMachineCount?: number;
    /**
     * @generated from protobuf field: optional uint32 fever_count = 6;
     */
    feverCount?: number;
    /**
     * @generated from protobuf field: optional uint32 normal_hit_count = 4;
     */
    normalHitCount?: number;
    /**
     * @generated from protobuf field: optional float damage = 11;
     */
    damage?: number;
    /**
     * @generated from protobuf field: map<uint32, uint32> gadget_count_map = 15;
     */
    gadgetCountMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: optional uint32 score = 12;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 perfect_hit_count = 8;
     */
    perfectHitCount?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExhibitionDisplayInfo card_list = 7;
     */
    cardList: ExhibitionDisplayInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.GalleryBounceConjuringHitNotify
 */
export interface GalleryBounceConjuringHitNotify {
    /**
     * @generated from protobuf field: optional uint32 add_score = 8;
     */
    addScore?: number;
    /**
     * @generated from protobuf field: optional bool is_perfect = 5;
     */
    isPerfect?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 10;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryBounceConjuringHitNotify.CmdId
 */
export enum GalleryBounceConjuringHitNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5505;
     */
    CMD_ID = 5505,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GallerySumoKillMonsterNotify
 */
export interface GallerySumoKillMonsterNotify {
    /**
     * @generated from protobuf field: optional uint32 kill_normal_mosnter_num = 4;
     */
    killNormalMosnterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 7;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_elite_monster_num = 14;
     */
    killEliteMonsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 11;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GallerySumoKillMonsterNotify.CmdId
 */
export enum GallerySumoKillMonsterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5582;
     */
    CMD_ID = 5582,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryCrystalLinkKillMonsterNotify
 */
export interface GalleryCrystalLinkKillMonsterNotify {
    /**
     * @generated from protobuf field: optional uint32 score = 7;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 9;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryCrystalLinkKillMonsterNotify.CmdId
 */
export enum GalleryCrystalLinkKillMonsterNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5547;
     */
    CMD_ID = 5547,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryCrystalLinkBuffInfoNotify
 */
export interface GalleryCrystalLinkBuffInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional bool is_buff_valid = 11;
     */
    isBuffValid?: boolean;
    /**
     * @generated from protobuf field: optional uint32 buff_id = 14;
     */
    buffId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryCrystalLinkBuffInfoNotify.CmdId
 */
export enum GalleryCrystalLinkBuffInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5539;
     */
    CMD_ID = 5539,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FishInfo
 */
export interface FishInfo {
    /**
     * @generated from protobuf field: optional uint32 free_count = 11;
     */
    freeCount?: number;
    /**
     * @generated from protobuf field: optional uint32 into_bag_count = 12;
     */
    intoBagCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.FishingScore
 */
export interface FishingScore {
    /**
     * @generated from protobuf field: optional uint32 fishing_score = 2;
     */
    fishingScore?: number;
    /**
     * @generated from protobuf field: optional bool is_new_record = 4;
     */
    isNewRecord?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.FishingGallerySettleInfo
 */
export interface FishingGallerySettleInfo {
    /**
     * @generated from protobuf field: map<uint32, com.midnights.game.FishInfo> fish_map = 11;
     */
    fishMap: {
        [key: number]: FishInfo;
    };
    /**
     * @generated from protobuf field: repeated com.midnights.game.FishingScore fishing_score_list = 15;
     */
    fishingScoreList: FishingScore[];
}
/**
 * @generated from protobuf message com.midnights.game.RacingGallerySettleInfo
 */
export interface RacingGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 winner_uid = 6;
     */
    winnerUid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 4;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 use_time = 1;
     */
    useTime?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SalvagePreventGallerySettleInfo
 */
export interface SalvagePreventGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 time_remain = 8;
     */
    timeRemain?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvagePreventStopReason reason = 7;
     */
    reason?: SalvagePreventStopReason;
    /**
     * @generated from protobuf field: optional uint32 final_score = 13;
     */
    finalScore?: number;
    /**
     * @generated from protobuf field: optional uint32 monster_count = 15;
     */
    monsterCount?: number;
}
/**
 * @generated from protobuf message com.midnights.game.SalvageEscortGallerySettleInfo
 */
export interface SalvageEscortGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 time_remain = 14;
     */
    timeRemain?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.SalvageEscortStopReason reason = 7;
     */
    reason?: SalvageEscortStopReason;
}
/**
 * @generated from protobuf message com.midnights.game.BalloonGallerySettleInfo
 */
export interface BalloonGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 8;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 14;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 hit_count = 10;
     */
    hitCount?: number;
    /**
     * @generated from protobuf field: optional uint32 owner_uid = 6;
     */
    ownerUid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.IrodoriMasterGallerySettleInfo
 */
export interface IrodoriMasterGallerySettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 15;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional bool is_finish = 11;
     */
    isFinish?: boolean;
    /**
     * @generated from protobuf field: optional uint32 finish_time = 14;
     */
    finishTime?: number;
    /**
     * @generated from protobuf field: optional uint32 difficult = 6;
     */
    difficult?: number;
    /**
     * @generated from protobuf field: optional uint32 level_id = 4;
     */
    levelId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.PhotoGallerySettleInfo
 */
export interface PhotoGallerySettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 7;
     */
    reason?: GalleryStopReason;
}
/**
 * @generated from protobuf message com.midnights.game.LuminanceStoneChallengeGallerySettleInfo
 */
export interface LuminanceStoneChallengeGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 kill_monster_count = 12;
     */
    killMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 kill_special_monster_count = 8;
     */
    killSpecialMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 clean_mud_count = 10;
     */
    cleanMudCount?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 2;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 11;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 final_score = 13;
     */
    finalScore?: number;
}
/**
 * @generated from protobuf message com.midnights.game.HomeGalleryInPlayingNotify
 */
export interface HomeGalleryInPlayingNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 13;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.HomeGalleryInPlayingNotify.CmdId
 */
export enum HomeGalleryInPlayingNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5553;
     */
    CMD_ID = 5553,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SummerTimeV2BoatGallerySettleInfo
 */
export interface SummerTimeV2BoatGallerySettleInfo {
    /**
     * @generated from protobuf field: optional uint32 param1 = 7;
     */
    param1?: number;
    /**
     * @generated from protobuf field: optional uint32 param2 = 2;
     */
    param2?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 3;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional uint32 param3 = 6;
     */
    param3?: number;
    /**
     * @generated from protobuf field: optional uint32 used_time = 12;
     */
    usedTime?: number;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 1;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf message com.midnights.game.GalleryIslandPartyDownHillInfoNotify
 */
export interface GalleryIslandPartyDownHillInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 2;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 9;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional uint32 total_kill_monster_count = 11;
     */
    totalKillMonsterCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryIslandPartyDownHillInfoNotify.CmdId
 */
export enum GalleryIslandPartyDownHillInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5522;
     */
    CMD_ID = 5522,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartyRaftInfoNotify
 */
export interface IslandPartyRaftInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 point_id = 7;
     */
    pointId?: number;
    /**
     * @generated from protobuf field: optional uint32 coin = 15;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional uint32 fuel = 3;
     */
    fuel?: number;
    /**
     * @generated from protobuf field: optional uint32 component = 13;
     */
    component?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IslandPartyRaftInfoNotify.CmdId
 */
export enum IslandPartyRaftInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5565;
     */
    CMD_ID = 5565,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartySailInfoNotify
 */
export interface IslandPartySailInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 coin = 10;
     */
    coin?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.IslandPartySailStage stage = 8;
     */
    stage?: IslandPartySailStage;
    /**
     * @generated from protobuf field: optional uint32 kill_monster_count = 4;
     */
    killMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 15;
     */
    progress?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.IslandPartySailInfoNotify.CmdId
 */
export enum IslandPartySailInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5504;
     */
    CMD_ID = 5504,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.IslandPartyGallerySettleInfo
 */
export interface IslandPartyGallerySettleInfo {
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 13;
     */
    playerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExhibitionDisplayInfo card_list = 11;
     */
    cardList: ExhibitionDisplayInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.BackRebornGalleryReq
 */
export interface BackRebornGalleryReq {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 15;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BackRebornGalleryReq.CmdId
 */
export enum BackRebornGalleryReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5593;
     */
    CMD_ID = 5593,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.BackRebornGalleryRsp
 */
export interface BackRebornGalleryRsp {
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 9;
     */
    galleryId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.BackRebornGalleryRsp.CmdId
 */
export enum BackRebornGalleryRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5527;
     */
    CMD_ID = 5527,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GalleryWillStartCountdownNotify
 */
export interface GalleryWillStartCountdownNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStartSource start_source = 11;
     */
    startSource?: GalleryStartSource;
    /**
     * @generated from protobuf field: optional uint32 end_time = 12;
     */
    endTime?: number;
    /**
     * @generated from protobuf field: optional bool is_end = 7;
     */
    isEnd?: boolean;
    /**
     * @generated from protobuf field: optional uint32 gallery_id = 14;
     */
    galleryId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryWillStartCountdownNotify.CmdId
 */
export enum GalleryWillStartCountdownNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5594;
     */
    CMD_ID = 5594,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.InstableSprayGalleryInfoNotify
 */
export interface InstableSprayGalleryInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 score = 3;
     */
    score?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.InstableSprayGalleryInfoNotify.CmdId
 */
export enum InstableSprayGalleryInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5588;
     */
    CMD_ID = 5588,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryMuqadasPotionInfo
 */
export interface SceneGalleryMuqadasPotionInfo {
    /**
     * @generated from protobuf field: optional uint32 score = 6;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 capture_weakness_count = 4;
     */
    captureWeaknessCount?: number;
    /**
     * @generated from protobuf field: optional uint32 skill_energy = 10;
     */
    skillEnergy?: number;
    /**
     * @generated from protobuf field: optional uint32 skill_use_limit = 9;
     */
    skillUseLimit?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingFirstStageInfo
 */
export interface VintageHuntingFirstStageInfo {
    /**
     * @generated from protobuf field: optional uint32 timid_cnt = 15;
     */
    timidCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 brutal_cnt = 7;
     */
    brutalCnt?: number;
    /**
     * @generated from protobuf field: optional uint32 score = 14;
     */
    score?: number;
    /**
     * @generated from protobuf field: optional uint32 elite_cnt = 11;
     */
    eliteCnt?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingSecondStageInfo
 */
export interface VintageHuntingSecondStageInfo {
    /**
     * @generated from protobuf field: optional uint32 total_num = 11;
     */
    totalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 capture_animal_num = 13;
     */
    captureAnimalNum?: number;
    /**
     * @generated from protobuf field: optional uint32 left_num = 3;
     */
    leftNum?: number;
}
/**
 * @generated from protobuf message com.midnights.game.VintageHuntingThirdStageInfo
 */
export interface VintageHuntingThirdStageInfo {
}
/**
 * @generated from protobuf message com.midnights.game.SceneGalleryVintageHuntingInfo
 */
export interface SceneGalleryVintageHuntingInfo {
    /**
     * @generated from protobuf field: optional uint32 stage_id = 7;
     */
    stageId?: number;
    /**
     * @generated from protobuf oneof: info
     */
    info: {
        oneofKind: "firstStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingFirstStageInfo first_stage_info = 2;
         */
        firstStageInfo: VintageHuntingFirstStageInfo;
    } | {
        oneofKind: "secondStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingSecondStageInfo second_stage_info = 15;
         */
        secondStageInfo: VintageHuntingSecondStageInfo;
    } | {
        oneofKind: "thirdStageInfo";
        /**
         * @generated from protobuf field: com.midnights.game.VintageHuntingThirdStageInfo third_stage_info = 12;
         */
        thirdStageInfo: VintageHuntingThirdStageInfo;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldGalleryInfoNotify
 */
export interface WindFieldGalleryInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 show_id = 3;
     */
    showId?: number;
    /**
     * @generated from protobuf field: optional uint32 killed_monster_num = 7;
     */
    killedMonsterNum?: number;
    /**
     * @generated from protobuf field: optional uint32 coin_num = 9;
     */
    coinNum?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_max_count = 1;
     */
    challengeBallMaxCount?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_total_time = 5;
     */
    challengeTotalTime?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_cur_count = 10;
     */
    challengeBallCurCount?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_timestamp = 4;
     */
    challengeTimestamp?: number;
    /**
     * @generated from protobuf field: optional uint32 element_ball_num = 14;
     */
    elementBallNum?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WindFieldGalleryInfoNotify.CmdId
 */
export enum WindFieldGalleryInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5526;
     */
    CMD_ID = 5526,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.WindFieldGalleryChallengeInfoNotify
 */
export interface WindFieldGalleryChallengeInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 challenge_timestamp = 6;
     */
    challengeTimestamp?: number;
    /**
     * @generated from protobuf field: optional bool is_start = 8;
     */
    isStart?: boolean;
    /**
     * @generated from protobuf field: optional uint32 show_id = 12;
     */
    showId?: number;
    /**
     * @generated from protobuf field: optional bool is_success = 7;
     */
    isSuccess?: boolean;
    /**
     * @generated from protobuf field: optional uint32 challenge_total_time = 13;
     */
    challengeTotalTime?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_max_count = 11;
     */
    challengeBallMaxCount?: number;
    /**
     * @generated from protobuf field: optional uint32 challenge_ball_cur_count = 1;
     */
    challengeBallCurCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.WindFieldGalleryChallengeInfoNotify.CmdId
 */
export enum WindFieldGalleryChallengeInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5563;
     */
    CMD_ID = 5563,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterTrainingInfoNotify
 */
export interface FungusFighterTrainingInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 buff_start_time = 3;
     */
    buffStartTime?: number;
    /**
     * @generated from protobuf field: optional uint32 max_skill_count = 7;
     */
    maxSkillCount?: number;
    /**
     * @generated from protobuf field: optional uint32 max_monster_count = 8;
     */
    maxMonsterCount?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_id = 14;
     */
    buffId?: number;
    /**
     * @generated from protobuf field: optional uint32 buff_last_time = 4;
     */
    buffLastTime?: number;
    /**
     * @generated from protobuf field: optional uint32 rest_skill_count = 6;
     */
    restSkillCount?: number;
    /**
     * @generated from protobuf field: optional uint32 killed_monster_count = 15;
     */
    killedMonsterCount?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusFighterTrainingInfoNotify.CmdId
 */
export enum FungusFighterTrainingInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5595;
     */
    CMD_ID = 5595,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.FungusFighterTrainingSettleInfo
 */
export interface FungusFighterTrainingSettleInfo {
    /**
     * @generated from protobuf field: optional uint32 used_time = 15;
     */
    usedTime?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.GalleryStopReason reason = 3;
     */
    reason?: GalleryStopReason;
    /**
     * @generated from protobuf field: optional string transaction = 1;
     */
    transaction?: string;
}
/**
 * @generated from protobuf message com.midnights.game.FungusCaptureSettleNotify
 */
export interface FungusCaptureSettleNotify {
    /**
     * @generated from protobuf field: optional bool is_success = 2;
     */
    isSuccess?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.FungusCaptureSettleNotify.CmdId
 */
export enum FungusCaptureSettleNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 5506;
     */
    CMD_ID = 5506,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryStageType
 */
export enum GalleryStageType {
    /**
     * @generated from protobuf enum value: GALLERY_NONE = 0;
     */
    GALLERY_NONE = 0,
    /**
     * @generated from protobuf enum value: GALLERY_PRESTART = 1;
     */
    GALLERY_PRESTART = 1,
    /**
     * @generated from protobuf enum value: GALLERY_START = 2;
     */
    GALLERY_START = 2
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryStopReason
 */
export enum GalleryStopReason {
    /**
     * @generated from protobuf enum value: GALLERY_STOP_NONE = 0;
     */
    GALLERY_STOP_NONE = 0,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_TIMEUP = 1;
     */
    GALLERY_STOP_TIMEUP = 1,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_CLIENT_INTERRUPT = 2;
     */
    GALLERY_STOP_CLIENT_INTERRUPT = 2,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_LUA_INTERRUPT_SUCCESS = 3;
     */
    GALLERY_STOP_LUA_INTERRUPT_SUCCESS = 3,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_LUA_INTERRUPT_FAIL = 4;
     */
    GALLERY_STOP_LUA_INTERRUPT_FAIL = 4,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_OWNER_LEAVE_SCENE = 5;
     */
    GALLERY_STOP_OWNER_LEAVE_SCENE = 5,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_PLAY_INIT_FAILED = 6;
     */
    GALLERY_STOP_PLAY_INIT_FAILED = 6,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_OTHER_PLAYER_ENTER = 7;
     */
    GALLERY_STOP_OTHER_PLAYER_ENTER = 7,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_AVATAR_DIE = 8;
     */
    GALLERY_STOP_AVATAR_DIE = 8,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_FINISHED = 9;
     */
    GALLERY_STOP_FINISHED = 9,
    /**
     * @generated from protobuf enum value: GALLERY_STOP_FUNGUS_ALL_DIE = 10;
     */
    GALLERY_STOP_FUNGUS_ALL_DIE = 10
}
/**
 * @generated from protobuf enum com.midnights.game.GalleryStartSource
 */
export enum GalleryStartSource {
    /**
     * @generated from protobuf enum value: GALLERY_START_BY_NONE = 0;
     */
    GALLERY_START_BY_NONE = 0,
    /**
     * @generated from protobuf enum value: GALLERY_START_BY_MATCH = 1;
     */
    GALLERY_START_BY_MATCH = 1,
    /**
     * @generated from protobuf enum value: GALLERY_START_BY_DRAFT = 2;
     */
    GALLERY_START_BY_DRAFT = 2
}
/**
 * @generated from protobuf enum com.midnights.game.SalvagePreventStopReason
 */
export enum SalvagePreventStopReason {
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_NONE = 0;
     */
    SALVAGE_PREVENT_STOP_NONE = 0,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_SUCCESS = 1;
     */
    SALVAGE_PREVENT_STOP_SUCCESS = 1,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_ARRIVAL = 2;
     */
    SALVAGE_PREVENT_STOP_ARRIVAL = 2,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_INTERRUPT = 3;
     */
    SALVAGE_PREVENT_STOP_INTERRUPT = 3,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_LEAVE = 4;
     */
    SALVAGE_PREVENT_STOP_LEAVE = 4,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_FULL = 5;
     */
    SALVAGE_PREVENT_STOP_FULL = 5,
    /**
     * @generated from protobuf enum value: SALVAGE_PREVENT_STOP_AWAY = 6;
     */
    SALVAGE_PREVENT_STOP_AWAY = 6
}
/**
 * @generated from protobuf enum com.midnights.game.SalvageEscortStopReason
 */
export enum SalvageEscortStopReason {
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_NONE = 0;
     */
    SALVAGE_ESCORT_STOP_NONE = 0,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_SUCCESS = 1;
     */
    SALVAGE_ESCORT_STOP_SUCCESS = 1,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_DUMP = 2;
     */
    SALVAGE_ESCORT_STOP_DUMP = 2,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_TIME = 3;
     */
    SALVAGE_ESCORT_STOP_TIME = 3,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_INTERRUPT = 4;
     */
    SALVAGE_ESCORT_STOP_INTERRUPT = 4,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_LEAVE = 5;
     */
    SALVAGE_ESCORT_STOP_LEAVE = 5,
    /**
     * @generated from protobuf enum value: SALVAGE_ESCORT_STOP_FULL = 6;
     */
    SALVAGE_ESCORT_STOP_FULL = 6
}
/**
 * @generated from protobuf enum com.midnights.game.IslandPartySailStage
 */
export enum IslandPartySailStage {
    /**
     * @generated from protobuf enum value: ISLAND_PARTY_SAIL_STAGE_NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: ISLAND_PARTY_SAIL_STAGE_SAIL = 1;
     */
    SAIL = 1,
    /**
     * @generated from protobuf enum value: ISLAND_PARTY_SAIL_STAGE_BATTLE = 2;
     */
    BATTLE = 2
}
// @generated message type with reflection information, may provide speed optimized methods
class GalleryFlowerStartParam$Type extends MessageType<GalleryFlowerStartParam> {
    constructor() {
        super("com.midnights.game.GalleryFlowerStartParam", [
            { no: 5, name: "target_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryFlowerStartParam>): GalleryFlowerStartParam {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryFlowerStartParam>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryFlowerStartParam): GalleryFlowerStartParam {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_score */ 5:
                    message.targetScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryFlowerStartParam, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_score = 5; */
        if (message.targetScore !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.targetScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryFlowerStartParam
 */
export const GalleryFlowerStartParam = new GalleryFlowerStartParam$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryStartNotify$Type extends MessageType<GalleryStartNotify> {
    constructor() {
        super("com.midnights.game.GalleryStartNotify", [
            { no: 6, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "player_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "flower_start_param", kind: "message", oneof: "detail", T: () => GalleryFlowerStartParam }
        ]);
    }
    create(value?: PartialMessage<GalleryStartNotify>): GalleryStartNotify {
        const message = { detail: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryStartNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryStartNotify): GalleryStartNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 end_time */ 6:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 player_count */ 11:
                    message.playerCount = reader.uint32();
                    break;
                case /* optional uint32 owner_uid */ 9:
                    message.ownerUid = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 5:
                    message.startTime = reader.uint32();
                    break;
                case /* com.midnights.game.GalleryFlowerStartParam flower_start_param */ 15:
                    message.detail = {
                        oneofKind: "flowerStartParam",
                        flowerStartParam: GalleryFlowerStartParam.internalBinaryRead(reader, reader.uint32(), options, (message.detail as any).flowerStartParam)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryStartNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 end_time = 6; */
        if (message.endTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.endTime);
        /* optional uint32 player_count = 11; */
        if (message.playerCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.playerCount);
        /* optional uint32 owner_uid = 9; */
        if (message.ownerUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.ownerUid);
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 start_time = 5; */
        if (message.startTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.startTime);
        /* com.midnights.game.GalleryFlowerStartParam flower_start_param = 15; */
        if (message.detail.oneofKind === "flowerStartParam")
            GalleryFlowerStartParam.internalBinaryWrite(message.detail.flowerStartParam, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryStartNotify
 */
export const GalleryStartNotify = new GalleryStartNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryBalloonShootNotify$Type extends MessageType<GalleryBalloonShootNotify> {
    constructor() {
        super("com.midnights.game.GalleryBalloonShootNotify", [
            { no: 12, name: "trigger_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "combo_disable_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 11, name: "add_score", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 13, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryBalloonShootNotify>): GalleryBalloonShootNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryBalloonShootNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryBalloonShootNotify): GalleryBalloonShootNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 trigger_entity_id */ 12:
                    message.triggerEntityId = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 combo */ 14:
                    message.combo = reader.uint32();
                    break;
                case /* optional uint64 combo_disable_time */ 6:
                    message.comboDisableTime = reader.uint64().toBigInt();
                    break;
                case /* optional int32 add_score */ 11:
                    message.addScore = reader.int32();
                    break;
                case /* optional uint32 cur_score */ 13:
                    message.curScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryBalloonShootNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 trigger_entity_id = 12; */
        if (message.triggerEntityId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.triggerEntityId);
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 combo = 14; */
        if (message.combo !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.combo);
        /* optional uint64 combo_disable_time = 6; */
        if (message.comboDisableTime !== undefined)
            writer.tag(6, WireType.Varint).uint64(message.comboDisableTime);
        /* optional int32 add_score = 11; */
        if (message.addScore !== undefined)
            writer.tag(11, WireType.Varint).int32(message.addScore);
        /* optional uint32 cur_score = 13; */
        if (message.curScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.curScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryBalloonShootNotify
 */
export const GalleryBalloonShootNotify = new GalleryBalloonShootNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryBalloonScoreNotify$Type extends MessageType<GalleryBalloonScoreNotify> {
    constructor() {
        super("com.midnights.game.GalleryBalloonScoreNotify", [
            { no: 9, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "uid_score_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<GalleryBalloonScoreNotify>): GalleryBalloonScoreNotify {
        const message = { uidScoreMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryBalloonScoreNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryBalloonScoreNotify): GalleryBalloonScoreNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 9:
                    message.galleryId = reader.uint32();
                    break;
                case /* map<uint32, uint32> uid_score_map */ 7:
                    this.binaryReadMap7(message.uidScoreMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap7(map: GalleryBalloonScoreNotify["uidScoreMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GalleryBalloonScoreNotify["uidScoreMap"] | undefined, val: GalleryBalloonScoreNotify["uidScoreMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GalleryBalloonScoreNotify.uid_score_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GalleryBalloonScoreNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 9; */
        if (message.galleryId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.galleryId);
        /* map<uint32, uint32> uid_score_map = 7; */
        for (let k of Object.keys(message.uidScoreMap))
            writer.tag(7, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.uidScoreMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryBalloonScoreNotify
 */
export const GalleryBalloonScoreNotify = new GalleryBalloonScoreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BalloonSettleInfo$Type extends MessageType<BalloonSettleInfo> {
    constructor() {
        super("com.midnights.game.BalloonSettleInfo", [
            { no: 3, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "shoot_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "max_combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "player_info", kind: "message", T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<BalloonSettleInfo>): BalloonSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BalloonSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalloonSettleInfo): BalloonSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 3:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 shoot_count */ 12:
                    message.shootCount = reader.uint32();
                    break;
                case /* optional uint32 max_combo */ 9:
                    message.maxCombo = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 7:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 2:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BalloonSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 3; */
        if (message.uid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.uid);
        /* optional uint32 shoot_count = 12; */
        if (message.shootCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.shootCount);
        /* optional uint32 max_combo = 9; */
        if (message.maxCombo !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.maxCombo);
        /* optional uint32 final_score = 7; */
        if (message.finalScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.finalScore);
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 2; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BalloonSettleInfo
 */
export const BalloonSettleInfo = new BalloonSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryStopNotify$Type extends MessageType<GalleryStopNotify> {
    constructor() {
        super("com.midnights.game.GalleryStopNotify", [
            { no: 8, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryStopNotify>): GalleryStopNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryStopNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryStopNotify): GalleryStopNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 8:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryStopNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 8; */
        if (message.galleryId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryStopNotify
 */
export const GalleryStopNotify = new GalleryStopNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FallSettleInfo$Type extends MessageType<FallSettleInfo> {
    constructor() {
        super("com.midnights.game.FallSettleInfo", [
            { no: 15, name: "catch_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "flower_ring_catch_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 10, name: "remain_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FallSettleInfo>): FallSettleInfo {
        const message = { flowerRingCatchCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FallSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FallSettleInfo): FallSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 catch_count */ 15:
                    message.catchCount = reader.uint32();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 13:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> flower_ring_catch_count_map */ 3:
                    this.binaryReadMap3(message.flowerRingCatchCountMap, reader, options);
                    break;
                case /* optional uint32 remain_time */ 10:
                    message.remainTime = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 1:
                    message.finalScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: FallSettleInfo["flowerRingCatchCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FallSettleInfo["flowerRingCatchCountMap"] | undefined, val: FallSettleInfo["flowerRingCatchCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FallSettleInfo.flower_ring_catch_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: FallSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 catch_count = 15; */
        if (message.catchCount !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.catchCount);
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 13; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> flower_ring_catch_count_map = 3; */
        for (let k of Object.keys(message.flowerRingCatchCountMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.flowerRingCatchCountMap[k as any]).join();
        /* optional uint32 remain_time = 10; */
        if (message.remainTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.remainTime);
        /* optional uint32 final_score = 1; */
        if (message.finalScore !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.finalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FallSettleInfo
 */
export const FallSettleInfo = new FallSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryFallCatchNotify$Type extends MessageType<GalleryFallCatchNotify> {
    constructor() {
        super("com.midnights.game.GalleryFallCatchNotify", [
            { no: 6, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "time_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "ball_catch_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 1, name: "add_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_ground", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryFallCatchNotify>): GalleryFallCatchNotify {
        const message = { ballCatchCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryFallCatchNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryFallCatchNotify): GalleryFallCatchNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_score */ 6:
                    message.curScore = reader.uint32();
                    break;
                case /* optional uint32 time_cost */ 11:
                    message.timeCost = reader.uint32();
                    break;
                case /* map<uint32, uint32> ball_catch_count_map */ 15:
                    this.binaryReadMap15(message.ballCatchCountMap, reader, options);
                    break;
                case /* optional uint32 add_score */ 1:
                    message.addScore = reader.uint32();
                    break;
                case /* optional bool is_ground */ 12:
                    message.isGround = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 10:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: GalleryFallCatchNotify["ballCatchCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GalleryFallCatchNotify["ballCatchCountMap"] | undefined, val: GalleryFallCatchNotify["ballCatchCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GalleryFallCatchNotify.ball_catch_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: GalleryFallCatchNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_score = 6; */
        if (message.curScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.curScore);
        /* optional uint32 time_cost = 11; */
        if (message.timeCost !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.timeCost);
        /* map<uint32, uint32> ball_catch_count_map = 15; */
        for (let k of Object.keys(message.ballCatchCountMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.ballCatchCountMap[k as any]).join();
        /* optional uint32 add_score = 1; */
        if (message.addScore !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.addScore);
        /* optional bool is_ground = 12; */
        if (message.isGround !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isGround);
        /* optional uint32 gallery_id = 10; */
        if (message.galleryId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryFallCatchNotify
 */
export const GalleryFallCatchNotify = new GalleryFallCatchNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FallPlayerBrief$Type extends MessageType<FallPlayerBrief> {
    constructor() {
        super("com.midnights.game.FallPlayerBrief", [
            { no: 13, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_ground", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FallPlayerBrief>): FallPlayerBrief {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FallPlayerBrief>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FallPlayerBrief): FallPlayerBrief {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 13:
                    message.uid = reader.uint32();
                    break;
                case /* optional bool is_ground */ 5:
                    message.isGround = reader.bool();
                    break;
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FallPlayerBrief, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 13; */
        if (message.uid !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.uid);
        /* optional bool is_ground = 5; */
        if (message.isGround !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isGround);
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FallPlayerBrief
 */
export const FallPlayerBrief = new FallPlayerBrief$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryFallScoreNotify$Type extends MessageType<GalleryFallScoreNotify> {
    constructor() {
        super("com.midnights.game.GalleryFallScoreNotify", [
            { no: 7, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid_brief_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FallPlayerBrief } }
        ]);
    }
    create(value?: PartialMessage<GalleryFallScoreNotify>): GalleryFallScoreNotify {
        const message = { uidBriefMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryFallScoreNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryFallScoreNotify): GalleryFallScoreNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 7:
                    message.galleryId = reader.uint32();
                    break;
                case /* map<uint32, com.midnights.game.FallPlayerBrief> uid_brief_map */ 1:
                    this.binaryReadMap1(message.uidBriefMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap1(map: GalleryFallScoreNotify["uidBriefMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof GalleryFallScoreNotify["uidBriefMap"] | undefined, val: GalleryFallScoreNotify["uidBriefMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FallPlayerBrief.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.GalleryFallScoreNotify.uid_brief_map");
            }
        }
        map[key ?? 0] = val ?? FallPlayerBrief.create();
    }
    internalBinaryWrite(message: GalleryFallScoreNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 7; */
        if (message.galleryId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.galleryId);
        /* map<uint32, com.midnights.game.FallPlayerBrief> uid_brief_map = 1; */
        for (let k of Object.keys(message.uidBriefMap)) {
            writer.tag(1, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FallPlayerBrief.internalBinaryWrite(message.uidBriefMap[k as any], writer, options);
            writer.join().join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryFallScoreNotify
 */
export const GalleryFallScoreNotify = new GalleryFallScoreNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BalloonPlayerInfo$Type extends MessageType<BalloonPlayerInfo> {
    constructor() {
        super("com.midnights.game.BalloonPlayerInfo", [
            { no: 15, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "combo_disable_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "combo", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BalloonPlayerInfo>): BalloonPlayerInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BalloonPlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalloonPlayerInfo): BalloonPlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* optional uint32 cur_score */ 2:
                    message.curScore = reader.uint32();
                    break;
                case /* optional uint32 combo_disable_time */ 14:
                    message.comboDisableTime = reader.uint32();
                    break;
                case /* optional uint32 combo */ 11:
                    message.combo = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BalloonPlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 15; */
        if (message.uid !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* optional uint32 cur_score = 2; */
        if (message.curScore !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.curScore);
        /* optional uint32 combo_disable_time = 14; */
        if (message.comboDisableTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.comboDisableTime);
        /* optional uint32 combo = 11; */
        if (message.combo !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.combo);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BalloonPlayerInfo
 */
export const BalloonPlayerInfo = new BalloonPlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FallPlayerInfo$Type extends MessageType<FallPlayerInfo> {
    constructor() {
        super("com.midnights.game.FallPlayerInfo", [
            { no: 11, name: "time_cost", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "ball_catch_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 7, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_ground", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FallPlayerInfo>): FallPlayerInfo {
        const message = { ballCatchCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FallPlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FallPlayerInfo): FallPlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 time_cost */ 11:
                    message.timeCost = reader.uint32();
                    break;
                case /* optional uint32 uid */ 9:
                    message.uid = reader.uint32();
                    break;
                case /* map<uint32, uint32> ball_catch_count_map */ 6:
                    this.binaryReadMap6(message.ballCatchCountMap, reader, options);
                    break;
                case /* optional uint32 cur_score */ 7:
                    message.curScore = reader.uint32();
                    break;
                case /* optional bool is_ground */ 15:
                    message.isGround = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap6(map: FallPlayerInfo["ballCatchCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FallPlayerInfo["ballCatchCountMap"] | undefined, val: FallPlayerInfo["ballCatchCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FallPlayerInfo.ball_catch_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: FallPlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 time_cost = 11; */
        if (message.timeCost !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.timeCost);
        /* optional uint32 uid = 9; */
        if (message.uid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.uid);
        /* map<uint32, uint32> ball_catch_count_map = 6; */
        for (let k of Object.keys(message.ballCatchCountMap))
            writer.tag(6, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.ballCatchCountMap[k as any]).join();
        /* optional uint32 cur_score = 7; */
        if (message.curScore !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.curScore);
        /* optional bool is_ground = 15; */
        if (message.isGround !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isGround);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FallPlayerInfo
 */
export const FallPlayerInfo = new FallPlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryBalloonInfo$Type extends MessageType<SceneGalleryBalloonInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryBalloonInfo", [
            { no: 14, name: "scene_player_balloon_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => BalloonPlayerInfo } },
            { no: 5, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryBalloonInfo>): SceneGalleryBalloonInfo {
        const message = { scenePlayerBalloonInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryBalloonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryBalloonInfo): SceneGalleryBalloonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.BalloonPlayerInfo> scene_player_balloon_info_map */ 14:
                    this.binaryReadMap14(message.scenePlayerBalloonInfoMap, reader, options);
                    break;
                case /* optional uint32 end_time */ 5:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap14(map: SceneGalleryBalloonInfo["scenePlayerBalloonInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneGalleryBalloonInfo["scenePlayerBalloonInfoMap"] | undefined, val: SceneGalleryBalloonInfo["scenePlayerBalloonInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = BalloonPlayerInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneGalleryBalloonInfo.scene_player_balloon_info_map");
            }
        }
        map[key ?? 0] = val ?? BalloonPlayerInfo.create();
    }
    internalBinaryWrite(message: SceneGalleryBalloonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.BalloonPlayerInfo> scene_player_balloon_info_map = 14; */
        for (let k of Object.keys(message.scenePlayerBalloonInfoMap)) {
            writer.tag(14, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            BalloonPlayerInfo.internalBinaryWrite(message.scenePlayerBalloonInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 end_time = 5; */
        if (message.endTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryBalloonInfo
 */
export const SceneGalleryBalloonInfo = new SceneGalleryBalloonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryFallInfo$Type extends MessageType<SceneGalleryFallInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryFallInfo", [
            { no: 12, name: "scene_player_fall_info_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FallPlayerInfo } },
            { no: 2, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryFallInfo>): SceneGalleryFallInfo {
        const message = { scenePlayerFallInfoMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryFallInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryFallInfo): SceneGalleryFallInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.FallPlayerInfo> scene_player_fall_info_map */ 12:
                    this.binaryReadMap12(message.scenePlayerFallInfoMap, reader, options);
                    break;
                case /* optional uint32 end_time */ 2:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap12(map: SceneGalleryFallInfo["scenePlayerFallInfoMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneGalleryFallInfo["scenePlayerFallInfoMap"] | undefined, val: SceneGalleryFallInfo["scenePlayerFallInfoMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FallPlayerInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneGalleryFallInfo.scene_player_fall_info_map");
            }
        }
        map[key ?? 0] = val ?? FallPlayerInfo.create();
    }
    internalBinaryWrite(message: SceneGalleryFallInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.FallPlayerInfo> scene_player_fall_info_map = 12; */
        for (let k of Object.keys(message.scenePlayerFallInfoMap)) {
            writer.tag(12, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FallPlayerInfo.internalBinaryWrite(message.scenePlayerFallInfoMap[k as any], writer, options);
            writer.join().join();
        }
        /* optional uint32 end_time = 2; */
        if (message.endTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryFallInfo
 */
export const SceneGalleryFallInfo = new SceneGalleryFallInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryFlowerInfo$Type extends MessageType<SceneGalleryFlowerInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryFlowerInfo", [
            { no: 7, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "target_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryFlowerInfo>): SceneGalleryFlowerInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryFlowerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryFlowerInfo): SceneGalleryFlowerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 end_time */ 7:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 target_score */ 13:
                    message.targetScore = reader.uint32();
                    break;
                case /* optional uint32 cur_score */ 9:
                    message.curScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryFlowerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 end_time = 7; */
        if (message.endTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.endTime);
        /* optional uint32 target_score = 13; */
        if (message.targetScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.targetScore);
        /* optional uint32 cur_score = 9; */
        if (message.curScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryFlowerInfo
 */
export const SceneGalleryFlowerInfo = new SceneGalleryFlowerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryBulletInfo$Type extends MessageType<SceneGalleryBulletInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryBulletInfo", [
            { no: 1, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "hit_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryBulletInfo>): SceneGalleryBulletInfo {
        const message = { hitCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryBulletInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryBulletInfo): SceneGalleryBulletInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 end_time */ 1:
                    message.endTime = reader.uint32();
                    break;
                case /* map<uint32, uint32> hit_count_map */ 10:
                    this.binaryReadMap10(message.hitCountMap, reader, options);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap10(map: SceneGalleryBulletInfo["hitCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneGalleryBulletInfo["hitCountMap"] | undefined, val: SceneGalleryBulletInfo["hitCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneGalleryBulletInfo.hit_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SceneGalleryBulletInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 end_time = 1; */
        if (message.endTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.endTime);
        /* map<uint32, uint32> hit_count_map = 10; */
        for (let k of Object.keys(message.hitCountMap))
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.hitCountMap[k as any]).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryBulletInfo
 */
export const SceneGalleryBulletInfo = new SceneGalleryBulletInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryBrokenFloorInfo$Type extends MessageType<SceneGalleryBrokenFloorInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryBrokenFloorInfo", [
            { no: 3, name: "fall_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 9, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryBrokenFloorInfo>): SceneGalleryBrokenFloorInfo {
        const message = { fallCountMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryBrokenFloorInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryBrokenFloorInfo): SceneGalleryBrokenFloorInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, uint32> fall_count_map */ 3:
                    this.binaryReadMap3(message.fallCountMap, reader, options);
                    break;
                case /* optional uint32 end_time */ 9:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap3(map: SceneGalleryBrokenFloorInfo["fallCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneGalleryBrokenFloorInfo["fallCountMap"] | undefined, val: SceneGalleryBrokenFloorInfo["fallCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneGalleryBrokenFloorInfo.fall_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SceneGalleryBrokenFloorInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, uint32> fall_count_map = 3; */
        for (let k of Object.keys(message.fallCountMap))
            writer.tag(3, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.fallCountMap[k as any]).join();
        /* optional uint32 end_time = 9; */
        if (message.endTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryBrokenFloorInfo
 */
export const SceneGalleryBrokenFloorInfo = new SceneGalleryBrokenFloorInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryHideAndSeekInfo$Type extends MessageType<SceneGalleryHideAndSeekInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryHideAndSeekInfo", [
            { no: 13, name: "visible_uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "caught_uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryHideAndSeekInfo>): SceneGalleryHideAndSeekInfo {
        const message = { visibleUidList: [], caughtUidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryHideAndSeekInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryHideAndSeekInfo): SceneGalleryHideAndSeekInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 visible_uid_list */ 13:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.visibleUidList.push(reader.uint32());
                    else
                        message.visibleUidList.push(reader.uint32());
                    break;
                case /* repeated uint32 caught_uid_list */ 4:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.caughtUidList.push(reader.uint32());
                    else
                        message.caughtUidList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryHideAndSeekInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 visible_uid_list = 13; */
        if (message.visibleUidList.length) {
            writer.tag(13, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.visibleUidList.length; i++)
                writer.uint32(message.visibleUidList[i]);
            writer.join();
        }
        /* repeated uint32 caught_uid_list = 4; */
        if (message.caughtUidList.length) {
            writer.tag(4, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.caughtUidList.length; i++)
                writer.uint32(message.caughtUidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryHideAndSeekInfo
 */
export const SceneGalleryHideAndSeekInfo = new SceneGalleryHideAndSeekInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryBuoyantCombatInfo$Type extends MessageType<SceneGalleryBuoyantCombatInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryBuoyantCombatInfo", [
            { no: 6, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "kill_special_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryBuoyantCombatInfo>): SceneGalleryBuoyantCombatInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryBuoyantCombatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryBuoyantCombatInfo): SceneGalleryBuoyantCombatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 6:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 kill_special_monster_count */ 1:
                    message.killSpecialMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 kill_monster_count */ 14:
                    message.killMonsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryBuoyantCombatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 6; */
        if (message.score !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.score);
        /* optional uint32 kill_special_monster_count = 1; */
        if (message.killSpecialMonsterCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.killSpecialMonsterCount);
        /* optional uint32 kill_monster_count = 14; */
        if (message.killMonsterCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.killMonsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryBuoyantCombatInfo
 */
export const SceneGalleryBuoyantCombatInfo = new SceneGalleryBuoyantCombatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryProgressInfo$Type extends MessageType<SceneGalleryProgressInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryProgressInfo", [
            { no: 8, name: "progress_stage_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "key", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "ui_form", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryProgressInfo>): SceneGalleryProgressInfo {
        const message = { progressStageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryProgressInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryProgressInfo): SceneGalleryProgressInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 progress_stage_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.progressStageList.push(reader.uint32());
                    else
                        message.progressStageList.push(reader.uint32());
                    break;
                case /* optional string key */ 11:
                    message.key = reader.string();
                    break;
                case /* optional uint32 progress */ 5:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 ui_form */ 12:
                    message.uiForm = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryProgressInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 progress_stage_list = 8; */
        if (message.progressStageList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.progressStageList.length; i++)
                writer.uint32(message.progressStageList[i]);
            writer.join();
        }
        /* optional string key = 11; */
        if (message.key !== undefined)
            writer.tag(11, WireType.LengthDelimited).string(message.key);
        /* optional uint32 progress = 5; */
        if (message.progress !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.progress);
        /* optional uint32 ui_form = 12; */
        if (message.uiForm !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.uiForm);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryProgressInfo
 */
export const SceneGalleryProgressInfo = new SceneGalleryProgressInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryBounceConjuringInfo$Type extends MessageType<SceneGalleryBounceConjuringInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryBounceConjuringInfo", [
            { no: 4, name: "total_destroyed_machine_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "total_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryBounceConjuringInfo>): SceneGalleryBounceConjuringInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryBounceConjuringInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryBounceConjuringInfo): SceneGalleryBounceConjuringInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_destroyed_machine_count */ 4:
                    message.totalDestroyedMachineCount = reader.uint32();
                    break;
                case /* optional uint32 total_score */ 6:
                    message.totalScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryBounceConjuringInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_destroyed_machine_count = 4; */
        if (message.totalDestroyedMachineCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.totalDestroyedMachineCount);
        /* optional uint32 total_score = 6; */
        if (message.totalScore !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.totalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryBounceConjuringInfo
 */
export const SceneGalleryBounceConjuringInfo = new SceneGalleryBounceConjuringInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryHandballInfo$Type extends MessageType<SceneGalleryHandballInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryHandballInfo", [
            { no: 9, name: "ball_place_info", kind: "message", T: () => PlaceInfo },
            { no: 15, name: "is_have_ball", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryHandballInfo>): SceneGalleryHandballInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryHandballInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryHandballInfo): SceneGalleryHandballInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlaceInfo ball_place_info */ 9:
                    message.ballPlaceInfo = PlaceInfo.internalBinaryRead(reader, reader.uint32(), options, message.ballPlaceInfo);
                    break;
                case /* optional bool is_have_ball */ 15:
                    message.isHaveBall = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryHandballInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlaceInfo ball_place_info = 9; */
        if (message.ballPlaceInfo)
            PlaceInfo.internalBinaryWrite(message.ballPlaceInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* optional bool is_have_ball = 15; */
        if (message.isHaveBall !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isHaveBall);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryHandballInfo
 */
export const SceneGalleryHandballInfo = new SceneGalleryHandballInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGallerySumoInfo$Type extends MessageType<SceneGallerySumoInfo> {
    constructor() {
        super("com.midnights.game.SceneGallerySumoInfo", [
            { no: 2, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "kill_normal_mosnter_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "kill_elite_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGallerySumoInfo>): SceneGallerySumoInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGallerySumoInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGallerySumoInfo): SceneGallerySumoInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 2:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 kill_normal_mosnter_num */ 15:
                    message.killNormalMosnterNum = reader.uint32();
                    break;
                case /* optional uint32 kill_elite_monster_num */ 14:
                    message.killEliteMonsterNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGallerySumoInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 2; */
        if (message.score !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.score);
        /* optional uint32 kill_normal_mosnter_num = 15; */
        if (message.killNormalMosnterNum !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.killNormalMosnterNum);
        /* optional uint32 kill_elite_monster_num = 14; */
        if (message.killEliteMonsterNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.killEliteMonsterNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGallerySumoInfo
 */
export const SceneGallerySumoInfo = new SceneGallerySumoInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGallerySalvagePreventInfo$Type extends MessageType<SceneGallerySalvagePreventInfo> {
    constructor() {
        super("com.midnights.game.SceneGallerySalvagePreventInfo", [
            { no: 7, name: "monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGallerySalvagePreventInfo>): SceneGallerySalvagePreventInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGallerySalvagePreventInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGallerySalvagePreventInfo): SceneGallerySalvagePreventInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 monster_count */ 7:
                    message.monsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGallerySalvagePreventInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 monster_count = 7; */
        if (message.monsterCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.monsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGallerySalvagePreventInfo
 */
export const SceneGallerySalvagePreventInfo = new SceneGallerySalvagePreventInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGallerySalvageEscortInfo$Type extends MessageType<SceneGallerySalvageEscortInfo> {
    constructor() {
        super("com.midnights.game.SceneGallerySalvageEscortInfo", [
            { no: 14, name: "max_box_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "max_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "box_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGallerySalvageEscortInfo>): SceneGallerySalvageEscortInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGallerySalvageEscortInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGallerySalvageEscortInfo): SceneGallerySalvageEscortInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_box_count */ 14:
                    message.maxBoxCount = reader.uint32();
                    break;
                case /* optional uint32 max_monster_count */ 3:
                    message.maxMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 box_count */ 7:
                    message.boxCount = reader.uint32();
                    break;
                case /* optional uint32 monster_count */ 11:
                    message.monsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGallerySalvageEscortInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 max_box_count = 14; */
        if (message.maxBoxCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxBoxCount);
        /* optional uint32 max_monster_count = 3; */
        if (message.maxMonsterCount !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.maxMonsterCount);
        /* optional uint32 box_count = 7; */
        if (message.boxCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.boxCount);
        /* optional uint32 monster_count = 11; */
        if (message.monsterCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.monsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGallerySalvageEscortInfo
 */
export const SceneGallerySalvageEscortInfo = new SceneGallerySalvageEscortInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryCrystalLinkInfo$Type extends MessageType<SceneGalleryCrystalLinkInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryCrystalLinkInfo", [
            { no: 10, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryCrystalLinkInfo>): SceneGalleryCrystalLinkInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryCrystalLinkInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryCrystalLinkInfo): SceneGalleryCrystalLinkInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 10:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryCrystalLinkInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 10; */
        if (message.score !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryCrystalLinkInfo
 */
export const SceneGalleryCrystalLinkInfo = new SceneGalleryCrystalLinkInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryIrodoriMasterInfo$Type extends MessageType<SceneGalleryIrodoriMasterInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryIrodoriMasterInfo", [
            { no: 8, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "difficulty", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_cg_viewed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryIrodoriMasterInfo>): SceneGalleryIrodoriMasterInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryIrodoriMasterInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryIrodoriMasterInfo): SceneGalleryIrodoriMasterInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 level_id */ 8:
                    message.levelId = reader.uint32();
                    break;
                case /* optional uint32 difficulty */ 1:
                    message.difficulty = reader.uint32();
                    break;
                case /* optional bool is_cg_viewed */ 5:
                    message.isCgViewed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryIrodoriMasterInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 level_id = 8; */
        if (message.levelId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.levelId);
        /* optional uint32 difficulty = 1; */
        if (message.difficulty !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.difficulty);
        /* optional bool is_cg_viewed = 5; */
        if (message.isCgViewed !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isCgViewed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryIrodoriMasterInfo
 */
export const SceneGalleryIrodoriMasterInfo = new SceneGalleryIrodoriMasterInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryHomeBalloonInfo$Type extends MessageType<SceneGalleryHomeBalloonInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryHomeBalloonInfo", [
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryHomeBalloonInfo>): SceneGalleryHomeBalloonInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryHomeBalloonInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryHomeBalloonInfo): SceneGalleryHomeBalloonInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryHomeBalloonInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryHomeBalloonInfo
 */
export const SceneGalleryHomeBalloonInfo = new SceneGalleryHomeBalloonInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryLuminanceStoneChallengeInfo$Type extends MessageType<SceneGalleryLuminanceStoneChallengeInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo", [
            { no: 5, name: "kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "clean_mud_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "kill_special_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryLuminanceStoneChallengeInfo>): SceneGalleryLuminanceStoneChallengeInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryLuminanceStoneChallengeInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryLuminanceStoneChallengeInfo): SceneGalleryLuminanceStoneChallengeInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 kill_monster_count */ 5:
                    message.killMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 score */ 3:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 clean_mud_count */ 2:
                    message.cleanMudCount = reader.uint32();
                    break;
                case /* optional uint32 kill_special_monster_count */ 6:
                    message.killSpecialMonsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryLuminanceStoneChallengeInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 kill_monster_count = 5; */
        if (message.killMonsterCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.killMonsterCount);
        /* optional uint32 score = 3; */
        if (message.score !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.score);
        /* optional uint32 clean_mud_count = 2; */
        if (message.cleanMudCount !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.cleanMudCount);
        /* optional uint32 kill_special_monster_count = 6; */
        if (message.killSpecialMonsterCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.killSpecialMonsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo
 */
export const SceneGalleryLuminanceStoneChallengeInfo = new SceneGalleryLuminanceStoneChallengeInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryHomeSeekFurnitureInfo$Type extends MessageType<SceneGalleryHomeSeekFurnitureInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryHomeSeekFurnitureInfo", [
            { no: 6, name: "cur_tide_left_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "player_score_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "cur_tide_duration_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "cur_tide_total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryHomeSeekFurnitureInfo>): SceneGalleryHomeSeekFurnitureInfo {
        const message = { playerScoreMap: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryHomeSeekFurnitureInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryHomeSeekFurnitureInfo): SceneGalleryHomeSeekFurnitureInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_tide_left_num */ 6:
                    message.curTideLeftNum = reader.uint32();
                    break;
                case /* map<uint32, uint32> player_score_map */ 8:
                    this.binaryReadMap8(message.playerScoreMap, reader, options);
                    break;
                case /* optional uint32 cur_tide_duration_time */ 12:
                    message.curTideDurationTime = reader.uint32();
                    break;
                case /* optional uint32 cur_tide_total_num */ 9:
                    message.curTideTotalNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap8(map: SceneGalleryHomeSeekFurnitureInfo["playerScoreMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof SceneGalleryHomeSeekFurnitureInfo["playerScoreMap"] | undefined, val: SceneGalleryHomeSeekFurnitureInfo["playerScoreMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.SceneGalleryHomeSeekFurnitureInfo.player_score_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: SceneGalleryHomeSeekFurnitureInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_tide_left_num = 6; */
        if (message.curTideLeftNum !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.curTideLeftNum);
        /* map<uint32, uint32> player_score_map = 8; */
        for (let k of Object.keys(message.playerScoreMap))
            writer.tag(8, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.playerScoreMap[k as any]).join();
        /* optional uint32 cur_tide_duration_time = 12; */
        if (message.curTideDurationTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curTideDurationTime);
        /* optional uint32 cur_tide_total_num = 9; */
        if (message.curTideTotalNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.curTideTotalNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryHomeSeekFurnitureInfo
 */
export const SceneGalleryHomeSeekFurnitureInfo = new SceneGalleryHomeSeekFurnitureInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryIslandPartyDownHillInfo$Type extends MessageType<SceneGalleryIslandPartyDownHillInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryIslandPartyDownHillInfo", [
            { no: 14, name: "total_kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "start_source", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStartSource", GalleryStartSource] },
            { no: 5, name: "max_kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryIslandPartyDownHillInfo>): SceneGalleryIslandPartyDownHillInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryIslandPartyDownHillInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryIslandPartyDownHillInfo): SceneGalleryIslandPartyDownHillInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_kill_monster_count */ 14:
                    message.totalKillMonsterCount = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStartSource start_source */ 15:
                    message.startSource = reader.int32();
                    break;
                case /* optional uint32 max_kill_monster_count */ 5:
                    message.maxKillMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 coin */ 13:
                    message.coin = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryIslandPartyDownHillInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_kill_monster_count = 14; */
        if (message.totalKillMonsterCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.totalKillMonsterCount);
        /* optional com.midnights.game.GalleryStartSource start_source = 15; */
        if (message.startSource !== undefined)
            writer.tag(15, WireType.Varint).int32(message.startSource);
        /* optional uint32 max_kill_monster_count = 5; */
        if (message.maxKillMonsterCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.maxKillMonsterCount);
        /* optional uint32 coin = 13; */
        if (message.coin !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.coin);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryIslandPartyDownHillInfo
 */
export const SceneGalleryIslandPartyDownHillInfo = new SceneGalleryIslandPartyDownHillInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGallerySummerTimeV2BoatInfo$Type extends MessageType<SceneGallerySummerTimeV2BoatInfo> {
    constructor() {
        super("com.midnights.game.SceneGallerySummerTimeV2BoatInfo", [
            { no: 15, name: "param1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "param3", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "param2", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGallerySummerTimeV2BoatInfo>): SceneGallerySummerTimeV2BoatInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGallerySummerTimeV2BoatInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGallerySummerTimeV2BoatInfo): SceneGallerySummerTimeV2BoatInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param1 */ 15:
                    message.param1 = reader.uint32();
                    break;
                case /* optional uint32 param3 */ 3:
                    message.param3 = reader.uint32();
                    break;
                case /* optional uint32 used_time */ 11:
                    message.usedTime = reader.uint32();
                    break;
                case /* optional uint32 param2 */ 7:
                    message.param2 = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGallerySummerTimeV2BoatInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param1 = 15; */
        if (message.param1 !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.param1);
        /* optional uint32 param3 = 3; */
        if (message.param3 !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.param3);
        /* optional uint32 used_time = 11; */
        if (message.usedTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.usedTime);
        /* optional uint32 param2 = 7; */
        if (message.param2 !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.param2);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGallerySummerTimeV2BoatInfo
 */
export const SceneGallerySummerTimeV2BoatInfo = new SceneGallerySummerTimeV2BoatInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryIslandPartyRaftInfo$Type extends MessageType<SceneGalleryIslandPartyRaftInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryIslandPartyRaftInfo", [
            { no: 6, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "start_source", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStartSource", GalleryStartSource] },
            { no: 1, name: "component", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "fuel", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "raft_entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryIslandPartyRaftInfo>): SceneGalleryIslandPartyRaftInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryIslandPartyRaftInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryIslandPartyRaftInfo): SceneGalleryIslandPartyRaftInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin */ 6:
                    message.coin = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStartSource start_source */ 7:
                    message.startSource = reader.int32();
                    break;
                case /* optional uint32 component */ 1:
                    message.component = reader.uint32();
                    break;
                case /* optional uint32 fuel */ 15:
                    message.fuel = reader.uint32();
                    break;
                case /* optional uint32 point_id */ 12:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 raft_entity_id */ 4:
                    message.raftEntityId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryIslandPartyRaftInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 coin = 6; */
        if (message.coin !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.coin);
        /* optional com.midnights.game.GalleryStartSource start_source = 7; */
        if (message.startSource !== undefined)
            writer.tag(7, WireType.Varint).int32(message.startSource);
        /* optional uint32 component = 1; */
        if (message.component !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.component);
        /* optional uint32 fuel = 15; */
        if (message.fuel !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.fuel);
        /* optional uint32 point_id = 12; */
        if (message.pointId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.pointId);
        /* optional uint32 raft_entity_id = 4; */
        if (message.raftEntityId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.raftEntityId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryIslandPartyRaftInfo
 */
export const SceneGalleryIslandPartyRaftInfo = new SceneGalleryIslandPartyRaftInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryIslandPartySailInfo$Type extends MessageType<SceneGalleryIslandPartySailInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryIslandPartySailInfo", [
            { no: 14, name: "max_clean_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "clean_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "start_source", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStartSource", GalleryStartSource] },
            { no: 11, name: "kill_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "stage", kind: "enum", opt: true, T: () => ["com.midnights.game.IslandPartySailStage", IslandPartySailStage, "ISLAND_PARTY_SAIL_STAGE_"] },
            { no: 8, name: "max_kill_progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryIslandPartySailInfo>): SceneGalleryIslandPartySailInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryIslandPartySailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryIslandPartySailInfo): SceneGalleryIslandPartySailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_clean_progress */ 14:
                    message.maxCleanProgress = reader.uint32();
                    break;
                case /* optional uint32 clean_progress */ 10:
                    message.cleanProgress = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStartSource start_source */ 1:
                    message.startSource = reader.int32();
                    break;
                case /* optional uint32 kill_progress */ 11:
                    message.killProgress = reader.uint32();
                    break;
                case /* optional uint32 coin */ 15:
                    message.coin = reader.uint32();
                    break;
                case /* optional com.midnights.game.IslandPartySailStage stage */ 12:
                    message.stage = reader.int32();
                    break;
                case /* optional uint32 max_kill_progress */ 8:
                    message.maxKillProgress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryIslandPartySailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 max_clean_progress = 14; */
        if (message.maxCleanProgress !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.maxCleanProgress);
        /* optional uint32 clean_progress = 10; */
        if (message.cleanProgress !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.cleanProgress);
        /* optional com.midnights.game.GalleryStartSource start_source = 1; */
        if (message.startSource !== undefined)
            writer.tag(1, WireType.Varint).int32(message.startSource);
        /* optional uint32 kill_progress = 11; */
        if (message.killProgress !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.killProgress);
        /* optional uint32 coin = 15; */
        if (message.coin !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.coin);
        /* optional com.midnights.game.IslandPartySailStage stage = 12; */
        if (message.stage !== undefined)
            writer.tag(12, WireType.Varint).int32(message.stage);
        /* optional uint32 max_kill_progress = 8; */
        if (message.maxKillProgress !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.maxKillProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryIslandPartySailInfo
 */
export const SceneGalleryIslandPartySailInfo = new SceneGalleryIslandPartySailInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryInstableSprayBuffInfo$Type extends MessageType<SceneGalleryInstableSprayBuffInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryInstableSprayBuffInfo", [
            { no: 6, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "buff_end_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 4, name: "buff_max_time", kind: "scalar", opt: true, T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryInstableSprayBuffInfo>): SceneGalleryInstableSprayBuffInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryInstableSprayBuffInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryInstableSprayBuffInfo): SceneGalleryInstableSprayBuffInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_id */ 6:
                    message.buffId = reader.uint32();
                    break;
                case /* optional uint64 buff_end_time */ 9:
                    message.buffEndTime = reader.uint64().toBigInt();
                    break;
                case /* optional uint64 buff_max_time */ 4:
                    message.buffMaxTime = reader.uint64().toBigInt();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryInstableSprayBuffInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 buff_id = 6; */
        if (message.buffId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.buffId);
        /* optional uint64 buff_end_time = 9; */
        if (message.buffEndTime !== undefined)
            writer.tag(9, WireType.Varint).uint64(message.buffEndTime);
        /* optional uint64 buff_max_time = 4; */
        if (message.buffMaxTime !== undefined)
            writer.tag(4, WireType.Varint).uint64(message.buffMaxTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryInstableSprayBuffInfo
 */
export const SceneGalleryInstableSprayBuffInfo = new SceneGalleryInstableSprayBuffInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryInstaleSprayInfo$Type extends MessageType<SceneGalleryInstaleSprayInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryInstaleSprayInfo", [
            { no: 5, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "buff_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneGalleryInstableSprayBuffInfo }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryInstaleSprayInfo>): SceneGalleryInstaleSprayInfo {
        const message = { buffInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryInstaleSprayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryInstaleSprayInfo): SceneGalleryInstaleSprayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 5:
                    message.score = reader.uint32();
                    break;
                case /* repeated com.midnights.game.SceneGalleryInstableSprayBuffInfo buff_info_list */ 12:
                    message.buffInfoList.push(SceneGalleryInstableSprayBuffInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryInstaleSprayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 5; */
        if (message.score !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.score);
        /* repeated com.midnights.game.SceneGalleryInstableSprayBuffInfo buff_info_list = 12; */
        for (let i = 0; i < message.buffInfoList.length; i++)
            SceneGalleryInstableSprayBuffInfo.internalBinaryWrite(message.buffInfoList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryInstaleSprayInfo
 */
export const SceneGalleryInstaleSprayInfo = new SceneGalleryInstaleSprayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryTreasureSeelieInfo$Type extends MessageType<SceneGalleryTreasureSeelieInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryTreasureSeelieInfo", [
            { no: 15, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "goal", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryTreasureSeelieInfo>): SceneGalleryTreasureSeelieInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryTreasureSeelieInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryTreasureSeelieInfo): SceneGalleryTreasureSeelieInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 progress */ 15:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 goal */ 14:
                    message.goal = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryTreasureSeelieInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 progress = 15; */
        if (message.progress !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.progress);
        /* optional uint32 goal = 14; */
        if (message.goal !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.goal);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryTreasureSeelieInfo
 */
export const SceneGalleryTreasureSeelieInfo = new SceneGalleryTreasureSeelieInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryWindFieldInfo$Type extends MessageType<SceneGalleryWindFieldInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryWindFieldInfo", [
            { no: 5, name: "killed_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "challenge_ball_max_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "show_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_total_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "challenge_ball_cur_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "coin_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "challenge_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "element_ball_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryWindFieldInfo>): SceneGalleryWindFieldInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryWindFieldInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryWindFieldInfo): SceneGalleryWindFieldInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 killed_monster_num */ 5:
                    message.killedMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_max_count */ 12:
                    message.challengeBallMaxCount = reader.uint32();
                    break;
                case /* optional uint32 show_id */ 15:
                    message.showId = reader.uint32();
                    break;
                case /* optional uint32 challenge_total_time */ 4:
                    message.challengeTotalTime = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_cur_count */ 9:
                    message.challengeBallCurCount = reader.uint32();
                    break;
                case /* optional uint32 coin_num */ 1:
                    message.coinNum = reader.uint32();
                    break;
                case /* optional uint32 challenge_timestamp */ 13:
                    message.challengeTimestamp = reader.uint32();
                    break;
                case /* optional uint32 element_ball_num */ 10:
                    message.elementBallNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryWindFieldInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 killed_monster_num = 5; */
        if (message.killedMonsterNum !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.killedMonsterNum);
        /* optional uint32 challenge_ball_max_count = 12; */
        if (message.challengeBallMaxCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.challengeBallMaxCount);
        /* optional uint32 show_id = 15; */
        if (message.showId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.showId);
        /* optional uint32 challenge_total_time = 4; */
        if (message.challengeTotalTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.challengeTotalTime);
        /* optional uint32 challenge_ball_cur_count = 9; */
        if (message.challengeBallCurCount !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.challengeBallCurCount);
        /* optional uint32 coin_num = 1; */
        if (message.coinNum !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.coinNum);
        /* optional uint32 challenge_timestamp = 13; */
        if (message.challengeTimestamp !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.challengeTimestamp);
        /* optional uint32 element_ball_num = 10; */
        if (message.elementBallNum !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.elementBallNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryWindFieldInfo
 */
export const SceneGalleryWindFieldInfo = new SceneGalleryWindFieldInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryFungusFighterTrainingInfo$Type extends MessageType<SceneGalleryFungusFighterTrainingInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryFungusFighterTrainingInfo", [
            { no: 4, name: "max_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "killed_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "buff_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "max_skill_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "buff_last_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "rest_skill_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryFungusFighterTrainingInfo>): SceneGalleryFungusFighterTrainingInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryFungusFighterTrainingInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryFungusFighterTrainingInfo): SceneGalleryFungusFighterTrainingInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 max_monster_count */ 4:
                    message.maxMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 killed_monster_count */ 9:
                    message.killedMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 buff_start_time */ 13:
                    message.buffStartTime = reader.uint32();
                    break;
                case /* optional uint32 buff_id */ 1:
                    message.buffId = reader.uint32();
                    break;
                case /* optional uint32 max_skill_count */ 10:
                    message.maxSkillCount = reader.uint32();
                    break;
                case /* optional uint32 buff_last_time */ 14:
                    message.buffLastTime = reader.uint32();
                    break;
                case /* optional uint32 rest_skill_count */ 5:
                    message.restSkillCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryFungusFighterTrainingInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 max_monster_count = 4; */
        if (message.maxMonsterCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.maxMonsterCount);
        /* optional uint32 killed_monster_count = 9; */
        if (message.killedMonsterCount !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.killedMonsterCount);
        /* optional uint32 buff_start_time = 13; */
        if (message.buffStartTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.buffStartTime);
        /* optional uint32 buff_id = 1; */
        if (message.buffId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.buffId);
        /* optional uint32 max_skill_count = 10; */
        if (message.maxSkillCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.maxSkillCount);
        /* optional uint32 buff_last_time = 14; */
        if (message.buffLastTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.buffLastTime);
        /* optional uint32 rest_skill_count = 5; */
        if (message.restSkillCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.restSkillCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryFungusFighterTrainingInfo
 */
export const SceneGalleryFungusFighterTrainingInfo = new SceneGalleryFungusFighterTrainingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryFungusFighterCaptureInfo$Type extends MessageType<SceneGalleryFungusFighterCaptureInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryFungusFighterCaptureInfo", [
            { no: 13, name: "is_hide_progress", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryFungusFighterCaptureInfo>): SceneGalleryFungusFighterCaptureInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryFungusFighterCaptureInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryFungusFighterCaptureInfo): SceneGalleryFungusFighterCaptureInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_hide_progress */ 13:
                    message.isHideProgress = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryFungusFighterCaptureInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_hide_progress = 13; */
        if (message.isHideProgress !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isHideProgress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryFungusFighterCaptureInfo
 */
export const SceneGalleryFungusFighterCaptureInfo = new SceneGalleryFungusFighterCaptureInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryEffigyChallengeV2Info$Type extends MessageType<SceneGalleryEffigyChallengeV2Info> {
    constructor() {
        super("com.midnights.game.SceneGalleryEffigyChallengeV2Info", [
            { no: 10, name: "killed_monster_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "total_target_kill_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "scene_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "t_remain_use_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "boss_violent_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryEffigyChallengeV2Info>): SceneGalleryEffigyChallengeV2Info {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryEffigyChallengeV2Info>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryEffigyChallengeV2Info): SceneGalleryEffigyChallengeV2Info {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 killed_monster_cnt */ 10:
                    message.killedMonsterCnt = reader.uint32();
                    break;
                case /* optional uint32 total_target_kill_cnt */ 15:
                    message.totalTargetKillCnt = reader.uint32();
                    break;
                case /* optional uint32 scene_start_time */ 14:
                    message.sceneStartTime = reader.uint32();
                    break;
                case /* optional uint32 t_remain_use_time */ 6:
                    message.tRemainUseTime = reader.uint32();
                    break;
                case /* optional uint32 boss_violent_level */ 9:
                    message.bossViolentLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryEffigyChallengeV2Info, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 killed_monster_cnt = 10; */
        if (message.killedMonsterCnt !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.killedMonsterCnt);
        /* optional uint32 total_target_kill_cnt = 15; */
        if (message.totalTargetKillCnt !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.totalTargetKillCnt);
        /* optional uint32 scene_start_time = 14; */
        if (message.sceneStartTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.sceneStartTime);
        /* optional uint32 t_remain_use_time = 6; */
        if (message.tRemainUseTime !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.tRemainUseTime);
        /* optional uint32 boss_violent_level = 9; */
        if (message.bossViolentLevel !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.bossViolentLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryEffigyChallengeV2Info
 */
export const SceneGalleryEffigyChallengeV2Info = new SceneGalleryEffigyChallengeV2Info$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryCharAmusementInfo$Type extends MessageType<SceneGalleryCharAmusementInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryCharAmusementInfo", [
            { no: 2, name: "is_last_level", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "max_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 1, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryCharAmusementInfo>): SceneGalleryCharAmusementInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryCharAmusementInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryCharAmusementInfo): SceneGalleryCharAmusementInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_last_level */ 2:
                    message.isLastLevel = reader.bool();
                    break;
                case /* optional uint32 max_score */ 9:
                    message.maxScore = reader.uint32();
                    break;
                case /* optional uint32 cur_score */ 14:
                    message.curScore = reader.uint32();
                    break;
                case /* optional bool is_finish */ 10:
                    message.isFinish = reader.bool();
                    break;
                case /* optional bool is_success */ 1:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryCharAmusementInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_last_level = 2; */
        if (message.isLastLevel !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isLastLevel);
        /* optional uint32 max_score = 9; */
        if (message.maxScore !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.maxScore);
        /* optional uint32 cur_score = 14; */
        if (message.curScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.curScore);
        /* optional bool is_finish = 10; */
        if (message.isFinish !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isFinish);
        /* optional bool is_success = 1; */
        if (message.isSuccess !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryCharAmusementInfo
 */
export const SceneGalleryCharAmusementInfo = new SceneGalleryCharAmusementInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryInfo$Type extends MessageType<SceneGalleryInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryInfo", [
            { no: 5, name: "stage", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStageType", GalleryStageType] },
            { no: 4, name: "progress_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneGalleryProgressInfo },
            { no: 2, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "player_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "pre_start_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "balloon_info", kind: "message", oneof: "info", T: () => SceneGalleryBalloonInfo },
            { no: 7, name: "fall_info", kind: "message", oneof: "info", T: () => SceneGalleryFallInfo },
            { no: 8, name: "flower_info", kind: "message", oneof: "info", T: () => SceneGalleryFlowerInfo },
            { no: 13, name: "bullet_info", kind: "message", oneof: "info", T: () => SceneGalleryBulletInfo },
            { no: 10, name: "broken_floor_info", kind: "message", oneof: "info", T: () => SceneGalleryBrokenFloorInfo },
            { no: 6, name: "hide_and_seek_info", kind: "message", oneof: "info", T: () => SceneGalleryHideAndSeekInfo },
            { no: 1384, name: "buoyant_combat_info", kind: "message", oneof: "info", T: () => SceneGalleryBuoyantCombatInfo },
            { no: 708, name: "bounce_conjuring_info", kind: "message", oneof: "info", T: () => SceneGalleryBounceConjuringInfo },
            { no: 1997, name: "handball_info", kind: "message", oneof: "info", T: () => SceneGalleryHandballInfo },
            { no: 811, name: "sumo_info", kind: "message", oneof: "info", T: () => SceneGallerySumoInfo },
            { no: 1700, name: "salvage_prevent_info", kind: "message", oneof: "info", T: () => SceneGallerySalvagePreventInfo },
            { no: 759, name: "salvage_escort_info", kind: "message", oneof: "info", T: () => SceneGallerySalvageEscortInfo },
            { no: 1034, name: "home_balloon_info", kind: "message", oneof: "info", T: () => SceneGalleryHomeBalloonInfo },
            { no: 2004, name: "crystal_link_info", kind: "message", oneof: "info", T: () => SceneGalleryCrystalLinkInfo },
            { no: 1953, name: "irodori_master_info", kind: "message", oneof: "info", T: () => SceneGalleryIrodoriMasterInfo },
            { no: 106, name: "luminance_stone_challenge_info", kind: "message", oneof: "info", T: () => SceneGalleryLuminanceStoneChallengeInfo },
            { no: 1456, name: "home_seek_furniture_info", kind: "message", oneof: "info", T: () => SceneGalleryHomeSeekFurnitureInfo },
            { no: 462, name: "island_party_down_hill_info", kind: "message", oneof: "info", T: () => SceneGalleryIslandPartyDownHillInfo },
            { no: 296, name: "summer_time_v2_boat_info", kind: "message", oneof: "info", T: () => SceneGallerySummerTimeV2BoatInfo },
            { no: 1805, name: "island_party_raft_info", kind: "message", oneof: "info", T: () => SceneGalleryIslandPartyRaftInfo },
            { no: 1133, name: "island_party_sail_info", kind: "message", oneof: "info", T: () => SceneGalleryIslandPartySailInfo },
            { no: 1196, name: "instable_spray_info", kind: "message", oneof: "info", T: () => SceneGalleryInstaleSprayInfo },
            { no: 865, name: "muqadas_potion_info", kind: "message", oneof: "info", T: () => SceneGalleryMuqadasPotionInfo },
            { no: 1525, name: "treasure_seelie_info", kind: "message", oneof: "info", T: () => SceneGalleryTreasureSeelieInfo },
            { no: 254, name: "vintage_hunting_info", kind: "message", oneof: "info", T: () => SceneGalleryVintageHuntingInfo },
            { no: 1080, name: "wind_field_info", kind: "message", oneof: "info", T: () => SceneGalleryWindFieldInfo },
            { no: 1328, name: "fungus_fighter_training_info", kind: "message", oneof: "info", T: () => SceneGalleryFungusFighterTrainingInfo },
            { no: 882, name: "effigy_challenge_info", kind: "message", oneof: "info", T: () => SceneGalleryEffigyChallengeV2Info },
            { no: 422, name: "fungus_fighter_capture_info", kind: "message", oneof: "info", T: () => SceneGalleryFungusFighterCaptureInfo },
            { no: 1086, name: "char_amusement_info", kind: "message", oneof: "info", T: () => SceneGalleryCharAmusementInfo }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryInfo>): SceneGalleryInfo {
        const message = { progressInfoList: [], info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryInfo): SceneGalleryInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GalleryStageType stage */ 5:
                    message.stage = reader.int32();
                    break;
                case /* repeated com.midnights.game.SceneGalleryProgressInfo progress_info_list */ 4:
                    message.progressInfoList.push(SceneGalleryProgressInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 gallery_id */ 2:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 start_time */ 3:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 end_time */ 11:
                    message.endTime = reader.uint32();
                    break;
                case /* optional uint32 owner_uid */ 9:
                    message.ownerUid = reader.uint32();
                    break;
                case /* optional uint32 player_count */ 1:
                    message.playerCount = reader.uint32();
                    break;
                case /* optional uint32 pre_start_end_time */ 15:
                    message.preStartEndTime = reader.uint32();
                    break;
                case /* com.midnights.game.SceneGalleryBalloonInfo balloon_info */ 14:
                    message.info = {
                        oneofKind: "balloonInfo",
                        balloonInfo: SceneGalleryBalloonInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).balloonInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryFallInfo fall_info */ 7:
                    message.info = {
                        oneofKind: "fallInfo",
                        fallInfo: SceneGalleryFallInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).fallInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryFlowerInfo flower_info */ 8:
                    message.info = {
                        oneofKind: "flowerInfo",
                        flowerInfo: SceneGalleryFlowerInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).flowerInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryBulletInfo bullet_info */ 13:
                    message.info = {
                        oneofKind: "bulletInfo",
                        bulletInfo: SceneGalleryBulletInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).bulletInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryBrokenFloorInfo broken_floor_info */ 10:
                    message.info = {
                        oneofKind: "brokenFloorInfo",
                        brokenFloorInfo: SceneGalleryBrokenFloorInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).brokenFloorInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryHideAndSeekInfo hide_and_seek_info */ 6:
                    message.info = {
                        oneofKind: "hideAndSeekInfo",
                        hideAndSeekInfo: SceneGalleryHideAndSeekInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).hideAndSeekInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryBuoyantCombatInfo buoyant_combat_info */ 1384:
                    message.info = {
                        oneofKind: "buoyantCombatInfo",
                        buoyantCombatInfo: SceneGalleryBuoyantCombatInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).buoyantCombatInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryBounceConjuringInfo bounce_conjuring_info */ 708:
                    message.info = {
                        oneofKind: "bounceConjuringInfo",
                        bounceConjuringInfo: SceneGalleryBounceConjuringInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).bounceConjuringInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryHandballInfo handball_info */ 1997:
                    message.info = {
                        oneofKind: "handballInfo",
                        handballInfo: SceneGalleryHandballInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).handballInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGallerySumoInfo sumo_info */ 811:
                    message.info = {
                        oneofKind: "sumoInfo",
                        sumoInfo: SceneGallerySumoInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).sumoInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGallerySalvagePreventInfo salvage_prevent_info */ 1700:
                    message.info = {
                        oneofKind: "salvagePreventInfo",
                        salvagePreventInfo: SceneGallerySalvagePreventInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).salvagePreventInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGallerySalvageEscortInfo salvage_escort_info */ 759:
                    message.info = {
                        oneofKind: "salvageEscortInfo",
                        salvageEscortInfo: SceneGallerySalvageEscortInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).salvageEscortInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryHomeBalloonInfo home_balloon_info */ 1034:
                    message.info = {
                        oneofKind: "homeBalloonInfo",
                        homeBalloonInfo: SceneGalleryHomeBalloonInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).homeBalloonInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryCrystalLinkInfo crystal_link_info */ 2004:
                    message.info = {
                        oneofKind: "crystalLinkInfo",
                        crystalLinkInfo: SceneGalleryCrystalLinkInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).crystalLinkInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryIrodoriMasterInfo irodori_master_info */ 1953:
                    message.info = {
                        oneofKind: "irodoriMasterInfo",
                        irodoriMasterInfo: SceneGalleryIrodoriMasterInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).irodoriMasterInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info */ 106:
                    message.info = {
                        oneofKind: "luminanceStoneChallengeInfo",
                        luminanceStoneChallengeInfo: SceneGalleryLuminanceStoneChallengeInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).luminanceStoneChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info */ 1456:
                    message.info = {
                        oneofKind: "homeSeekFurnitureInfo",
                        homeSeekFurnitureInfo: SceneGalleryHomeSeekFurnitureInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).homeSeekFurnitureInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info */ 462:
                    message.info = {
                        oneofKind: "islandPartyDownHillInfo",
                        islandPartyDownHillInfo: SceneGalleryIslandPartyDownHillInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).islandPartyDownHillInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info */ 296:
                    message.info = {
                        oneofKind: "summerTimeV2BoatInfo",
                        summerTimeV2BoatInfo: SceneGallerySummerTimeV2BoatInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).summerTimeV2BoatInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryIslandPartyRaftInfo island_party_raft_info */ 1805:
                    message.info = {
                        oneofKind: "islandPartyRaftInfo",
                        islandPartyRaftInfo: SceneGalleryIslandPartyRaftInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).islandPartyRaftInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryIslandPartySailInfo island_party_sail_info */ 1133:
                    message.info = {
                        oneofKind: "islandPartySailInfo",
                        islandPartySailInfo: SceneGalleryIslandPartySailInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).islandPartySailInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryInstaleSprayInfo instable_spray_info */ 1196:
                    message.info = {
                        oneofKind: "instableSprayInfo",
                        instableSprayInfo: SceneGalleryInstaleSprayInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).instableSprayInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryMuqadasPotionInfo muqadas_potion_info */ 865:
                    message.info = {
                        oneofKind: "muqadasPotionInfo",
                        muqadasPotionInfo: SceneGalleryMuqadasPotionInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).muqadasPotionInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryTreasureSeelieInfo treasure_seelie_info */ 1525:
                    message.info = {
                        oneofKind: "treasureSeelieInfo",
                        treasureSeelieInfo: SceneGalleryTreasureSeelieInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).treasureSeelieInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryVintageHuntingInfo vintage_hunting_info */ 254:
                    message.info = {
                        oneofKind: "vintageHuntingInfo",
                        vintageHuntingInfo: SceneGalleryVintageHuntingInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).vintageHuntingInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryWindFieldInfo wind_field_info */ 1080:
                    message.info = {
                        oneofKind: "windFieldInfo",
                        windFieldInfo: SceneGalleryWindFieldInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).windFieldInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info */ 1328:
                    message.info = {
                        oneofKind: "fungusFighterTrainingInfo",
                        fungusFighterTrainingInfo: SceneGalleryFungusFighterTrainingInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).fungusFighterTrainingInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryEffigyChallengeV2Info effigy_challenge_info */ 882:
                    message.info = {
                        oneofKind: "effigyChallengeInfo",
                        effigyChallengeInfo: SceneGalleryEffigyChallengeV2Info.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).effigyChallengeInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info */ 422:
                    message.info = {
                        oneofKind: "fungusFighterCaptureInfo",
                        fungusFighterCaptureInfo: SceneGalleryFungusFighterCaptureInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).fungusFighterCaptureInfo)
                    };
                    break;
                case /* com.midnights.game.SceneGalleryCharAmusementInfo char_amusement_info */ 1086:
                    message.info = {
                        oneofKind: "charAmusementInfo",
                        charAmusementInfo: SceneGalleryCharAmusementInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).charAmusementInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GalleryStageType stage = 5; */
        if (message.stage !== undefined)
            writer.tag(5, WireType.Varint).int32(message.stage);
        /* repeated com.midnights.game.SceneGalleryProgressInfo progress_info_list = 4; */
        for (let i = 0; i < message.progressInfoList.length; i++)
            SceneGalleryProgressInfo.internalBinaryWrite(message.progressInfoList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 gallery_id = 2; */
        if (message.galleryId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 start_time = 3; */
        if (message.startTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.startTime);
        /* optional uint32 end_time = 11; */
        if (message.endTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.endTime);
        /* optional uint32 owner_uid = 9; */
        if (message.ownerUid !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.ownerUid);
        /* optional uint32 player_count = 1; */
        if (message.playerCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.playerCount);
        /* optional uint32 pre_start_end_time = 15; */
        if (message.preStartEndTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.preStartEndTime);
        /* com.midnights.game.SceneGalleryBalloonInfo balloon_info = 14; */
        if (message.info.oneofKind === "balloonInfo")
            SceneGalleryBalloonInfo.internalBinaryWrite(message.info.balloonInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryFallInfo fall_info = 7; */
        if (message.info.oneofKind === "fallInfo")
            SceneGalleryFallInfo.internalBinaryWrite(message.info.fallInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryFlowerInfo flower_info = 8; */
        if (message.info.oneofKind === "flowerInfo")
            SceneGalleryFlowerInfo.internalBinaryWrite(message.info.flowerInfo, writer.tag(8, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryBulletInfo bullet_info = 13; */
        if (message.info.oneofKind === "bulletInfo")
            SceneGalleryBulletInfo.internalBinaryWrite(message.info.bulletInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryBrokenFloorInfo broken_floor_info = 10; */
        if (message.info.oneofKind === "brokenFloorInfo")
            SceneGalleryBrokenFloorInfo.internalBinaryWrite(message.info.brokenFloorInfo, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryHideAndSeekInfo hide_and_seek_info = 6; */
        if (message.info.oneofKind === "hideAndSeekInfo")
            SceneGalleryHideAndSeekInfo.internalBinaryWrite(message.info.hideAndSeekInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryBuoyantCombatInfo buoyant_combat_info = 1384; */
        if (message.info.oneofKind === "buoyantCombatInfo")
            SceneGalleryBuoyantCombatInfo.internalBinaryWrite(message.info.buoyantCombatInfo, writer.tag(1384, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryBounceConjuringInfo bounce_conjuring_info = 708; */
        if (message.info.oneofKind === "bounceConjuringInfo")
            SceneGalleryBounceConjuringInfo.internalBinaryWrite(message.info.bounceConjuringInfo, writer.tag(708, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryHandballInfo handball_info = 1997; */
        if (message.info.oneofKind === "handballInfo")
            SceneGalleryHandballInfo.internalBinaryWrite(message.info.handballInfo, writer.tag(1997, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGallerySumoInfo sumo_info = 811; */
        if (message.info.oneofKind === "sumoInfo")
            SceneGallerySumoInfo.internalBinaryWrite(message.info.sumoInfo, writer.tag(811, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGallerySalvagePreventInfo salvage_prevent_info = 1700; */
        if (message.info.oneofKind === "salvagePreventInfo")
            SceneGallerySalvagePreventInfo.internalBinaryWrite(message.info.salvagePreventInfo, writer.tag(1700, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGallerySalvageEscortInfo salvage_escort_info = 759; */
        if (message.info.oneofKind === "salvageEscortInfo")
            SceneGallerySalvageEscortInfo.internalBinaryWrite(message.info.salvageEscortInfo, writer.tag(759, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryHomeBalloonInfo home_balloon_info = 1034; */
        if (message.info.oneofKind === "homeBalloonInfo")
            SceneGalleryHomeBalloonInfo.internalBinaryWrite(message.info.homeBalloonInfo, writer.tag(1034, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryCrystalLinkInfo crystal_link_info = 2004; */
        if (message.info.oneofKind === "crystalLinkInfo")
            SceneGalleryCrystalLinkInfo.internalBinaryWrite(message.info.crystalLinkInfo, writer.tag(2004, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryIrodoriMasterInfo irodori_master_info = 1953; */
        if (message.info.oneofKind === "irodoriMasterInfo")
            SceneGalleryIrodoriMasterInfo.internalBinaryWrite(message.info.irodoriMasterInfo, writer.tag(1953, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryLuminanceStoneChallengeInfo luminance_stone_challenge_info = 106; */
        if (message.info.oneofKind === "luminanceStoneChallengeInfo")
            SceneGalleryLuminanceStoneChallengeInfo.internalBinaryWrite(message.info.luminanceStoneChallengeInfo, writer.tag(106, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryHomeSeekFurnitureInfo home_seek_furniture_info = 1456; */
        if (message.info.oneofKind === "homeSeekFurnitureInfo")
            SceneGalleryHomeSeekFurnitureInfo.internalBinaryWrite(message.info.homeSeekFurnitureInfo, writer.tag(1456, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryIslandPartyDownHillInfo island_party_down_hill_info = 462; */
        if (message.info.oneofKind === "islandPartyDownHillInfo")
            SceneGalleryIslandPartyDownHillInfo.internalBinaryWrite(message.info.islandPartyDownHillInfo, writer.tag(462, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGallerySummerTimeV2BoatInfo summer_time_v2_boat_info = 296; */
        if (message.info.oneofKind === "summerTimeV2BoatInfo")
            SceneGallerySummerTimeV2BoatInfo.internalBinaryWrite(message.info.summerTimeV2BoatInfo, writer.tag(296, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryIslandPartyRaftInfo island_party_raft_info = 1805; */
        if (message.info.oneofKind === "islandPartyRaftInfo")
            SceneGalleryIslandPartyRaftInfo.internalBinaryWrite(message.info.islandPartyRaftInfo, writer.tag(1805, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryIslandPartySailInfo island_party_sail_info = 1133; */
        if (message.info.oneofKind === "islandPartySailInfo")
            SceneGalleryIslandPartySailInfo.internalBinaryWrite(message.info.islandPartySailInfo, writer.tag(1133, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryInstaleSprayInfo instable_spray_info = 1196; */
        if (message.info.oneofKind === "instableSprayInfo")
            SceneGalleryInstaleSprayInfo.internalBinaryWrite(message.info.instableSprayInfo, writer.tag(1196, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryMuqadasPotionInfo muqadas_potion_info = 865; */
        if (message.info.oneofKind === "muqadasPotionInfo")
            SceneGalleryMuqadasPotionInfo.internalBinaryWrite(message.info.muqadasPotionInfo, writer.tag(865, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryTreasureSeelieInfo treasure_seelie_info = 1525; */
        if (message.info.oneofKind === "treasureSeelieInfo")
            SceneGalleryTreasureSeelieInfo.internalBinaryWrite(message.info.treasureSeelieInfo, writer.tag(1525, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryVintageHuntingInfo vintage_hunting_info = 254; */
        if (message.info.oneofKind === "vintageHuntingInfo")
            SceneGalleryVintageHuntingInfo.internalBinaryWrite(message.info.vintageHuntingInfo, writer.tag(254, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryWindFieldInfo wind_field_info = 1080; */
        if (message.info.oneofKind === "windFieldInfo")
            SceneGalleryWindFieldInfo.internalBinaryWrite(message.info.windFieldInfo, writer.tag(1080, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryFungusFighterTrainingInfo fungus_fighter_training_info = 1328; */
        if (message.info.oneofKind === "fungusFighterTrainingInfo")
            SceneGalleryFungusFighterTrainingInfo.internalBinaryWrite(message.info.fungusFighterTrainingInfo, writer.tag(1328, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryEffigyChallengeV2Info effigy_challenge_info = 882; */
        if (message.info.oneofKind === "effigyChallengeInfo")
            SceneGalleryEffigyChallengeV2Info.internalBinaryWrite(message.info.effigyChallengeInfo, writer.tag(882, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryFungusFighterCaptureInfo fungus_fighter_capture_info = 422; */
        if (message.info.oneofKind === "fungusFighterCaptureInfo")
            SceneGalleryFungusFighterCaptureInfo.internalBinaryWrite(message.info.fungusFighterCaptureInfo, writer.tag(422, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.SceneGalleryCharAmusementInfo char_amusement_info = 1086; */
        if (message.info.oneofKind === "charAmusementInfo")
            SceneGalleryCharAmusementInfo.internalBinaryWrite(message.info.charAmusementInfo, writer.tag(1086, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryInfo
 */
export const SceneGalleryInfo = new SceneGalleryInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllSceneGalleryInfoReq$Type extends MessageType<GetAllSceneGalleryInfoReq> {
    constructor() {
        super("com.midnights.game.GetAllSceneGalleryInfoReq", []);
    }
    create(value?: PartialMessage<GetAllSceneGalleryInfoReq>): GetAllSceneGalleryInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllSceneGalleryInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllSceneGalleryInfoReq): GetAllSceneGalleryInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetAllSceneGalleryInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAllSceneGalleryInfoReq
 */
export const GetAllSceneGalleryInfoReq = new GetAllSceneGalleryInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetAllSceneGalleryInfoRsp$Type extends MessageType<GetAllSceneGalleryInfoRsp> {
    constructor() {
        super("com.midnights.game.GetAllSceneGalleryInfoRsp", [
            { no: 12, name: "gallery_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => SceneGalleryInfo },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetAllSceneGalleryInfoRsp>): GetAllSceneGalleryInfoRsp {
        const message = { galleryInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetAllSceneGalleryInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetAllSceneGalleryInfoRsp): GetAllSceneGalleryInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.SceneGalleryInfo gallery_info_list */ 12:
                    message.galleryInfoList.push(SceneGalleryInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetAllSceneGalleryInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.SceneGalleryInfo gallery_info_list = 12; */
        for (let i = 0; i < message.galleryInfoList.length; i++)
            SceneGalleryInfo.internalBinaryWrite(message.galleryInfoList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetAllSceneGalleryInfoRsp
 */
export const GetAllSceneGalleryInfoRsp = new GetAllSceneGalleryInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryFlowerCatchNotify$Type extends MessageType<GalleryFlowerCatchNotify> {
    constructor() {
        super("com.midnights.game.GalleryFlowerCatchNotify", [
            { no: 12, name: "cur_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "add_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryFlowerCatchNotify>): GalleryFlowerCatchNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryFlowerCatchNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryFlowerCatchNotify): GalleryFlowerCatchNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cur_score */ 12:
                    message.curScore = reader.uint32();
                    break;
                case /* optional uint32 add_score */ 14:
                    message.addScore = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryFlowerCatchNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cur_score = 12; */
        if (message.curScore !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.curScore);
        /* optional uint32 add_score = 14; */
        if (message.addScore !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.addScore);
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryFlowerCatchNotify
 */
export const GalleryFlowerCatchNotify = new GalleryFlowerCatchNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryPreStartNotify$Type extends MessageType<GalleryPreStartNotify> {
    constructor() {
        super("com.midnights.game.GalleryPreStartNotify", [
            { no: 10, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "pre_start_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryPreStartNotify>): GalleryPreStartNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryPreStartNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryPreStartNotify): GalleryPreStartNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 10:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 pre_start_end_time */ 9:
                    message.preStartEndTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryPreStartNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 10; */
        if (message.galleryId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 pre_start_end_time = 9; */
        if (message.preStartEndTime !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.preStartEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryPreStartNotify
 */
export const GalleryPreStartNotify = new GalleryPreStartNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryBulletHitNotify$Type extends MessageType<GalleryBulletHitNotify> {
    constructor() {
        super("com.midnights.game.GalleryBulletHitNotify", [
            { no: 14, name: "hit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryBulletHitNotify>): GalleryBulletHitNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryBulletHitNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryBulletHitNotify): GalleryBulletHitNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 hit_count */ 14:
                    message.hitCount = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 12:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryBulletHitNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 hit_count = 14; */
        if (message.hitCount !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.hitCount);
        /* optional uint32 gallery_id = 12; */
        if (message.galleryId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryBulletHitNotify
 */
export const GalleryBulletHitNotify = new GalleryBulletHitNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryBrokenFloorFallNotify$Type extends MessageType<GalleryBrokenFloorFallNotify> {
    constructor() {
        super("com.midnights.game.GalleryBrokenFloorFallNotify", [
            { no: 3, name: "fall_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryBrokenFloorFallNotify>): GalleryBrokenFloorFallNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryBrokenFloorFallNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryBrokenFloorFallNotify): GalleryBrokenFloorFallNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 fall_count */ 3:
                    message.fallCount = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 5:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryBrokenFloorFallNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 fall_count = 3; */
        if (message.fallCount !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.fallCount);
        /* optional uint32 gallery_id = 5; */
        if (message.galleryId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryBrokenFloorFallNotify
 */
export const GalleryBrokenFloorFallNotify = new GalleryBrokenFloorFallNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InterruptGalleryReq$Type extends MessageType<InterruptGalleryReq> {
    constructor() {
        super("com.midnights.game.InterruptGalleryReq", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InterruptGalleryReq>): InterruptGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InterruptGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InterruptGalleryReq): InterruptGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InterruptGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InterruptGalleryReq
 */
export const InterruptGalleryReq = new InterruptGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InterruptGalleryRsp$Type extends MessageType<InterruptGalleryRsp> {
    constructor() {
        super("com.midnights.game.InterruptGalleryRsp", [
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 9, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InterruptGalleryRsp>): InterruptGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InterruptGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InterruptGalleryRsp): InterruptGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 gallery_id */ 9:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InterruptGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        /* optional uint32 gallery_id = 9; */
        if (message.galleryId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InterruptGalleryRsp
 */
export const InterruptGalleryRsp = new InterruptGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryInfoNotify$Type extends MessageType<SceneGalleryInfoNotify> {
    constructor() {
        super("com.midnights.game.SceneGalleryInfoNotify", [
            { no: 4, name: "gallery_info", kind: "message", T: () => SceneGalleryInfo }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryInfoNotify>): SceneGalleryInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryInfoNotify): SceneGalleryInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.SceneGalleryInfo gallery_info */ 4:
                    message.galleryInfo = SceneGalleryInfo.internalBinaryRead(reader, reader.uint32(), options, message.galleryInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.SceneGalleryInfo gallery_info = 4; */
        if (message.galleryInfo)
            SceneGalleryInfo.internalBinaryWrite(message.galleryInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryInfoNotify
 */
export const SceneGalleryInfoNotify = new SceneGalleryInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BuoyantCombatGallerySettleInfo$Type extends MessageType<BuoyantCombatGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.BuoyantCombatGallerySettleInfo", [
            { no: 12, name: "gallery_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "kill_target_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "kill_special_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "gallery_multiple", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BuoyantCombatGallerySettleInfo>): BuoyantCombatGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BuoyantCombatGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BuoyantCombatGallerySettleInfo): BuoyantCombatGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_level */ 12:
                    message.galleryLevel = reader.uint32();
                    break;
                case /* optional uint32 final_score */ 15:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 kill_monster_count */ 9:
                    message.killMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 kill_target_count */ 1:
                    message.killTargetCount = reader.uint32();
                    break;
                case /* optional uint32 kill_special_monster_count */ 4:
                    message.killSpecialMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 2:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 gallery_multiple */ 11:
                    message.galleryMultiple = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BuoyantCombatGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_level = 12; */
        if (message.galleryLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.galleryLevel);
        /* optional uint32 final_score = 15; */
        if (message.finalScore !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 kill_monster_count = 9; */
        if (message.killMonsterCount !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.killMonsterCount);
        /* optional uint32 kill_target_count = 1; */
        if (message.killTargetCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.killTargetCount);
        /* optional uint32 kill_special_monster_count = 4; */
        if (message.killSpecialMonsterCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.killSpecialMonsterCount);
        /* optional uint32 gallery_id = 2; */
        if (message.galleryId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 gallery_multiple = 11; */
        if (message.galleryMultiple !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.galleryMultiple);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BuoyantCombatGallerySettleInfo
 */
export const BuoyantCombatGallerySettleInfo = new BuoyantCombatGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BounceConjuringGallerySettleInfo$Type extends MessageType<BounceConjuringGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.BounceConjuringGallerySettleInfo", [
            { no: 14, name: "player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 5, name: "destroyed_machine_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "fever_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "normal_hit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "damage", kind: "scalar", opt: true, T: 2 /*ScalarType.FLOAT*/ },
            { no: 15, name: "gadget_count_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 12, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "perfect_hit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "card_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExhibitionDisplayInfo }
        ]);
    }
    create(value?: PartialMessage<BounceConjuringGallerySettleInfo>): BounceConjuringGallerySettleInfo {
        const message = { gadgetCountMap: {}, cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BounceConjuringGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BounceConjuringGallerySettleInfo): BounceConjuringGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 14:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                case /* optional uint32 destroyed_machine_count */ 5:
                    message.destroyedMachineCount = reader.uint32();
                    break;
                case /* optional uint32 fever_count */ 6:
                    message.feverCount = reader.uint32();
                    break;
                case /* optional uint32 normal_hit_count */ 4:
                    message.normalHitCount = reader.uint32();
                    break;
                case /* optional float damage */ 11:
                    message.damage = reader.float();
                    break;
                case /* map<uint32, uint32> gadget_count_map */ 15:
                    this.binaryReadMap15(message.gadgetCountMap, reader, options);
                    break;
                case /* optional uint32 score */ 12:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 perfect_hit_count */ 8:
                    message.perfectHitCount = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ExhibitionDisplayInfo card_list */ 7:
                    message.cardList.push(ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap15(map: BounceConjuringGallerySettleInfo["gadgetCountMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BounceConjuringGallerySettleInfo["gadgetCountMap"] | undefined, val: BounceConjuringGallerySettleInfo["gadgetCountMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.BounceConjuringGallerySettleInfo.gadget_count_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BounceConjuringGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 14; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 destroyed_machine_count = 5; */
        if (message.destroyedMachineCount !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.destroyedMachineCount);
        /* optional uint32 fever_count = 6; */
        if (message.feverCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.feverCount);
        /* optional uint32 normal_hit_count = 4; */
        if (message.normalHitCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.normalHitCount);
        /* optional float damage = 11; */
        if (message.damage !== undefined)
            writer.tag(11, WireType.Bit32).float(message.damage);
        /* map<uint32, uint32> gadget_count_map = 15; */
        for (let k of Object.keys(message.gadgetCountMap))
            writer.tag(15, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.gadgetCountMap[k as any]).join();
        /* optional uint32 score = 12; */
        if (message.score !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.score);
        /* optional uint32 perfect_hit_count = 8; */
        if (message.perfectHitCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.perfectHitCount);
        /* repeated com.midnights.game.ExhibitionDisplayInfo card_list = 7; */
        for (let i = 0; i < message.cardList.length; i++)
            ExhibitionDisplayInfo.internalBinaryWrite(message.cardList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BounceConjuringGallerySettleInfo
 */
export const BounceConjuringGallerySettleInfo = new BounceConjuringGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryBounceConjuringHitNotify$Type extends MessageType<GalleryBounceConjuringHitNotify> {
    constructor() {
        super("com.midnights.game.GalleryBounceConjuringHitNotify", [
            { no: 8, name: "add_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_perfect", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryBounceConjuringHitNotify>): GalleryBounceConjuringHitNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryBounceConjuringHitNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryBounceConjuringHitNotify): GalleryBounceConjuringHitNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 add_score */ 8:
                    message.addScore = reader.uint32();
                    break;
                case /* optional bool is_perfect */ 5:
                    message.isPerfect = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 10:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryBounceConjuringHitNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 add_score = 8; */
        if (message.addScore !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.addScore);
        /* optional bool is_perfect = 5; */
        if (message.isPerfect !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isPerfect);
        /* optional uint32 gallery_id = 10; */
        if (message.galleryId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryBounceConjuringHitNotify
 */
export const GalleryBounceConjuringHitNotify = new GalleryBounceConjuringHitNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GallerySumoKillMonsterNotify$Type extends MessageType<GallerySumoKillMonsterNotify> {
    constructor() {
        super("com.midnights.game.GallerySumoKillMonsterNotify", [
            { no: 4, name: "kill_normal_mosnter_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "kill_elite_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GallerySumoKillMonsterNotify>): GallerySumoKillMonsterNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GallerySumoKillMonsterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GallerySumoKillMonsterNotify): GallerySumoKillMonsterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 kill_normal_mosnter_num */ 4:
                    message.killNormalMosnterNum = reader.uint32();
                    break;
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 kill_elite_monster_num */ 14:
                    message.killEliteMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 11:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GallerySumoKillMonsterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 kill_normal_mosnter_num = 4; */
        if (message.killNormalMosnterNum !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.killNormalMosnterNum);
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* optional uint32 kill_elite_monster_num = 14; */
        if (message.killEliteMonsterNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.killEliteMonsterNum);
        /* optional uint32 gallery_id = 11; */
        if (message.galleryId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GallerySumoKillMonsterNotify
 */
export const GallerySumoKillMonsterNotify = new GallerySumoKillMonsterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryCrystalLinkKillMonsterNotify$Type extends MessageType<GalleryCrystalLinkKillMonsterNotify> {
    constructor() {
        super("com.midnights.game.GalleryCrystalLinkKillMonsterNotify", [
            { no: 7, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryCrystalLinkKillMonsterNotify>): GalleryCrystalLinkKillMonsterNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryCrystalLinkKillMonsterNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryCrystalLinkKillMonsterNotify): GalleryCrystalLinkKillMonsterNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 7:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 9:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryCrystalLinkKillMonsterNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 7; */
        if (message.score !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.score);
        /* optional uint32 gallery_id = 9; */
        if (message.galleryId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryCrystalLinkKillMonsterNotify
 */
export const GalleryCrystalLinkKillMonsterNotify = new GalleryCrystalLinkKillMonsterNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryCrystalLinkBuffInfoNotify$Type extends MessageType<GalleryCrystalLinkBuffInfoNotify> {
    constructor() {
        super("com.midnights.game.GalleryCrystalLinkBuffInfoNotify", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_buff_valid", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryCrystalLinkBuffInfoNotify>): GalleryCrystalLinkBuffInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryCrystalLinkBuffInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryCrystalLinkBuffInfoNotify): GalleryCrystalLinkBuffInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional bool is_buff_valid */ 11:
                    message.isBuffValid = reader.bool();
                    break;
                case /* optional uint32 buff_id */ 14:
                    message.buffId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryCrystalLinkBuffInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        /* optional bool is_buff_valid = 11; */
        if (message.isBuffValid !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isBuffValid);
        /* optional uint32 buff_id = 14; */
        if (message.buffId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.buffId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryCrystalLinkBuffInfoNotify
 */
export const GalleryCrystalLinkBuffInfoNotify = new GalleryCrystalLinkBuffInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FishInfo$Type extends MessageType<FishInfo> {
    constructor() {
        super("com.midnights.game.FishInfo", [
            { no: 11, name: "free_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "into_bag_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FishInfo>): FishInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FishInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FishInfo): FishInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 free_count */ 11:
                    message.freeCount = reader.uint32();
                    break;
                case /* optional uint32 into_bag_count */ 12:
                    message.intoBagCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FishInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 free_count = 11; */
        if (message.freeCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.freeCount);
        /* optional uint32 into_bag_count = 12; */
        if (message.intoBagCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.intoBagCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishInfo
 */
export const FishInfo = new FishInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FishingScore$Type extends MessageType<FishingScore> {
    constructor() {
        super("com.midnights.game.FishingScore", [
            { no: 2, name: "fishing_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_new_record", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FishingScore>): FishingScore {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FishingScore>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FishingScore): FishingScore {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 fishing_score */ 2:
                    message.fishingScore = reader.uint32();
                    break;
                case /* optional bool is_new_record */ 4:
                    message.isNewRecord = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FishingScore, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 fishing_score = 2; */
        if (message.fishingScore !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.fishingScore);
        /* optional bool is_new_record = 4; */
        if (message.isNewRecord !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isNewRecord);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishingScore
 */
export const FishingScore = new FishingScore$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FishingGallerySettleInfo$Type extends MessageType<FishingGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.FishingGallerySettleInfo", [
            { no: 11, name: "fish_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => FishInfo } },
            { no: 15, name: "fishing_score_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => FishingScore }
        ]);
    }
    create(value?: PartialMessage<FishingGallerySettleInfo>): FishingGallerySettleInfo {
        const message = { fishMap: {}, fishingScoreList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FishingGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FishingGallerySettleInfo): FishingGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, com.midnights.game.FishInfo> fish_map */ 11:
                    this.binaryReadMap11(message.fishMap, reader, options);
                    break;
                case /* repeated com.midnights.game.FishingScore fishing_score_list */ 15:
                    message.fishingScoreList.push(FishingScore.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap11(map: FishingGallerySettleInfo["fishMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof FishingGallerySettleInfo["fishMap"] | undefined, val: FishingGallerySettleInfo["fishMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = FishInfo.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field com.midnights.game.FishingGallerySettleInfo.fish_map");
            }
        }
        map[key ?? 0] = val ?? FishInfo.create();
    }
    internalBinaryWrite(message: FishingGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, com.midnights.game.FishInfo> fish_map = 11; */
        for (let k of Object.keys(message.fishMap)) {
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            FishInfo.internalBinaryWrite(message.fishMap[k as any], writer, options);
            writer.join().join();
        }
        /* repeated com.midnights.game.FishingScore fishing_score_list = 15; */
        for (let i = 0; i < message.fishingScoreList.length; i++)
            FishingScore.internalBinaryWrite(message.fishingScoreList[i], writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FishingGallerySettleInfo
 */
export const FishingGallerySettleInfo = new FishingGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RacingGallerySettleInfo$Type extends MessageType<RacingGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.RacingGallerySettleInfo", [
            { no: 6, name: "winner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 1, name: "use_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<RacingGallerySettleInfo>): RacingGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RacingGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RacingGallerySettleInfo): RacingGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 winner_uid */ 6:
                    message.winnerUid = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 4:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 use_time */ 1:
                    message.useTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RacingGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 winner_uid = 6; */
        if (message.winnerUid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.winnerUid);
        /* optional com.midnights.game.GalleryStopReason reason = 4; */
        if (message.reason !== undefined)
            writer.tag(4, WireType.Varint).int32(message.reason);
        /* optional uint32 use_time = 1; */
        if (message.useTime !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.useTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.RacingGallerySettleInfo
 */
export const RacingGallerySettleInfo = new RacingGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvagePreventGallerySettleInfo$Type extends MessageType<SalvagePreventGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.SalvagePreventGallerySettleInfo", [
            { no: 8, name: "time_remain", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.SalvagePreventStopReason", SalvagePreventStopReason] },
            { no: 13, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SalvagePreventGallerySettleInfo>): SalvagePreventGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvagePreventGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvagePreventGallerySettleInfo): SalvagePreventGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 time_remain */ 8:
                    message.timeRemain = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvagePreventStopReason reason */ 7:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 final_score */ 13:
                    message.finalScore = reader.uint32();
                    break;
                case /* optional uint32 monster_count */ 15:
                    message.monsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvagePreventGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 time_remain = 8; */
        if (message.timeRemain !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.timeRemain);
        /* optional com.midnights.game.SalvagePreventStopReason reason = 7; */
        if (message.reason !== undefined)
            writer.tag(7, WireType.Varint).int32(message.reason);
        /* optional uint32 final_score = 13; */
        if (message.finalScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.finalScore);
        /* optional uint32 monster_count = 15; */
        if (message.monsterCount !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.monsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvagePreventGallerySettleInfo
 */
export const SalvagePreventGallerySettleInfo = new SalvagePreventGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SalvageEscortGallerySettleInfo$Type extends MessageType<SalvageEscortGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.SalvageEscortGallerySettleInfo", [
            { no: 14, name: "time_remain", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.SalvageEscortStopReason", SalvageEscortStopReason] }
        ]);
    }
    create(value?: PartialMessage<SalvageEscortGallerySettleInfo>): SalvageEscortGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SalvageEscortGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SalvageEscortGallerySettleInfo): SalvageEscortGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 time_remain */ 14:
                    message.timeRemain = reader.uint32();
                    break;
                case /* optional com.midnights.game.SalvageEscortStopReason reason */ 7:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SalvageEscortGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 time_remain = 14; */
        if (message.timeRemain !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.timeRemain);
        /* optional com.midnights.game.SalvageEscortStopReason reason = 7; */
        if (message.reason !== undefined)
            writer.tag(7, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SalvageEscortGallerySettleInfo
 */
export const SalvageEscortGallerySettleInfo = new SalvageEscortGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BalloonGallerySettleInfo$Type extends MessageType<BalloonGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.BalloonGallerySettleInfo", [
            { no: 8, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 10, name: "hit_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "owner_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BalloonGallerySettleInfo>): BalloonGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BalloonGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BalloonGallerySettleInfo): BalloonGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 8:
                    message.score = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 14:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 hit_count */ 10:
                    message.hitCount = reader.uint32();
                    break;
                case /* optional uint32 owner_uid */ 6:
                    message.ownerUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BalloonGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 8; */
        if (message.score !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.score);
        /* optional com.midnights.game.GalleryStopReason reason = 14; */
        if (message.reason !== undefined)
            writer.tag(14, WireType.Varint).int32(message.reason);
        /* optional uint32 hit_count = 10; */
        if (message.hitCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.hitCount);
        /* optional uint32 owner_uid = 6; */
        if (message.ownerUid !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.ownerUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BalloonGallerySettleInfo
 */
export const BalloonGallerySettleInfo = new BalloonGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IrodoriMasterGallerySettleInfo$Type extends MessageType<IrodoriMasterGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.IrodoriMasterGallerySettleInfo", [
            { no: 15, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 11, name: "is_finish", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "finish_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "difficult", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "level_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IrodoriMasterGallerySettleInfo>): IrodoriMasterGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IrodoriMasterGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IrodoriMasterGallerySettleInfo): IrodoriMasterGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GalleryStopReason reason */ 15:
                    message.reason = reader.int32();
                    break;
                case /* optional bool is_finish */ 11:
                    message.isFinish = reader.bool();
                    break;
                case /* optional uint32 finish_time */ 14:
                    message.finishTime = reader.uint32();
                    break;
                case /* optional uint32 difficult */ 6:
                    message.difficult = reader.uint32();
                    break;
                case /* optional uint32 level_id */ 4:
                    message.levelId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IrodoriMasterGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GalleryStopReason reason = 15; */
        if (message.reason !== undefined)
            writer.tag(15, WireType.Varint).int32(message.reason);
        /* optional bool is_finish = 11; */
        if (message.isFinish !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isFinish);
        /* optional uint32 finish_time = 14; */
        if (message.finishTime !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.finishTime);
        /* optional uint32 difficult = 6; */
        if (message.difficult !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.difficult);
        /* optional uint32 level_id = 4; */
        if (message.levelId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.levelId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IrodoriMasterGallerySettleInfo
 */
export const IrodoriMasterGallerySettleInfo = new IrodoriMasterGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PhotoGallerySettleInfo$Type extends MessageType<PhotoGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.PhotoGallerySettleInfo", [
            { no: 7, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] }
        ]);
    }
    create(value?: PartialMessage<PhotoGallerySettleInfo>): PhotoGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PhotoGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PhotoGallerySettleInfo): PhotoGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GalleryStopReason reason */ 7:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PhotoGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GalleryStopReason reason = 7; */
        if (message.reason !== undefined)
            writer.tag(7, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PhotoGallerySettleInfo
 */
export const PhotoGallerySettleInfo = new PhotoGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class LuminanceStoneChallengeGallerySettleInfo$Type extends MessageType<LuminanceStoneChallengeGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.LuminanceStoneChallengeGallerySettleInfo", [
            { no: 12, name: "kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "kill_special_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "clean_mud_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 13, name: "final_score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<LuminanceStoneChallengeGallerySettleInfo>): LuminanceStoneChallengeGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<LuminanceStoneChallengeGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: LuminanceStoneChallengeGallerySettleInfo): LuminanceStoneChallengeGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 kill_monster_count */ 12:
                    message.killMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 kill_special_monster_count */ 8:
                    message.killSpecialMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 clean_mud_count */ 10:
                    message.cleanMudCount = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 2:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 11:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 final_score */ 13:
                    message.finalScore = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: LuminanceStoneChallengeGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 kill_monster_count = 12; */
        if (message.killMonsterCount !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.killMonsterCount);
        /* optional uint32 kill_special_monster_count = 8; */
        if (message.killSpecialMonsterCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.killSpecialMonsterCount);
        /* optional uint32 clean_mud_count = 10; */
        if (message.cleanMudCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.cleanMudCount);
        /* optional uint32 gallery_id = 2; */
        if (message.galleryId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.galleryId);
        /* optional com.midnights.game.GalleryStopReason reason = 11; */
        if (message.reason !== undefined)
            writer.tag(11, WireType.Varint).int32(message.reason);
        /* optional uint32 final_score = 13; */
        if (message.finalScore !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.finalScore);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.LuminanceStoneChallengeGallerySettleInfo
 */
export const LuminanceStoneChallengeGallerySettleInfo = new LuminanceStoneChallengeGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HomeGalleryInPlayingNotify$Type extends MessageType<HomeGalleryInPlayingNotify> {
    constructor() {
        super("com.midnights.game.HomeGalleryInPlayingNotify", [
            { no: 13, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<HomeGalleryInPlayingNotify>): HomeGalleryInPlayingNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<HomeGalleryInPlayingNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HomeGalleryInPlayingNotify): HomeGalleryInPlayingNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 13:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HomeGalleryInPlayingNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 13; */
        if (message.galleryId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.HomeGalleryInPlayingNotify
 */
export const HomeGalleryInPlayingNotify = new HomeGalleryInPlayingNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SummerTimeV2BoatGallerySettleInfo$Type extends MessageType<SummerTimeV2BoatGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.SummerTimeV2BoatGallerySettleInfo", [
            { no: 7, name: "param1", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "param2", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 6, name: "param3", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SummerTimeV2BoatGallerySettleInfo>): SummerTimeV2BoatGallerySettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SummerTimeV2BoatGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SummerTimeV2BoatGallerySettleInfo): SummerTimeV2BoatGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 param1 */ 7:
                    message.param1 = reader.uint32();
                    break;
                case /* optional uint32 param2 */ 2:
                    message.param2 = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 3:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 param3 */ 6:
                    message.param3 = reader.uint32();
                    break;
                case /* optional uint32 used_time */ 12:
                    message.usedTime = reader.uint32();
                    break;
                case /* optional uint32 gallery_id */ 1:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SummerTimeV2BoatGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 param1 = 7; */
        if (message.param1 !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.param1);
        /* optional uint32 param2 = 2; */
        if (message.param2 !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.param2);
        /* optional com.midnights.game.GalleryStopReason reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.reason);
        /* optional uint32 param3 = 6; */
        if (message.param3 !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.param3);
        /* optional uint32 used_time = 12; */
        if (message.usedTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.usedTime);
        /* optional uint32 gallery_id = 1; */
        if (message.galleryId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SummerTimeV2BoatGallerySettleInfo
 */
export const SummerTimeV2BoatGallerySettleInfo = new SummerTimeV2BoatGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryIslandPartyDownHillInfoNotify$Type extends MessageType<GalleryIslandPartyDownHillInfoNotify> {
    constructor() {
        super("com.midnights.game.GalleryIslandPartyDownHillInfoNotify", [
            { no: 2, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "total_kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryIslandPartyDownHillInfoNotify>): GalleryIslandPartyDownHillInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryIslandPartyDownHillInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryIslandPartyDownHillInfoNotify): GalleryIslandPartyDownHillInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 2:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional uint32 coin */ 9:
                    message.coin = reader.uint32();
                    break;
                case /* optional uint32 total_kill_monster_count */ 11:
                    message.totalKillMonsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryIslandPartyDownHillInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 2; */
        if (message.galleryId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.galleryId);
        /* optional uint32 coin = 9; */
        if (message.coin !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.coin);
        /* optional uint32 total_kill_monster_count = 11; */
        if (message.totalKillMonsterCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.totalKillMonsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryIslandPartyDownHillInfoNotify
 */
export const GalleryIslandPartyDownHillInfoNotify = new GalleryIslandPartyDownHillInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyRaftInfoNotify$Type extends MessageType<IslandPartyRaftInfoNotify> {
    constructor() {
        super("com.midnights.game.IslandPartyRaftInfoNotify", [
            { no: 7, name: "point_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "fuel", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "component", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IslandPartyRaftInfoNotify>): IslandPartyRaftInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartyRaftInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartyRaftInfoNotify): IslandPartyRaftInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 point_id */ 7:
                    message.pointId = reader.uint32();
                    break;
                case /* optional uint32 coin */ 15:
                    message.coin = reader.uint32();
                    break;
                case /* optional uint32 fuel */ 3:
                    message.fuel = reader.uint32();
                    break;
                case /* optional uint32 component */ 13:
                    message.component = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartyRaftInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 point_id = 7; */
        if (message.pointId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.pointId);
        /* optional uint32 coin = 15; */
        if (message.coin !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.coin);
        /* optional uint32 fuel = 3; */
        if (message.fuel !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.fuel);
        /* optional uint32 component = 13; */
        if (message.component !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.component);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyRaftInfoNotify
 */
export const IslandPartyRaftInfoNotify = new IslandPartyRaftInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartySailInfoNotify$Type extends MessageType<IslandPartySailInfoNotify> {
    constructor() {
        super("com.midnights.game.IslandPartySailInfoNotify", [
            { no: 10, name: "coin", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "stage", kind: "enum", opt: true, T: () => ["com.midnights.game.IslandPartySailStage", IslandPartySailStage, "ISLAND_PARTY_SAIL_STAGE_"] },
            { no: 4, name: "kill_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<IslandPartySailInfoNotify>): IslandPartySailInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartySailInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartySailInfoNotify): IslandPartySailInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 coin */ 10:
                    message.coin = reader.uint32();
                    break;
                case /* optional com.midnights.game.IslandPartySailStage stage */ 8:
                    message.stage = reader.int32();
                    break;
                case /* optional uint32 kill_monster_count */ 4:
                    message.killMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 progress */ 15:
                    message.progress = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartySailInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 coin = 10; */
        if (message.coin !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.coin);
        /* optional com.midnights.game.IslandPartySailStage stage = 8; */
        if (message.stage !== undefined)
            writer.tag(8, WireType.Varint).int32(message.stage);
        /* optional uint32 kill_monster_count = 4; */
        if (message.killMonsterCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.killMonsterCount);
        /* optional uint32 progress = 15; */
        if (message.progress !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.progress);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartySailInfoNotify
 */
export const IslandPartySailInfoNotify = new IslandPartySailInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class IslandPartyGallerySettleInfo$Type extends MessageType<IslandPartyGallerySettleInfo> {
    constructor() {
        super("com.midnights.game.IslandPartyGallerySettleInfo", [
            { no: 13, name: "player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 11, name: "card_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExhibitionDisplayInfo }
        ]);
    }
    create(value?: PartialMessage<IslandPartyGallerySettleInfo>): IslandPartyGallerySettleInfo {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<IslandPartyGallerySettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: IslandPartyGallerySettleInfo): IslandPartyGallerySettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 13:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                case /* repeated com.midnights.game.ExhibitionDisplayInfo card_list */ 11:
                    message.cardList.push(ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: IslandPartyGallerySettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 13; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ExhibitionDisplayInfo card_list = 11; */
        for (let i = 0; i < message.cardList.length; i++)
            ExhibitionDisplayInfo.internalBinaryWrite(message.cardList[i], writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.IslandPartyGallerySettleInfo
 */
export const IslandPartyGallerySettleInfo = new IslandPartyGallerySettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackRebornGalleryReq$Type extends MessageType<BackRebornGalleryReq> {
    constructor() {
        super("com.midnights.game.BackRebornGalleryReq", [
            { no: 15, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<BackRebornGalleryReq>): BackRebornGalleryReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackRebornGalleryReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackRebornGalleryReq): BackRebornGalleryReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 15:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackRebornGalleryReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 15; */
        if (message.galleryId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BackRebornGalleryReq
 */
export const BackRebornGalleryReq = new BackRebornGalleryReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class BackRebornGalleryRsp$Type extends MessageType<BackRebornGalleryRsp> {
    constructor() {
        super("com.midnights.game.BackRebornGalleryRsp", [
            { no: 9, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<BackRebornGalleryRsp>): BackRebornGalleryRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BackRebornGalleryRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BackRebornGalleryRsp): BackRebornGalleryRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 gallery_id */ 9:
                    message.galleryId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: BackRebornGalleryRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 gallery_id = 9; */
        if (message.galleryId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.galleryId);
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.BackRebornGalleryRsp
 */
export const BackRebornGalleryRsp = new BackRebornGalleryRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GalleryWillStartCountdownNotify$Type extends MessageType<GalleryWillStartCountdownNotify> {
    constructor() {
        super("com.midnights.game.GalleryWillStartCountdownNotify", [
            { no: 11, name: "start_source", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStartSource", GalleryStartSource] },
            { no: 12, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_end", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "gallery_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GalleryWillStartCountdownNotify>): GalleryWillStartCountdownNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GalleryWillStartCountdownNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GalleryWillStartCountdownNotify): GalleryWillStartCountdownNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GalleryStartSource start_source */ 11:
                    message.startSource = reader.int32();
                    break;
                case /* optional uint32 end_time */ 12:
                    message.endTime = reader.uint32();
                    break;
                case /* optional bool is_end */ 7:
                    message.isEnd = reader.bool();
                    break;
                case /* optional uint32 gallery_id */ 14:
                    message.galleryId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GalleryWillStartCountdownNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GalleryStartSource start_source = 11; */
        if (message.startSource !== undefined)
            writer.tag(11, WireType.Varint).int32(message.startSource);
        /* optional uint32 end_time = 12; */
        if (message.endTime !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.endTime);
        /* optional bool is_end = 7; */
        if (message.isEnd !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isEnd);
        /* optional uint32 gallery_id = 14; */
        if (message.galleryId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.galleryId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GalleryWillStartCountdownNotify
 */
export const GalleryWillStartCountdownNotify = new GalleryWillStartCountdownNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class InstableSprayGalleryInfoNotify$Type extends MessageType<InstableSprayGalleryInfoNotify> {
    constructor() {
        super("com.midnights.game.InstableSprayGalleryInfoNotify", [
            { no: 3, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<InstableSprayGalleryInfoNotify>): InstableSprayGalleryInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<InstableSprayGalleryInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: InstableSprayGalleryInfoNotify): InstableSprayGalleryInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 3:
                    message.score = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: InstableSprayGalleryInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 3; */
        if (message.score !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.score);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.InstableSprayGalleryInfoNotify
 */
export const InstableSprayGalleryInfoNotify = new InstableSprayGalleryInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryMuqadasPotionInfo$Type extends MessageType<SceneGalleryMuqadasPotionInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryMuqadasPotionInfo", [
            { no: 6, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "capture_weakness_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "skill_energy", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "skill_use_limit", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryMuqadasPotionInfo>): SceneGalleryMuqadasPotionInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryMuqadasPotionInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryMuqadasPotionInfo): SceneGalleryMuqadasPotionInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 score */ 6:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 capture_weakness_count */ 4:
                    message.captureWeaknessCount = reader.uint32();
                    break;
                case /* optional uint32 skill_energy */ 10:
                    message.skillEnergy = reader.uint32();
                    break;
                case /* optional uint32 skill_use_limit */ 9:
                    message.skillUseLimit = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryMuqadasPotionInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 score = 6; */
        if (message.score !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.score);
        /* optional uint32 capture_weakness_count = 4; */
        if (message.captureWeaknessCount !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.captureWeaknessCount);
        /* optional uint32 skill_energy = 10; */
        if (message.skillEnergy !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.skillEnergy);
        /* optional uint32 skill_use_limit = 9; */
        if (message.skillUseLimit !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.skillUseLimit);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryMuqadasPotionInfo
 */
export const SceneGalleryMuqadasPotionInfo = new SceneGalleryMuqadasPotionInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingFirstStageInfo$Type extends MessageType<VintageHuntingFirstStageInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingFirstStageInfo", [
            { no: 15, name: "timid_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "brutal_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "score", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "elite_cnt", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingFirstStageInfo>): VintageHuntingFirstStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingFirstStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingFirstStageInfo): VintageHuntingFirstStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 timid_cnt */ 15:
                    message.timidCnt = reader.uint32();
                    break;
                case /* optional uint32 brutal_cnt */ 7:
                    message.brutalCnt = reader.uint32();
                    break;
                case /* optional uint32 score */ 14:
                    message.score = reader.uint32();
                    break;
                case /* optional uint32 elite_cnt */ 11:
                    message.eliteCnt = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingFirstStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 timid_cnt = 15; */
        if (message.timidCnt !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.timidCnt);
        /* optional uint32 brutal_cnt = 7; */
        if (message.brutalCnt !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.brutalCnt);
        /* optional uint32 score = 14; */
        if (message.score !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.score);
        /* optional uint32 elite_cnt = 11; */
        if (message.eliteCnt !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.eliteCnt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingFirstStageInfo
 */
export const VintageHuntingFirstStageInfo = new VintageHuntingFirstStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingSecondStageInfo$Type extends MessageType<VintageHuntingSecondStageInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingSecondStageInfo", [
            { no: 11, name: "total_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "capture_animal_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "left_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<VintageHuntingSecondStageInfo>): VintageHuntingSecondStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingSecondStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingSecondStageInfo): VintageHuntingSecondStageInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 total_num */ 11:
                    message.totalNum = reader.uint32();
                    break;
                case /* optional uint32 capture_animal_num */ 13:
                    message.captureAnimalNum = reader.uint32();
                    break;
                case /* optional uint32 left_num */ 3:
                    message.leftNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: VintageHuntingSecondStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 total_num = 11; */
        if (message.totalNum !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.totalNum);
        /* optional uint32 capture_animal_num = 13; */
        if (message.captureAnimalNum !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.captureAnimalNum);
        /* optional uint32 left_num = 3; */
        if (message.leftNum !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.leftNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingSecondStageInfo
 */
export const VintageHuntingSecondStageInfo = new VintageHuntingSecondStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class VintageHuntingThirdStageInfo$Type extends MessageType<VintageHuntingThirdStageInfo> {
    constructor() {
        super("com.midnights.game.VintageHuntingThirdStageInfo", []);
    }
    create(value?: PartialMessage<VintageHuntingThirdStageInfo>): VintageHuntingThirdStageInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageHuntingThirdStageInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageHuntingThirdStageInfo): VintageHuntingThirdStageInfo {
        return target ?? this.create();
    }
    internalBinaryWrite(message: VintageHuntingThirdStageInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.VintageHuntingThirdStageInfo
 */
export const VintageHuntingThirdStageInfo = new VintageHuntingThirdStageInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class SceneGalleryVintageHuntingInfo$Type extends MessageType<SceneGalleryVintageHuntingInfo> {
    constructor() {
        super("com.midnights.game.SceneGalleryVintageHuntingInfo", [
            { no: 7, name: "stage_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "first_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingFirstStageInfo },
            { no: 15, name: "second_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingSecondStageInfo },
            { no: 12, name: "third_stage_info", kind: "message", oneof: "info", T: () => VintageHuntingThirdStageInfo }
        ]);
    }
    create(value?: PartialMessage<SceneGalleryVintageHuntingInfo>): SceneGalleryVintageHuntingInfo {
        const message = { info: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneGalleryVintageHuntingInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneGalleryVintageHuntingInfo): SceneGalleryVintageHuntingInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 stage_id */ 7:
                    message.stageId = reader.uint32();
                    break;
                case /* com.midnights.game.VintageHuntingFirstStageInfo first_stage_info */ 2:
                    message.info = {
                        oneofKind: "firstStageInfo",
                        firstStageInfo: VintageHuntingFirstStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).firstStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingSecondStageInfo second_stage_info */ 15:
                    message.info = {
                        oneofKind: "secondStageInfo",
                        secondStageInfo: VintageHuntingSecondStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).secondStageInfo)
                    };
                    break;
                case /* com.midnights.game.VintageHuntingThirdStageInfo third_stage_info */ 12:
                    message.info = {
                        oneofKind: "thirdStageInfo",
                        thirdStageInfo: VintageHuntingThirdStageInfo.internalBinaryRead(reader, reader.uint32(), options, (message.info as any).thirdStageInfo)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneGalleryVintageHuntingInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 stage_id = 7; */
        if (message.stageId !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.stageId);
        /* com.midnights.game.VintageHuntingFirstStageInfo first_stage_info = 2; */
        if (message.info.oneofKind === "firstStageInfo")
            VintageHuntingFirstStageInfo.internalBinaryWrite(message.info.firstStageInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingSecondStageInfo second_stage_info = 15; */
        if (message.info.oneofKind === "secondStageInfo")
            VintageHuntingSecondStageInfo.internalBinaryWrite(message.info.secondStageInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* com.midnights.game.VintageHuntingThirdStageInfo third_stage_info = 12; */
        if (message.info.oneofKind === "thirdStageInfo")
            VintageHuntingThirdStageInfo.internalBinaryWrite(message.info.thirdStageInfo, writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.SceneGalleryVintageHuntingInfo
 */
export const SceneGalleryVintageHuntingInfo = new SceneGalleryVintageHuntingInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldGalleryInfoNotify$Type extends MessageType<WindFieldGalleryInfoNotify> {
    constructor() {
        super("com.midnights.game.WindFieldGalleryInfoNotify", [
            { no: 3, name: "show_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "killed_monster_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "coin_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_ball_max_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "challenge_total_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "challenge_ball_cur_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "challenge_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "element_ball_num", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindFieldGalleryInfoNotify>): WindFieldGalleryInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldGalleryInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldGalleryInfoNotify): WindFieldGalleryInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 show_id */ 3:
                    message.showId = reader.uint32();
                    break;
                case /* optional uint32 killed_monster_num */ 7:
                    message.killedMonsterNum = reader.uint32();
                    break;
                case /* optional uint32 coin_num */ 9:
                    message.coinNum = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_max_count */ 1:
                    message.challengeBallMaxCount = reader.uint32();
                    break;
                case /* optional uint32 challenge_total_time */ 5:
                    message.challengeTotalTime = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_cur_count */ 10:
                    message.challengeBallCurCount = reader.uint32();
                    break;
                case /* optional uint32 challenge_timestamp */ 4:
                    message.challengeTimestamp = reader.uint32();
                    break;
                case /* optional uint32 element_ball_num */ 14:
                    message.elementBallNum = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldGalleryInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 show_id = 3; */
        if (message.showId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.showId);
        /* optional uint32 killed_monster_num = 7; */
        if (message.killedMonsterNum !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.killedMonsterNum);
        /* optional uint32 coin_num = 9; */
        if (message.coinNum !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.coinNum);
        /* optional uint32 challenge_ball_max_count = 1; */
        if (message.challengeBallMaxCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeBallMaxCount);
        /* optional uint32 challenge_total_time = 5; */
        if (message.challengeTotalTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.challengeTotalTime);
        /* optional uint32 challenge_ball_cur_count = 10; */
        if (message.challengeBallCurCount !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.challengeBallCurCount);
        /* optional uint32 challenge_timestamp = 4; */
        if (message.challengeTimestamp !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.challengeTimestamp);
        /* optional uint32 element_ball_num = 14; */
        if (message.elementBallNum !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.elementBallNum);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldGalleryInfoNotify
 */
export const WindFieldGalleryInfoNotify = new WindFieldGalleryInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WindFieldGalleryChallengeInfoNotify$Type extends MessageType<WindFieldGalleryChallengeInfoNotify> {
    constructor() {
        super("com.midnights.game.WindFieldGalleryChallengeInfoNotify", [
            { no: 6, name: "challenge_timestamp", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "is_start", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "show_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "challenge_total_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "challenge_ball_max_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "challenge_ball_cur_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<WindFieldGalleryChallengeInfoNotify>): WindFieldGalleryChallengeInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WindFieldGalleryChallengeInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WindFieldGalleryChallengeInfoNotify): WindFieldGalleryChallengeInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 challenge_timestamp */ 6:
                    message.challengeTimestamp = reader.uint32();
                    break;
                case /* optional bool is_start */ 8:
                    message.isStart = reader.bool();
                    break;
                case /* optional uint32 show_id */ 12:
                    message.showId = reader.uint32();
                    break;
                case /* optional bool is_success */ 7:
                    message.isSuccess = reader.bool();
                    break;
                case /* optional uint32 challenge_total_time */ 13:
                    message.challengeTotalTime = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_max_count */ 11:
                    message.challengeBallMaxCount = reader.uint32();
                    break;
                case /* optional uint32 challenge_ball_cur_count */ 1:
                    message.challengeBallCurCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WindFieldGalleryChallengeInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 challenge_timestamp = 6; */
        if (message.challengeTimestamp !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.challengeTimestamp);
        /* optional bool is_start = 8; */
        if (message.isStart !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isStart);
        /* optional uint32 show_id = 12; */
        if (message.showId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.showId);
        /* optional bool is_success = 7; */
        if (message.isSuccess !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSuccess);
        /* optional uint32 challenge_total_time = 13; */
        if (message.challengeTotalTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.challengeTotalTime);
        /* optional uint32 challenge_ball_max_count = 11; */
        if (message.challengeBallMaxCount !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.challengeBallMaxCount);
        /* optional uint32 challenge_ball_cur_count = 1; */
        if (message.challengeBallCurCount !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.challengeBallCurCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.WindFieldGalleryChallengeInfoNotify
 */
export const WindFieldGalleryChallengeInfoNotify = new WindFieldGalleryChallengeInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingInfoNotify$Type extends MessageType<FungusFighterTrainingInfoNotify> {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingInfoNotify", [
            { no: 3, name: "buff_start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "max_skill_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "max_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "buff_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "buff_last_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "rest_skill_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "killed_monster_count", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterTrainingInfoNotify>): FungusFighterTrainingInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterTrainingInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterTrainingInfoNotify): FungusFighterTrainingInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 buff_start_time */ 3:
                    message.buffStartTime = reader.uint32();
                    break;
                case /* optional uint32 max_skill_count */ 7:
                    message.maxSkillCount = reader.uint32();
                    break;
                case /* optional uint32 max_monster_count */ 8:
                    message.maxMonsterCount = reader.uint32();
                    break;
                case /* optional uint32 buff_id */ 14:
                    message.buffId = reader.uint32();
                    break;
                case /* optional uint32 buff_last_time */ 4:
                    message.buffLastTime = reader.uint32();
                    break;
                case /* optional uint32 rest_skill_count */ 6:
                    message.restSkillCount = reader.uint32();
                    break;
                case /* optional uint32 killed_monster_count */ 15:
                    message.killedMonsterCount = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterTrainingInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 buff_start_time = 3; */
        if (message.buffStartTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.buffStartTime);
        /* optional uint32 max_skill_count = 7; */
        if (message.maxSkillCount !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.maxSkillCount);
        /* optional uint32 max_monster_count = 8; */
        if (message.maxMonsterCount !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.maxMonsterCount);
        /* optional uint32 buff_id = 14; */
        if (message.buffId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.buffId);
        /* optional uint32 buff_last_time = 4; */
        if (message.buffLastTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.buffLastTime);
        /* optional uint32 rest_skill_count = 6; */
        if (message.restSkillCount !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.restSkillCount);
        /* optional uint32 killed_monster_count = 15; */
        if (message.killedMonsterCount !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.killedMonsterCount);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingInfoNotify
 */
export const FungusFighterTrainingInfoNotify = new FungusFighterTrainingInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusFighterTrainingSettleInfo$Type extends MessageType<FungusFighterTrainingSettleInfo> {
    constructor() {
        super("com.midnights.game.FungusFighterTrainingSettleInfo", [
            { no: 15, name: "used_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.GalleryStopReason", GalleryStopReason] },
            { no: 1, name: "transaction", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<FungusFighterTrainingSettleInfo>): FungusFighterTrainingSettleInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusFighterTrainingSettleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusFighterTrainingSettleInfo): FungusFighterTrainingSettleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 used_time */ 15:
                    message.usedTime = reader.uint32();
                    break;
                case /* optional com.midnights.game.GalleryStopReason reason */ 3:
                    message.reason = reader.int32();
                    break;
                case /* optional string transaction */ 1:
                    message.transaction = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusFighterTrainingSettleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 used_time = 15; */
        if (message.usedTime !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.usedTime);
        /* optional com.midnights.game.GalleryStopReason reason = 3; */
        if (message.reason !== undefined)
            writer.tag(3, WireType.Varint).int32(message.reason);
        /* optional string transaction = 1; */
        if (message.transaction !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.transaction);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusFighterTrainingSettleInfo
 */
export const FungusFighterTrainingSettleInfo = new FungusFighterTrainingSettleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class FungusCaptureSettleNotify$Type extends MessageType<FungusCaptureSettleNotify> {
    constructor() {
        super("com.midnights.game.FungusCaptureSettleNotify", [
            { no: 2, name: "is_success", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<FungusCaptureSettleNotify>): FungusCaptureSettleNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<FungusCaptureSettleNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: FungusCaptureSettleNotify): FungusCaptureSettleNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_success */ 2:
                    message.isSuccess = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: FungusCaptureSettleNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_success = 2; */
        if (message.isSuccess !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isSuccess);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.FungusCaptureSettleNotify
 */
export const FungusCaptureSettleNotify = new FungusCaptureSettleNotify$Type();
