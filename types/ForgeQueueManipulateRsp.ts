/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ForgeQueueManipulateRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ForgeQueueManipulateType";
import * as dependency_2 from "./ItemParam";
import * as pb_1 from "google-protobuf";
export class ForgeQueueManipulateRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        manipulate_type?: dependency_1.ForgeQueueManipulateType;
        extra_output_item_list?: dependency_2.ItemParam[];
        return_item_list?: dependency_2.ItemParam[];
        retcode?: number;
        output_item_list?: dependency_2.ItemParam[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13, 10, 9], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("manipulate_type" in data && data.manipulate_type != undefined) {
                this.manipulate_type = data.manipulate_type;
            }
            if ("extra_output_item_list" in data && data.extra_output_item_list != undefined) {
                this.extra_output_item_list = data.extra_output_item_list;
            }
            if ("return_item_list" in data && data.return_item_list != undefined) {
                this.return_item_list = data.return_item_list;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("output_item_list" in data && data.output_item_list != undefined) {
                this.output_item_list = data.output_item_list;
            }
        }
    }
    get manipulate_type() {
        return pb_1.Message.getFieldWithDefault(this, 4, dependency_1.ForgeQueueManipulateType.FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT) as dependency_1.ForgeQueueManipulateType;
    }
    set manipulate_type(value: dependency_1.ForgeQueueManipulateType) {
        pb_1.Message.setField(this, 4, value);
    }
    get extra_output_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ItemParam, 13) as dependency_2.ItemParam[];
    }
    set extra_output_item_list(value: dependency_2.ItemParam[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get return_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ItemParam, 10) as dependency_2.ItemParam[];
    }
    set return_item_list(value: dependency_2.ItemParam[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get output_item_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ItemParam, 9) as dependency_2.ItemParam[];
    }
    set output_item_list(value: dependency_2.ItemParam[]) {
        pb_1.Message.setRepeatedWrapperField(this, 9, value);
    }
    static fromObject(data: {
        manipulate_type?: dependency_1.ForgeQueueManipulateType;
        extra_output_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
        return_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
        retcode?: number;
        output_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
    }): ForgeQueueManipulateRsp {
        const message = new ForgeQueueManipulateRsp({});
        if (data.manipulate_type != null) {
            message.manipulate_type = data.manipulate_type;
        }
        if (data.extra_output_item_list != null) {
            message.extra_output_item_list = data.extra_output_item_list.map(item => dependency_2.ItemParam.fromObject(item));
        }
        if (data.return_item_list != null) {
            message.return_item_list = data.return_item_list.map(item => dependency_2.ItemParam.fromObject(item));
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.output_item_list != null) {
            message.output_item_list = data.output_item_list.map(item => dependency_2.ItemParam.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            manipulate_type?: dependency_1.ForgeQueueManipulateType;
            extra_output_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
            return_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
            retcode?: number;
            output_item_list?: ReturnType<typeof dependency_2.ItemParam.prototype.toObject>[];
        } = {};
        if (this.manipulate_type != null) {
            data.manipulate_type = this.manipulate_type;
        }
        if (this.extra_output_item_list != null) {
            data.extra_output_item_list = this.extra_output_item_list.map((item: dependency_2.ItemParam) => item.toObject());
        }
        if (this.return_item_list != null) {
            data.return_item_list = this.return_item_list.map((item: dependency_2.ItemParam) => item.toObject());
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.output_item_list != null) {
            data.output_item_list = this.output_item_list.map((item: dependency_2.ItemParam) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.manipulate_type != dependency_1.ForgeQueueManipulateType.FORGE_QUEUE_MANIPULATE_TYPE_RECEIVE_OUTPUT)
            writer.writeEnum(4, this.manipulate_type);
        if (this.extra_output_item_list.length)
            writer.writeRepeatedMessage(13, this.extra_output_item_list, (item: dependency_2.ItemParam) => item.serialize(writer));
        if (this.return_item_list.length)
            writer.writeRepeatedMessage(10, this.return_item_list, (item: dependency_2.ItemParam) => item.serialize(writer));
        if (this.retcode != 0)
            writer.writeInt32(1, this.retcode);
        if (this.output_item_list.length)
            writer.writeRepeatedMessage(9, this.output_item_list, (item: dependency_2.ItemParam) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ForgeQueueManipulateRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ForgeQueueManipulateRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 4:
                    message.manipulate_type = reader.readEnum();
                    break;
                case 13:
                    reader.readMessage(message.extra_output_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_2.ItemParam.deserialize(reader), dependency_2.ItemParam));
                    break;
                case 10:
                    reader.readMessage(message.return_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_2.ItemParam.deserialize(reader), dependency_2.ItemParam));
                    break;
                case 1:
                    message.retcode = reader.readInt32();
                    break;
                case 9:
                    reader.readMessage(message.output_item_list, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_2.ItemParam.deserialize(reader), dependency_2.ItemParam));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ForgeQueueManipulateRsp {
        return ForgeQueueManipulateRsp.deserialize(bytes);
    }
}
