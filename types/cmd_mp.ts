// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_mp.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OnlinePlayerInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpNotify
 */
export interface PlayerApplyEnterMpNotify {
    /**
     * @generated from protobuf field: optional uint32 src_thread_index = 5;
     */
    srcThreadIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 src_app_id = 6;
     */
    srcAppId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo src_player_info = 2;
     */
    srcPlayerInfo?: OnlinePlayerInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpNotify.CmdId
 */
export enum PlayerApplyEnterMpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1826;
     */
    CMD_ID = 1826,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpReq
 */
export interface PlayerApplyEnterMpReq {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 4;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpReq.CmdId
 */
export enum PlayerApplyEnterMpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1818;
     */
    CMD_ID = 1818,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpRsp
 */
export interface PlayerApplyEnterMpRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 3;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 4;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpRsp.CmdId
 */
export enum PlayerApplyEnterMpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1825;
     */
    CMD_ID = 1825,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpResultNotify
 */
export interface PlayerApplyEnterMpResultNotify {
    /**
     * @generated from protobuf field: optional bool is_agreed = 2;
     */
    isAgreed?: boolean;
    /**
     * @generated from protobuf field: optional string target_nickname = 12;
     */
    targetNickname?: string;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerApplyEnterMpResultNotify.Reason reason = 13;
     */
    reason?: PlayerApplyEnterMpResultNotify_Reason;
    /**
     * @generated from protobuf field: optional uint32 target_uid = 1;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpResultNotify.Reason
 */
export enum PlayerApplyEnterMpResultNotify_Reason {
    /**
     * @generated from protobuf enum value: PLAYER_JUDGE = 0;
     */
    PLAYER_JUDGE = 0,
    /**
     * @generated from protobuf enum value: SCENE_CANNOT_ENTER = 1;
     */
    SCENE_CANNOT_ENTER = 1,
    /**
     * @generated from protobuf enum value: PLAYER_CANNOT_ENTER_MP = 2;
     */
    PLAYER_CANNOT_ENTER_MP = 2,
    /**
     * @generated from protobuf enum value: SYSTEM_JUDGE = 3;
     */
    SYSTEM_JUDGE = 3,
    /**
     * @generated from protobuf enum value: ALLOW_ENTER_PLAYER_FULL = 4;
     */
    ALLOW_ENTER_PLAYER_FULL = 4,
    /**
     * @generated from protobuf enum value: WORLD_LEVEL_LOWER_THAN_HOST = 5;
     */
    WORLD_LEVEL_LOWER_THAN_HOST = 5,
    /**
     * @generated from protobuf enum value: HOST_IN_MATCH = 6;
     */
    HOST_IN_MATCH = 6,
    /**
     * @generated from protobuf enum value: PLAYER_IN_BLACKLIST = 7;
     */
    PLAYER_IN_BLACKLIST = 7,
    /**
     * @generated from protobuf enum value: PS_PLAYER_NOT_ACCEPT_OTHERS = 8;
     */
    PS_PLAYER_NOT_ACCEPT_OTHERS = 8,
    /**
     * @generated from protobuf enum value: HOST_IS_BLOCKED = 9;
     */
    HOST_IS_BLOCKED = 9,
    /**
     * @generated from protobuf enum value: OTHER_DATA_VERSION_NOT_LATEST = 10;
     */
    OTHER_DATA_VERSION_NOT_LATEST = 10,
    /**
     * @generated from protobuf enum value: DATA_VERSION_NOT_LATEST = 11;
     */
    DATA_VERSION_NOT_LATEST = 11,
    /**
     * @generated from protobuf enum value: PLAYER_NOT_IN_PLAYER_WORLD = 12;
     */
    PLAYER_NOT_IN_PLAYER_WORLD = 12,
    /**
     * @generated from protobuf enum value: MAX_PLAYER = 13;
     */
    MAX_PLAYER = 13
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpResultNotify.CmdId
 */
export enum PlayerApplyEnterMpResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1807;
     */
    CMD_ID = 1807,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpResultReq
 */
export interface PlayerApplyEnterMpResultReq {
    /**
     * @generated from protobuf field: optional uint32 apply_uid = 2;
     */
    applyUid?: number;
    /**
     * @generated from protobuf field: optional bool is_agreed = 12;
     */
    isAgreed?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpResultReq.CmdId
 */
export enum PlayerApplyEnterMpResultReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1802;
     */
    CMD_ID = 1802,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpResultRsp
 */
export interface PlayerApplyEnterMpResultRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_agreed = 3;
     */
    isAgreed?: boolean;
    /**
     * @generated from protobuf field: optional uint32 apply_uid = 10;
     */
    applyUid?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 12;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpResultRsp.CmdId
 */
export enum PlayerApplyEnterMpResultRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1831;
     */
    CMD_ID = 1831,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerQuitFromMpNotify
 */
export interface PlayerQuitFromMpNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerQuitFromMpNotify.QuitReason reason = 11;
     */
    reason?: PlayerQuitFromMpNotify_QuitReason;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerQuitFromMpNotify.QuitReason
 */
export enum PlayerQuitFromMpNotify_QuitReason {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: HOST_NO_OTHER_PLAYER = 1;
     */
    HOST_NO_OTHER_PLAYER = 1,
    /**
     * @generated from protobuf enum value: KICK_BY_HOST = 2;
     */
    KICK_BY_HOST = 2,
    /**
     * @generated from protobuf enum value: BACK_TO_MY_WORLD = 3;
     */
    BACK_TO_MY_WORLD = 3,
    /**
     * @generated from protobuf enum value: KICK_BY_HOST_LOGOUT = 4;
     */
    KICK_BY_HOST_LOGOUT = 4,
    /**
     * @generated from protobuf enum value: KICK_BY_HOST_BLOCK = 5;
     */
    KICK_BY_HOST_BLOCK = 5,
    /**
     * @generated from protobuf enum value: BE_BLOCKED = 6;
     */
    BE_BLOCKED = 6,
    /**
     * @generated from protobuf enum value: KICK_BY_HOST_ENTER_HOME = 7;
     */
    KICK_BY_HOST_ENTER_HOME = 7,
    /**
     * @generated from protobuf enum value: HOST_SCENE_INVALID = 8;
     */
    HOST_SCENE_INVALID = 8,
    /**
     * @generated from protobuf enum value: KICK_BY_PLAY = 9;
     */
    KICK_BY_PLAY = 9,
    /**
     * @generated from protobuf enum value: KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10;
     */
    KICK_BY_ISLAND_PARTY_GALLERY_START_FAILED = 10
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerQuitFromMpNotify.CmdId
 */
export enum PlayerQuitFromMpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1829;
     */
    CMD_ID = 1829,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerPreEnterMpNotify
 */
export interface PlayerPreEnterMpNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerPreEnterMpNotify.State state = 2;
     */
    state?: PlayerPreEnterMpNotify_State;
    /**
     * @generated from protobuf field: optional uint32 uid = 14;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional string nickname = 6;
     */
    nickname?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerPreEnterMpNotify.State
 */
export enum PlayerPreEnterMpNotify_State {
    /**
     * @generated from protobuf enum value: INVALID = 0;
     */
    INVALID = 0,
    /**
     * @generated from protobuf enum value: START = 1;
     */
    START = 1,
    /**
     * @generated from protobuf enum value: TIMEOUT = 2;
     */
    TIMEOUT = 2
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerPreEnterMpNotify.CmdId
 */
export enum PlayerPreEnterMpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1822;
     */
    CMD_ID = 1822,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetPlayerMpModeAvailabilityReq
 */
export interface GetPlayerMpModeAvailabilityReq {
}
/**
 * @generated from protobuf enum com.midnights.game.GetPlayerMpModeAvailabilityReq.CmdId
 */
export enum GetPlayerMpModeAvailabilityReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1844;
     */
    CMD_ID = 1844,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.GetPlayerMpModeAvailabilityRsp
 */
export interface GetPlayerMpModeAvailabilityRsp {
    /**
     * @generated from protobuf field: optional int32 mp_ret = 15;
     */
    mpRet?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 2;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_list = 8;
     */
    paramList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.GetPlayerMpModeAvailabilityRsp.CmdId
 */
export enum GetPlayerMpModeAvailabilityRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1849;
     */
    CMD_ID = 1849,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetOnlyMPWithPSPlayerReq
 */
export interface PlayerSetOnlyMPWithPSPlayerReq {
    /**
     * @generated from protobuf field: optional bool is_only = 13;
     */
    isOnly?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetOnlyMPWithPSPlayerReq.CmdId
 */
export enum PlayerSetOnlyMPWithPSPlayerReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1820;
     */
    CMD_ID = 1820,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerSetOnlyMPWithPSPlayerRsp
 */
export interface PlayerSetOnlyMPWithPSPlayerRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 5;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_only = 8;
     */
    isOnly?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerSetOnlyMPWithPSPlayerRsp.CmdId
 */
export enum PlayerSetOnlyMPWithPSPlayerRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1845;
     */
    CMD_ID = 1845,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PSPlayerApplyEnterMpReq
 */
export interface PSPlayerApplyEnterMpReq {
    /**
     * @generated from protobuf field: optional string target_psn_id = 5;
     */
    targetPsnId?: string;
}
/**
 * @generated from protobuf enum com.midnights.game.PSPlayerApplyEnterMpReq.CmdId
 */
export enum PSPlayerApplyEnterMpReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1841;
     */
    CMD_ID = 1841,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PSPlayerApplyEnterMpRsp
 */
export interface PSPlayerApplyEnterMpRsp {
    /**
     * @generated from protobuf field: optional string target_psn_id = 2;
     */
    targetPsnId?: string;
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 10;
     */
    param?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PSPlayerApplyEnterMpRsp.CmdId
 */
export enum PSPlayerApplyEnterMpRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1842;
     */
    CMD_ID = 1842,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayOwnerCheckReq
 */
export interface MpPlayOwnerCheckReq {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 9;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_match = 3;
     */
    isSkipMatch?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayOwnerCheckReq.CmdId
 */
export enum MpPlayOwnerCheckReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1814;
     */
    CMD_ID = 1814,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayOwnerCheckRsp
 */
export interface MpPlayOwnerCheckRsp {
    /**
     * @generated from protobuf field: optional uint32 wrong_uid = 4;
     */
    wrongUid?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_match = 15;
     */
    isSkipMatch?: boolean;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 10;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 12;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayOwnerCheckRsp.CmdId
 */
export enum MpPlayOwnerCheckRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1847;
     */
    CMD_ID = 1847,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayOwnerStartInviteReq
 */
export interface MpPlayOwnerStartInviteReq {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 3;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_match = 6;
     */
    isSkipMatch?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayOwnerStartInviteReq.CmdId
 */
export enum MpPlayOwnerStartInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1837;
     */
    CMD_ID = 1837,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayOwnerStartInviteRsp
 */
export interface MpPlayOwnerStartInviteRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 14;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 3;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_match = 9;
     */
    isSkipMatch?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayOwnerStartInviteRsp.CmdId
 */
export enum MpPlayOwnerStartInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1823;
     */
    CMD_ID = 1823,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayOwnerInviteNotify
 */
export interface MpPlayOwnerInviteNotify {
    /**
     * @generated from protobuf field: optional uint32 cd = 12;
     */
    cd?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 13;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool is_remain_reward = 10;
     */
    isRemainReward?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayOwnerInviteNotify.CmdId
 */
export enum MpPlayOwnerInviteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1835;
     */
    CMD_ID = 1835,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayGuestReplyInviteReq
 */
export interface MpPlayGuestReplyInviteReq {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 3;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 15;
     */
    isAgree?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayGuestReplyInviteReq.CmdId
 */
export enum MpPlayGuestReplyInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1848;
     */
    CMD_ID = 1848,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayGuestReplyInviteRsp
 */
export interface MpPlayGuestReplyInviteRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 10;
     */
    mpPlayId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayGuestReplyInviteRsp.CmdId
 */
export enum MpPlayGuestReplyInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1850;
     */
    CMD_ID = 1850,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayGuestReplyNotify
 */
export interface MpPlayGuestReplyNotify {
    /**
     * @generated from protobuf field: optional uint32 uid = 7;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 4;
     */
    isAgree?: boolean;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 14;
     */
    mpPlayId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayGuestReplyNotify.CmdId
 */
export enum MpPlayGuestReplyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1812;
     */
    CMD_ID = 1812,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayPrepareNotify
 */
export interface MpPlayPrepareNotify {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 9;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional uint32 prepare_end_time = 11;
     */
    prepareEndTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayPrepareNotify.CmdId
 */
export enum MpPlayPrepareNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1833;
     */
    CMD_ID = 1833,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayInviteResultNotify
 */
export interface MpPlayInviteResultNotify {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 11;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional bool all_argee = 10;
     */
    allArgee?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayInviteResultNotify.CmdId
 */
export enum MpPlayInviteResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1815;
     */
    CMD_ID = 1815,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpPlayPrepareInterruptNotify
 */
export interface MpPlayPrepareInterruptNotify {
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 12;
     */
    mpPlayId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpPlayPrepareInterruptNotify.CmdId
 */
export enum MpPlayPrepareInterruptNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1813;
     */
    CMD_ID = 1813,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MpBlockNotify
 */
export interface MpBlockNotify {
    /**
     * @generated from protobuf field: optional uint32 end_time = 13;
     */
    endTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.MpBlockNotify.CmdId
 */
export enum MpBlockNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 1801;
     */
    CMD_ID = 1801,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpNotify$Type extends MessageType<PlayerApplyEnterMpNotify> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpNotify", [
            { no: 5, name: "src_thread_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "src_app_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "src_player_info", kind: "message", T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpNotify>): PlayerApplyEnterMpNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpNotify): PlayerApplyEnterMpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 src_thread_index */ 5:
                    message.srcThreadIndex = reader.uint32();
                    break;
                case /* optional uint32 src_app_id */ 6:
                    message.srcAppId = reader.uint32();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo src_player_info */ 2:
                    message.srcPlayerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.srcPlayerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 src_thread_index = 5; */
        if (message.srcThreadIndex !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.srcThreadIndex);
        /* optional uint32 src_app_id = 6; */
        if (message.srcAppId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.srcAppId);
        /* optional com.midnights.game.OnlinePlayerInfo src_player_info = 2; */
        if (message.srcPlayerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.srcPlayerInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpNotify
 */
export const PlayerApplyEnterMpNotify = new PlayerApplyEnterMpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpReq$Type extends MessageType<PlayerApplyEnterMpReq> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpReq", [
            { no: 4, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpReq>): PlayerApplyEnterMpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpReq): PlayerApplyEnterMpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 4:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 4; */
        if (message.targetUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpReq
 */
export const PlayerApplyEnterMpReq = new PlayerApplyEnterMpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpRsp$Type extends MessageType<PlayerApplyEnterMpRsp> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpRsp>): PlayerApplyEnterMpRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpRsp): PlayerApplyEnterMpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 target_uid */ 3:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional uint32 param */ 4:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional uint32 target_uid = 3; */
        if (message.targetUid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.targetUid);
        /* optional uint32 param = 4; */
        if (message.param !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpRsp
 */
export const PlayerApplyEnterMpRsp = new PlayerApplyEnterMpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpResultNotify$Type extends MessageType<PlayerApplyEnterMpResultNotify> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpResultNotify", [
            { no: 2, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 12, name: "target_nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 13, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerApplyEnterMpResultNotify.Reason", PlayerApplyEnterMpResultNotify_Reason] },
            { no: 1, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpResultNotify>): PlayerApplyEnterMpResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpResultNotify): PlayerApplyEnterMpResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_agreed */ 2:
                    message.isAgreed = reader.bool();
                    break;
                case /* optional string target_nickname */ 12:
                    message.targetNickname = reader.string();
                    break;
                case /* optional com.midnights.game.PlayerApplyEnterMpResultNotify.Reason reason */ 13:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 target_uid */ 1:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_agreed = 2; */
        if (message.isAgreed !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isAgreed);
        /* optional string target_nickname = 12; */
        if (message.targetNickname !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.targetNickname);
        /* optional com.midnights.game.PlayerApplyEnterMpResultNotify.Reason reason = 13; */
        if (message.reason !== undefined)
            writer.tag(13, WireType.Varint).int32(message.reason);
        /* optional uint32 target_uid = 1; */
        if (message.targetUid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpResultNotify
 */
export const PlayerApplyEnterMpResultNotify = new PlayerApplyEnterMpResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpResultReq$Type extends MessageType<PlayerApplyEnterMpResultReq> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpResultReq", [
            { no: 2, name: "apply_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpResultReq>): PlayerApplyEnterMpResultReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpResultReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpResultReq): PlayerApplyEnterMpResultReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 apply_uid */ 2:
                    message.applyUid = reader.uint32();
                    break;
                case /* optional bool is_agreed */ 12:
                    message.isAgreed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpResultReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 apply_uid = 2; */
        if (message.applyUid !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.applyUid);
        /* optional bool is_agreed = 12; */
        if (message.isAgreed !== undefined)
            writer.tag(12, WireType.Varint).bool(message.isAgreed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpResultReq
 */
export const PlayerApplyEnterMpResultReq = new PlayerApplyEnterMpResultReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpResultRsp$Type extends MessageType<PlayerApplyEnterMpResultRsp> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpResultRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "apply_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpResultRsp>): PlayerApplyEnterMpResultRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpResultRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpResultRsp): PlayerApplyEnterMpResultRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_agreed */ 3:
                    message.isAgreed = reader.bool();
                    break;
                case /* optional uint32 apply_uid */ 10:
                    message.applyUid = reader.uint32();
                    break;
                case /* optional uint32 param */ 12:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpResultRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional bool is_agreed = 3; */
        if (message.isAgreed !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isAgreed);
        /* optional uint32 apply_uid = 10; */
        if (message.applyUid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.applyUid);
        /* optional uint32 param = 12; */
        if (message.param !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpResultRsp
 */
export const PlayerApplyEnterMpResultRsp = new PlayerApplyEnterMpResultRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerQuitFromMpNotify$Type extends MessageType<PlayerQuitFromMpNotify> {
    constructor() {
        super("com.midnights.game.PlayerQuitFromMpNotify", [
            { no: 11, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerQuitFromMpNotify.QuitReason", PlayerQuitFromMpNotify_QuitReason] }
        ]);
    }
    create(value?: PartialMessage<PlayerQuitFromMpNotify>): PlayerQuitFromMpNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerQuitFromMpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerQuitFromMpNotify): PlayerQuitFromMpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerQuitFromMpNotify.QuitReason reason */ 11:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerQuitFromMpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerQuitFromMpNotify.QuitReason reason = 11; */
        if (message.reason !== undefined)
            writer.tag(11, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerQuitFromMpNotify
 */
export const PlayerQuitFromMpNotify = new PlayerQuitFromMpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerPreEnterMpNotify$Type extends MessageType<PlayerPreEnterMpNotify> {
    constructor() {
        super("com.midnights.game.PlayerPreEnterMpNotify", [
            { no: 2, name: "state", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerPreEnterMpNotify.State", PlayerPreEnterMpNotify_State] },
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerPreEnterMpNotify>): PlayerPreEnterMpNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerPreEnterMpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerPreEnterMpNotify): PlayerPreEnterMpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.PlayerPreEnterMpNotify.State state */ 2:
                    message.state = reader.int32();
                    break;
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                case /* optional string nickname */ 6:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerPreEnterMpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.PlayerPreEnterMpNotify.State state = 2; */
        if (message.state !== undefined)
            writer.tag(2, WireType.Varint).int32(message.state);
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        /* optional string nickname = 6; */
        if (message.nickname !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerPreEnterMpNotify
 */
export const PlayerPreEnterMpNotify = new PlayerPreEnterMpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerMpModeAvailabilityReq$Type extends MessageType<GetPlayerMpModeAvailabilityReq> {
    constructor() {
        super("com.midnights.game.GetPlayerMpModeAvailabilityReq", []);
    }
    create(value?: PartialMessage<GetPlayerMpModeAvailabilityReq>): GetPlayerMpModeAvailabilityReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerMpModeAvailabilityReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerMpModeAvailabilityReq): GetPlayerMpModeAvailabilityReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: GetPlayerMpModeAvailabilityReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetPlayerMpModeAvailabilityReq
 */
export const GetPlayerMpModeAvailabilityReq = new GetPlayerMpModeAvailabilityReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GetPlayerMpModeAvailabilityRsp$Type extends MessageType<GetPlayerMpModeAvailabilityRsp> {
    constructor() {
        super("com.midnights.game.GetPlayerMpModeAvailabilityRsp", [
            { no: 15, name: "mp_ret", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<GetPlayerMpModeAvailabilityRsp>): GetPlayerMpModeAvailabilityRsp {
        const message = { paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GetPlayerMpModeAvailabilityRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GetPlayerMpModeAvailabilityRsp): GetPlayerMpModeAvailabilityRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 mp_ret */ 15:
                    message.mpRet = reader.int32();
                    break;
                case /* optional int32 retcode */ 2:
                    message.retcode = reader.int32();
                    break;
                case /* repeated uint32 param_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.uint32());
                    else
                        message.paramList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GetPlayerMpModeAvailabilityRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 mp_ret = 15; */
        if (message.mpRet !== undefined)
            writer.tag(15, WireType.Varint).int32(message.mpRet);
        /* optional int32 retcode = 2; */
        if (message.retcode !== undefined)
            writer.tag(2, WireType.Varint).int32(message.retcode);
        /* repeated uint32 param_list = 8; */
        if (message.paramList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramList.length; i++)
                writer.uint32(message.paramList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GetPlayerMpModeAvailabilityRsp
 */
export const GetPlayerMpModeAvailabilityRsp = new GetPlayerMpModeAvailabilityRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetOnlyMPWithPSPlayerReq$Type extends MessageType<PlayerSetOnlyMPWithPSPlayerReq> {
    constructor() {
        super("com.midnights.game.PlayerSetOnlyMPWithPSPlayerReq", [
            { no: 13, name: "is_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetOnlyMPWithPSPlayerReq>): PlayerSetOnlyMPWithPSPlayerReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetOnlyMPWithPSPlayerReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetOnlyMPWithPSPlayerReq): PlayerSetOnlyMPWithPSPlayerReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_only */ 13:
                    message.isOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetOnlyMPWithPSPlayerReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_only = 13; */
        if (message.isOnly !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetOnlyMPWithPSPlayerReq
 */
export const PlayerSetOnlyMPWithPSPlayerReq = new PlayerSetOnlyMPWithPSPlayerReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerSetOnlyMPWithPSPlayerRsp$Type extends MessageType<PlayerSetOnlyMPWithPSPlayerRsp> {
    constructor() {
        super("com.midnights.game.PlayerSetOnlyMPWithPSPlayerRsp", [
            { no: 5, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "is_only", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerSetOnlyMPWithPSPlayerRsp>): PlayerSetOnlyMPWithPSPlayerRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerSetOnlyMPWithPSPlayerRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerSetOnlyMPWithPSPlayerRsp): PlayerSetOnlyMPWithPSPlayerRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 5:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_only */ 8:
                    message.isOnly = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerSetOnlyMPWithPSPlayerRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 5; */
        if (message.retcode !== undefined)
            writer.tag(5, WireType.Varint).int32(message.retcode);
        /* optional bool is_only = 8; */
        if (message.isOnly !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isOnly);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerSetOnlyMPWithPSPlayerRsp
 */
export const PlayerSetOnlyMPWithPSPlayerRsp = new PlayerSetOnlyMPWithPSPlayerRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PSPlayerApplyEnterMpReq$Type extends MessageType<PSPlayerApplyEnterMpReq> {
    constructor() {
        super("com.midnights.game.PSPlayerApplyEnterMpReq", [
            { no: 5, name: "target_psn_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PSPlayerApplyEnterMpReq>): PSPlayerApplyEnterMpReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PSPlayerApplyEnterMpReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PSPlayerApplyEnterMpReq): PSPlayerApplyEnterMpReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string target_psn_id */ 5:
                    message.targetPsnId = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PSPlayerApplyEnterMpReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string target_psn_id = 5; */
        if (message.targetPsnId !== undefined)
            writer.tag(5, WireType.LengthDelimited).string(message.targetPsnId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PSPlayerApplyEnterMpReq
 */
export const PSPlayerApplyEnterMpReq = new PSPlayerApplyEnterMpReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PSPlayerApplyEnterMpRsp$Type extends MessageType<PSPlayerApplyEnterMpRsp> {
    constructor() {
        super("com.midnights.game.PSPlayerApplyEnterMpRsp", [
            { no: 2, name: "target_psn_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PSPlayerApplyEnterMpRsp>): PSPlayerApplyEnterMpRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PSPlayerApplyEnterMpRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PSPlayerApplyEnterMpRsp): PSPlayerApplyEnterMpRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string target_psn_id */ 2:
                    message.targetPsnId = reader.string();
                    break;
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 param */ 10:
                    message.param = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PSPlayerApplyEnterMpRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string target_psn_id = 2; */
        if (message.targetPsnId !== undefined)
            writer.tag(2, WireType.LengthDelimited).string(message.targetPsnId);
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional uint32 param = 10; */
        if (message.param !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.param);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PSPlayerApplyEnterMpRsp
 */
export const PSPlayerApplyEnterMpRsp = new PSPlayerApplyEnterMpRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayOwnerCheckReq$Type extends MessageType<MpPlayOwnerCheckReq> {
    constructor() {
        super("com.midnights.game.MpPlayOwnerCheckReq", [
            { no: 9, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayOwnerCheckReq>): MpPlayOwnerCheckReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayOwnerCheckReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayOwnerCheckReq): MpPlayOwnerCheckReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 9:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool is_skip_match */ 3:
                    message.isSkipMatch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayOwnerCheckReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 9; */
        if (message.mpPlayId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool is_skip_match = 3; */
        if (message.isSkipMatch !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isSkipMatch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayOwnerCheckReq
 */
export const MpPlayOwnerCheckReq = new MpPlayOwnerCheckReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayOwnerCheckRsp$Type extends MessageType<MpPlayOwnerCheckRsp> {
    constructor() {
        super("com.midnights.game.MpPlayOwnerCheckRsp", [
            { no: 4, name: "wrong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayOwnerCheckRsp>): MpPlayOwnerCheckRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayOwnerCheckRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayOwnerCheckRsp): MpPlayOwnerCheckRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 wrong_uid */ 4:
                    message.wrongUid = reader.uint32();
                    break;
                case /* optional bool is_skip_match */ 15:
                    message.isSkipMatch = reader.bool();
                    break;
                case /* optional uint32 mp_play_id */ 10:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional int32 retcode */ 12:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayOwnerCheckRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 wrong_uid = 4; */
        if (message.wrongUid !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.wrongUid);
        /* optional bool is_skip_match = 15; */
        if (message.isSkipMatch !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isSkipMatch);
        /* optional uint32 mp_play_id = 10; */
        if (message.mpPlayId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.mpPlayId);
        /* optional int32 retcode = 12; */
        if (message.retcode !== undefined)
            writer.tag(12, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayOwnerCheckRsp
 */
export const MpPlayOwnerCheckRsp = new MpPlayOwnerCheckRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayOwnerStartInviteReq$Type extends MessageType<MpPlayOwnerStartInviteReq> {
    constructor() {
        super("com.midnights.game.MpPlayOwnerStartInviteReq", [
            { no: 3, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayOwnerStartInviteReq>): MpPlayOwnerStartInviteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayOwnerStartInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayOwnerStartInviteReq): MpPlayOwnerStartInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 3:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool is_skip_match */ 6:
                    message.isSkipMatch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayOwnerStartInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 3; */
        if (message.mpPlayId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool is_skip_match = 6; */
        if (message.isSkipMatch !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isSkipMatch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayOwnerStartInviteReq
 */
export const MpPlayOwnerStartInviteReq = new MpPlayOwnerStartInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayOwnerStartInviteRsp$Type extends MessageType<MpPlayOwnerStartInviteRsp> {
    constructor() {
        super("com.midnights.game.MpPlayOwnerStartInviteRsp", [
            { no: 14, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 3, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayOwnerStartInviteRsp>): MpPlayOwnerStartInviteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayOwnerStartInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayOwnerStartInviteRsp): MpPlayOwnerStartInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 14:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 mp_play_id */ 3:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool is_skip_match */ 9:
                    message.isSkipMatch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayOwnerStartInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 14; */
        if (message.retcode !== undefined)
            writer.tag(14, WireType.Varint).int32(message.retcode);
        /* optional uint32 mp_play_id = 3; */
        if (message.mpPlayId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool is_skip_match = 9; */
        if (message.isSkipMatch !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isSkipMatch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayOwnerStartInviteRsp
 */
export const MpPlayOwnerStartInviteRsp = new MpPlayOwnerStartInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayOwnerInviteNotify$Type extends MessageType<MpPlayOwnerInviteNotify> {
    constructor() {
        super("com.midnights.game.MpPlayOwnerInviteNotify", [
            { no: 12, name: "cd", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "is_remain_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayOwnerInviteNotify>): MpPlayOwnerInviteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayOwnerInviteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayOwnerInviteNotify): MpPlayOwnerInviteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 cd */ 12:
                    message.cd = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 13:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool is_remain_reward */ 10:
                    message.isRemainReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayOwnerInviteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 cd = 12; */
        if (message.cd !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.cd);
        /* optional uint32 mp_play_id = 13; */
        if (message.mpPlayId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool is_remain_reward = 10; */
        if (message.isRemainReward !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isRemainReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayOwnerInviteNotify
 */
export const MpPlayOwnerInviteNotify = new MpPlayOwnerInviteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayGuestReplyInviteReq$Type extends MessageType<MpPlayGuestReplyInviteReq> {
    constructor() {
        super("com.midnights.game.MpPlayGuestReplyInviteReq", [
            { no: 3, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayGuestReplyInviteReq>): MpPlayGuestReplyInviteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayGuestReplyInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayGuestReplyInviteReq): MpPlayGuestReplyInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 3:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool is_agree */ 15:
                    message.isAgree = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayGuestReplyInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 3; */
        if (message.mpPlayId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool is_agree = 15; */
        if (message.isAgree !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isAgree);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayGuestReplyInviteReq
 */
export const MpPlayGuestReplyInviteReq = new MpPlayGuestReplyInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayGuestReplyInviteRsp$Type extends MessageType<MpPlayGuestReplyInviteRsp> {
    constructor() {
        super("com.midnights.game.MpPlayGuestReplyInviteRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 10, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayGuestReplyInviteRsp>): MpPlayGuestReplyInviteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayGuestReplyInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayGuestReplyInviteRsp): MpPlayGuestReplyInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 mp_play_id */ 10:
                    message.mpPlayId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayGuestReplyInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 mp_play_id = 10; */
        if (message.mpPlayId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.mpPlayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayGuestReplyInviteRsp
 */
export const MpPlayGuestReplyInviteRsp = new MpPlayGuestReplyInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayGuestReplyNotify$Type extends MessageType<MpPlayGuestReplyNotify> {
    constructor() {
        super("com.midnights.game.MpPlayGuestReplyNotify", [
            { no: 7, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayGuestReplyNotify>): MpPlayGuestReplyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayGuestReplyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayGuestReplyNotify): MpPlayGuestReplyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 7:
                    message.uid = reader.uint32();
                    break;
                case /* optional bool is_agree */ 4:
                    message.isAgree = reader.bool();
                    break;
                case /* optional uint32 mp_play_id */ 14:
                    message.mpPlayId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayGuestReplyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 7; */
        if (message.uid !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.uid);
        /* optional bool is_agree = 4; */
        if (message.isAgree !== undefined)
            writer.tag(4, WireType.Varint).bool(message.isAgree);
        /* optional uint32 mp_play_id = 14; */
        if (message.mpPlayId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.mpPlayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayGuestReplyNotify
 */
export const MpPlayGuestReplyNotify = new MpPlayGuestReplyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayPrepareNotify$Type extends MessageType<MpPlayPrepareNotify> {
    constructor() {
        super("com.midnights.game.MpPlayPrepareNotify", [
            { no: 9, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "prepare_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayPrepareNotify>): MpPlayPrepareNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayPrepareNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayPrepareNotify): MpPlayPrepareNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 9:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional uint32 prepare_end_time */ 11:
                    message.prepareEndTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayPrepareNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 9; */
        if (message.mpPlayId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.mpPlayId);
        /* optional uint32 prepare_end_time = 11; */
        if (message.prepareEndTime !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.prepareEndTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayPrepareNotify
 */
export const MpPlayPrepareNotify = new MpPlayPrepareNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayInviteResultNotify$Type extends MessageType<MpPlayInviteResultNotify> {
    constructor() {
        super("com.midnights.game.MpPlayInviteResultNotify", [
            { no: 11, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "all_argee", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayInviteResultNotify>): MpPlayInviteResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayInviteResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayInviteResultNotify): MpPlayInviteResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 11:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional bool all_argee */ 10:
                    message.allArgee = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayInviteResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 11; */
        if (message.mpPlayId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.mpPlayId);
        /* optional bool all_argee = 10; */
        if (message.allArgee !== undefined)
            writer.tag(10, WireType.Varint).bool(message.allArgee);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayInviteResultNotify
 */
export const MpPlayInviteResultNotify = new MpPlayInviteResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpPlayPrepareInterruptNotify$Type extends MessageType<MpPlayPrepareInterruptNotify> {
    constructor() {
        super("com.midnights.game.MpPlayPrepareInterruptNotify", [
            { no: 12, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpPlayPrepareInterruptNotify>): MpPlayPrepareInterruptNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpPlayPrepareInterruptNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpPlayPrepareInterruptNotify): MpPlayPrepareInterruptNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mp_play_id */ 12:
                    message.mpPlayId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpPlayPrepareInterruptNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mp_play_id = 12; */
        if (message.mpPlayId !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mpPlayId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpPlayPrepareInterruptNotify
 */
export const MpPlayPrepareInterruptNotify = new MpPlayPrepareInterruptNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MpBlockNotify$Type extends MessageType<MpBlockNotify> {
    constructor() {
        super("com.midnights.game.MpBlockNotify", [
            { no: 13, name: "end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<MpBlockNotify>): MpBlockNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MpBlockNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MpBlockNotify): MpBlockNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 end_time */ 13:
                    message.endTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MpBlockNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 end_time = 13; */
        if (message.endTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.endTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MpBlockNotify
 */
export const MpBlockNotify = new MpBlockNotify$Type();
