"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _AvatarFetterInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.AvatarFetterInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarFetterInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./FetterData");
const pb_1 = require("google-protobuf");
class AvatarFetterInfo extends pb_1.Message {
    constructor(data) {
        super();
        _AvatarFetterInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 6], __classPrivateFieldGet(this, _AvatarFetterInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("exp_number" in data && data.exp_number != undefined) {
                this.exp_number = data.exp_number;
            }
            if ("exp_level" in data && data.exp_level != undefined) {
                this.exp_level = data.exp_level;
            }
            if ("open_id_list" in data && data.open_id_list != undefined) {
                this.open_id_list = data.open_id_list;
            }
            if ("finish_id_list" in data && data.finish_id_list != undefined) {
                this.finish_id_list = data.finish_id_list;
            }
            if ("rewarded_fetter_level_list" in data && data.rewarded_fetter_level_list != undefined) {
                this.rewarded_fetter_level_list = data.rewarded_fetter_level_list;
            }
            if ("fetter_list" in data && data.fetter_list != undefined) {
                this.fetter_list = data.fetter_list;
            }
        }
    }
    get exp_number() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set exp_number(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get exp_level() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set exp_level(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get open_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []);
    }
    set open_id_list(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get finish_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 4, []);
    }
    set finish_id_list(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get rewarded_fetter_level_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []);
    }
    set rewarded_fetter_level_list(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get fetter_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.FetterData, 6);
    }
    set fetter_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    static fromObject(data) {
        const message = new AvatarFetterInfo({});
        if (data.exp_number != null) {
            message.exp_number = data.exp_number;
        }
        if (data.exp_level != null) {
            message.exp_level = data.exp_level;
        }
        if (data.open_id_list != null) {
            message.open_id_list = data.open_id_list;
        }
        if (data.finish_id_list != null) {
            message.finish_id_list = data.finish_id_list;
        }
        if (data.rewarded_fetter_level_list != null) {
            message.rewarded_fetter_level_list = data.rewarded_fetter_level_list;
        }
        if (data.fetter_list != null) {
            message.fetter_list = data.fetter_list.map(item => dependency_1.FetterData.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.exp_number != null) {
            data.exp_number = this.exp_number;
        }
        if (this.exp_level != null) {
            data.exp_level = this.exp_level;
        }
        if (this.open_id_list != null) {
            data.open_id_list = this.open_id_list;
        }
        if (this.finish_id_list != null) {
            data.finish_id_list = this.finish_id_list;
        }
        if (this.rewarded_fetter_level_list != null) {
            data.rewarded_fetter_level_list = this.rewarded_fetter_level_list;
        }
        if (this.fetter_list != null) {
            data.fetter_list = this.fetter_list.map((item) => item.toObject());
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.exp_number != 0)
            writer.writeUint32(1, this.exp_number);
        if (this.exp_level != 0)
            writer.writeUint32(2, this.exp_level);
        if (this.open_id_list.length)
            writer.writePackedUint32(3, this.open_id_list);
        if (this.finish_id_list.length)
            writer.writePackedUint32(4, this.finish_id_list);
        if (this.rewarded_fetter_level_list.length)
            writer.writePackedUint32(5, this.rewarded_fetter_level_list);
        if (this.fetter_list.length)
            writer.writeRepeatedMessage(6, this.fetter_list, (item) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarFetterInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.exp_number = reader.readUint32();
                    break;
                case 2:
                    message.exp_level = reader.readUint32();
                    break;
                case 3:
                    message.open_id_list = reader.readPackedUint32();
                    break;
                case 4:
                    message.finish_id_list = reader.readPackedUint32();
                    break;
                case 5:
                    message.rewarded_fetter_level_list = reader.readPackedUint32();
                    break;
                case 6:
                    reader.readMessage(message.fetter_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.FetterData.deserialize(reader), dependency_1.FetterData));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return AvatarFetterInfo.deserialize(bytes);
    }
}
exports.AvatarFetterInfo = AvatarFetterInfo;
_AvatarFetterInfo_one_of_decls = new WeakMap();
