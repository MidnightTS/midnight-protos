"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SocialDetail_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SocialDetail = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SocialDetail.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./Birthday");
const dependency_2 = require("./FriendEnterHomeOption");
const dependency_3 = require("./FriendOnlineState");
const dependency_4 = require("./ProfilePicture");
const dependency_5 = require("./SocialShowAvatarInfo");
const pb_1 = require("google-protobuf");
class SocialDetail extends pb_1.Message {
    constructor(data) {
        super();
        _SocialDetail_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 22, 23], __classPrivateFieldGet(this, _SocialDetail_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("uid" in data && data.uid != undefined) {
                this.uid = data.uid;
            }
            if ("nickname" in data && data.nickname != undefined) {
                this.nickname = data.nickname;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("avatar_id" in data && data.avatar_id != undefined) {
                this.avatar_id = data.avatar_id;
            }
            if ("signature" in data && data.signature != undefined) {
                this.signature = data.signature;
            }
            if ("birthday" in data && data.birthday != undefined) {
                this.birthday = data.birthday;
            }
            if ("world_level" in data && data.world_level != undefined) {
                this.world_level = data.world_level;
            }
            if ("reserved_list" in data && data.reserved_list != undefined) {
                this.reserved_list = data.reserved_list;
            }
            if ("online_state" in data && data.online_state != undefined) {
                this.online_state = data.online_state;
            }
            if ("param" in data && data.param != undefined) {
                this.param = data.param;
            }
            if ("is_friend" in data && data.is_friend != undefined) {
                this.is_friend = data.is_friend;
            }
            if ("is_mp_mode_available" in data && data.is_mp_mode_available != undefined) {
                this.is_mp_mode_available = data.is_mp_mode_available;
            }
            if ("online_id" in data && data.online_id != undefined) {
                this.online_id = data.online_id;
            }
            if ("name_card_id" in data && data.name_card_id != undefined) {
                this.name_card_id = data.name_card_id;
            }
            if ("is_in_blacklist" in data && data.is_in_blacklist != undefined) {
                this.is_in_blacklist = data.is_in_blacklist;
            }
            if ("is_chat_no_disturb" in data && data.is_chat_no_disturb != undefined) {
                this.is_chat_no_disturb = data.is_chat_no_disturb;
            }
            if ("remark_name" in data && data.remark_name != undefined) {
                this.remark_name = data.remark_name;
            }
            if ("finish_achievement_num" in data && data.finish_achievement_num != undefined) {
                this.finish_achievement_num = data.finish_achievement_num;
            }
            if ("tower_floor_index" in data && data.tower_floor_index != undefined) {
                this.tower_floor_index = data.tower_floor_index;
            }
            if ("tower_level_index" in data && data.tower_level_index != undefined) {
                this.tower_level_index = data.tower_level_index;
            }
            if ("is_show_avatar" in data && data.is_show_avatar != undefined) {
                this.is_show_avatar = data.is_show_avatar;
            }
            if ("show_avatar_info_list" in data && data.show_avatar_info_list != undefined) {
                this.show_avatar_info_list = data.show_avatar_info_list;
            }
            if ("show_name_card_id_list" in data && data.show_name_card_id_list != undefined) {
                this.show_name_card_id_list = data.show_name_card_id_list;
            }
            if ("friend_enter_home_option" in data && data.friend_enter_home_option != undefined) {
                this.friend_enter_home_option = data.friend_enter_home_option;
            }
            if ("profile_picture" in data && data.profile_picture != undefined) {
                this.profile_picture = data.profile_picture;
            }
        }
    }
    get uid() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set uid(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get nickname() {
        return pb_1.Message.getFieldWithDefault(this, 2, "");
    }
    set nickname(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set level(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get avatar_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set avatar_id(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get signature() {
        return pb_1.Message.getFieldWithDefault(this, 5, "");
    }
    set signature(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get birthday() {
        return pb_1.Message.getWrapperField(this, dependency_1.Birthday, 6);
    }
    set birthday(value) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_birthday() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get world_level() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0);
    }
    set world_level(value) {
        pb_1.Message.setField(this, 7, value);
    }
    get reserved_list() {
        return pb_1.Message.getFieldWithDefault(this, 8, []);
    }
    set reserved_list(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get online_state() {
        return pb_1.Message.getFieldWithDefault(this, 9, dependency_3.FriendOnlineState.FRIEND_ONLINE_STATE_FREIEND_DISCONNECT);
    }
    set online_state(value) {
        pb_1.Message.setField(this, 9, value);
    }
    get param() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0);
    }
    set param(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get is_friend() {
        return pb_1.Message.getFieldWithDefault(this, 11, false);
    }
    set is_friend(value) {
        pb_1.Message.setField(this, 11, value);
    }
    get is_mp_mode_available() {
        return pb_1.Message.getFieldWithDefault(this, 12, false);
    }
    set is_mp_mode_available(value) {
        pb_1.Message.setField(this, 12, value);
    }
    get online_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, "");
    }
    set online_id(value) {
        pb_1.Message.setField(this, 13, value);
    }
    get name_card_id() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0);
    }
    set name_card_id(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_in_blacklist() {
        return pb_1.Message.getFieldWithDefault(this, 15, false);
    }
    set is_in_blacklist(value) {
        pb_1.Message.setField(this, 15, value);
    }
    get is_chat_no_disturb() {
        return pb_1.Message.getFieldWithDefault(this, 16, false);
    }
    set is_chat_no_disturb(value) {
        pb_1.Message.setField(this, 16, value);
    }
    get remark_name() {
        return pb_1.Message.getFieldWithDefault(this, 17, "");
    }
    set remark_name(value) {
        pb_1.Message.setField(this, 17, value);
    }
    get finish_achievement_num() {
        return pb_1.Message.getFieldWithDefault(this, 18, 0);
    }
    set finish_achievement_num(value) {
        pb_1.Message.setField(this, 18, value);
    }
    get tower_floor_index() {
        return pb_1.Message.getFieldWithDefault(this, 19, 0);
    }
    set tower_floor_index(value) {
        pb_1.Message.setField(this, 19, value);
    }
    get tower_level_index() {
        return pb_1.Message.getFieldWithDefault(this, 20, 0);
    }
    set tower_level_index(value) {
        pb_1.Message.setField(this, 20, value);
    }
    get is_show_avatar() {
        return pb_1.Message.getFieldWithDefault(this, 21, false);
    }
    set is_show_avatar(value) {
        pb_1.Message.setField(this, 21, value);
    }
    get show_avatar_info_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_5.SocialShowAvatarInfo, 22);
    }
    set show_avatar_info_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 22, value);
    }
    get show_name_card_id_list() {
        return pb_1.Message.getFieldWithDefault(this, 23, []);
    }
    set show_name_card_id_list(value) {
        pb_1.Message.setField(this, 23, value);
    }
    get friend_enter_home_option() {
        return pb_1.Message.getFieldWithDefault(this, 24, dependency_2.FriendEnterHomeOption.FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM);
    }
    set friend_enter_home_option(value) {
        pb_1.Message.setField(this, 24, value);
    }
    get profile_picture() {
        return pb_1.Message.getWrapperField(this, dependency_4.ProfilePicture, 25);
    }
    set profile_picture(value) {
        pb_1.Message.setWrapperField(this, 25, value);
    }
    get has_profile_picture() {
        return pb_1.Message.getField(this, 25) != null;
    }
    static fromObject(data) {
        const message = new SocialDetail({});
        if (data.uid != null) {
            message.uid = data.uid;
        }
        if (data.nickname != null) {
            message.nickname = data.nickname;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.avatar_id != null) {
            message.avatar_id = data.avatar_id;
        }
        if (data.signature != null) {
            message.signature = data.signature;
        }
        if (data.birthday != null) {
            message.birthday = dependency_1.Birthday.fromObject(data.birthday);
        }
        if (data.world_level != null) {
            message.world_level = data.world_level;
        }
        if (data.reserved_list != null) {
            message.reserved_list = data.reserved_list;
        }
        if (data.online_state != null) {
            message.online_state = data.online_state;
        }
        if (data.param != null) {
            message.param = data.param;
        }
        if (data.is_friend != null) {
            message.is_friend = data.is_friend;
        }
        if (data.is_mp_mode_available != null) {
            message.is_mp_mode_available = data.is_mp_mode_available;
        }
        if (data.online_id != null) {
            message.online_id = data.online_id;
        }
        if (data.name_card_id != null) {
            message.name_card_id = data.name_card_id;
        }
        if (data.is_in_blacklist != null) {
            message.is_in_blacklist = data.is_in_blacklist;
        }
        if (data.is_chat_no_disturb != null) {
            message.is_chat_no_disturb = data.is_chat_no_disturb;
        }
        if (data.remark_name != null) {
            message.remark_name = data.remark_name;
        }
        if (data.finish_achievement_num != null) {
            message.finish_achievement_num = data.finish_achievement_num;
        }
        if (data.tower_floor_index != null) {
            message.tower_floor_index = data.tower_floor_index;
        }
        if (data.tower_level_index != null) {
            message.tower_level_index = data.tower_level_index;
        }
        if (data.is_show_avatar != null) {
            message.is_show_avatar = data.is_show_avatar;
        }
        if (data.show_avatar_info_list != null) {
            message.show_avatar_info_list = data.show_avatar_info_list.map(item => dependency_5.SocialShowAvatarInfo.fromObject(item));
        }
        if (data.show_name_card_id_list != null) {
            message.show_name_card_id_list = data.show_name_card_id_list;
        }
        if (data.friend_enter_home_option != null) {
            message.friend_enter_home_option = data.friend_enter_home_option;
        }
        if (data.profile_picture != null) {
            message.profile_picture = dependency_4.ProfilePicture.fromObject(data.profile_picture);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.uid != null) {
            data.uid = this.uid;
        }
        if (this.nickname != null) {
            data.nickname = this.nickname;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.avatar_id != null) {
            data.avatar_id = this.avatar_id;
        }
        if (this.signature != null) {
            data.signature = this.signature;
        }
        if (this.birthday != null) {
            data.birthday = this.birthday.toObject();
        }
        if (this.world_level != null) {
            data.world_level = this.world_level;
        }
        if (this.reserved_list != null) {
            data.reserved_list = this.reserved_list;
        }
        if (this.online_state != null) {
            data.online_state = this.online_state;
        }
        if (this.param != null) {
            data.param = this.param;
        }
        if (this.is_friend != null) {
            data.is_friend = this.is_friend;
        }
        if (this.is_mp_mode_available != null) {
            data.is_mp_mode_available = this.is_mp_mode_available;
        }
        if (this.online_id != null) {
            data.online_id = this.online_id;
        }
        if (this.name_card_id != null) {
            data.name_card_id = this.name_card_id;
        }
        if (this.is_in_blacklist != null) {
            data.is_in_blacklist = this.is_in_blacklist;
        }
        if (this.is_chat_no_disturb != null) {
            data.is_chat_no_disturb = this.is_chat_no_disturb;
        }
        if (this.remark_name != null) {
            data.remark_name = this.remark_name;
        }
        if (this.finish_achievement_num != null) {
            data.finish_achievement_num = this.finish_achievement_num;
        }
        if (this.tower_floor_index != null) {
            data.tower_floor_index = this.tower_floor_index;
        }
        if (this.tower_level_index != null) {
            data.tower_level_index = this.tower_level_index;
        }
        if (this.is_show_avatar != null) {
            data.is_show_avatar = this.is_show_avatar;
        }
        if (this.show_avatar_info_list != null) {
            data.show_avatar_info_list = this.show_avatar_info_list.map((item) => item.toObject());
        }
        if (this.show_name_card_id_list != null) {
            data.show_name_card_id_list = this.show_name_card_id_list;
        }
        if (this.friend_enter_home_option != null) {
            data.friend_enter_home_option = this.friend_enter_home_option;
        }
        if (this.profile_picture != null) {
            data.profile_picture = this.profile_picture.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.uid != 0)
            writer.writeUint32(1, this.uid);
        if (this.nickname.length)
            writer.writeString(2, this.nickname);
        if (this.level != 0)
            writer.writeUint32(3, this.level);
        if (this.avatar_id != 0)
            writer.writeUint32(4, this.avatar_id);
        if (this.signature.length)
            writer.writeString(5, this.signature);
        if (this.has_birthday)
            writer.writeMessage(6, this.birthday, () => this.birthday.serialize(writer));
        if (this.world_level != 0)
            writer.writeUint32(7, this.world_level);
        if (this.reserved_list.length)
            writer.writePackedUint32(8, this.reserved_list);
        if (this.online_state != dependency_3.FriendOnlineState.FRIEND_ONLINE_STATE_FREIEND_DISCONNECT)
            writer.writeEnum(9, this.online_state);
        if (this.param != 0)
            writer.writeUint32(10, this.param);
        if (this.is_friend != false)
            writer.writeBool(11, this.is_friend);
        if (this.is_mp_mode_available != false)
            writer.writeBool(12, this.is_mp_mode_available);
        if (this.online_id.length)
            writer.writeString(13, this.online_id);
        if (this.name_card_id != 0)
            writer.writeUint32(14, this.name_card_id);
        if (this.is_in_blacklist != false)
            writer.writeBool(15, this.is_in_blacklist);
        if (this.is_chat_no_disturb != false)
            writer.writeBool(16, this.is_chat_no_disturb);
        if (this.remark_name.length)
            writer.writeString(17, this.remark_name);
        if (this.finish_achievement_num != 0)
            writer.writeUint32(18, this.finish_achievement_num);
        if (this.tower_floor_index != 0)
            writer.writeUint32(19, this.tower_floor_index);
        if (this.tower_level_index != 0)
            writer.writeUint32(20, this.tower_level_index);
        if (this.is_show_avatar != false)
            writer.writeBool(21, this.is_show_avatar);
        if (this.show_avatar_info_list.length)
            writer.writeRepeatedMessage(22, this.show_avatar_info_list, (item) => item.serialize(writer));
        if (this.show_name_card_id_list.length)
            writer.writePackedUint32(23, this.show_name_card_id_list);
        if (this.friend_enter_home_option != dependency_2.FriendEnterHomeOption.FRIEND_ENTER_HOME_OPTION_NEED_CONFIRM)
            writer.writeEnum(24, this.friend_enter_home_option);
        if (this.has_profile_picture)
            writer.writeMessage(25, this.profile_picture, () => this.profile_picture.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SocialDetail();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.uid = reader.readUint32();
                    break;
                case 2:
                    message.nickname = reader.readString();
                    break;
                case 3:
                    message.level = reader.readUint32();
                    break;
                case 4:
                    message.avatar_id = reader.readUint32();
                    break;
                case 5:
                    message.signature = reader.readString();
                    break;
                case 6:
                    reader.readMessage(message.birthday, () => message.birthday = dependency_1.Birthday.deserialize(reader));
                    break;
                case 7:
                    message.world_level = reader.readUint32();
                    break;
                case 8:
                    message.reserved_list = reader.readPackedUint32();
                    break;
                case 9:
                    message.online_state = reader.readEnum();
                    break;
                case 10:
                    message.param = reader.readUint32();
                    break;
                case 11:
                    message.is_friend = reader.readBool();
                    break;
                case 12:
                    message.is_mp_mode_available = reader.readBool();
                    break;
                case 13:
                    message.online_id = reader.readString();
                    break;
                case 14:
                    message.name_card_id = reader.readUint32();
                    break;
                case 15:
                    message.is_in_blacklist = reader.readBool();
                    break;
                case 16:
                    message.is_chat_no_disturb = reader.readBool();
                    break;
                case 17:
                    message.remark_name = reader.readString();
                    break;
                case 18:
                    message.finish_achievement_num = reader.readUint32();
                    break;
                case 19:
                    message.tower_floor_index = reader.readUint32();
                    break;
                case 20:
                    message.tower_level_index = reader.readUint32();
                    break;
                case 21:
                    message.is_show_avatar = reader.readBool();
                    break;
                case 22:
                    reader.readMessage(message.show_avatar_info_list, () => pb_1.Message.addToRepeatedWrapperField(message, 22, dependency_5.SocialShowAvatarInfo.deserialize(reader), dependency_5.SocialShowAvatarInfo));
                    break;
                case 23:
                    message.show_name_card_id_list = reader.readPackedUint32();
                    break;
                case 24:
                    message.friend_enter_home_option = reader.readEnum();
                    break;
                case 25:
                    reader.readMessage(message.profile_picture, () => message.profile_picture = dependency_4.ProfilePicture.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SocialDetail.deserialize(bytes);
    }
}
exports.SocialDetail = SocialDetail;
_SocialDetail_one_of_decls = new WeakMap();
