/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: NormalUidOpNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class NormalUidOpNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        duration?: number;
        param_list?: number[];
        param_uid_list?: number[];
        param_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("duration" in data && data.duration != undefined) {
                this.duration = data.duration;
            }
            if ("param_list" in data && data.param_list != undefined) {
                this.param_list = data.param_list;
            }
            if ("param_uid_list" in data && data.param_uid_list != undefined) {
                this.param_uid_list = data.param_uid_list;
            }
            if ("param_index" in data && data.param_index != undefined) {
                this.param_index = data.param_index;
            }
        }
    }
    get duration() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set duration(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get param_list() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set param_list(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get param_uid_list() {
        return pb_1.Message.getFieldWithDefault(this, 5, []) as number[];
    }
    set param_uid_list(value: number[]) {
        pb_1.Message.setField(this, 5, value);
    }
    get param_index() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set param_index(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    static fromObject(data: {
        duration?: number;
        param_list?: number[];
        param_uid_list?: number[];
        param_index?: number;
    }): NormalUidOpNotify {
        const message = new NormalUidOpNotify({});
        if (data.duration != null) {
            message.duration = data.duration;
        }
        if (data.param_list != null) {
            message.param_list = data.param_list;
        }
        if (data.param_uid_list != null) {
            message.param_uid_list = data.param_uid_list;
        }
        if (data.param_index != null) {
            message.param_index = data.param_index;
        }
        return message;
    }
    toObject() {
        const data: {
            duration?: number;
            param_list?: number[];
            param_uid_list?: number[];
            param_index?: number;
        } = {};
        if (this.duration != null) {
            data.duration = this.duration;
        }
        if (this.param_list != null) {
            data.param_list = this.param_list;
        }
        if (this.param_uid_list != null) {
            data.param_uid_list = this.param_uid_list;
        }
        if (this.param_index != null) {
            data.param_index = this.param_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.duration != 0)
            writer.writeUint32(6, this.duration);
        if (this.param_list.length)
            writer.writePackedUint32(4, this.param_list);
        if (this.param_uid_list.length)
            writer.writePackedUint32(5, this.param_uid_list);
        if (this.param_index != 0)
            writer.writeUint32(8, this.param_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): NormalUidOpNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new NormalUidOpNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 6:
                    message.duration = reader.readUint32();
                    break;
                case 4:
                    message.param_list = reader.readPackedUint32();
                    break;
                case 5:
                    message.param_uid_list = reader.readPackedUint32();
                    break;
                case 8:
                    message.param_index = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): NormalUidOpNotify {
        return NormalUidOpNotify.deserialize(bytes);
    }
}
