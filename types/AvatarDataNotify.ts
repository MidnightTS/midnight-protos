/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AvatarDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AvatarInfo";
import * as dependency_2 from "./AvatarTeam";
import * as pb_1 from "google-protobuf";
export class AvatarDataNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        owned_costume_list?: number[];
        choose_avatar_guid?: number;
        avatar_team_map?: Map<number, dependency_2.AvatarTeam>;
        Unk3000_NIGPICLBHMA?: number[];
        temp_avatar_guid_list?: number[];
        owned_flycloak_list?: number[];
        avatar_list?: dependency_1.AvatarInfo[];
        cur_avatar_team_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [11, 9, 12, 1, 6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("owned_costume_list" in data && data.owned_costume_list != undefined) {
                this.owned_costume_list = data.owned_costume_list;
            }
            if ("choose_avatar_guid" in data && data.choose_avatar_guid != undefined) {
                this.choose_avatar_guid = data.choose_avatar_guid;
            }
            if ("avatar_team_map" in data && data.avatar_team_map != undefined) {
                this.avatar_team_map = data.avatar_team_map;
            }
            if ("Unk3000_NIGPICLBHMA" in data && data.Unk3000_NIGPICLBHMA != undefined) {
                this.Unk3000_NIGPICLBHMA = data.Unk3000_NIGPICLBHMA;
            }
            if ("temp_avatar_guid_list" in data && data.temp_avatar_guid_list != undefined) {
                this.temp_avatar_guid_list = data.temp_avatar_guid_list;
            }
            if ("owned_flycloak_list" in data && data.owned_flycloak_list != undefined) {
                this.owned_flycloak_list = data.owned_flycloak_list;
            }
            if ("avatar_list" in data && data.avatar_list != undefined) {
                this.avatar_list = data.avatar_list;
            }
            if ("cur_avatar_team_id" in data && data.cur_avatar_team_id != undefined) {
                this.cur_avatar_team_id = data.cur_avatar_team_id;
            }
        }
        if (!this.avatar_team_map)
            this.avatar_team_map = new Map();
    }
    get owned_costume_list() {
        return pb_1.Message.getFieldWithDefault(this, 11, []) as number[];
    }
    set owned_costume_list(value: number[]) {
        pb_1.Message.setField(this, 11, value);
    }
    get choose_avatar_guid() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set choose_avatar_guid(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get avatar_team_map() {
        return pb_1.Message.getField(this, 7) as any as Map<number, dependency_2.AvatarTeam>;
    }
    set avatar_team_map(value: Map<number, dependency_2.AvatarTeam>) {
        pb_1.Message.setField(this, 7, value as any);
    }
    get Unk3000_NIGPICLBHMA() {
        return pb_1.Message.getFieldWithDefault(this, 9, []) as number[];
    }
    set Unk3000_NIGPICLBHMA(value: number[]) {
        pb_1.Message.setField(this, 9, value);
    }
    get temp_avatar_guid_list() {
        return pb_1.Message.getFieldWithDefault(this, 12, []) as number[];
    }
    set temp_avatar_guid_list(value: number[]) {
        pb_1.Message.setField(this, 12, value);
    }
    get owned_flycloak_list() {
        return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
    }
    set owned_flycloak_list(value: number[]) {
        pb_1.Message.setField(this, 1, value);
    }
    get avatar_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.AvatarInfo, 6) as dependency_1.AvatarInfo[];
    }
    set avatar_list(value: dependency_1.AvatarInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get cur_avatar_team_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set cur_avatar_team_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        owned_costume_list?: number[];
        choose_avatar_guid?: number;
        avatar_team_map?: {
            [key: number]: ReturnType<typeof dependency_2.AvatarTeam.prototype.toObject>;
        };
        Unk3000_NIGPICLBHMA?: number[];
        temp_avatar_guid_list?: number[];
        owned_flycloak_list?: number[];
        avatar_list?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>[];
        cur_avatar_team_id?: number;
    }): AvatarDataNotify {
        const message = new AvatarDataNotify({});
        if (data.owned_costume_list != null) {
            message.owned_costume_list = data.owned_costume_list;
        }
        if (data.choose_avatar_guid != null) {
            message.choose_avatar_guid = data.choose_avatar_guid;
        }
        if (typeof data.avatar_team_map == "object") {
            message.avatar_team_map = new Map(Object.entries(data.avatar_team_map).map(([key, value]) => [Number(key), dependency_2.AvatarTeam.fromObject(value)]));
        }
        if (data.Unk3000_NIGPICLBHMA != null) {
            message.Unk3000_NIGPICLBHMA = data.Unk3000_NIGPICLBHMA;
        }
        if (data.temp_avatar_guid_list != null) {
            message.temp_avatar_guid_list = data.temp_avatar_guid_list;
        }
        if (data.owned_flycloak_list != null) {
            message.owned_flycloak_list = data.owned_flycloak_list;
        }
        if (data.avatar_list != null) {
            message.avatar_list = data.avatar_list.map(item => dependency_1.AvatarInfo.fromObject(item));
        }
        if (data.cur_avatar_team_id != null) {
            message.cur_avatar_team_id = data.cur_avatar_team_id;
        }
        return message;
    }
    toObject() {
        const data: {
            owned_costume_list?: number[];
            choose_avatar_guid?: number;
            avatar_team_map?: {
                [key: number]: ReturnType<typeof dependency_2.AvatarTeam.prototype.toObject>;
            };
            Unk3000_NIGPICLBHMA?: number[];
            temp_avatar_guid_list?: number[];
            owned_flycloak_list?: number[];
            avatar_list?: ReturnType<typeof dependency_1.AvatarInfo.prototype.toObject>[];
            cur_avatar_team_id?: number;
        } = {};
        if (this.owned_costume_list != null) {
            data.owned_costume_list = this.owned_costume_list;
        }
        if (this.choose_avatar_guid != null) {
            data.choose_avatar_guid = this.choose_avatar_guid;
        }
        if (this.avatar_team_map.size > 0) {
            data.avatar_team_map = (Object.fromEntries)((Array.from)(this.avatar_team_map).map(([key, value]) => [key, value.toObject()]));
        }
        if (this.Unk3000_NIGPICLBHMA != null) {
            data.Unk3000_NIGPICLBHMA = this.Unk3000_NIGPICLBHMA;
        }
        if (this.temp_avatar_guid_list != null) {
            data.temp_avatar_guid_list = this.temp_avatar_guid_list;
        }
        if (this.owned_flycloak_list != null) {
            data.owned_flycloak_list = this.owned_flycloak_list;
        }
        if (this.avatar_list != null) {
            data.avatar_list = this.avatar_list.map((item: dependency_1.AvatarInfo) => item.toObject());
        }
        if (this.cur_avatar_team_id != null) {
            data.cur_avatar_team_id = this.cur_avatar_team_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.owned_costume_list.length)
            writer.writePackedUint32(11, this.owned_costume_list);
        if (this.choose_avatar_guid != 0)
            writer.writeUint64(8, this.choose_avatar_guid);
        for (const [key, value] of this.avatar_team_map) {
            writer.writeMessage(7, this.avatar_team_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (this.Unk3000_NIGPICLBHMA.length)
            writer.writePackedUint32(9, this.Unk3000_NIGPICLBHMA);
        if (this.temp_avatar_guid_list.length)
            writer.writePackedUint64(12, this.temp_avatar_guid_list);
        if (this.owned_flycloak_list.length)
            writer.writePackedUint32(1, this.owned_flycloak_list);
        if (this.avatar_list.length)
            writer.writeRepeatedMessage(6, this.avatar_list, (item: dependency_1.AvatarInfo) => item.serialize(writer));
        if (this.cur_avatar_team_id != 0)
            writer.writeUint32(2, this.cur_avatar_team_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AvatarDataNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AvatarDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.owned_costume_list = reader.readPackedUint32();
                    break;
                case 8:
                    message.choose_avatar_guid = reader.readUint64();
                    break;
                case 7:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.avatar_team_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_2.AvatarTeam.deserialize(reader));
                        return value;
                    }));
                    break;
                case 9:
                    message.Unk3000_NIGPICLBHMA = reader.readPackedUint32();
                    break;
                case 12:
                    message.temp_avatar_guid_list = reader.readPackedUint64();
                    break;
                case 1:
                    message.owned_flycloak_list = reader.readPackedUint32();
                    break;
                case 6:
                    reader.readMessage(message.avatar_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.AvatarInfo.deserialize(reader), dependency_1.AvatarInfo));
                    break;
                case 2:
                    message.cur_avatar_team_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AvatarDataNotify {
        return AvatarDataNotify.deserialize(bytes);
    }
}
