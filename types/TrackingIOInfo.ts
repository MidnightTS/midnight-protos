/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TrackingIOInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class TrackingIOInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        rydevicetype?: string;
        mac?: string;
        deviceid?: string;
        client_tz?: string;
        current_caid?: string;
        cached_caid?: string;
        appid?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("rydevicetype" in data && data.rydevicetype != undefined) {
                this.rydevicetype = data.rydevicetype;
            }
            if ("mac" in data && data.mac != undefined) {
                this.mac = data.mac;
            }
            if ("deviceid" in data && data.deviceid != undefined) {
                this.deviceid = data.deviceid;
            }
            if ("client_tz" in data && data.client_tz != undefined) {
                this.client_tz = data.client_tz;
            }
            if ("current_caid" in data && data.current_caid != undefined) {
                this.current_caid = data.current_caid;
            }
            if ("cached_caid" in data && data.cached_caid != undefined) {
                this.cached_caid = data.cached_caid;
            }
            if ("appid" in data && data.appid != undefined) {
                this.appid = data.appid;
            }
        }
    }
    get rydevicetype() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set rydevicetype(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get mac() {
        return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
    }
    set mac(value: string) {
        pb_1.Message.setField(this, 6, value);
    }
    get deviceid() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set deviceid(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get client_tz() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set client_tz(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get current_caid() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set current_caid(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get cached_caid() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set cached_caid(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get appid() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set appid(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        rydevicetype?: string;
        mac?: string;
        deviceid?: string;
        client_tz?: string;
        current_caid?: string;
        cached_caid?: string;
        appid?: string;
    }): TrackingIOInfo {
        const message = new TrackingIOInfo({});
        if (data.rydevicetype != null) {
            message.rydevicetype = data.rydevicetype;
        }
        if (data.mac != null) {
            message.mac = data.mac;
        }
        if (data.deviceid != null) {
            message.deviceid = data.deviceid;
        }
        if (data.client_tz != null) {
            message.client_tz = data.client_tz;
        }
        if (data.current_caid != null) {
            message.current_caid = data.current_caid;
        }
        if (data.cached_caid != null) {
            message.cached_caid = data.cached_caid;
        }
        if (data.appid != null) {
            message.appid = data.appid;
        }
        return message;
    }
    toObject() {
        const data: {
            rydevicetype?: string;
            mac?: string;
            deviceid?: string;
            client_tz?: string;
            current_caid?: string;
            cached_caid?: string;
            appid?: string;
        } = {};
        if (this.rydevicetype != null) {
            data.rydevicetype = this.rydevicetype;
        }
        if (this.mac != null) {
            data.mac = this.mac;
        }
        if (this.deviceid != null) {
            data.deviceid = this.deviceid;
        }
        if (this.client_tz != null) {
            data.client_tz = this.client_tz;
        }
        if (this.current_caid != null) {
            data.current_caid = this.current_caid;
        }
        if (this.cached_caid != null) {
            data.cached_caid = this.cached_caid;
        }
        if (this.appid != null) {
            data.appid = this.appid;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.rydevicetype.length)
            writer.writeString(11, this.rydevicetype);
        if (this.mac.length)
            writer.writeString(6, this.mac);
        if (this.deviceid.length)
            writer.writeString(9, this.deviceid);
        if (this.client_tz.length)
            writer.writeString(5, this.client_tz);
        if (this.current_caid.length)
            writer.writeString(7, this.current_caid);
        if (this.cached_caid.length)
            writer.writeString(15, this.cached_caid);
        if (this.appid.length)
            writer.writeString(1, this.appid);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TrackingIOInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TrackingIOInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 11:
                    message.rydevicetype = reader.readString();
                    break;
                case 6:
                    message.mac = reader.readString();
                    break;
                case 9:
                    message.deviceid = reader.readString();
                    break;
                case 5:
                    message.client_tz = reader.readString();
                    break;
                case 7:
                    message.current_caid = reader.readString();
                    break;
                case 15:
                    message.cached_caid = reader.readString();
                    break;
                case 1:
                    message.appid = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TrackingIOInfo {
        return TrackingIOInfo.deserialize(bytes);
    }
}
