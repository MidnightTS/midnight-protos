// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "SceneTeamAvatar.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ServerBuff } from "./ServerBuff";
import { SceneEntityInfo } from "./SceneEntityInfo";
import { AbilityControlBlock } from "./AbilityControlBlock";
import { AbilitySyncStateInfo } from "./AbilitySyncStateInfo";
import { AvatarInfo } from "./AvatarInfo";
import { SceneAvatarInfo } from "./SceneAvatarInfo";
/**
 * @generated from protobuf message SceneTeamAvatar
 */
export interface SceneTeamAvatar {
    /**
     * @generated from protobuf field: SceneAvatarInfo scene_avatar_info = 14;
     */
    sceneAvatarInfo?: SceneAvatarInfo;
    /**
     * @generated from protobuf field: AvatarInfo avatar_info = 15;
     */
    avatarInfo?: AvatarInfo;
    /**
     * @generated from protobuf field: uint32 entity_id = 10;
     */
    entityId: number;
    /**
     * @generated from protobuf field: AbilitySyncStateInfo weapon_ability_info = 6;
     */
    weaponAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: AbilityControlBlock ability_control_block = 2;
     */
    abilityControlBlock?: AbilityControlBlock;
    /**
     * @generated from protobuf field: bool is_reconnect = 8;
     */
    isReconnect: boolean;
    /**
     * @generated from protobuf field: AbilitySyncStateInfo avatar_ability_info = 4;
     */
    avatarAbilityInfo?: AbilitySyncStateInfo;
    /**
     * @generated from protobuf field: uint64 weapon_guid = 12;
     */
    weaponGuid: bigint;
    /**
     * @generated from protobuf field: uint32 player_uid = 1;
     */
    playerUid: number;
    /**
     * @generated from protobuf field: SceneEntityInfo scene_entity_info = 11;
     */
    sceneEntityInfo?: SceneEntityInfo;
    /**
     * @generated from protobuf field: uint32 weapon_entity_id = 5;
     */
    weaponEntityId: number;
    /**
     * @generated from protobuf field: uint32 scene_id = 9;
     */
    sceneId: number;
    /**
     * @generated from protobuf field: bool is_on_scene = 625;
     */
    isOnScene: boolean;
    /**
     * @generated from protobuf field: uint64 avatar_guid = 3;
     */
    avatarGuid: bigint;
    /**
     * @generated from protobuf field: bool is_player_cur_avatar = 13;
     */
    isPlayerCurAvatar: boolean;
    /**
     * @generated from protobuf field: repeated ServerBuff server_buff_list = 7;
     */
    serverBuffList: ServerBuff[];
}
// @generated message type with reflection information, may provide speed optimized methods
class SceneTeamAvatar$Type extends MessageType<SceneTeamAvatar> {
    constructor() {
        super("SceneTeamAvatar", [
            { no: 14, name: "scene_avatar_info", kind: "message", T: () => SceneAvatarInfo },
            { no: 15, name: "avatar_info", kind: "message", T: () => AvatarInfo },
            { no: 10, name: "entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "weapon_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 2, name: "ability_control_block", kind: "message", T: () => AbilityControlBlock },
            { no: 8, name: "is_reconnect", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "avatar_ability_info", kind: "message", T: () => AbilitySyncStateInfo },
            { no: 12, name: "weapon_guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 1, name: "player_uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "scene_entity_info", kind: "message", T: () => SceneEntityInfo },
            { no: 5, name: "weapon_entity_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "scene_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 625, name: "is_on_scene", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "avatar_guid", kind: "scalar", T: 4 /*ScalarType.UINT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 13, name: "is_player_cur_avatar", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "server_buff_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ServerBuff }
        ]);
    }
    create(value?: PartialMessage<SceneTeamAvatar>): SceneTeamAvatar {
        const message = { entityId: 0, isReconnect: false, weaponGuid: 0n, playerUid: 0, weaponEntityId: 0, sceneId: 0, isOnScene: false, avatarGuid: 0n, isPlayerCurAvatar: false, serverBuffList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<SceneTeamAvatar>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: SceneTeamAvatar): SceneTeamAvatar {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* SceneAvatarInfo scene_avatar_info */ 14:
                    message.sceneAvatarInfo = SceneAvatarInfo.internalBinaryRead(reader, reader.uint32(), options, message.sceneAvatarInfo);
                    break;
                case /* AvatarInfo avatar_info */ 15:
                    message.avatarInfo = AvatarInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarInfo);
                    break;
                case /* uint32 entity_id */ 10:
                    message.entityId = reader.uint32();
                    break;
                case /* AbilitySyncStateInfo weapon_ability_info */ 6:
                    message.weaponAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.weaponAbilityInfo);
                    break;
                case /* AbilityControlBlock ability_control_block */ 2:
                    message.abilityControlBlock = AbilityControlBlock.internalBinaryRead(reader, reader.uint32(), options, message.abilityControlBlock);
                    break;
                case /* bool is_reconnect */ 8:
                    message.isReconnect = reader.bool();
                    break;
                case /* AbilitySyncStateInfo avatar_ability_info */ 4:
                    message.avatarAbilityInfo = AbilitySyncStateInfo.internalBinaryRead(reader, reader.uint32(), options, message.avatarAbilityInfo);
                    break;
                case /* uint64 weapon_guid */ 12:
                    message.weaponGuid = reader.uint64().toBigInt();
                    break;
                case /* uint32 player_uid */ 1:
                    message.playerUid = reader.uint32();
                    break;
                case /* SceneEntityInfo scene_entity_info */ 11:
                    message.sceneEntityInfo = SceneEntityInfo.internalBinaryRead(reader, reader.uint32(), options, message.sceneEntityInfo);
                    break;
                case /* uint32 weapon_entity_id */ 5:
                    message.weaponEntityId = reader.uint32();
                    break;
                case /* uint32 scene_id */ 9:
                    message.sceneId = reader.uint32();
                    break;
                case /* bool is_on_scene */ 625:
                    message.isOnScene = reader.bool();
                    break;
                case /* uint64 avatar_guid */ 3:
                    message.avatarGuid = reader.uint64().toBigInt();
                    break;
                case /* bool is_player_cur_avatar */ 13:
                    message.isPlayerCurAvatar = reader.bool();
                    break;
                case /* repeated ServerBuff server_buff_list */ 7:
                    message.serverBuffList.push(ServerBuff.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: SceneTeamAvatar, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* SceneAvatarInfo scene_avatar_info = 14; */
        if (message.sceneAvatarInfo)
            SceneAvatarInfo.internalBinaryWrite(message.sceneAvatarInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* AvatarInfo avatar_info = 15; */
        if (message.avatarInfo)
            AvatarInfo.internalBinaryWrite(message.avatarInfo, writer.tag(15, WireType.LengthDelimited).fork(), options).join();
        /* uint32 entity_id = 10; */
        if (message.entityId !== 0)
            writer.tag(10, WireType.Varint).uint32(message.entityId);
        /* AbilitySyncStateInfo weapon_ability_info = 6; */
        if (message.weaponAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.weaponAbilityInfo, writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        /* AbilityControlBlock ability_control_block = 2; */
        if (message.abilityControlBlock)
            AbilityControlBlock.internalBinaryWrite(message.abilityControlBlock, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        /* bool is_reconnect = 8; */
        if (message.isReconnect !== false)
            writer.tag(8, WireType.Varint).bool(message.isReconnect);
        /* AbilitySyncStateInfo avatar_ability_info = 4; */
        if (message.avatarAbilityInfo)
            AbilitySyncStateInfo.internalBinaryWrite(message.avatarAbilityInfo, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* uint64 weapon_guid = 12; */
        if (message.weaponGuid !== 0n)
            writer.tag(12, WireType.Varint).uint64(message.weaponGuid);
        /* uint32 player_uid = 1; */
        if (message.playerUid !== 0)
            writer.tag(1, WireType.Varint).uint32(message.playerUid);
        /* SceneEntityInfo scene_entity_info = 11; */
        if (message.sceneEntityInfo)
            SceneEntityInfo.internalBinaryWrite(message.sceneEntityInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* uint32 weapon_entity_id = 5; */
        if (message.weaponEntityId !== 0)
            writer.tag(5, WireType.Varint).uint32(message.weaponEntityId);
        /* uint32 scene_id = 9; */
        if (message.sceneId !== 0)
            writer.tag(9, WireType.Varint).uint32(message.sceneId);
        /* bool is_on_scene = 625; */
        if (message.isOnScene !== false)
            writer.tag(625, WireType.Varint).bool(message.isOnScene);
        /* uint64 avatar_guid = 3; */
        if (message.avatarGuid !== 0n)
            writer.tag(3, WireType.Varint).uint64(message.avatarGuid);
        /* bool is_player_cur_avatar = 13; */
        if (message.isPlayerCurAvatar !== false)
            writer.tag(13, WireType.Varint).bool(message.isPlayerCurAvatar);
        /* repeated ServerBuff server_buff_list = 7; */
        for (let i = 0; i < message.serverBuffList.length; i++)
            ServerBuff.internalBinaryWrite(message.serverBuffList[i], writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message SceneTeamAvatar
 */
export const SceneTeamAvatar = new SceneTeamAvatar$Type();
