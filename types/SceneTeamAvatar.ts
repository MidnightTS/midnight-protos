/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneTeamAvatar.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AbilityControlBlock";
import * as dependency_2 from "./AbilitySyncStateInfo";
import * as dependency_3 from "./AvatarInfo";
import * as dependency_4 from "./SceneAvatarInfo";
import * as dependency_5 from "./SceneEntityInfo";
import * as dependency_6 from "./ServerBuff";
import * as pb_1 from "google-protobuf";
export class SceneTeamAvatar extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        avatar_ability_info?: dependency_2.AbilitySyncStateInfo;
        avatar_info?: dependency_3.AvatarInfo;
        is_on_scene?: boolean;
        entity_id?: number;
        avatar_guid?: number;
        scene_id?: number;
        weapon_entity_id?: number;
        scene_avatar_info?: dependency_4.SceneAvatarInfo;
        weapon_guid?: number;
        weapon_ability_info?: dependency_2.AbilitySyncStateInfo;
        scene_entity_info?: dependency_5.SceneEntityInfo;
        player_uid?: number;
        is_reconnect?: boolean;
        ability_control_block?: dependency_1.AbilityControlBlock;
        is_player_cur_avatar?: boolean;
        server_buff_list?: dependency_6.ServerBuff[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [10], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("avatar_ability_info" in data && data.avatar_ability_info != undefined) {
                this.avatar_ability_info = data.avatar_ability_info;
            }
            if ("avatar_info" in data && data.avatar_info != undefined) {
                this.avatar_info = data.avatar_info;
            }
            if ("is_on_scene" in data && data.is_on_scene != undefined) {
                this.is_on_scene = data.is_on_scene;
            }
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("avatar_guid" in data && data.avatar_guid != undefined) {
                this.avatar_guid = data.avatar_guid;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("weapon_entity_id" in data && data.weapon_entity_id != undefined) {
                this.weapon_entity_id = data.weapon_entity_id;
            }
            if ("scene_avatar_info" in data && data.scene_avatar_info != undefined) {
                this.scene_avatar_info = data.scene_avatar_info;
            }
            if ("weapon_guid" in data && data.weapon_guid != undefined) {
                this.weapon_guid = data.weapon_guid;
            }
            if ("weapon_ability_info" in data && data.weapon_ability_info != undefined) {
                this.weapon_ability_info = data.weapon_ability_info;
            }
            if ("scene_entity_info" in data && data.scene_entity_info != undefined) {
                this.scene_entity_info = data.scene_entity_info;
            }
            if ("player_uid" in data && data.player_uid != undefined) {
                this.player_uid = data.player_uid;
            }
            if ("is_reconnect" in data && data.is_reconnect != undefined) {
                this.is_reconnect = data.is_reconnect;
            }
            if ("ability_control_block" in data && data.ability_control_block != undefined) {
                this.ability_control_block = data.ability_control_block;
            }
            if ("is_player_cur_avatar" in data && data.is_player_cur_avatar != undefined) {
                this.is_player_cur_avatar = data.is_player_cur_avatar;
            }
            if ("server_buff_list" in data && data.server_buff_list != undefined) {
                this.server_buff_list = data.server_buff_list;
            }
        }
    }
    get avatar_ability_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.AbilitySyncStateInfo, 5) as dependency_2.AbilitySyncStateInfo;
    }
    set avatar_ability_info(value: dependency_2.AbilitySyncStateInfo) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_avatar_ability_info() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get avatar_info() {
        return pb_1.Message.getWrapperField(this, dependency_3.AvatarInfo, 8) as dependency_3.AvatarInfo;
    }
    set avatar_info(value: dependency_3.AvatarInfo) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_avatar_info() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get is_on_scene() {
        return pb_1.Message.getFieldWithDefault(this, 152, false) as boolean;
    }
    set is_on_scene(value: boolean) {
        pb_1.Message.setField(this, 152, value);
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set entity_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get avatar_guid() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set avatar_guid(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get weapon_entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set weapon_entity_id(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get scene_avatar_info() {
        return pb_1.Message.getWrapperField(this, dependency_4.SceneAvatarInfo, 3) as dependency_4.SceneAvatarInfo;
    }
    set scene_avatar_info(value: dependency_4.SceneAvatarInfo) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_scene_avatar_info() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get weapon_guid() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set weapon_guid(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get weapon_ability_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.AbilitySyncStateInfo, 11) as dependency_2.AbilitySyncStateInfo;
    }
    set weapon_ability_info(value: dependency_2.AbilitySyncStateInfo) {
        pb_1.Message.setWrapperField(this, 11, value);
    }
    get has_weapon_ability_info() {
        return pb_1.Message.getField(this, 11) != null;
    }
    get scene_entity_info() {
        return pb_1.Message.getWrapperField(this, dependency_5.SceneEntityInfo, 12) as dependency_5.SceneEntityInfo;
    }
    set scene_entity_info(value: dependency_5.SceneEntityInfo) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_scene_entity_info() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get player_uid() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set player_uid(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get is_reconnect() {
        return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
    }
    set is_reconnect(value: boolean) {
        pb_1.Message.setField(this, 6, value);
    }
    get ability_control_block() {
        return pb_1.Message.getWrapperField(this, dependency_1.AbilityControlBlock, 2) as dependency_1.AbilityControlBlock;
    }
    set ability_control_block(value: dependency_1.AbilityControlBlock) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_ability_control_block() {
        return pb_1.Message.getField(this, 2) != null;
    }
    get is_player_cur_avatar() {
        return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
    }
    set is_player_cur_avatar(value: boolean) {
        pb_1.Message.setField(this, 13, value);
    }
    get server_buff_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_6.ServerBuff, 10) as dependency_6.ServerBuff[];
    }
    set server_buff_list(value: dependency_6.ServerBuff[]) {
        pb_1.Message.setRepeatedWrapperField(this, 10, value);
    }
    static fromObject(data: {
        avatar_ability_info?: ReturnType<typeof dependency_2.AbilitySyncStateInfo.prototype.toObject>;
        avatar_info?: ReturnType<typeof dependency_3.AvatarInfo.prototype.toObject>;
        is_on_scene?: boolean;
        entity_id?: number;
        avatar_guid?: number;
        scene_id?: number;
        weapon_entity_id?: number;
        scene_avatar_info?: ReturnType<typeof dependency_4.SceneAvatarInfo.prototype.toObject>;
        weapon_guid?: number;
        weapon_ability_info?: ReturnType<typeof dependency_2.AbilitySyncStateInfo.prototype.toObject>;
        scene_entity_info?: ReturnType<typeof dependency_5.SceneEntityInfo.prototype.toObject>;
        player_uid?: number;
        is_reconnect?: boolean;
        ability_control_block?: ReturnType<typeof dependency_1.AbilityControlBlock.prototype.toObject>;
        is_player_cur_avatar?: boolean;
        server_buff_list?: ReturnType<typeof dependency_6.ServerBuff.prototype.toObject>[];
    }): SceneTeamAvatar {
        const message = new SceneTeamAvatar({});
        if (data.avatar_ability_info != null) {
            message.avatar_ability_info = dependency_2.AbilitySyncStateInfo.fromObject(data.avatar_ability_info);
        }
        if (data.avatar_info != null) {
            message.avatar_info = dependency_3.AvatarInfo.fromObject(data.avatar_info);
        }
        if (data.is_on_scene != null) {
            message.is_on_scene = data.is_on_scene;
        }
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.avatar_guid != null) {
            message.avatar_guid = data.avatar_guid;
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.weapon_entity_id != null) {
            message.weapon_entity_id = data.weapon_entity_id;
        }
        if (data.scene_avatar_info != null) {
            message.scene_avatar_info = dependency_4.SceneAvatarInfo.fromObject(data.scene_avatar_info);
        }
        if (data.weapon_guid != null) {
            message.weapon_guid = data.weapon_guid;
        }
        if (data.weapon_ability_info != null) {
            message.weapon_ability_info = dependency_2.AbilitySyncStateInfo.fromObject(data.weapon_ability_info);
        }
        if (data.scene_entity_info != null) {
            message.scene_entity_info = dependency_5.SceneEntityInfo.fromObject(data.scene_entity_info);
        }
        if (data.player_uid != null) {
            message.player_uid = data.player_uid;
        }
        if (data.is_reconnect != null) {
            message.is_reconnect = data.is_reconnect;
        }
        if (data.ability_control_block != null) {
            message.ability_control_block = dependency_1.AbilityControlBlock.fromObject(data.ability_control_block);
        }
        if (data.is_player_cur_avatar != null) {
            message.is_player_cur_avatar = data.is_player_cur_avatar;
        }
        if (data.server_buff_list != null) {
            message.server_buff_list = data.server_buff_list.map(item => dependency_6.ServerBuff.fromObject(item));
        }
        return message;
    }
    toObject() {
        const data: {
            avatar_ability_info?: ReturnType<typeof dependency_2.AbilitySyncStateInfo.prototype.toObject>;
            avatar_info?: ReturnType<typeof dependency_3.AvatarInfo.prototype.toObject>;
            is_on_scene?: boolean;
            entity_id?: number;
            avatar_guid?: number;
            scene_id?: number;
            weapon_entity_id?: number;
            scene_avatar_info?: ReturnType<typeof dependency_4.SceneAvatarInfo.prototype.toObject>;
            weapon_guid?: number;
            weapon_ability_info?: ReturnType<typeof dependency_2.AbilitySyncStateInfo.prototype.toObject>;
            scene_entity_info?: ReturnType<typeof dependency_5.SceneEntityInfo.prototype.toObject>;
            player_uid?: number;
            is_reconnect?: boolean;
            ability_control_block?: ReturnType<typeof dependency_1.AbilityControlBlock.prototype.toObject>;
            is_player_cur_avatar?: boolean;
            server_buff_list?: ReturnType<typeof dependency_6.ServerBuff.prototype.toObject>[];
        } = {};
        if (this.avatar_ability_info != null) {
            data.avatar_ability_info = this.avatar_ability_info.toObject();
        }
        if (this.avatar_info != null) {
            data.avatar_info = this.avatar_info.toObject();
        }
        if (this.is_on_scene != null) {
            data.is_on_scene = this.is_on_scene;
        }
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.avatar_guid != null) {
            data.avatar_guid = this.avatar_guid;
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.weapon_entity_id != null) {
            data.weapon_entity_id = this.weapon_entity_id;
        }
        if (this.scene_avatar_info != null) {
            data.scene_avatar_info = this.scene_avatar_info.toObject();
        }
        if (this.weapon_guid != null) {
            data.weapon_guid = this.weapon_guid;
        }
        if (this.weapon_ability_info != null) {
            data.weapon_ability_info = this.weapon_ability_info.toObject();
        }
        if (this.scene_entity_info != null) {
            data.scene_entity_info = this.scene_entity_info.toObject();
        }
        if (this.player_uid != null) {
            data.player_uid = this.player_uid;
        }
        if (this.is_reconnect != null) {
            data.is_reconnect = this.is_reconnect;
        }
        if (this.ability_control_block != null) {
            data.ability_control_block = this.ability_control_block.toObject();
        }
        if (this.is_player_cur_avatar != null) {
            data.is_player_cur_avatar = this.is_player_cur_avatar;
        }
        if (this.server_buff_list != null) {
            data.server_buff_list = this.server_buff_list.map((item: dependency_6.ServerBuff) => item.toObject());
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_avatar_ability_info)
            writer.writeMessage(5, this.avatar_ability_info, () => this.avatar_ability_info.serialize(writer));
        if (this.has_avatar_info)
            writer.writeMessage(8, this.avatar_info, () => this.avatar_info.serialize(writer));
        if (this.is_on_scene != false)
            writer.writeBool(152, this.is_on_scene);
        if (this.entity_id != 0)
            writer.writeUint32(9, this.entity_id);
        if (this.avatar_guid != 0)
            writer.writeUint64(15, this.avatar_guid);
        if (this.scene_id != 0)
            writer.writeUint32(1, this.scene_id);
        if (this.weapon_entity_id != 0)
            writer.writeUint32(7, this.weapon_entity_id);
        if (this.has_scene_avatar_info)
            writer.writeMessage(3, this.scene_avatar_info, () => this.scene_avatar_info.serialize(writer));
        if (this.weapon_guid != 0)
            writer.writeUint64(4, this.weapon_guid);
        if (this.has_weapon_ability_info)
            writer.writeMessage(11, this.weapon_ability_info, () => this.weapon_ability_info.serialize(writer));
        if (this.has_scene_entity_info)
            writer.writeMessage(12, this.scene_entity_info, () => this.scene_entity_info.serialize(writer));
        if (this.player_uid != 0)
            writer.writeUint32(14, this.player_uid);
        if (this.is_reconnect != false)
            writer.writeBool(6, this.is_reconnect);
        if (this.has_ability_control_block)
            writer.writeMessage(2, this.ability_control_block, () => this.ability_control_block.serialize(writer));
        if (this.is_player_cur_avatar != false)
            writer.writeBool(13, this.is_player_cur_avatar);
        if (this.server_buff_list.length)
            writer.writeRepeatedMessage(10, this.server_buff_list, (item: dependency_6.ServerBuff) => item.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneTeamAvatar {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneTeamAvatar();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 5:
                    reader.readMessage(message.avatar_ability_info, () => message.avatar_ability_info = dependency_2.AbilitySyncStateInfo.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.avatar_info, () => message.avatar_info = dependency_3.AvatarInfo.deserialize(reader));
                    break;
                case 152:
                    message.is_on_scene = reader.readBool();
                    break;
                case 9:
                    message.entity_id = reader.readUint32();
                    break;
                case 15:
                    message.avatar_guid = reader.readUint64();
                    break;
                case 1:
                    message.scene_id = reader.readUint32();
                    break;
                case 7:
                    message.weapon_entity_id = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.scene_avatar_info, () => message.scene_avatar_info = dependency_4.SceneAvatarInfo.deserialize(reader));
                    break;
                case 4:
                    message.weapon_guid = reader.readUint64();
                    break;
                case 11:
                    reader.readMessage(message.weapon_ability_info, () => message.weapon_ability_info = dependency_2.AbilitySyncStateInfo.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.scene_entity_info, () => message.scene_entity_info = dependency_5.SceneEntityInfo.deserialize(reader));
                    break;
                case 14:
                    message.player_uid = reader.readUint32();
                    break;
                case 6:
                    message.is_reconnect = reader.readBool();
                    break;
                case 2:
                    reader.readMessage(message.ability_control_block, () => message.ability_control_block = dependency_1.AbilityControlBlock.deserialize(reader));
                    break;
                case 13:
                    message.is_player_cur_avatar = reader.readBool();
                    break;
                case 10:
                    reader.readMessage(message.server_buff_list, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_6.ServerBuff.deserialize(reader), dependency_6.ServerBuff));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneTeamAvatar {
        return SceneTeamAvatar.deserialize(bytes);
    }
}
