/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: HomePlantFieldData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HomePlantSubFieldData";
import * as dependency_2 from "./Vector";
import * as pb_1 from "google-protobuf";
export class HomePlantFieldData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        sub_field_list?: dependency_1.HomePlantSubFieldData[];
        furniture_id?: number;
        scene_id?: number;
        field_guid?: number;
        spawn_pos?: dependency_2.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("sub_field_list" in data && data.sub_field_list != undefined) {
                this.sub_field_list = data.sub_field_list;
            }
            if ("furniture_id" in data && data.furniture_id != undefined) {
                this.furniture_id = data.furniture_id;
            }
            if ("scene_id" in data && data.scene_id != undefined) {
                this.scene_id = data.scene_id;
            }
            if ("field_guid" in data && data.field_guid != undefined) {
                this.field_guid = data.field_guid;
            }
            if ("spawn_pos" in data && data.spawn_pos != undefined) {
                this.spawn_pos = data.spawn_pos;
            }
        }
    }
    get sub_field_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.HomePlantSubFieldData, 13) as dependency_1.HomePlantSubFieldData[];
    }
    set sub_field_list(value: dependency_1.HomePlantSubFieldData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get furniture_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set furniture_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get scene_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set scene_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get field_guid() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set field_guid(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get spawn_pos() {
        return pb_1.Message.getWrapperField(this, dependency_2.Vector, 12) as dependency_2.Vector;
    }
    set spawn_pos(value: dependency_2.Vector) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_spawn_pos() {
        return pb_1.Message.getField(this, 12) != null;
    }
    static fromObject(data: {
        sub_field_list?: ReturnType<typeof dependency_1.HomePlantSubFieldData.prototype.toObject>[];
        furniture_id?: number;
        scene_id?: number;
        field_guid?: number;
        spawn_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
    }): HomePlantFieldData {
        const message = new HomePlantFieldData({});
        if (data.sub_field_list != null) {
            message.sub_field_list = data.sub_field_list.map(item => dependency_1.HomePlantSubFieldData.fromObject(item));
        }
        if (data.furniture_id != null) {
            message.furniture_id = data.furniture_id;
        }
        if (data.scene_id != null) {
            message.scene_id = data.scene_id;
        }
        if (data.field_guid != null) {
            message.field_guid = data.field_guid;
        }
        if (data.spawn_pos != null) {
            message.spawn_pos = dependency_2.Vector.fromObject(data.spawn_pos);
        }
        return message;
    }
    toObject() {
        const data: {
            sub_field_list?: ReturnType<typeof dependency_1.HomePlantSubFieldData.prototype.toObject>[];
            furniture_id?: number;
            scene_id?: number;
            field_guid?: number;
            spawn_pos?: ReturnType<typeof dependency_2.Vector.prototype.toObject>;
        } = {};
        if (this.sub_field_list != null) {
            data.sub_field_list = this.sub_field_list.map((item: dependency_1.HomePlantSubFieldData) => item.toObject());
        }
        if (this.furniture_id != null) {
            data.furniture_id = this.furniture_id;
        }
        if (this.scene_id != null) {
            data.scene_id = this.scene_id;
        }
        if (this.field_guid != null) {
            data.field_guid = this.field_guid;
        }
        if (this.spawn_pos != null) {
            data.spawn_pos = this.spawn_pos.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.sub_field_list.length)
            writer.writeRepeatedMessage(13, this.sub_field_list, (item: dependency_1.HomePlantSubFieldData) => item.serialize(writer));
        if (this.furniture_id != 0)
            writer.writeUint32(9, this.furniture_id);
        if (this.scene_id != 0)
            writer.writeUint32(1, this.scene_id);
        if (this.field_guid != 0)
            writer.writeUint32(10, this.field_guid);
        if (this.has_spawn_pos)
            writer.writeMessage(12, this.spawn_pos, () => this.spawn_pos.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): HomePlantFieldData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new HomePlantFieldData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 13:
                    reader.readMessage(message.sub_field_list, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_1.HomePlantSubFieldData.deserialize(reader), dependency_1.HomePlantSubFieldData));
                    break;
                case 9:
                    message.furniture_id = reader.readUint32();
                    break;
                case 1:
                    message.scene_id = reader.readUint32();
                    break;
                case 10:
                    message.field_guid = reader.readUint32();
                    break;
                case 12:
                    reader.readMessage(message.spawn_pos, () => message.spawn_pos = dependency_2.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): HomePlantFieldData {
        return HomePlantFieldData.deserialize(bytes);
    }
}
