/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SeaLampContributeItemRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SeaLampContributeItemRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        add_contribution?: number;
        add_progress?: number;
        total_contribution?: number;
        retcode?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("add_contribution" in data && data.add_contribution != undefined) {
                this.add_contribution = data.add_contribution;
            }
            if ("add_progress" in data && data.add_progress != undefined) {
                this.add_progress = data.add_progress;
            }
            if ("total_contribution" in data && data.total_contribution != undefined) {
                this.total_contribution = data.total_contribution;
            }
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
        }
    }
    get add_contribution() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set add_contribution(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get add_progress() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set add_progress(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get total_contribution() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set total_contribution(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    static fromObject(data: {
        add_contribution?: number;
        add_progress?: number;
        total_contribution?: number;
        retcode?: number;
    }): SeaLampContributeItemRsp {
        const message = new SeaLampContributeItemRsp({});
        if (data.add_contribution != null) {
            message.add_contribution = data.add_contribution;
        }
        if (data.add_progress != null) {
            message.add_progress = data.add_progress;
        }
        if (data.total_contribution != null) {
            message.total_contribution = data.total_contribution;
        }
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        return message;
    }
    toObject() {
        const data: {
            add_contribution?: number;
            add_progress?: number;
            total_contribution?: number;
            retcode?: number;
        } = {};
        if (this.add_contribution != null) {
            data.add_contribution = this.add_contribution;
        }
        if (this.add_progress != null) {
            data.add_progress = this.add_progress;
        }
        if (this.total_contribution != null) {
            data.total_contribution = this.total_contribution;
        }
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.add_contribution != 0)
            writer.writeUint32(7, this.add_contribution);
        if (this.add_progress != 0)
            writer.writeUint32(1, this.add_progress);
        if (this.total_contribution != 0)
            writer.writeUint32(14, this.total_contribution);
        if (this.retcode != 0)
            writer.writeInt32(6, this.retcode);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SeaLampContributeItemRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SeaLampContributeItemRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.add_contribution = reader.readUint32();
                    break;
                case 1:
                    message.add_progress = reader.readUint32();
                    break;
                case 14:
                    message.total_contribution = reader.readUint32();
                    break;
                case 6:
                    message.retcode = reader.readInt32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SeaLampContributeItemRsp {
        return SeaLampContributeItemRsp.deserialize(bytes);
    }
}
