/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneAreaWeatherNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class SceneAreaWeatherNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        weather_area_id?: number;
        weather_gadget_id?: number;
        climate_type?: number;
        trans_duration?: number;
        weather_value_map?: Map<number, string>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("weather_area_id" in data && data.weather_area_id != undefined) {
                this.weather_area_id = data.weather_area_id;
            }
            if ("weather_gadget_id" in data && data.weather_gadget_id != undefined) {
                this.weather_gadget_id = data.weather_gadget_id;
            }
            if ("climate_type" in data && data.climate_type != undefined) {
                this.climate_type = data.climate_type;
            }
            if ("trans_duration" in data && data.trans_duration != undefined) {
                this.trans_duration = data.trans_duration;
            }
            if ("weather_value_map" in data && data.weather_value_map != undefined) {
                this.weather_value_map = data.weather_value_map;
            }
        }
        if (!this.weather_value_map)
            this.weather_value_map = new Map();
    }
    get weather_area_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set weather_area_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get weather_gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set weather_gadget_id(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get climate_type() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set climate_type(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get trans_duration() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set trans_duration(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get weather_value_map() {
        return pb_1.Message.getField(this, 10) as any as Map<number, string>;
    }
    set weather_value_map(value: Map<number, string>) {
        pb_1.Message.setField(this, 10, value as any);
    }
    static fromObject(data: {
        weather_area_id?: number;
        weather_gadget_id?: number;
        climate_type?: number;
        trans_duration?: number;
        weather_value_map?: {
            [key: number]: string;
        };
    }): SceneAreaWeatherNotify {
        const message = new SceneAreaWeatherNotify({});
        if (data.weather_area_id != null) {
            message.weather_area_id = data.weather_area_id;
        }
        if (data.weather_gadget_id != null) {
            message.weather_gadget_id = data.weather_gadget_id;
        }
        if (data.climate_type != null) {
            message.climate_type = data.climate_type;
        }
        if (data.trans_duration != null) {
            message.trans_duration = data.trans_duration;
        }
        if (typeof data.weather_value_map == "object") {
            message.weather_value_map = new Map(Object.entries(data.weather_value_map).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            weather_area_id?: number;
            weather_gadget_id?: number;
            climate_type?: number;
            trans_duration?: number;
            weather_value_map?: {
                [key: number]: string;
            };
        } = {};
        if (this.weather_area_id != null) {
            data.weather_area_id = this.weather_area_id;
        }
        if (this.weather_gadget_id != null) {
            data.weather_gadget_id = this.weather_gadget_id;
        }
        if (this.climate_type != null) {
            data.climate_type = this.climate_type;
        }
        if (this.trans_duration != null) {
            data.trans_duration = this.trans_duration;
        }
        if (this.weather_value_map.size > 0) {
            data.weather_value_map = (Object.fromEntries)(this.weather_value_map);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.weather_area_id != 0)
            writer.writeUint32(1, this.weather_area_id);
        if (this.weather_gadget_id != 0)
            writer.writeUint32(9, this.weather_gadget_id);
        if (this.climate_type != 0)
            writer.writeUint32(14, this.climate_type);
        if (this.trans_duration != 0)
            writer.writeFloat(15, this.trans_duration);
        for (const [key, value] of this.weather_value_map) {
            writer.writeMessage(10, this.weather_value_map, () => {
                writer.writeUint32(1, key);
                writer.writeString(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SceneAreaWeatherNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneAreaWeatherNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.weather_area_id = reader.readUint32();
                    break;
                case 9:
                    message.weather_gadget_id = reader.readUint32();
                    break;
                case 14:
                    message.climate_type = reader.readUint32();
                    break;
                case 15:
                    message.trans_duration = reader.readFloat();
                    break;
                case 10:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.weather_value_map as any, reader, reader.readUint32, reader.readString));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): SceneAreaWeatherNotify {
        return SceneAreaWeatherNotify.deserialize(bytes);
    }
}
