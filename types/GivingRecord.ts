/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GivingRecord.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GivingRecord extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_finished?: boolean;
        group_id?: number;
        Unk2800_JBPPNEHPACC?: boolean;
        giving_id?: number;
        last_group_id?: number;
        config_id?: number;
        Unk2800_BDKKENPEEGD?: Map<number, number>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_finished" in data && data.is_finished != undefined) {
                this.is_finished = data.is_finished;
            }
            if ("group_id" in data && data.group_id != undefined) {
                this.group_id = data.group_id;
            }
            if ("Unk2800_JBPPNEHPACC" in data && data.Unk2800_JBPPNEHPACC != undefined) {
                this.Unk2800_JBPPNEHPACC = data.Unk2800_JBPPNEHPACC;
            }
            if ("giving_id" in data && data.giving_id != undefined) {
                this.giving_id = data.giving_id;
            }
            if ("last_group_id" in data && data.last_group_id != undefined) {
                this.last_group_id = data.last_group_id;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("Unk2800_BDKKENPEEGD" in data && data.Unk2800_BDKKENPEEGD != undefined) {
                this.Unk2800_BDKKENPEEGD = data.Unk2800_BDKKENPEEGD;
            }
        }
        if (!this.Unk2800_BDKKENPEEGD)
            this.Unk2800_BDKKENPEEGD = new Map();
    }
    get is_finished() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set is_finished(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get group_id() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set group_id(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get Unk2800_JBPPNEHPACC() {
        return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
    }
    set Unk2800_JBPPNEHPACC(value: boolean) {
        pb_1.Message.setField(this, 8, value);
    }
    get giving_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set giving_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get last_group_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set last_group_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set config_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get Unk2800_BDKKENPEEGD() {
        return pb_1.Message.getField(this, 15) as any as Map<number, number>;
    }
    set Unk2800_BDKKENPEEGD(value: Map<number, number>) {
        pb_1.Message.setField(this, 15, value as any);
    }
    static fromObject(data: {
        is_finished?: boolean;
        group_id?: number;
        Unk2800_JBPPNEHPACC?: boolean;
        giving_id?: number;
        last_group_id?: number;
        config_id?: number;
        Unk2800_BDKKENPEEGD?: {
            [key: number]: number;
        };
    }): GivingRecord {
        const message = new GivingRecord({});
        if (data.is_finished != null) {
            message.is_finished = data.is_finished;
        }
        if (data.group_id != null) {
            message.group_id = data.group_id;
        }
        if (data.Unk2800_JBPPNEHPACC != null) {
            message.Unk2800_JBPPNEHPACC = data.Unk2800_JBPPNEHPACC;
        }
        if (data.giving_id != null) {
            message.giving_id = data.giving_id;
        }
        if (data.last_group_id != null) {
            message.last_group_id = data.last_group_id;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (typeof data.Unk2800_BDKKENPEEGD == "object") {
            message.Unk2800_BDKKENPEEGD = new Map(Object.entries(data.Unk2800_BDKKENPEEGD).map(([key, value]) => [Number(key), value]));
        }
        return message;
    }
    toObject() {
        const data: {
            is_finished?: boolean;
            group_id?: number;
            Unk2800_JBPPNEHPACC?: boolean;
            giving_id?: number;
            last_group_id?: number;
            config_id?: number;
            Unk2800_BDKKENPEEGD?: {
                [key: number]: number;
            };
        } = {};
        if (this.is_finished != null) {
            data.is_finished = this.is_finished;
        }
        if (this.group_id != null) {
            data.group_id = this.group_id;
        }
        if (this.Unk2800_JBPPNEHPACC != null) {
            data.Unk2800_JBPPNEHPACC = this.Unk2800_JBPPNEHPACC;
        }
        if (this.giving_id != null) {
            data.giving_id = this.giving_id;
        }
        if (this.last_group_id != null) {
            data.last_group_id = this.last_group_id;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.Unk2800_BDKKENPEEGD.size > 0) {
            data.Unk2800_BDKKENPEEGD = (Object.fromEntries)(this.Unk2800_BDKKENPEEGD);
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_finished != false)
            writer.writeBool(9, this.is_finished);
        if (this.group_id != 0)
            writer.writeUint32(5, this.group_id);
        if (this.Unk2800_JBPPNEHPACC != false)
            writer.writeBool(8, this.Unk2800_JBPPNEHPACC);
        if (this.giving_id != 0)
            writer.writeUint32(3, this.giving_id);
        if (this.last_group_id != 0)
            writer.writeUint32(6, this.last_group_id);
        if (this.config_id != 0)
            writer.writeUint32(2, this.config_id);
        for (const [key, value] of this.Unk2800_BDKKENPEEGD) {
            writer.writeMessage(15, this.Unk2800_BDKKENPEEGD, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GivingRecord {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GivingRecord();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.is_finished = reader.readBool();
                    break;
                case 5:
                    message.group_id = reader.readUint32();
                    break;
                case 8:
                    message.Unk2800_JBPPNEHPACC = reader.readBool();
                    break;
                case 3:
                    message.giving_id = reader.readUint32();
                    break;
                case 6:
                    message.last_group_id = reader.readUint32();
                    break;
                case 2:
                    message.config_id = reader.readUint32();
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.Unk2800_BDKKENPEEGD as any, reader, reader.readUint32, reader.readUint32));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GivingRecord {
        return GivingRecord.deserialize(bytes);
    }
}
