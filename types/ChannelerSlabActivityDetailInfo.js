"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _ChannelerSlabActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChannelerSlabActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ChannelerSlabActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./ChannelerSlabBuffInfo");
const dependency_2 = require("./ChannelerSlabChallengeStage");
const dependency_3 = require("./ChannelerSlabLoopDungeonStageInfo");
const pb_1 = require("google-protobuf");
class ChannelerSlabActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _ChannelerSlabActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [15], __classPrivateFieldGet(this, _ChannelerSlabActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("buff_info" in data && data.buff_info != undefined) {
                this.buff_info = data.buff_info;
            }
            if ("loop_dungeon_stage_info" in data && data.loop_dungeon_stage_info != undefined) {
                this.loop_dungeon_stage_info = data.loop_dungeon_stage_info;
            }
            if ("stage_list" in data && data.stage_list != undefined) {
                this.stage_list = data.stage_list;
            }
            if ("play_end_time" in data && data.play_end_time != undefined) {
                this.play_end_time = data.play_end_time;
            }
        }
    }
    get buff_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.ChannelerSlabBuffInfo, 1);
    }
    set buff_info(value) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_buff_info() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get loop_dungeon_stage_info() {
        return pb_1.Message.getWrapperField(this, dependency_3.ChannelerSlabLoopDungeonStageInfo, 7);
    }
    set loop_dungeon_stage_info(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_loop_dungeon_stage_info() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get stage_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.ChannelerSlabChallengeStage, 15);
    }
    set stage_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 15, value);
    }
    get play_end_time() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set play_end_time(value) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data) {
        const message = new ChannelerSlabActivityDetailInfo({});
        if (data.buff_info != null) {
            message.buff_info = dependency_1.ChannelerSlabBuffInfo.fromObject(data.buff_info);
        }
        if (data.loop_dungeon_stage_info != null) {
            message.loop_dungeon_stage_info = dependency_3.ChannelerSlabLoopDungeonStageInfo.fromObject(data.loop_dungeon_stage_info);
        }
        if (data.stage_list != null) {
            message.stage_list = data.stage_list.map(item => dependency_2.ChannelerSlabChallengeStage.fromObject(item));
        }
        if (data.play_end_time != null) {
            message.play_end_time = data.play_end_time;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.buff_info != null) {
            data.buff_info = this.buff_info.toObject();
        }
        if (this.loop_dungeon_stage_info != null) {
            data.loop_dungeon_stage_info = this.loop_dungeon_stage_info.toObject();
        }
        if (this.stage_list != null) {
            data.stage_list = this.stage_list.map((item) => item.toObject());
        }
        if (this.play_end_time != null) {
            data.play_end_time = this.play_end_time;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_buff_info)
            writer.writeMessage(1, this.buff_info, () => this.buff_info.serialize(writer));
        if (this.has_loop_dungeon_stage_info)
            writer.writeMessage(7, this.loop_dungeon_stage_info, () => this.loop_dungeon_stage_info.serialize(writer));
        if (this.stage_list.length)
            writer.writeRepeatedMessage(15, this.stage_list, (item) => item.serialize(writer));
        if (this.play_end_time != 0)
            writer.writeUint32(3, this.play_end_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ChannelerSlabActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.buff_info, () => message.buff_info = dependency_1.ChannelerSlabBuffInfo.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.loop_dungeon_stage_info, () => message.loop_dungeon_stage_info = dependency_3.ChannelerSlabLoopDungeonStageInfo.deserialize(reader));
                    break;
                case 15:
                    reader.readMessage(message.stage_list, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_2.ChannelerSlabChallengeStage.deserialize(reader), dependency_2.ChannelerSlabChallengeStage));
                    break;
                case 3:
                    message.play_end_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return ChannelerSlabActivityDetailInfo.deserialize(bytes);
    }
}
exports.ChannelerSlabActivityDetailInfo = ChannelerSlabActivityDetailInfo;
_ChannelerSlabActivityDetailInfo_one_of_decls = new WeakMap();
