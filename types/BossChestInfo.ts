/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BossChestInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./WeeklyBossResinDiscountInfo";
import * as pb_1 from "google-protobuf";
export class BossChestInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        monster_config_id?: number;
        resin?: number;
        remain_uid_list?: number[];
        qualify_uid_list?: number[];
        uid_discount_map?: Map<number, dependency_1.WeeklyBossResinDiscountInfo>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("monster_config_id" in data && data.monster_config_id != undefined) {
                this.monster_config_id = data.monster_config_id;
            }
            if ("resin" in data && data.resin != undefined) {
                this.resin = data.resin;
            }
            if ("remain_uid_list" in data && data.remain_uid_list != undefined) {
                this.remain_uid_list = data.remain_uid_list;
            }
            if ("qualify_uid_list" in data && data.qualify_uid_list != undefined) {
                this.qualify_uid_list = data.qualify_uid_list;
            }
            if ("uid_discount_map" in data && data.uid_discount_map != undefined) {
                this.uid_discount_map = data.uid_discount_map;
            }
        }
        if (!this.uid_discount_map)
            this.uid_discount_map = new Map();
    }
    get monster_config_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set monster_config_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get resin() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set resin(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get remain_uid_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set remain_uid_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    get qualify_uid_list() {
        return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
    }
    set qualify_uid_list(value: number[]) {
        pb_1.Message.setField(this, 4, value);
    }
    get uid_discount_map() {
        return pb_1.Message.getField(this, 5) as any as Map<number, dependency_1.WeeklyBossResinDiscountInfo>;
    }
    set uid_discount_map(value: Map<number, dependency_1.WeeklyBossResinDiscountInfo>) {
        pb_1.Message.setField(this, 5, value as any);
    }
    static fromObject(data: {
        monster_config_id?: number;
        resin?: number;
        remain_uid_list?: number[];
        qualify_uid_list?: number[];
        uid_discount_map?: {
            [key: number]: ReturnType<typeof dependency_1.WeeklyBossResinDiscountInfo.prototype.toObject>;
        };
    }): BossChestInfo {
        const message = new BossChestInfo({});
        if (data.monster_config_id != null) {
            message.monster_config_id = data.monster_config_id;
        }
        if (data.resin != null) {
            message.resin = data.resin;
        }
        if (data.remain_uid_list != null) {
            message.remain_uid_list = data.remain_uid_list;
        }
        if (data.qualify_uid_list != null) {
            message.qualify_uid_list = data.qualify_uid_list;
        }
        if (typeof data.uid_discount_map == "object") {
            message.uid_discount_map = new Map(Object.entries(data.uid_discount_map).map(([key, value]) => [Number(key), dependency_1.WeeklyBossResinDiscountInfo.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            monster_config_id?: number;
            resin?: number;
            remain_uid_list?: number[];
            qualify_uid_list?: number[];
            uid_discount_map?: {
                [key: number]: ReturnType<typeof dependency_1.WeeklyBossResinDiscountInfo.prototype.toObject>;
            };
        } = {};
        if (this.monster_config_id != null) {
            data.monster_config_id = this.monster_config_id;
        }
        if (this.resin != null) {
            data.resin = this.resin;
        }
        if (this.remain_uid_list != null) {
            data.remain_uid_list = this.remain_uid_list;
        }
        if (this.qualify_uid_list != null) {
            data.qualify_uid_list = this.qualify_uid_list;
        }
        if (this.uid_discount_map.size > 0) {
            data.uid_discount_map = (Object.fromEntries)((Array.from)(this.uid_discount_map).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.monster_config_id != 0)
            writer.writeUint32(1, this.monster_config_id);
        if (this.resin != 0)
            writer.writeUint32(2, this.resin);
        if (this.remain_uid_list.length)
            writer.writePackedUint32(3, this.remain_uid_list);
        if (this.qualify_uid_list.length)
            writer.writePackedUint32(4, this.qualify_uid_list);
        for (const [key, value] of this.uid_discount_map) {
            writer.writeMessage(5, this.uid_discount_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BossChestInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BossChestInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.monster_config_id = reader.readUint32();
                    break;
                case 2:
                    message.resin = reader.readUint32();
                    break;
                case 3:
                    message.remain_uid_list = reader.readPackedUint32();
                    break;
                case 4:
                    message.qualify_uid_list = reader.readPackedUint32();
                    break;
                case 5:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.uid_discount_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.WeeklyBossResinDiscountInfo.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BossChestInfo {
        return BossChestInfo.deserialize(bytes);
    }
}
