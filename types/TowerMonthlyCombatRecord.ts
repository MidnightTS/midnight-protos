/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: TowerMonthlyCombatRecord.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./TowerFightRecordPair";
import * as pb_1 from "google-protobuf";
export class TowerMonthlyCombatRecord extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        most_kill_avatar_pair?: dependency_1.TowerFightRecordPair;
        most_cast_normal_skill_avatar_pair?: dependency_1.TowerFightRecordPair;
        most_reveal_avatar_list?: dependency_1.TowerFightRecordPair[];
        most_cast_energy_skill_avatar_pair?: dependency_1.TowerFightRecordPair;
        highest_dps_avatr_pair?: dependency_1.TowerFightRecordPair;
        most_take_damage_avatar_pair?: dependency_1.TowerFightRecordPair;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("most_kill_avatar_pair" in data && data.most_kill_avatar_pair != undefined) {
                this.most_kill_avatar_pair = data.most_kill_avatar_pair;
            }
            if ("most_cast_normal_skill_avatar_pair" in data && data.most_cast_normal_skill_avatar_pair != undefined) {
                this.most_cast_normal_skill_avatar_pair = data.most_cast_normal_skill_avatar_pair;
            }
            if ("most_reveal_avatar_list" in data && data.most_reveal_avatar_list != undefined) {
                this.most_reveal_avatar_list = data.most_reveal_avatar_list;
            }
            if ("most_cast_energy_skill_avatar_pair" in data && data.most_cast_energy_skill_avatar_pair != undefined) {
                this.most_cast_energy_skill_avatar_pair = data.most_cast_energy_skill_avatar_pair;
            }
            if ("highest_dps_avatr_pair" in data && data.highest_dps_avatr_pair != undefined) {
                this.highest_dps_avatr_pair = data.highest_dps_avatr_pair;
            }
            if ("most_take_damage_avatar_pair" in data && data.most_take_damage_avatar_pair != undefined) {
                this.most_take_damage_avatar_pair = data.most_take_damage_avatar_pair;
            }
        }
    }
    get most_kill_avatar_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.TowerFightRecordPair, 14) as dependency_1.TowerFightRecordPair;
    }
    set most_kill_avatar_pair(value: dependency_1.TowerFightRecordPair) {
        pb_1.Message.setWrapperField(this, 14, value);
    }
    get has_most_kill_avatar_pair() {
        return pb_1.Message.getField(this, 14) != null;
    }
    get most_cast_normal_skill_avatar_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.TowerFightRecordPair, 8) as dependency_1.TowerFightRecordPair;
    }
    set most_cast_normal_skill_avatar_pair(value: dependency_1.TowerFightRecordPair) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_most_cast_normal_skill_avatar_pair() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get most_reveal_avatar_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.TowerFightRecordPair, 6) as dependency_1.TowerFightRecordPair[];
    }
    set most_reveal_avatar_list(value: dependency_1.TowerFightRecordPair[]) {
        pb_1.Message.setRepeatedWrapperField(this, 6, value);
    }
    get most_cast_energy_skill_avatar_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.TowerFightRecordPair, 4) as dependency_1.TowerFightRecordPair;
    }
    set most_cast_energy_skill_avatar_pair(value: dependency_1.TowerFightRecordPair) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_most_cast_energy_skill_avatar_pair() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get highest_dps_avatr_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.TowerFightRecordPair, 12) as dependency_1.TowerFightRecordPair;
    }
    set highest_dps_avatr_pair(value: dependency_1.TowerFightRecordPair) {
        pb_1.Message.setWrapperField(this, 12, value);
    }
    get has_highest_dps_avatr_pair() {
        return pb_1.Message.getField(this, 12) != null;
    }
    get most_take_damage_avatar_pair() {
        return pb_1.Message.getWrapperField(this, dependency_1.TowerFightRecordPair, 9) as dependency_1.TowerFightRecordPair;
    }
    set most_take_damage_avatar_pair(value: dependency_1.TowerFightRecordPair) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_most_take_damage_avatar_pair() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data: {
        most_kill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
        most_cast_normal_skill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
        most_reveal_avatar_list?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>[];
        most_cast_energy_skill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
        highest_dps_avatr_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
        most_take_damage_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
    }): TowerMonthlyCombatRecord {
        const message = new TowerMonthlyCombatRecord({});
        if (data.most_kill_avatar_pair != null) {
            message.most_kill_avatar_pair = dependency_1.TowerFightRecordPair.fromObject(data.most_kill_avatar_pair);
        }
        if (data.most_cast_normal_skill_avatar_pair != null) {
            message.most_cast_normal_skill_avatar_pair = dependency_1.TowerFightRecordPair.fromObject(data.most_cast_normal_skill_avatar_pair);
        }
        if (data.most_reveal_avatar_list != null) {
            message.most_reveal_avatar_list = data.most_reveal_avatar_list.map(item => dependency_1.TowerFightRecordPair.fromObject(item));
        }
        if (data.most_cast_energy_skill_avatar_pair != null) {
            message.most_cast_energy_skill_avatar_pair = dependency_1.TowerFightRecordPair.fromObject(data.most_cast_energy_skill_avatar_pair);
        }
        if (data.highest_dps_avatr_pair != null) {
            message.highest_dps_avatr_pair = dependency_1.TowerFightRecordPair.fromObject(data.highest_dps_avatr_pair);
        }
        if (data.most_take_damage_avatar_pair != null) {
            message.most_take_damage_avatar_pair = dependency_1.TowerFightRecordPair.fromObject(data.most_take_damage_avatar_pair);
        }
        return message;
    }
    toObject() {
        const data: {
            most_kill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
            most_cast_normal_skill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
            most_reveal_avatar_list?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>[];
            most_cast_energy_skill_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
            highest_dps_avatr_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
            most_take_damage_avatar_pair?: ReturnType<typeof dependency_1.TowerFightRecordPair.prototype.toObject>;
        } = {};
        if (this.most_kill_avatar_pair != null) {
            data.most_kill_avatar_pair = this.most_kill_avatar_pair.toObject();
        }
        if (this.most_cast_normal_skill_avatar_pair != null) {
            data.most_cast_normal_skill_avatar_pair = this.most_cast_normal_skill_avatar_pair.toObject();
        }
        if (this.most_reveal_avatar_list != null) {
            data.most_reveal_avatar_list = this.most_reveal_avatar_list.map((item: dependency_1.TowerFightRecordPair) => item.toObject());
        }
        if (this.most_cast_energy_skill_avatar_pair != null) {
            data.most_cast_energy_skill_avatar_pair = this.most_cast_energy_skill_avatar_pair.toObject();
        }
        if (this.highest_dps_avatr_pair != null) {
            data.highest_dps_avatr_pair = this.highest_dps_avatr_pair.toObject();
        }
        if (this.most_take_damage_avatar_pair != null) {
            data.most_take_damage_avatar_pair = this.most_take_damage_avatar_pair.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_most_kill_avatar_pair)
            writer.writeMessage(14, this.most_kill_avatar_pair, () => this.most_kill_avatar_pair.serialize(writer));
        if (this.has_most_cast_normal_skill_avatar_pair)
            writer.writeMessage(8, this.most_cast_normal_skill_avatar_pair, () => this.most_cast_normal_skill_avatar_pair.serialize(writer));
        if (this.most_reveal_avatar_list.length)
            writer.writeRepeatedMessage(6, this.most_reveal_avatar_list, (item: dependency_1.TowerFightRecordPair) => item.serialize(writer));
        if (this.has_most_cast_energy_skill_avatar_pair)
            writer.writeMessage(4, this.most_cast_energy_skill_avatar_pair, () => this.most_cast_energy_skill_avatar_pair.serialize(writer));
        if (this.has_highest_dps_avatr_pair)
            writer.writeMessage(12, this.highest_dps_avatr_pair, () => this.highest_dps_avatr_pair.serialize(writer));
        if (this.has_most_take_damage_avatar_pair)
            writer.writeMessage(9, this.most_take_damage_avatar_pair, () => this.most_take_damage_avatar_pair.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TowerMonthlyCombatRecord {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TowerMonthlyCombatRecord();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 14:
                    reader.readMessage(message.most_kill_avatar_pair, () => message.most_kill_avatar_pair = dependency_1.TowerFightRecordPair.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message.most_cast_normal_skill_avatar_pair, () => message.most_cast_normal_skill_avatar_pair = dependency_1.TowerFightRecordPair.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.most_reveal_avatar_list, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.TowerFightRecordPair.deserialize(reader), dependency_1.TowerFightRecordPair));
                    break;
                case 4:
                    reader.readMessage(message.most_cast_energy_skill_avatar_pair, () => message.most_cast_energy_skill_avatar_pair = dependency_1.TowerFightRecordPair.deserialize(reader));
                    break;
                case 12:
                    reader.readMessage(message.highest_dps_avatr_pair, () => message.highest_dps_avatr_pair = dependency_1.TowerFightRecordPair.deserialize(reader));
                    break;
                case 9:
                    reader.readMessage(message.most_take_damage_avatar_pair, () => message.most_take_damage_avatar_pair = dependency_1.TowerFightRecordPair.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): TowerMonthlyCombatRecord {
        return TowerMonthlyCombatRecord.deserialize(bytes);
    }
}
