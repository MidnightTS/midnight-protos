/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: AnimatorParameterValueInfoPair.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./AnimatorParameterValueInfo";
import * as pb_1 from "google-protobuf";
export class AnimatorParameterValueInfoPair extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        name_id?: number;
        animator_para?: dependency_1.AnimatorParameterValueInfo;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("name_id" in data && data.name_id != undefined) {
                this.name_id = data.name_id;
            }
            if ("animator_para" in data && data.animator_para != undefined) {
                this.animator_para = data.animator_para;
            }
        }
    }
    get name_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set name_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get animator_para() {
        return pb_1.Message.getWrapperField(this, dependency_1.AnimatorParameterValueInfo, 2) as dependency_1.AnimatorParameterValueInfo;
    }
    set animator_para(value: dependency_1.AnimatorParameterValueInfo) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_animator_para() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        name_id?: number;
        animator_para?: ReturnType<typeof dependency_1.AnimatorParameterValueInfo.prototype.toObject>;
    }): AnimatorParameterValueInfoPair {
        const message = new AnimatorParameterValueInfoPair({});
        if (data.name_id != null) {
            message.name_id = data.name_id;
        }
        if (data.animator_para != null) {
            message.animator_para = dependency_1.AnimatorParameterValueInfo.fromObject(data.animator_para);
        }
        return message;
    }
    toObject() {
        const data: {
            name_id?: number;
            animator_para?: ReturnType<typeof dependency_1.AnimatorParameterValueInfo.prototype.toObject>;
        } = {};
        if (this.name_id != null) {
            data.name_id = this.name_id;
        }
        if (this.animator_para != null) {
            data.animator_para = this.animator_para.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.name_id != 0)
            writer.writeInt32(1, this.name_id);
        if (this.has_animator_para)
            writer.writeMessage(2, this.animator_para, () => this.animator_para.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AnimatorParameterValueInfoPair {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AnimatorParameterValueInfoPair();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.name_id = reader.readInt32();
                    break;
                case 2:
                    reader.readMessage(message.animator_para, () => message.animator_para = dependency_1.AnimatorParameterValueInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): AnimatorParameterValueInfoPair {
        return AnimatorParameterValueInfoPair.deserialize(bytes);
    }
}
