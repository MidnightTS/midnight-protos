/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: FetterData.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class FetterData extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        fetter_id?: number;
        fetter_state?: number;
        cond_index_list?: number[];
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("fetter_id" in data && data.fetter_id != undefined) {
                this.fetter_id = data.fetter_id;
            }
            if ("fetter_state" in data && data.fetter_state != undefined) {
                this.fetter_state = data.fetter_state;
            }
            if ("cond_index_list" in data && data.cond_index_list != undefined) {
                this.cond_index_list = data.cond_index_list;
            }
        }
    }
    get fetter_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set fetter_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get fetter_state() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set fetter_state(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get cond_index_list() {
        return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
    }
    set cond_index_list(value: number[]) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        fetter_id?: number;
        fetter_state?: number;
        cond_index_list?: number[];
    }): FetterData {
        const message = new FetterData({});
        if (data.fetter_id != null) {
            message.fetter_id = data.fetter_id;
        }
        if (data.fetter_state != null) {
            message.fetter_state = data.fetter_state;
        }
        if (data.cond_index_list != null) {
            message.cond_index_list = data.cond_index_list;
        }
        return message;
    }
    toObject() {
        const data: {
            fetter_id?: number;
            fetter_state?: number;
            cond_index_list?: number[];
        } = {};
        if (this.fetter_id != null) {
            data.fetter_id = this.fetter_id;
        }
        if (this.fetter_state != null) {
            data.fetter_state = this.fetter_state;
        }
        if (this.cond_index_list != null) {
            data.cond_index_list = this.cond_index_list;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.fetter_id != 0)
            writer.writeUint32(1, this.fetter_id);
        if (this.fetter_state != 0)
            writer.writeUint32(2, this.fetter_state);
        if (this.cond_index_list.length)
            writer.writePackedUint32(3, this.cond_index_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): FetterData {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new FetterData();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.fetter_id = reader.readUint32();
                    break;
                case 2:
                    message.fetter_state = reader.readUint32();
                    break;
                case 3:
                    message.cond_index_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): FetterData {
        return FetterData.deserialize(bytes);
    }
}
