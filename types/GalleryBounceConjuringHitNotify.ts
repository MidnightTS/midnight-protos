/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GalleryBounceConjuringHitNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class GalleryBounceConjuringHitNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        add_score?: number;
        is_perfect?: boolean;
        gallery_id?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("add_score" in data && data.add_score != undefined) {
                this.add_score = data.add_score;
            }
            if ("is_perfect" in data && data.is_perfect != undefined) {
                this.is_perfect = data.is_perfect;
            }
            if ("gallery_id" in data && data.gallery_id != undefined) {
                this.gallery_id = data.gallery_id;
            }
        }
    }
    get add_score() {
        return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
    }
    set add_score(value: number) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_perfect() {
        return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
    }
    set is_perfect(value: boolean) {
        pb_1.Message.setField(this, 5, value);
    }
    get gallery_id() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set gallery_id(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        add_score?: number;
        is_perfect?: boolean;
        gallery_id?: number;
    }): GalleryBounceConjuringHitNotify {
        const message = new GalleryBounceConjuringHitNotify({});
        if (data.add_score != null) {
            message.add_score = data.add_score;
        }
        if (data.is_perfect != null) {
            message.is_perfect = data.is_perfect;
        }
        if (data.gallery_id != null) {
            message.gallery_id = data.gallery_id;
        }
        return message;
    }
    toObject() {
        const data: {
            add_score?: number;
            is_perfect?: boolean;
            gallery_id?: number;
        } = {};
        if (this.add_score != null) {
            data.add_score = this.add_score;
        }
        if (this.is_perfect != null) {
            data.is_perfect = this.is_perfect;
        }
        if (this.gallery_id != null) {
            data.gallery_id = this.gallery_id;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.add_score != 0)
            writer.writeUint32(8, this.add_score);
        if (this.is_perfect != false)
            writer.writeBool(5, this.is_perfect);
        if (this.gallery_id != 0)
            writer.writeUint32(10, this.gallery_id);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GalleryBounceConjuringHitNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GalleryBounceConjuringHitNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.add_score = reader.readUint32();
                    break;
                case 5:
                    message.is_perfect = reader.readBool();
                    break;
                case 10:
                    message.gallery_id = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GalleryBounceConjuringHitNotify {
        return GalleryBounceConjuringHitNotify.deserialize(bytes);
    }
}
