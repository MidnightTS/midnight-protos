"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _SceneWeaponInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.SceneWeaponInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: SceneWeaponInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./AbilitySyncStateInfo");
const dependency_2 = require("./EntityRendererChangedInfo");
const pb_1 = require("google-protobuf");
class SceneWeaponInfo extends pb_1.Message {
    constructor(data) {
        super();
        _SceneWeaponInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], __classPrivateFieldGet(this, _SceneWeaponInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("entity_id" in data && data.entity_id != undefined) {
                this.entity_id = data.entity_id;
            }
            if ("gadget_id" in data && data.gadget_id != undefined) {
                this.gadget_id = data.gadget_id;
            }
            if ("item_id" in data && data.item_id != undefined) {
                this.item_id = data.item_id;
            }
            if ("guid" in data && data.guid != undefined) {
                this.guid = data.guid;
            }
            if ("level" in data && data.level != undefined) {
                this.level = data.level;
            }
            if ("promote_level" in data && data.promote_level != undefined) {
                this.promote_level = data.promote_level;
            }
            if ("ability_info" in data && data.ability_info != undefined) {
                this.ability_info = data.ability_info;
            }
            if ("affix_map" in data && data.affix_map != undefined) {
                this.affix_map = data.affix_map;
            }
            if ("renderer_changed_info" in data && data.renderer_changed_info != undefined) {
                this.renderer_changed_info = data.renderer_changed_info;
            }
        }
        if (!this.affix_map)
            this.affix_map = new Map();
    }
    get entity_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0);
    }
    set entity_id(value) {
        pb_1.Message.setField(this, 1, value);
    }
    get gadget_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0);
    }
    set gadget_id(value) {
        pb_1.Message.setField(this, 2, value);
    }
    get item_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0);
    }
    set item_id(value) {
        pb_1.Message.setField(this, 3, value);
    }
    get guid() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0);
    }
    set guid(value) {
        pb_1.Message.setField(this, 4, value);
    }
    get level() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0);
    }
    set level(value) {
        pb_1.Message.setField(this, 5, value);
    }
    get promote_level() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set promote_level(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get ability_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.AbilitySyncStateInfo, 7);
    }
    set ability_info(value) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_ability_info() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get affix_map() {
        return pb_1.Message.getField(this, 8);
    }
    set affix_map(value) {
        pb_1.Message.setField(this, 8, value);
    }
    get renderer_changed_info() {
        return pb_1.Message.getWrapperField(this, dependency_2.EntityRendererChangedInfo, 9);
    }
    set renderer_changed_info(value) {
        pb_1.Message.setWrapperField(this, 9, value);
    }
    get has_renderer_changed_info() {
        return pb_1.Message.getField(this, 9) != null;
    }
    static fromObject(data) {
        const message = new SceneWeaponInfo({});
        if (data.entity_id != null) {
            message.entity_id = data.entity_id;
        }
        if (data.gadget_id != null) {
            message.gadget_id = data.gadget_id;
        }
        if (data.item_id != null) {
            message.item_id = data.item_id;
        }
        if (data.guid != null) {
            message.guid = data.guid;
        }
        if (data.level != null) {
            message.level = data.level;
        }
        if (data.promote_level != null) {
            message.promote_level = data.promote_level;
        }
        if (data.ability_info != null) {
            message.ability_info = dependency_1.AbilitySyncStateInfo.fromObject(data.ability_info);
        }
        if (typeof data.affix_map == "object") {
            message.affix_map = new Map(Object.entries(data.affix_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.renderer_changed_info != null) {
            message.renderer_changed_info = dependency_2.EntityRendererChangedInfo.fromObject(data.renderer_changed_info);
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.entity_id != null) {
            data.entity_id = this.entity_id;
        }
        if (this.gadget_id != null) {
            data.gadget_id = this.gadget_id;
        }
        if (this.item_id != null) {
            data.item_id = this.item_id;
        }
        if (this.guid != null) {
            data.guid = this.guid;
        }
        if (this.level != null) {
            data.level = this.level;
        }
        if (this.promote_level != null) {
            data.promote_level = this.promote_level;
        }
        if (this.ability_info != null) {
            data.ability_info = this.ability_info.toObject();
        }
        if (this.affix_map.size > 0) {
            data.affix_map = (Object.fromEntries)(this.affix_map);
        }
        if (this.renderer_changed_info != null) {
            data.renderer_changed_info = this.renderer_changed_info.toObject();
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.entity_id != 0)
            writer.writeUint32(1, this.entity_id);
        if (this.gadget_id != 0)
            writer.writeUint32(2, this.gadget_id);
        if (this.item_id != 0)
            writer.writeUint32(3, this.item_id);
        if (this.guid != 0)
            writer.writeUint64(4, this.guid);
        if (this.level != 0)
            writer.writeUint32(5, this.level);
        if (this.promote_level != 0)
            writer.writeUint32(6, this.promote_level);
        if (this.has_ability_info)
            writer.writeMessage(7, this.ability_info, () => this.ability_info.serialize(writer));
        for (const [key, value] of this.affix_map) {
            writer.writeMessage(8, this.affix_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.has_renderer_changed_info)
            writer.writeMessage(9, this.renderer_changed_info, () => this.renderer_changed_info.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SceneWeaponInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.entity_id = reader.readUint32();
                    break;
                case 2:
                    message.gadget_id = reader.readUint32();
                    break;
                case 3:
                    message.item_id = reader.readUint32();
                    break;
                case 4:
                    message.guid = reader.readUint64();
                    break;
                case 5:
                    message.level = reader.readUint32();
                    break;
                case 6:
                    message.promote_level = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.ability_info, () => message.ability_info = dependency_1.AbilitySyncStateInfo.deserialize(reader));
                    break;
                case 8:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.affix_map, reader, reader.readUint32, reader.readUint32));
                    break;
                case 9:
                    reader.readMessage(message.renderer_changed_info, () => message.renderer_changed_info = dependency_2.EntityRendererChangedInfo.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return SceneWeaponInfo.deserialize(bytes);
    }
}
exports.SceneWeaponInfo = SceneWeaponInfo;
_SceneWeaponInfo_one_of_decls = new WeakMap();
