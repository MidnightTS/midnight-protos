/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: InBattleChessSettleInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ExhibitionDisplayInfo";
import * as pb_1 from "google-protobuf";
export class InBattleChessSettleInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        is_success?: boolean;
        chess_exp?: number;
        chess_level?: number;
        old_chess_level?: number;
        score_list?: dependency_1.ExhibitionDisplayInfo[];
        scene_time_ms?: number;
        old_chess_exp?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("is_success" in data && data.is_success != undefined) {
                this.is_success = data.is_success;
            }
            if ("chess_exp" in data && data.chess_exp != undefined) {
                this.chess_exp = data.chess_exp;
            }
            if ("chess_level" in data && data.chess_level != undefined) {
                this.chess_level = data.chess_level;
            }
            if ("old_chess_level" in data && data.old_chess_level != undefined) {
                this.old_chess_level = data.old_chess_level;
            }
            if ("score_list" in data && data.score_list != undefined) {
                this.score_list = data.score_list;
            }
            if ("scene_time_ms" in data && data.scene_time_ms != undefined) {
                this.scene_time_ms = data.scene_time_ms;
            }
            if ("old_chess_exp" in data && data.old_chess_exp != undefined) {
                this.old_chess_exp = data.old_chess_exp;
            }
        }
    }
    get is_success() {
        return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
    }
    set is_success(value: boolean) {
        pb_1.Message.setField(this, 7, value);
    }
    get chess_exp() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set chess_exp(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get chess_level() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set chess_level(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get old_chess_level() {
        return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
    }
    set old_chess_level(value: number) {
        pb_1.Message.setField(this, 10, value);
    }
    get score_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.ExhibitionDisplayInfo, 1) as dependency_1.ExhibitionDisplayInfo[];
    }
    set score_list(value: dependency_1.ExhibitionDisplayInfo[]) {
        pb_1.Message.setRepeatedWrapperField(this, 1, value);
    }
    get scene_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set scene_time_ms(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    get old_chess_exp() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set old_chess_exp(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        is_success?: boolean;
        chess_exp?: number;
        chess_level?: number;
        old_chess_level?: number;
        score_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
        scene_time_ms?: number;
        old_chess_exp?: number;
    }): InBattleChessSettleInfo {
        const message = new InBattleChessSettleInfo({});
        if (data.is_success != null) {
            message.is_success = data.is_success;
        }
        if (data.chess_exp != null) {
            message.chess_exp = data.chess_exp;
        }
        if (data.chess_level != null) {
            message.chess_level = data.chess_level;
        }
        if (data.old_chess_level != null) {
            message.old_chess_level = data.old_chess_level;
        }
        if (data.score_list != null) {
            message.score_list = data.score_list.map(item => dependency_1.ExhibitionDisplayInfo.fromObject(item));
        }
        if (data.scene_time_ms != null) {
            message.scene_time_ms = data.scene_time_ms;
        }
        if (data.old_chess_exp != null) {
            message.old_chess_exp = data.old_chess_exp;
        }
        return message;
    }
    toObject() {
        const data: {
            is_success?: boolean;
            chess_exp?: number;
            chess_level?: number;
            old_chess_level?: number;
            score_list?: ReturnType<typeof dependency_1.ExhibitionDisplayInfo.prototype.toObject>[];
            scene_time_ms?: number;
            old_chess_exp?: number;
        } = {};
        if (this.is_success != null) {
            data.is_success = this.is_success;
        }
        if (this.chess_exp != null) {
            data.chess_exp = this.chess_exp;
        }
        if (this.chess_level != null) {
            data.chess_level = this.chess_level;
        }
        if (this.old_chess_level != null) {
            data.old_chess_level = this.old_chess_level;
        }
        if (this.score_list != null) {
            data.score_list = this.score_list.map((item: dependency_1.ExhibitionDisplayInfo) => item.toObject());
        }
        if (this.scene_time_ms != null) {
            data.scene_time_ms = this.scene_time_ms;
        }
        if (this.old_chess_exp != null) {
            data.old_chess_exp = this.old_chess_exp;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.is_success != false)
            writer.writeBool(7, this.is_success);
        if (this.chess_exp != 0)
            writer.writeUint32(11, this.chess_exp);
        if (this.chess_level != 0)
            writer.writeUint32(13, this.chess_level);
        if (this.old_chess_level != 0)
            writer.writeUint32(10, this.old_chess_level);
        if (this.score_list.length)
            writer.writeRepeatedMessage(1, this.score_list, (item: dependency_1.ExhibitionDisplayInfo) => item.serialize(writer));
        if (this.scene_time_ms != 0)
            writer.writeUint64(14, this.scene_time_ms);
        if (this.old_chess_exp != 0)
            writer.writeUint32(2, this.old_chess_exp);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InBattleChessSettleInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InBattleChessSettleInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.is_success = reader.readBool();
                    break;
                case 11:
                    message.chess_exp = reader.readUint32();
                    break;
                case 13:
                    message.chess_level = reader.readUint32();
                    break;
                case 10:
                    message.old_chess_level = reader.readUint32();
                    break;
                case 1:
                    reader.readMessage(message.score_list, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.ExhibitionDisplayInfo.deserialize(reader), dependency_1.ExhibitionDisplayInfo));
                    break;
                case 14:
                    message.scene_time_ms = reader.readUint64();
                    break;
                case 2:
                    message.old_chess_exp = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): InBattleChessSettleInfo {
        return InBattleChessSettleInfo.deserialize(bytes);
    }
}
