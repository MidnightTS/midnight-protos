// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_match.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { OnlinePlayerInfo } from "./define";
import { MatchReason } from "./define";
import { MatchType } from "./define";
/**
 * @generated from protobuf message com.midnights.game.PlayerStartMatchReq
 */
export interface PlayerStartMatchReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 3;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_difficult_level = 12;
     */
    mechanicusDifficultLevel?: number;
    /**
     * @generated from protobuf field: repeated uint32 match_param_list = 11;
     */
    matchParamList: number[];
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 1;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 15;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional uint32 match_id = 6;
     */
    matchId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerStartMatchReq.CmdId
 */
export enum PlayerStartMatchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4176;
     */
    CMD_ID = 4176,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerStartMatchRsp
 */
export interface PlayerStartMatchRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 1;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 punish_end_time = 5;
     */
    punishEndTime?: number;
    /**
     * @generated from protobuf field: optional uint32 param = 4;
     */
    param?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 13;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_difficult_level = 2;
     */
    mechanicusDifficultLevel?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 3;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 match_id = 8;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 7;
     */
    matchType?: MatchType;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerStartMatchRsp.CmdId
 */
export enum PlayerStartMatchRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4168;
     */
    CMD_ID = 4168,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerMatchInfoNotify
 */
export interface PlayerMatchInfoNotify {
    /**
     * @generated from protobuf field: optional uint32 match_id = 8;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional uint32 match_begin_time = 4;
     */
    matchBeginTime?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 10;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 11;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_difficult_level = 12;
     */
    mechanicusDifficultLevel?: number;
    /**
     * @generated from protobuf field: repeated uint32 match_param_list = 6;
     */
    matchParamList: number[];
    /**
     * @generated from protobuf field: optional uint32 estimate_match_cost_time = 3;
     */
    estimateMatchCostTime?: number;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 5;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional uint32 host_uid = 13;
     */
    hostUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerMatchInfoNotify.CmdId
 */
export enum PlayerMatchInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4175;
     */
    CMD_ID = 4175,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCancelMatchReq
 */
export interface PlayerCancelMatchReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 11;
     */
    matchType?: MatchType;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCancelMatchReq.CmdId
 */
export enum PlayerCancelMatchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4157;
     */
    CMD_ID = 4157,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerCancelMatchRsp
 */
export interface PlayerCancelMatchRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 7;
     */
    matchType?: MatchType;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerCancelMatchRsp.CmdId
 */
export enum PlayerCancelMatchRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4152;
     */
    CMD_ID = 4152,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerMatchStopNotify
 */
export interface PlayerMatchStopNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchReason reason = 1;
     */
    reason?: MatchReason;
    /**
     * @generated from protobuf field: optional uint32 host_uid = 12;
     */
    hostUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerMatchStopNotify.CmdId
 */
export enum PlayerMatchStopNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4181;
     */
    CMD_ID = 4181,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.MatchPlayerInfo
 */
export interface MatchPlayerInfo {
    /**
     * @generated from protobuf field: optional bool is_agreed = 9;
     */
    isAgreed?: boolean;
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo player_info = 2;
     */
    playerInfo?: OnlinePlayerInfo;
}
/**
 * @generated from protobuf message com.midnights.game.GeneralMatchInfo
 */
export interface GeneralMatchInfo {
    /**
     * @generated from protobuf field: optional uint32 match_param = 1;
     */
    matchParam?: number;
    /**
     * @generated from protobuf field: optional uint32 match_id = 9;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.MatchPlayerInfo player_list = 5;
     */
    playerList: MatchPlayerInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.GCGMatchInfo
 */
export interface GCGMatchInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.MatchPlayerInfo player_list = 13;
     */
    playerList: MatchPlayerInfo[];
}
/**
 * @generated from protobuf message com.midnights.game.PlayerMatchSuccNotify
 */
export interface PlayerMatchSuccNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.GeneralMatchInfo general_match_info = 7;
     */
    generalMatchInfo?: GeneralMatchInfo;
    /**
     * @generated from protobuf field: optional uint32 mp_play_id = 15;
     */
    mpPlayId?: number;
    /**
     * @generated from protobuf field: optional uint32 host_uid = 3;
     */
    hostUid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 5;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional com.midnights.game.GCGMatchInfo gcg_match_info = 11;
     */
    gcgMatchInfo?: GCGMatchInfo;
    /**
     * @generated from protobuf field: optional uint32 confirm_end_time = 2;
     */
    confirmEndTime?: number;
    /**
     * @generated from protobuf field: optional uint32 dungeon_id = 6;
     */
    dungeonId?: number;
    /**
     * @generated from protobuf field: optional uint32 mechanicus_difficult_level = 1;
     */
    mechanicusDifficultLevel?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerMatchSuccNotify.CmdId
 */
export enum PlayerMatchSuccNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4179;
     */
    CMD_ID = 4179,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerConfirmMatchReq
 */
export interface PlayerConfirmMatchReq {
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 12;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional bool is_agreed = 10;
     */
    isAgreed?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerConfirmMatchReq.CmdId
 */
export enum PlayerConfirmMatchReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4172;
     */
    CMD_ID = 4172,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerConfirmMatchRsp
 */
export interface PlayerConfirmMatchRsp {
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 9;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional uint32 match_id = 4;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional bool is_agreed = 11;
     */
    isAgreed?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 10;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerConfirmMatchRsp.CmdId
 */
export enum PlayerConfirmMatchRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4194;
     */
    CMD_ID = 4194,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerAllowEnterMpAfterAgreeMatchNotify
 */
export interface PlayerAllowEnterMpAfterAgreeMatchNotify {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 1;
     */
    targetUid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerAllowEnterMpAfterAgreeMatchNotify.CmdId
 */
export enum PlayerAllowEnterMpAfterAgreeMatchNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4199;
     */
    CMD_ID = 4199,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerMatchAgreedResultNotify
 */
export interface PlayerMatchAgreedResultNotify {
    /**
     * @generated from protobuf field: optional uint32 target_uid = 14;
     */
    targetUid?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 3;
     */
    matchType?: MatchType;
    /**
     * @generated from protobuf field: optional com.midnights.game.PlayerMatchAgreedResultNotify.Reason reason = 8;
     */
    reason?: PlayerMatchAgreedResultNotify_Reason;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerMatchAgreedResultNotify.Reason
 */
export enum PlayerMatchAgreedResultNotify_Reason {
    /**
     * @generated from protobuf enum value: SUCC = 0;
     */
    SUCC = 0,
    /**
     * @generated from protobuf enum value: TARGET_SCENE_CANNOT_ENTER = 1;
     */
    TARGET_SCENE_CANNOT_ENTER = 1,
    /**
     * @generated from protobuf enum value: SELF_MP_UNAVAILABLE = 2;
     */
    SELF_MP_UNAVAILABLE = 2,
    /**
     * @generated from protobuf enum value: OTHER_DATA_VERSION_NOT_LATEST = 3;
     */
    OTHER_DATA_VERSION_NOT_LATEST = 3,
    /**
     * @generated from protobuf enum value: DATA_VERSION_NOT_LATEST = 4;
     */
    DATA_VERSION_NOT_LATEST = 4
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerMatchAgreedResultNotify.CmdId
 */
export enum PlayerMatchAgreedResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4170;
     */
    CMD_ID = 4170,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerApplyEnterMpAfterMatchAgreedNotify
 */
export interface PlayerApplyEnterMpAfterMatchAgreedNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.OnlinePlayerInfo src_player_info = 11;
     */
    srcPlayerInfo?: OnlinePlayerInfo;
    /**
     * @generated from protobuf field: optional uint32 matchserver_id = 10;
     */
    matchserverId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchType match_type = 3;
     */
    matchType?: MatchType;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerApplyEnterMpAfterMatchAgreedNotify.CmdId
 */
export enum PlayerApplyEnterMpAfterMatchAgreedNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4195;
     */
    CMD_ID = 4195,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGeneralMatchDismissNotify
 */
export interface PlayerGeneralMatchDismissNotify {
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 3;
     */
    uidList: number[];
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchReason reason = 13;
     */
    reason?: MatchReason;
    /**
     * @generated from protobuf field: optional uint32 match_id = 1;
     */
    matchId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGeneralMatchDismissNotify.CmdId
 */
export enum PlayerGeneralMatchDismissNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4191;
     */
    CMD_ID = 4191,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGeneralMatchConfirmNotify
 */
export interface PlayerGeneralMatchConfirmNotify {
    /**
     * @generated from protobuf field: optional uint32 match_id = 8;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 13;
     */
    isAgree?: boolean;
    /**
     * @generated from protobuf field: optional uint32 uid = 14;
     */
    uid?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGeneralMatchConfirmNotify.CmdId
 */
export enum PlayerGeneralMatchConfirmNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4192;
     */
    CMD_ID = 4192,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGetForceQuitBanInfoReq
 */
export interface PlayerGetForceQuitBanInfoReq {
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGetForceQuitBanInfoReq.CmdId
 */
export enum PlayerGetForceQuitBanInfoReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4164;
     */
    CMD_ID = 4164,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGetForceQuitBanInfoRsp
 */
export interface PlayerGetForceQuitBanInfoRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 4;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 match_id = 8;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional uint32 expire_time = 13;
     */
    expireTime?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGetForceQuitBanInfoRsp.CmdId
 */
export enum PlayerGetForceQuitBanInfoRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4197;
     */
    CMD_ID = 4197,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ServerTryCancelGeneralMatchNotify
 */
export interface ServerTryCancelGeneralMatchNotify {
    /**
     * @generated from protobuf field: optional uint32 match_id = 9;
     */
    matchId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ServerTryCancelGeneralMatchNotify.CmdId
 */
export enum ServerTryCancelGeneralMatchNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4187;
     */
    CMD_ID = 4187,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGCGMatchDismissNotify
 */
export interface PlayerGCGMatchDismissNotify {
    /**
     * @generated from protobuf field: optional uint32 match_id = 11;
     */
    matchId?: number;
    /**
     * @generated from protobuf field: optional com.midnights.game.MatchReason reason = 5;
     */
    reason?: MatchReason;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 7;
     */
    uidList: number[];
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGCGMatchDismissNotify.CmdId
 */
export enum PlayerGCGMatchDismissNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4173;
     */
    CMD_ID = 4173,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.PlayerGCGMatchConfirmNotify
 */
export interface PlayerGCGMatchConfirmNotify {
    /**
     * @generated from protobuf field: optional uint32 uid = 10;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 5;
     */
    isAgree?: boolean;
    /**
     * @generated from protobuf field: optional uint32 match_id = 14;
     */
    matchId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.PlayerGCGMatchConfirmNotify.CmdId
 */
export enum PlayerGCGMatchConfirmNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4185;
     */
    CMD_ID = 4185,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStartMatchReq$Type extends MessageType<PlayerStartMatchReq> {
    constructor() {
        super("com.midnights.game.PlayerStartMatchReq", [
            { no: 3, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 12, name: "mechanicus_difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "match_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerStartMatchReq>): PlayerStartMatchReq {
        const message = { matchParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStartMatchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStartMatchReq): PlayerStartMatchReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MatchType match_type */ 3:
                    message.matchType = reader.int32();
                    break;
                case /* optional uint32 mechanicus_difficult_level */ 12:
                    message.mechanicusDifficultLevel = reader.uint32();
                    break;
                case /* repeated uint32 match_param_list */ 11:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchParamList.push(reader.uint32());
                    else
                        message.matchParamList.push(reader.uint32());
                    break;
                case /* optional uint32 dungeon_id */ 1:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 15:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional uint32 match_id */ 6:
                    message.matchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStartMatchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MatchType match_type = 3; */
        if (message.matchType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.matchType);
        /* optional uint32 mechanicus_difficult_level = 12; */
        if (message.mechanicusDifficultLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mechanicusDifficultLevel);
        /* repeated uint32 match_param_list = 11; */
        if (message.matchParamList.length) {
            writer.tag(11, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.matchParamList.length; i++)
                writer.uint32(message.matchParamList[i]);
            writer.join();
        }
        /* optional uint32 dungeon_id = 1; */
        if (message.dungeonId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 mp_play_id = 15; */
        if (message.mpPlayId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.mpPlayId);
        /* optional uint32 match_id = 6; */
        if (message.matchId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerStartMatchReq
 */
export const PlayerStartMatchReq = new PlayerStartMatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerStartMatchRsp$Type extends MessageType<PlayerStartMatchRsp> {
    constructor() {
        super("com.midnights.game.PlayerStartMatchRsp", [
            { no: 1, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 5, name: "punish_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "mechanicus_difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PlayerStartMatchRsp>): PlayerStartMatchRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerStartMatchRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerStartMatchRsp): PlayerStartMatchRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 1:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 punish_end_time */ 5:
                    message.punishEndTime = reader.uint32();
                    break;
                case /* optional uint32 param */ 4:
                    message.param = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 13:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_difficult_level */ 2:
                    message.mechanicusDifficultLevel = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 match_id */ 8:
                    message.matchId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 7:
                    message.matchType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerStartMatchRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 1; */
        if (message.retcode !== undefined)
            writer.tag(1, WireType.Varint).int32(message.retcode);
        /* optional uint32 punish_end_time = 5; */
        if (message.punishEndTime !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.punishEndTime);
        /* optional uint32 param = 4; */
        if (message.param !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.param);
        /* optional uint32 mp_play_id = 13; */
        if (message.mpPlayId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.mpPlayId);
        /* optional uint32 mechanicus_difficult_level = 2; */
        if (message.mechanicusDifficultLevel !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.mechanicusDifficultLevel);
        /* optional uint32 dungeon_id = 3; */
        if (message.dungeonId !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.matchId);
        /* optional com.midnights.game.MatchType match_type = 7; */
        if (message.matchType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerStartMatchRsp
 */
export const PlayerStartMatchRsp = new PlayerStartMatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMatchInfoNotify$Type extends MessageType<PlayerMatchInfoNotify> {
    constructor() {
        super("com.midnights.game.PlayerMatchInfoNotify", [
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "match_begin_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 12, name: "mechanicus_difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "match_param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "estimate_match_cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "host_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerMatchInfoNotify>): PlayerMatchInfoNotify {
        const message = { matchParamList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMatchInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMatchInfoNotify): PlayerMatchInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 match_id */ 8:
                    message.matchId = reader.uint32();
                    break;
                case /* optional uint32 match_begin_time */ 4:
                    message.matchBeginTime = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 10:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 11:
                    message.matchType = reader.int32();
                    break;
                case /* optional uint32 mechanicus_difficult_level */ 12:
                    message.mechanicusDifficultLevel = reader.uint32();
                    break;
                case /* repeated uint32 match_param_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.matchParamList.push(reader.uint32());
                    else
                        message.matchParamList.push(reader.uint32());
                    break;
                case /* optional uint32 estimate_match_cost_time */ 3:
                    message.estimateMatchCostTime = reader.uint32();
                    break;
                case /* optional uint32 mp_play_id */ 5:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional uint32 host_uid */ 13:
                    message.hostUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMatchInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.matchId);
        /* optional uint32 match_begin_time = 4; */
        if (message.matchBeginTime !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.matchBeginTime);
        /* optional uint32 dungeon_id = 10; */
        if (message.dungeonId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.dungeonId);
        /* optional com.midnights.game.MatchType match_type = 11; */
        if (message.matchType !== undefined)
            writer.tag(11, WireType.Varint).int32(message.matchType);
        /* optional uint32 mechanicus_difficult_level = 12; */
        if (message.mechanicusDifficultLevel !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.mechanicusDifficultLevel);
        /* repeated uint32 match_param_list = 6; */
        if (message.matchParamList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.matchParamList.length; i++)
                writer.uint32(message.matchParamList[i]);
            writer.join();
        }
        /* optional uint32 estimate_match_cost_time = 3; */
        if (message.estimateMatchCostTime !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.estimateMatchCostTime);
        /* optional uint32 mp_play_id = 5; */
        if (message.mpPlayId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.mpPlayId);
        /* optional uint32 host_uid = 13; */
        if (message.hostUid !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.hostUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerMatchInfoNotify
 */
export const PlayerMatchInfoNotify = new PlayerMatchInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCancelMatchReq$Type extends MessageType<PlayerCancelMatchReq> {
    constructor() {
        super("com.midnights.game.PlayerCancelMatchReq", [
            { no: 11, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PlayerCancelMatchReq>): PlayerCancelMatchReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCancelMatchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCancelMatchReq): PlayerCancelMatchReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MatchType match_type */ 11:
                    message.matchType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCancelMatchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MatchType match_type = 11; */
        if (message.matchType !== undefined)
            writer.tag(11, WireType.Varint).int32(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCancelMatchReq
 */
export const PlayerCancelMatchReq = new PlayerCancelMatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerCancelMatchRsp$Type extends MessageType<PlayerCancelMatchRsp> {
    constructor() {
        super("com.midnights.game.PlayerCancelMatchRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 7, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PlayerCancelMatchRsp>): PlayerCancelMatchRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerCancelMatchRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerCancelMatchRsp): PlayerCancelMatchRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 7:
                    message.matchType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerCancelMatchRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional com.midnights.game.MatchType match_type = 7; */
        if (message.matchType !== undefined)
            writer.tag(7, WireType.Varint).int32(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerCancelMatchRsp
 */
export const PlayerCancelMatchRsp = new PlayerCancelMatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMatchStopNotify$Type extends MessageType<PlayerMatchStopNotify> {
    constructor() {
        super("com.midnights.game.PlayerMatchStopNotify", [
            { no: 1, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchReason", MatchReason] },
            { no: 12, name: "host_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerMatchStopNotify>): PlayerMatchStopNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMatchStopNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMatchStopNotify): PlayerMatchStopNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MatchReason reason */ 1:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 host_uid */ 12:
                    message.hostUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMatchStopNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MatchReason reason = 1; */
        if (message.reason !== undefined)
            writer.tag(1, WireType.Varint).int32(message.reason);
        /* optional uint32 host_uid = 12; */
        if (message.hostUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.hostUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerMatchStopNotify
 */
export const PlayerMatchStopNotify = new PlayerMatchStopNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class MatchPlayerInfo$Type extends MessageType<MatchPlayerInfo> {
    constructor() {
        super("com.midnights.game.MatchPlayerInfo", [
            { no: 9, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 2, name: "player_info", kind: "message", T: () => OnlinePlayerInfo }
        ]);
    }
    create(value?: PartialMessage<MatchPlayerInfo>): MatchPlayerInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<MatchPlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: MatchPlayerInfo): MatchPlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_agreed */ 9:
                    message.isAgreed = reader.bool();
                    break;
                case /* optional com.midnights.game.OnlinePlayerInfo player_info */ 2:
                    message.playerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.playerInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: MatchPlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_agreed = 9; */
        if (message.isAgreed !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isAgreed);
        /* optional com.midnights.game.OnlinePlayerInfo player_info = 2; */
        if (message.playerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.playerInfo, writer.tag(2, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.MatchPlayerInfo
 */
export const MatchPlayerInfo = new MatchPlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GeneralMatchInfo$Type extends MessageType<GeneralMatchInfo> {
    constructor() {
        super("com.midnights.game.GeneralMatchInfo", [
            { no: 1, name: "match_param", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "player_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchPlayerInfo }
        ]);
    }
    create(value?: PartialMessage<GeneralMatchInfo>): GeneralMatchInfo {
        const message = { playerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GeneralMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GeneralMatchInfo): GeneralMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 match_param */ 1:
                    message.matchParam = reader.uint32();
                    break;
                case /* optional uint32 match_id */ 9:
                    message.matchId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.MatchPlayerInfo player_list */ 5:
                    message.playerList.push(MatchPlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GeneralMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 match_param = 1; */
        if (message.matchParam !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.matchParam);
        /* optional uint32 match_id = 9; */
        if (message.matchId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.matchId);
        /* repeated com.midnights.game.MatchPlayerInfo player_list = 5; */
        for (let i = 0; i < message.playerList.length; i++)
            MatchPlayerInfo.internalBinaryWrite(message.playerList[i], writer.tag(5, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GeneralMatchInfo
 */
export const GeneralMatchInfo = new GeneralMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class GCGMatchInfo$Type extends MessageType<GCGMatchInfo> {
    constructor() {
        super("com.midnights.game.GCGMatchInfo", [
            { no: 13, name: "player_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => MatchPlayerInfo }
        ]);
    }
    create(value?: PartialMessage<GCGMatchInfo>): GCGMatchInfo {
        const message = { playerList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<GCGMatchInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: GCGMatchInfo): GCGMatchInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.MatchPlayerInfo player_list */ 13:
                    message.playerList.push(MatchPlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: GCGMatchInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.MatchPlayerInfo player_list = 13; */
        for (let i = 0; i < message.playerList.length; i++)
            MatchPlayerInfo.internalBinaryWrite(message.playerList[i], writer.tag(13, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.GCGMatchInfo
 */
export const GCGMatchInfo = new GCGMatchInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMatchSuccNotify$Type extends MessageType<PlayerMatchSuccNotify> {
    constructor() {
        super("com.midnights.game.PlayerMatchSuccNotify", [
            { no: 7, name: "general_match_info", kind: "message", T: () => GeneralMatchInfo },
            { no: 15, name: "mp_play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "host_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 11, name: "gcg_match_info", kind: "message", T: () => GCGMatchInfo },
            { no: 2, name: "confirm_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "dungeon_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "mechanicus_difficult_level", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerMatchSuccNotify>): PlayerMatchSuccNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMatchSuccNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMatchSuccNotify): PlayerMatchSuccNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.GeneralMatchInfo general_match_info */ 7:
                    message.generalMatchInfo = GeneralMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.generalMatchInfo);
                    break;
                case /* optional uint32 mp_play_id */ 15:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* optional uint32 host_uid */ 3:
                    message.hostUid = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 5:
                    message.matchType = reader.int32();
                    break;
                case /* optional com.midnights.game.GCGMatchInfo gcg_match_info */ 11:
                    message.gcgMatchInfo = GCGMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.gcgMatchInfo);
                    break;
                case /* optional uint32 confirm_end_time */ 2:
                    message.confirmEndTime = reader.uint32();
                    break;
                case /* optional uint32 dungeon_id */ 6:
                    message.dungeonId = reader.uint32();
                    break;
                case /* optional uint32 mechanicus_difficult_level */ 1:
                    message.mechanicusDifficultLevel = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMatchSuccNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.GeneralMatchInfo general_match_info = 7; */
        if (message.generalMatchInfo)
            GeneralMatchInfo.internalBinaryWrite(message.generalMatchInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 mp_play_id = 15; */
        if (message.mpPlayId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.mpPlayId);
        /* optional uint32 host_uid = 3; */
        if (message.hostUid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.hostUid);
        /* optional com.midnights.game.MatchType match_type = 5; */
        if (message.matchType !== undefined)
            writer.tag(5, WireType.Varint).int32(message.matchType);
        /* optional com.midnights.game.GCGMatchInfo gcg_match_info = 11; */
        if (message.gcgMatchInfo)
            GCGMatchInfo.internalBinaryWrite(message.gcgMatchInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 confirm_end_time = 2; */
        if (message.confirmEndTime !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.confirmEndTime);
        /* optional uint32 dungeon_id = 6; */
        if (message.dungeonId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.dungeonId);
        /* optional uint32 mechanicus_difficult_level = 1; */
        if (message.mechanicusDifficultLevel !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.mechanicusDifficultLevel);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerMatchSuccNotify
 */
export const PlayerMatchSuccNotify = new PlayerMatchSuccNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerConfirmMatchReq$Type extends MessageType<PlayerConfirmMatchReq> {
    constructor() {
        super("com.midnights.game.PlayerConfirmMatchReq", [
            { no: 12, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 10, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerConfirmMatchReq>): PlayerConfirmMatchReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerConfirmMatchReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerConfirmMatchReq): PlayerConfirmMatchReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MatchType match_type */ 12:
                    message.matchType = reader.int32();
                    break;
                case /* optional bool is_agreed */ 10:
                    message.isAgreed = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerConfirmMatchReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MatchType match_type = 12; */
        if (message.matchType !== undefined)
            writer.tag(12, WireType.Varint).int32(message.matchType);
        /* optional bool is_agreed = 10; */
        if (message.isAgreed !== undefined)
            writer.tag(10, WireType.Varint).bool(message.isAgreed);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerConfirmMatchReq
 */
export const PlayerConfirmMatchReq = new PlayerConfirmMatchReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerConfirmMatchRsp$Type extends MessageType<PlayerConfirmMatchRsp> {
    constructor() {
        super("com.midnights.game.PlayerConfirmMatchRsp", [
            { no: 9, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 4, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "is_agreed", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerConfirmMatchRsp>): PlayerConfirmMatchRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerConfirmMatchRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerConfirmMatchRsp): PlayerConfirmMatchRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.MatchType match_type */ 9:
                    message.matchType = reader.int32();
                    break;
                case /* optional uint32 match_id */ 4:
                    message.matchId = reader.uint32();
                    break;
                case /* optional bool is_agreed */ 11:
                    message.isAgreed = reader.bool();
                    break;
                case /* optional int32 retcode */ 10:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerConfirmMatchRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.MatchType match_type = 9; */
        if (message.matchType !== undefined)
            writer.tag(9, WireType.Varint).int32(message.matchType);
        /* optional uint32 match_id = 4; */
        if (message.matchId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.matchId);
        /* optional bool is_agreed = 11; */
        if (message.isAgreed !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isAgreed);
        /* optional int32 retcode = 10; */
        if (message.retcode !== undefined)
            writer.tag(10, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerConfirmMatchRsp
 */
export const PlayerConfirmMatchRsp = new PlayerConfirmMatchRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerAllowEnterMpAfterAgreeMatchNotify$Type extends MessageType<PlayerAllowEnterMpAfterAgreeMatchNotify> {
    constructor() {
        super("com.midnights.game.PlayerAllowEnterMpAfterAgreeMatchNotify", [
            { no: 1, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerAllowEnterMpAfterAgreeMatchNotify>): PlayerAllowEnterMpAfterAgreeMatchNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerAllowEnterMpAfterAgreeMatchNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerAllowEnterMpAfterAgreeMatchNotify): PlayerAllowEnterMpAfterAgreeMatchNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 1:
                    message.targetUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerAllowEnterMpAfterAgreeMatchNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 1; */
        if (message.targetUid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.targetUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerAllowEnterMpAfterAgreeMatchNotify
 */
export const PlayerAllowEnterMpAfterAgreeMatchNotify = new PlayerAllowEnterMpAfterAgreeMatchNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMatchAgreedResultNotify$Type extends MessageType<PlayerMatchAgreedResultNotify> {
    constructor() {
        super("com.midnights.game.PlayerMatchAgreedResultNotify", [
            { no: 14, name: "target_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 8, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.PlayerMatchAgreedResultNotify.Reason", PlayerMatchAgreedResultNotify_Reason] }
        ]);
    }
    create(value?: PartialMessage<PlayerMatchAgreedResultNotify>): PlayerMatchAgreedResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMatchAgreedResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMatchAgreedResultNotify): PlayerMatchAgreedResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 target_uid */ 14:
                    message.targetUid = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 3:
                    message.matchType = reader.int32();
                    break;
                case /* optional com.midnights.game.PlayerMatchAgreedResultNotify.Reason reason */ 8:
                    message.reason = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMatchAgreedResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 target_uid = 14; */
        if (message.targetUid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.targetUid);
        /* optional com.midnights.game.MatchType match_type = 3; */
        if (message.matchType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.matchType);
        /* optional com.midnights.game.PlayerMatchAgreedResultNotify.Reason reason = 8; */
        if (message.reason !== undefined)
            writer.tag(8, WireType.Varint).int32(message.reason);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerMatchAgreedResultNotify
 */
export const PlayerMatchAgreedResultNotify = new PlayerMatchAgreedResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerApplyEnterMpAfterMatchAgreedNotify$Type extends MessageType<PlayerApplyEnterMpAfterMatchAgreedNotify> {
    constructor() {
        super("com.midnights.game.PlayerApplyEnterMpAfterMatchAgreedNotify", [
            { no: 11, name: "src_player_info", kind: "message", T: () => OnlinePlayerInfo },
            { no: 10, name: "matchserver_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "match_type", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchType", MatchType, "MATCH_TYPE_"] }
        ]);
    }
    create(value?: PartialMessage<PlayerApplyEnterMpAfterMatchAgreedNotify>): PlayerApplyEnterMpAfterMatchAgreedNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerApplyEnterMpAfterMatchAgreedNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerApplyEnterMpAfterMatchAgreedNotify): PlayerApplyEnterMpAfterMatchAgreedNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.OnlinePlayerInfo src_player_info */ 11:
                    message.srcPlayerInfo = OnlinePlayerInfo.internalBinaryRead(reader, reader.uint32(), options, message.srcPlayerInfo);
                    break;
                case /* optional uint32 matchserver_id */ 10:
                    message.matchserverId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchType match_type */ 3:
                    message.matchType = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerApplyEnterMpAfterMatchAgreedNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.OnlinePlayerInfo src_player_info = 11; */
        if (message.srcPlayerInfo)
            OnlinePlayerInfo.internalBinaryWrite(message.srcPlayerInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 matchserver_id = 10; */
        if (message.matchserverId !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.matchserverId);
        /* optional com.midnights.game.MatchType match_type = 3; */
        if (message.matchType !== undefined)
            writer.tag(3, WireType.Varint).int32(message.matchType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerApplyEnterMpAfterMatchAgreedNotify
 */
export const PlayerApplyEnterMpAfterMatchAgreedNotify = new PlayerApplyEnterMpAfterMatchAgreedNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGeneralMatchDismissNotify$Type extends MessageType<PlayerGeneralMatchDismissNotify> {
    constructor() {
        super("com.midnights.game.PlayerGeneralMatchDismissNotify", [
            { no: 3, name: "uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchReason", MatchReason] },
            { no: 1, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGeneralMatchDismissNotify>): PlayerGeneralMatchDismissNotify {
        const message = { uidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGeneralMatchDismissNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGeneralMatchDismissNotify): PlayerGeneralMatchDismissNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 uid_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                case /* optional com.midnights.game.MatchReason reason */ 13:
                    message.reason = reader.int32();
                    break;
                case /* optional uint32 match_id */ 1:
                    message.matchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGeneralMatchDismissNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 uid_list = 3; */
        if (message.uidList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uidList.length; i++)
                writer.uint32(message.uidList[i]);
            writer.join();
        }
        /* optional com.midnights.game.MatchReason reason = 13; */
        if (message.reason !== undefined)
            writer.tag(13, WireType.Varint).int32(message.reason);
        /* optional uint32 match_id = 1; */
        if (message.matchId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGeneralMatchDismissNotify
 */
export const PlayerGeneralMatchDismissNotify = new PlayerGeneralMatchDismissNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGeneralMatchConfirmNotify$Type extends MessageType<PlayerGeneralMatchConfirmNotify> {
    constructor() {
        super("com.midnights.game.PlayerGeneralMatchConfirmNotify", [
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGeneralMatchConfirmNotify>): PlayerGeneralMatchConfirmNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGeneralMatchConfirmNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGeneralMatchConfirmNotify): PlayerGeneralMatchConfirmNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 match_id */ 8:
                    message.matchId = reader.uint32();
                    break;
                case /* optional bool is_agree */ 13:
                    message.isAgree = reader.bool();
                    break;
                case /* optional uint32 uid */ 14:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGeneralMatchConfirmNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.matchId);
        /* optional bool is_agree = 13; */
        if (message.isAgree !== undefined)
            writer.tag(13, WireType.Varint).bool(message.isAgree);
        /* optional uint32 uid = 14; */
        if (message.uid !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGeneralMatchConfirmNotify
 */
export const PlayerGeneralMatchConfirmNotify = new PlayerGeneralMatchConfirmNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGetForceQuitBanInfoReq$Type extends MessageType<PlayerGetForceQuitBanInfoReq> {
    constructor() {
        super("com.midnights.game.PlayerGetForceQuitBanInfoReq", []);
    }
    create(value?: PartialMessage<PlayerGetForceQuitBanInfoReq>): PlayerGetForceQuitBanInfoReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGetForceQuitBanInfoReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGetForceQuitBanInfoReq): PlayerGetForceQuitBanInfoReq {
        return target ?? this.create();
    }
    internalBinaryWrite(message: PlayerGetForceQuitBanInfoReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGetForceQuitBanInfoReq
 */
export const PlayerGetForceQuitBanInfoReq = new PlayerGetForceQuitBanInfoReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGetForceQuitBanInfoRsp$Type extends MessageType<PlayerGetForceQuitBanInfoRsp> {
    constructor() {
        super("com.midnights.game.PlayerGetForceQuitBanInfoRsp", [
            { no: 4, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 8, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "expire_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGetForceQuitBanInfoRsp>): PlayerGetForceQuitBanInfoRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGetForceQuitBanInfoRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGetForceQuitBanInfoRsp): PlayerGetForceQuitBanInfoRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 4:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 match_id */ 8:
                    message.matchId = reader.uint32();
                    break;
                case /* optional uint32 expire_time */ 13:
                    message.expireTime = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGetForceQuitBanInfoRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 4; */
        if (message.retcode !== undefined)
            writer.tag(4, WireType.Varint).int32(message.retcode);
        /* optional uint32 match_id = 8; */
        if (message.matchId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.matchId);
        /* optional uint32 expire_time = 13; */
        if (message.expireTime !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.expireTime);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGetForceQuitBanInfoRsp
 */
export const PlayerGetForceQuitBanInfoRsp = new PlayerGetForceQuitBanInfoRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ServerTryCancelGeneralMatchNotify$Type extends MessageType<ServerTryCancelGeneralMatchNotify> {
    constructor() {
        super("com.midnights.game.ServerTryCancelGeneralMatchNotify", [
            { no: 9, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ServerTryCancelGeneralMatchNotify>): ServerTryCancelGeneralMatchNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ServerTryCancelGeneralMatchNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ServerTryCancelGeneralMatchNotify): ServerTryCancelGeneralMatchNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 match_id */ 9:
                    message.matchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ServerTryCancelGeneralMatchNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 match_id = 9; */
        if (message.matchId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ServerTryCancelGeneralMatchNotify
 */
export const ServerTryCancelGeneralMatchNotify = new ServerTryCancelGeneralMatchNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGCGMatchDismissNotify$Type extends MessageType<PlayerGCGMatchDismissNotify> {
    constructor() {
        super("com.midnights.game.PlayerGCGMatchDismissNotify", [
            { no: 11, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "reason", kind: "enum", opt: true, T: () => ["com.midnights.game.MatchReason", MatchReason] },
            { no: 7, name: "uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGCGMatchDismissNotify>): PlayerGCGMatchDismissNotify {
        const message = { uidList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGCGMatchDismissNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGCGMatchDismissNotify): PlayerGCGMatchDismissNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 match_id */ 11:
                    message.matchId = reader.uint32();
                    break;
                case /* optional com.midnights.game.MatchReason reason */ 5:
                    message.reason = reader.int32();
                    break;
                case /* repeated uint32 uid_list */ 7:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGCGMatchDismissNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 match_id = 11; */
        if (message.matchId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.matchId);
        /* optional com.midnights.game.MatchReason reason = 5; */
        if (message.reason !== undefined)
            writer.tag(5, WireType.Varint).int32(message.reason);
        /* repeated uint32 uid_list = 7; */
        if (message.uidList.length) {
            writer.tag(7, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uidList.length; i++)
                writer.uint32(message.uidList[i]);
            writer.join();
        }
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGCGMatchDismissNotify
 */
export const PlayerGCGMatchDismissNotify = new PlayerGCGMatchDismissNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PlayerGCGMatchConfirmNotify$Type extends MessageType<PlayerGCGMatchConfirmNotify> {
    constructor() {
        super("com.midnights.game.PlayerGCGMatchConfirmNotify", [
            { no: 10, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 14, name: "match_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerGCGMatchConfirmNotify>): PlayerGCGMatchConfirmNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerGCGMatchConfirmNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerGCGMatchConfirmNotify): PlayerGCGMatchConfirmNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 uid */ 10:
                    message.uid = reader.uint32();
                    break;
                case /* optional bool is_agree */ 5:
                    message.isAgree = reader.bool();
                    break;
                case /* optional uint32 match_id */ 14:
                    message.matchId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerGCGMatchConfirmNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 uid = 10; */
        if (message.uid !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.uid);
        /* optional bool is_agree = 5; */
        if (message.isAgree !== undefined)
            writer.tag(5, WireType.Varint).bool(message.isAgree);
        /* optional uint32 match_id = 14; */
        if (message.matchId !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.matchId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.PlayerGCGMatchConfirmNotify
 */
export const PlayerGCGMatchConfirmNotify = new PlayerGCGMatchConfirmNotify$Type();
