"use strict";
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _RoguelikeDungeonActivityDetailInfo_one_of_decls;
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoguelikeDungeonActivityDetailInfo = void 0;
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: RoguelikeDungeonActivityDetailInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
const dependency_1 = require("./RoguelikeShikigamiRecord");
const dependency_2 = require("./RogueStageInfo");
const pb_1 = require("google-protobuf");
class RoguelikeDungeonActivityDetailInfo extends pb_1.Message {
    constructor(data) {
        super();
        _RoguelikeDungeonActivityDetailInfo_one_of_decls.set(this, []);
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [8, 5, 14, 2], __classPrivateFieldGet(this, _RoguelikeDungeonActivityDetailInfo_one_of_decls, "f"));
        if (!Array.isArray(data) && typeof data == "object") {
            if ("stage_list" in data && data.stage_list != undefined) {
                this.stage_list = data.stage_list;
            }
            if ("shikigami_list" in data && data.shikigami_list != undefined) {
                this.shikigami_list = data.shikigami_list;
            }
            if ("equipped_rune_list" in data && data.equipped_rune_list != undefined) {
                this.equipped_rune_list = data.equipped_rune_list;
            }
            if ("content_close_time" in data && data.content_close_time != undefined) {
                this.content_close_time = data.content_close_time;
            }
            if ("is_content_closed" in data && data.is_content_closed != undefined) {
                this.is_content_closed = data.is_content_closed;
            }
            if ("rune_list" in data && data.rune_list != undefined) {
                this.rune_list = data.rune_list;
            }
        }
    }
    get stage_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_2.RogueStageInfo, 8);
    }
    set stage_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 8, value);
    }
    get shikigami_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.RoguelikeShikigamiRecord, 5);
    }
    set shikigami_list(value) {
        pb_1.Message.setRepeatedWrapperField(this, 5, value);
    }
    get equipped_rune_list() {
        return pb_1.Message.getFieldWithDefault(this, 14, []);
    }
    set equipped_rune_list(value) {
        pb_1.Message.setField(this, 14, value);
    }
    get content_close_time() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0);
    }
    set content_close_time(value) {
        pb_1.Message.setField(this, 6, value);
    }
    get is_content_closed() {
        return pb_1.Message.getFieldWithDefault(this, 10, false);
    }
    set is_content_closed(value) {
        pb_1.Message.setField(this, 10, value);
    }
    get rune_list() {
        return pb_1.Message.getFieldWithDefault(this, 2, []);
    }
    set rune_list(value) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data) {
        const message = new RoguelikeDungeonActivityDetailInfo({});
        if (data.stage_list != null) {
            message.stage_list = data.stage_list.map(item => dependency_2.RogueStageInfo.fromObject(item));
        }
        if (data.shikigami_list != null) {
            message.shikigami_list = data.shikigami_list.map(item => dependency_1.RoguelikeShikigamiRecord.fromObject(item));
        }
        if (data.equipped_rune_list != null) {
            message.equipped_rune_list = data.equipped_rune_list;
        }
        if (data.content_close_time != null) {
            message.content_close_time = data.content_close_time;
        }
        if (data.is_content_closed != null) {
            message.is_content_closed = data.is_content_closed;
        }
        if (data.rune_list != null) {
            message.rune_list = data.rune_list;
        }
        return message;
    }
    toObject() {
        const data = {};
        if (this.stage_list != null) {
            data.stage_list = this.stage_list.map((item) => item.toObject());
        }
        if (this.shikigami_list != null) {
            data.shikigami_list = this.shikigami_list.map((item) => item.toObject());
        }
        if (this.equipped_rune_list != null) {
            data.equipped_rune_list = this.equipped_rune_list;
        }
        if (this.content_close_time != null) {
            data.content_close_time = this.content_close_time;
        }
        if (this.is_content_closed != null) {
            data.is_content_closed = this.is_content_closed;
        }
        if (this.rune_list != null) {
            data.rune_list = this.rune_list;
        }
        return data;
    }
    serialize(w) {
        const writer = w || new pb_1.BinaryWriter();
        if (this.stage_list.length)
            writer.writeRepeatedMessage(8, this.stage_list, (item) => item.serialize(writer));
        if (this.shikigami_list.length)
            writer.writeRepeatedMessage(5, this.shikigami_list, (item) => item.serialize(writer));
        if (this.equipped_rune_list.length)
            writer.writePackedUint32(14, this.equipped_rune_list);
        if (this.content_close_time != 0)
            writer.writeUint32(6, this.content_close_time);
        if (this.is_content_closed != false)
            writer.writeBool(10, this.is_content_closed);
        if (this.rune_list.length)
            writer.writePackedUint32(2, this.rune_list);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes) {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new RoguelikeDungeonActivityDetailInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    reader.readMessage(message.stage_list, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.RogueStageInfo.deserialize(reader), dependency_2.RogueStageInfo));
                    break;
                case 5:
                    reader.readMessage(message.shikigami_list, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.RoguelikeShikigamiRecord.deserialize(reader), dependency_1.RoguelikeShikigamiRecord));
                    break;
                case 14:
                    message.equipped_rune_list = reader.readPackedUint32();
                    break;
                case 6:
                    message.content_close_time = reader.readUint32();
                    break;
                case 10:
                    message.is_content_closed = reader.readBool();
                    break;
                case 2:
                    message.rune_list = reader.readPackedUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary() {
        return this.serialize();
    }
    static deserializeBinary(bytes) {
        return RoguelikeDungeonActivityDetailInfo.deserialize(bytes);
    }
}
exports.RoguelikeDungeonActivityDetailInfo = RoguelikeDungeonActivityDetailInfo;
_RoguelikeDungeonActivityDetailInfo_one_of_decls = new WeakMap();
