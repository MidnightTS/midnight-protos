/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: LuaSetOptionNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class LuaSetOptionNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        lua_set_param?: string;
        option_type?: LuaSetOptionNotify.LuaOptionType;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("lua_set_param" in data && data.lua_set_param != undefined) {
                this.lua_set_param = data.lua_set_param;
            }
            if ("option_type" in data && data.option_type != undefined) {
                this.option_type = data.option_type;
            }
        }
    }
    get lua_set_param() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set lua_set_param(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get option_type() {
        return pb_1.Message.getFieldWithDefault(this, 10, LuaSetOptionNotify.LuaOptionType.LUA_OPTION_TYPE_NONE) as LuaSetOptionNotify.LuaOptionType;
    }
    set option_type(value: LuaSetOptionNotify.LuaOptionType) {
        pb_1.Message.setField(this, 10, value);
    }
    static fromObject(data: {
        lua_set_param?: string;
        option_type?: LuaSetOptionNotify.LuaOptionType;
    }): LuaSetOptionNotify {
        const message = new LuaSetOptionNotify({});
        if (data.lua_set_param != null) {
            message.lua_set_param = data.lua_set_param;
        }
        if (data.option_type != null) {
            message.option_type = data.option_type;
        }
        return message;
    }
    toObject() {
        const data: {
            lua_set_param?: string;
            option_type?: LuaSetOptionNotify.LuaOptionType;
        } = {};
        if (this.lua_set_param != null) {
            data.lua_set_param = this.lua_set_param;
        }
        if (this.option_type != null) {
            data.option_type = this.option_type;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.lua_set_param.length)
            writer.writeString(8, this.lua_set_param);
        if (this.option_type != LuaSetOptionNotify.LuaOptionType.LUA_OPTION_TYPE_NONE)
            writer.writeEnum(10, this.option_type);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LuaSetOptionNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LuaSetOptionNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 8:
                    message.lua_set_param = reader.readString();
                    break;
                case 10:
                    message.option_type = reader.readEnum();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LuaSetOptionNotify {
        return LuaSetOptionNotify.deserialize(bytes);
    }
}
export namespace LuaSetOptionNotify {
    export enum LuaOptionType {
        LUA_OPTION_TYPE_NONE = 0,
        LUA_OPTION_TYPE_PLAYER_INPUT = 1
    }
}
