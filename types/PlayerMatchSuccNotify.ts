// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "PlayerMatchSuccNotify.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { GCGMatchInfo } from "./GCGMatchInfo";
import { MatchType } from "./MatchType";
import { GeneralMatchInfo } from "./GeneralMatchInfo";
/**
 * enum CmdId {
 *   option allow_alias = true;
 *   NONE = 0;
 *   CMD_ID = 4194;
 *   ENET_CHANNEL_ID = 0;
 *   ENET_IS_RELIABLE = 1;
 * }
 *
 * @generated from protobuf message PlayerMatchSuccNotify
 */
export interface PlayerMatchSuccNotify {
    /**
     * @generated from protobuf field: GeneralMatchInfo general_match_info = 7;
     */
    generalMatchInfo?: GeneralMatchInfo;
    /**
     * @generated from protobuf field: uint32 dungeon_id = 3;
     */
    dungeonId: number;
    /**
     * @generated from protobuf field: MatchType match_type = 15;
     */
    matchType: MatchType;
    /**
     * @generated from protobuf field: uint32 mechanicus_difficult_level = 5;
     */
    mechanicusDifficultLevel: number;
    /**
     * @generated from protobuf field: uint32 confirm_end_time = 13;
     */
    confirmEndTime: number;
    /**
     * @generated from protobuf field: GCGMatchInfo gcg_match_info = 9;
     */
    gcgMatchInfo?: GCGMatchInfo;
    /**
     * @generated from protobuf field: uint32 mp_play_id = 11;
     */
    mpPlayId: number;
    /**
     * @generated from protobuf field: uint32 host_uid = 10;
     */
    hostUid: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class PlayerMatchSuccNotify$Type extends MessageType<PlayerMatchSuccNotify> {
    constructor() {
        super("PlayerMatchSuccNotify", [
            { no: 7, name: "general_match_info", kind: "message", T: () => GeneralMatchInfo },
            { no: 3, name: "dungeon_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "match_type", kind: "enum", T: () => ["MatchType", MatchType, "MATCH_TYPE_"] },
            { no: 5, name: "mechanicus_difficult_level", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "confirm_end_time", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "gcg_match_info", kind: "message", T: () => GCGMatchInfo },
            { no: 11, name: "mp_play_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "host_uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<PlayerMatchSuccNotify>): PlayerMatchSuccNotify {
        const message = { dungeonId: 0, matchType: 0, mechanicusDifficultLevel: 0, confirmEndTime: 0, mpPlayId: 0, hostUid: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PlayerMatchSuccNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PlayerMatchSuccNotify): PlayerMatchSuccNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* GeneralMatchInfo general_match_info */ 7:
                    message.generalMatchInfo = GeneralMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.generalMatchInfo);
                    break;
                case /* uint32 dungeon_id */ 3:
                    message.dungeonId = reader.uint32();
                    break;
                case /* MatchType match_type */ 15:
                    message.matchType = reader.int32();
                    break;
                case /* uint32 mechanicus_difficult_level */ 5:
                    message.mechanicusDifficultLevel = reader.uint32();
                    break;
                case /* uint32 confirm_end_time */ 13:
                    message.confirmEndTime = reader.uint32();
                    break;
                case /* GCGMatchInfo gcg_match_info */ 9:
                    message.gcgMatchInfo = GCGMatchInfo.internalBinaryRead(reader, reader.uint32(), options, message.gcgMatchInfo);
                    break;
                case /* uint32 mp_play_id */ 11:
                    message.mpPlayId = reader.uint32();
                    break;
                case /* uint32 host_uid */ 10:
                    message.hostUid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PlayerMatchSuccNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* GeneralMatchInfo general_match_info = 7; */
        if (message.generalMatchInfo)
            GeneralMatchInfo.internalBinaryWrite(message.generalMatchInfo, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        /* uint32 dungeon_id = 3; */
        if (message.dungeonId !== 0)
            writer.tag(3, WireType.Varint).uint32(message.dungeonId);
        /* MatchType match_type = 15; */
        if (message.matchType !== 0)
            writer.tag(15, WireType.Varint).int32(message.matchType);
        /* uint32 mechanicus_difficult_level = 5; */
        if (message.mechanicusDifficultLevel !== 0)
            writer.tag(5, WireType.Varint).uint32(message.mechanicusDifficultLevel);
        /* uint32 confirm_end_time = 13; */
        if (message.confirmEndTime !== 0)
            writer.tag(13, WireType.Varint).uint32(message.confirmEndTime);
        /* GCGMatchInfo gcg_match_info = 9; */
        if (message.gcgMatchInfo)
            GCGMatchInfo.internalBinaryWrite(message.gcgMatchInfo, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* uint32 mp_play_id = 11; */
        if (message.mpPlayId !== 0)
            writer.tag(11, WireType.Varint).uint32(message.mpPlayId);
        /* uint32 host_uid = 10; */
        if (message.hostUid !== 0)
            writer.tag(10, WireType.Varint).uint32(message.hostUid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message PlayerMatchSuccNotify
 */
export const PlayerMatchSuccNotify = new PlayerMatchSuccNotify$Type();
