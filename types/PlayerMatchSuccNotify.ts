/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerMatchSuccNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./GeneralMatchInfo";
import * as dependency_2 from "./MatchType";
import * as pb_1 from "google-protobuf";
export class PlayerMatchSuccNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        mechanicus_difficult_level?: number;
        dungeon_id?: number;
        match_type?: dependency_2.MatchType;
        mp_play_id?: number;
        general_match_info?: dependency_1.GeneralMatchInfo;
        host_uid?: number;
        confirm_end_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("mechanicus_difficult_level" in data && data.mechanicus_difficult_level != undefined) {
                this.mechanicus_difficult_level = data.mechanicus_difficult_level;
            }
            if ("dungeon_id" in data && data.dungeon_id != undefined) {
                this.dungeon_id = data.dungeon_id;
            }
            if ("match_type" in data && data.match_type != undefined) {
                this.match_type = data.match_type;
            }
            if ("mp_play_id" in data && data.mp_play_id != undefined) {
                this.mp_play_id = data.mp_play_id;
            }
            if ("general_match_info" in data && data.general_match_info != undefined) {
                this.general_match_info = data.general_match_info;
            }
            if ("host_uid" in data && data.host_uid != undefined) {
                this.host_uid = data.host_uid;
            }
            if ("confirm_end_time" in data && data.confirm_end_time != undefined) {
                this.confirm_end_time = data.confirm_end_time;
            }
        }
    }
    get mechanicus_difficult_level() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set mechanicus_difficult_level(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get dungeon_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set dungeon_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get match_type() {
        return pb_1.Message.getFieldWithDefault(this, 5, dependency_2.MatchType.MATCH_TYPE_NONE) as dependency_2.MatchType;
    }
    set match_type(value: dependency_2.MatchType) {
        pb_1.Message.setField(this, 5, value);
    }
    get mp_play_id() {
        return pb_1.Message.getFieldWithDefault(this, 15, 0) as number;
    }
    set mp_play_id(value: number) {
        pb_1.Message.setField(this, 15, value);
    }
    get general_match_info() {
        return pb_1.Message.getWrapperField(this, dependency_1.GeneralMatchInfo, 7) as dependency_1.GeneralMatchInfo;
    }
    set general_match_info(value: dependency_1.GeneralMatchInfo) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_general_match_info() {
        return pb_1.Message.getField(this, 7) != null;
    }
    get host_uid() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set host_uid(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get confirm_end_time() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set confirm_end_time(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        mechanicus_difficult_level?: number;
        dungeon_id?: number;
        match_type?: dependency_2.MatchType;
        mp_play_id?: number;
        general_match_info?: ReturnType<typeof dependency_1.GeneralMatchInfo.prototype.toObject>;
        host_uid?: number;
        confirm_end_time?: number;
    }): PlayerMatchSuccNotify {
        const message = new PlayerMatchSuccNotify({});
        if (data.mechanicus_difficult_level != null) {
            message.mechanicus_difficult_level = data.mechanicus_difficult_level;
        }
        if (data.dungeon_id != null) {
            message.dungeon_id = data.dungeon_id;
        }
        if (data.match_type != null) {
            message.match_type = data.match_type;
        }
        if (data.mp_play_id != null) {
            message.mp_play_id = data.mp_play_id;
        }
        if (data.general_match_info != null) {
            message.general_match_info = dependency_1.GeneralMatchInfo.fromObject(data.general_match_info);
        }
        if (data.host_uid != null) {
            message.host_uid = data.host_uid;
        }
        if (data.confirm_end_time != null) {
            message.confirm_end_time = data.confirm_end_time;
        }
        return message;
    }
    toObject() {
        const data: {
            mechanicus_difficult_level?: number;
            dungeon_id?: number;
            match_type?: dependency_2.MatchType;
            mp_play_id?: number;
            general_match_info?: ReturnType<typeof dependency_1.GeneralMatchInfo.prototype.toObject>;
            host_uid?: number;
            confirm_end_time?: number;
        } = {};
        if (this.mechanicus_difficult_level != null) {
            data.mechanicus_difficult_level = this.mechanicus_difficult_level;
        }
        if (this.dungeon_id != null) {
            data.dungeon_id = this.dungeon_id;
        }
        if (this.match_type != null) {
            data.match_type = this.match_type;
        }
        if (this.mp_play_id != null) {
            data.mp_play_id = this.mp_play_id;
        }
        if (this.general_match_info != null) {
            data.general_match_info = this.general_match_info.toObject();
        }
        if (this.host_uid != null) {
            data.host_uid = this.host_uid;
        }
        if (this.confirm_end_time != null) {
            data.confirm_end_time = this.confirm_end_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.mechanicus_difficult_level != 0)
            writer.writeUint32(1, this.mechanicus_difficult_level);
        if (this.dungeon_id != 0)
            writer.writeUint32(6, this.dungeon_id);
        if (this.match_type != dependency_2.MatchType.MATCH_TYPE_NONE)
            writer.writeEnum(5, this.match_type);
        if (this.mp_play_id != 0)
            writer.writeUint32(15, this.mp_play_id);
        if (this.has_general_match_info)
            writer.writeMessage(7, this.general_match_info, () => this.general_match_info.serialize(writer));
        if (this.host_uid != 0)
            writer.writeUint32(3, this.host_uid);
        if (this.confirm_end_time != 0)
            writer.writeUint32(2, this.confirm_end_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerMatchSuccNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerMatchSuccNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.mechanicus_difficult_level = reader.readUint32();
                    break;
                case 6:
                    message.dungeon_id = reader.readUint32();
                    break;
                case 5:
                    message.match_type = reader.readEnum();
                    break;
                case 15:
                    message.mp_play_id = reader.readUint32();
                    break;
                case 7:
                    reader.readMessage(message.general_match_info, () => message.general_match_info = dependency_1.GeneralMatchInfo.deserialize(reader));
                    break;
                case 3:
                    message.host_uid = reader.readUint32();
                    break;
                case 2:
                    message.confirm_end_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerMatchSuccNotify {
        return PlayerMatchSuccNotify.deserialize(bytes);
    }
}
