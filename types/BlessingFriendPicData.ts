// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "BlessingFriendPicData.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ProfilePicture } from "./ProfilePicture";
/**
 * @generated from protobuf message BlessingFriendPicData
 */
export interface BlessingFriendPicData {
    /**
     * @generated from protobuf field: string remark_name = 8;
     */
    remarkName: string;
    /**
     * @generated from protobuf field: uint32 avatar_id = 4;
     */
    avatarId: number;
    /**
     * @generated from protobuf field: string signature = 13;
     */
    signature: string;
    /**
     * @generated from protobuf field: map<uint32, uint32> pic_num_map = 5;
     */
    picNumMap: {
        [key: number]: number;
    };
    /**
     * @generated from protobuf field: uint32 uid = 15;
     */
    uid: number;
    /**
     * @generated from protobuf field: string nickname = 9;
     */
    nickname: string;
    /**
     * @generated from protobuf field: ProfilePicture profile_picture = 7;
     */
    profilePicture?: ProfilePicture;
}
// @generated message type with reflection information, may provide speed optimized methods
class BlessingFriendPicData$Type extends MessageType<BlessingFriendPicData> {
    constructor() {
        super("BlessingFriendPicData", [
            { no: 8, name: "remark_name", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "avatar_id", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 13, name: "signature", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "pic_num_map", kind: "map", K: 13 /*ScalarType.UINT32*/, V: { kind: "scalar", T: 13 /*ScalarType.UINT32*/ } },
            { no: 15, name: "uid", kind: "scalar", T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "nickname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "profile_picture", kind: "message", T: () => ProfilePicture }
        ]);
    }
    create(value?: PartialMessage<BlessingFriendPicData>): BlessingFriendPicData {
        const message = { remarkName: "", avatarId: 0, signature: "", picNumMap: {}, uid: 0, nickname: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<BlessingFriendPicData>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: BlessingFriendPicData): BlessingFriendPicData {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string remark_name */ 8:
                    message.remarkName = reader.string();
                    break;
                case /* uint32 avatar_id */ 4:
                    message.avatarId = reader.uint32();
                    break;
                case /* string signature */ 13:
                    message.signature = reader.string();
                    break;
                case /* map<uint32, uint32> pic_num_map */ 5:
                    this.binaryReadMap5(message.picNumMap, reader, options);
                    break;
                case /* uint32 uid */ 15:
                    message.uid = reader.uint32();
                    break;
                case /* string nickname */ 9:
                    message.nickname = reader.string();
                    break;
                case /* ProfilePicture profile_picture */ 7:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap5(map: BlessingFriendPicData["picNumMap"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof BlessingFriendPicData["picNumMap"] | undefined, val: BlessingFriendPicData["picNumMap"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = reader.uint32();
                    break;
                default: throw new globalThis.Error("unknown map entry field for field BlessingFriendPicData.pic_num_map");
            }
        }
        map[key ?? 0] = val ?? 0;
    }
    internalBinaryWrite(message: BlessingFriendPicData, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string remark_name = 8; */
        if (message.remarkName !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.remarkName);
        /* uint32 avatar_id = 4; */
        if (message.avatarId !== 0)
            writer.tag(4, WireType.Varint).uint32(message.avatarId);
        /* string signature = 13; */
        if (message.signature !== "")
            writer.tag(13, WireType.LengthDelimited).string(message.signature);
        /* map<uint32, uint32> pic_num_map = 5; */
        for (let k of Object.keys(message.picNumMap))
            writer.tag(5, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k)).tag(2, WireType.Varint).uint32(message.picNumMap[k as any]).join();
        /* uint32 uid = 15; */
        if (message.uid !== 0)
            writer.tag(15, WireType.Varint).uint32(message.uid);
        /* string nickname = 9; */
        if (message.nickname !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.nickname);
        /* ProfilePicture profile_picture = 7; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(7, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message BlessingFriendPicData
 */
export const BlessingFriendPicData = new BlessingFriendPicData$Type();
