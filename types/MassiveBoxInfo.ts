/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: MassiveBoxInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class MassiveBoxInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        id?: number;
        config_id?: number;
        center?: dependency_1.Vector;
        extents?: dependency_1.Vector;
        up?: dependency_1.Vector;
        forward?: dependency_1.Vector;
        right?: dependency_1.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("id" in data && data.id != undefined) {
                this.id = data.id;
            }
            if ("config_id" in data && data.config_id != undefined) {
                this.config_id = data.config_id;
            }
            if ("center" in data && data.center != undefined) {
                this.center = data.center;
            }
            if ("extents" in data && data.extents != undefined) {
                this.extents = data.extents;
            }
            if ("up" in data && data.up != undefined) {
                this.up = data.up;
            }
            if ("forward" in data && data.forward != undefined) {
                this.forward = data.forward;
            }
            if ("right" in data && data.right != undefined) {
                this.right = data.right;
            }
        }
    }
    get id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get config_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set config_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get center() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 3) as dependency_1.Vector;
    }
    set center(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 3, value);
    }
    get has_center() {
        return pb_1.Message.getField(this, 3) != null;
    }
    get extents() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 4) as dependency_1.Vector;
    }
    set extents(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 4, value);
    }
    get has_extents() {
        return pb_1.Message.getField(this, 4) != null;
    }
    get up() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 5) as dependency_1.Vector;
    }
    set up(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 5, value);
    }
    get has_up() {
        return pb_1.Message.getField(this, 5) != null;
    }
    get forward() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 6) as dependency_1.Vector;
    }
    set forward(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 6, value);
    }
    get has_forward() {
        return pb_1.Message.getField(this, 6) != null;
    }
    get right() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 7) as dependency_1.Vector;
    }
    set right(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 7, value);
    }
    get has_right() {
        return pb_1.Message.getField(this, 7) != null;
    }
    static fromObject(data: {
        id?: number;
        config_id?: number;
        center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        extents?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        up?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        forward?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        right?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
    }): MassiveBoxInfo {
        const message = new MassiveBoxInfo({});
        if (data.id != null) {
            message.id = data.id;
        }
        if (data.config_id != null) {
            message.config_id = data.config_id;
        }
        if (data.center != null) {
            message.center = dependency_1.Vector.fromObject(data.center);
        }
        if (data.extents != null) {
            message.extents = dependency_1.Vector.fromObject(data.extents);
        }
        if (data.up != null) {
            message.up = dependency_1.Vector.fromObject(data.up);
        }
        if (data.forward != null) {
            message.forward = dependency_1.Vector.fromObject(data.forward);
        }
        if (data.right != null) {
            message.right = dependency_1.Vector.fromObject(data.right);
        }
        return message;
    }
    toObject() {
        const data: {
            id?: number;
            config_id?: number;
            center?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            extents?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            up?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            forward?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
            right?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        } = {};
        if (this.id != null) {
            data.id = this.id;
        }
        if (this.config_id != null) {
            data.config_id = this.config_id;
        }
        if (this.center != null) {
            data.center = this.center.toObject();
        }
        if (this.extents != null) {
            data.extents = this.extents.toObject();
        }
        if (this.up != null) {
            data.up = this.up.toObject();
        }
        if (this.forward != null) {
            data.forward = this.forward.toObject();
        }
        if (this.right != null) {
            data.right = this.right.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.id != 0)
            writer.writeInt32(1, this.id);
        if (this.config_id != 0)
            writer.writeUint32(2, this.config_id);
        if (this.has_center)
            writer.writeMessage(3, this.center, () => this.center.serialize(writer));
        if (this.has_extents)
            writer.writeMessage(4, this.extents, () => this.extents.serialize(writer));
        if (this.has_up)
            writer.writeMessage(5, this.up, () => this.up.serialize(writer));
        if (this.has_forward)
            writer.writeMessage(6, this.forward, () => this.forward.serialize(writer));
        if (this.has_right)
            writer.writeMessage(7, this.right, () => this.right.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MassiveBoxInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MassiveBoxInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.id = reader.readInt32();
                    break;
                case 2:
                    message.config_id = reader.readUint32();
                    break;
                case 3:
                    reader.readMessage(message.center, () => message.center = dependency_1.Vector.deserialize(reader));
                    break;
                case 4:
                    reader.readMessage(message.extents, () => message.extents = dependency_1.Vector.deserialize(reader));
                    break;
                case 5:
                    reader.readMessage(message.up, () => message.up = dependency_1.Vector.deserialize(reader));
                    break;
                case 6:
                    reader.readMessage(message.forward, () => message.forward = dependency_1.Vector.deserialize(reader));
                    break;
                case 7:
                    reader.readMessage(message.right, () => message.right = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): MassiveBoxInfo {
        return MassiveBoxInfo.deserialize(bytes);
    }
}
