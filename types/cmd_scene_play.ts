// @generated by protobuf-ts 2.8.1 with parameter output_typescript
// @generated from protobuf file "cmd_scene_play.proto" (package "com.midnights.game", syntax proto3)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { ItemParam } from "./define";
import { ProfilePicture } from "./define";
import { ExhibitionDisplayInfo } from "./define";
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleInfo
 */
export interface ScenePlayBattleInfo {
    /**
     * @generated from protobuf field: optional uint32 mode = 4;
     */
    mode?: number;
    /**
     * @generated from protobuf field: repeated uint32 progress_stage_list = 3;
     */
    progressStageList: number[];
    /**
     * @generated from protobuf field: optional uint32 start_time = 10;
     */
    startTime?: number;
    /**
     * @generated from protobuf field: optional uint32 duration = 14;
     */
    duration?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 12;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 1;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional uint32 prepare_end_time = 7;
     */
    prepareEndTime?: number;
    /**
     * @generated from protobuf field: optional uint32 progress = 11;
     */
    progress?: number;
    /**
     * @generated from protobuf field: optional uint32 state = 8;
     */
    state?: number;
    /**
     * @generated from protobuf field: optional uint32 type = 9;
     */
    type?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleInfoNotify
 */
export interface ScenePlayBattleInfoNotify {
    /**
     * @generated from protobuf field: optional com.midnights.game.ScenePlayBattleInfo battle_info = 11;
     */
    battleInfo?: ScenePlayBattleInfo;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleInfoNotify.CmdId
 */
export enum ScenePlayBattleInfoNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4422;
     */
    CMD_ID = 4422,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOwnerCheckReq
 */
export interface ScenePlayOwnerCheckReq {
    /**
     * @generated from protobuf field: optional uint32 play_id = 9;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional bool is_skip_match = 6;
     */
    isSkipMatch?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOwnerCheckReq.CmdId
 */
export enum ScenePlayOwnerCheckReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4448;
     */
    CMD_ID = 4448,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOwnerCheckRsp
 */
export interface ScenePlayOwnerCheckRsp {
    /**
     * @generated from protobuf field: repeated uint32 param_list = 8;
     */
    paramList: number[];
    /**
     * @generated from protobuf field: optional bool is_skip_match = 1;
     */
    isSkipMatch?: boolean;
    /**
     * @generated from protobuf field: optional uint32 play_id = 9;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional uint32 wrong_uid = 5;
     */
    wrongUid?: number;
    /**
     * @generated from protobuf field: optional int32 retcode = 3;
     */
    retcode?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOwnerCheckRsp.CmdId
 */
export enum ScenePlayOwnerCheckRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4362;
     */
    CMD_ID = 4362,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOwnerStartInviteReq
 */
export interface ScenePlayOwnerStartInviteReq {
    /**
     * @generated from protobuf field: optional bool is_skip_match = 8;
     */
    isSkipMatch?: boolean;
    /**
     * @generated from protobuf field: optional uint32 play_id = 13;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOwnerStartInviteReq.CmdId
 */
export enum ScenePlayOwnerStartInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4385;
     */
    CMD_ID = 4385,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOwnerStartInviteRsp
 */
export interface ScenePlayOwnerStartInviteRsp {
    /**
     * @generated from protobuf field: optional bool is_skip_match = 7;
     */
    isSkipMatch?: boolean;
    /**
     * @generated from protobuf field: optional int32 retcode = 15;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 11;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOwnerStartInviteRsp.CmdId
 */
export enum ScenePlayOwnerStartInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4357;
     */
    CMD_ID = 4357,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOwnerInviteNotify
 */
export interface ScenePlayOwnerInviteNotify {
    /**
     * @generated from protobuf field: optional uint32 invite_cd = 14;
     */
    inviteCd?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 5;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional bool is_remain_reward = 15;
     */
    isRemainReward?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOwnerInviteNotify.CmdId
 */
export enum ScenePlayOwnerInviteNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4371;
     */
    CMD_ID = 4371,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayGuestReplyInviteReq
 */
export interface ScenePlayGuestReplyInviteReq {
    /**
     * @generated from protobuf field: optional bool is_agree = 15;
     */
    isAgree?: boolean;
    /**
     * @generated from protobuf field: optional uint32 play_id = 6;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayGuestReplyInviteReq.CmdId
 */
export enum ScenePlayGuestReplyInviteReq_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4353;
     */
    CMD_ID = 4353,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayGuestReplyInviteRsp
 */
export interface ScenePlayGuestReplyInviteRsp {
    /**
     * @generated from protobuf field: optional int32 retcode = 6;
     */
    retcode?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 2;
     */
    isAgree?: boolean;
    /**
     * @generated from protobuf field: optional uint32 play_id = 8;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayGuestReplyInviteRsp.CmdId
 */
export enum ScenePlayGuestReplyInviteRsp_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4440;
     */
    CMD_ID = 4440,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayGuestReplyNotify
 */
export interface ScenePlayGuestReplyNotify {
    /**
     * @generated from protobuf field: optional uint32 play_id = 13;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional uint32 guest_uid = 12;
     */
    guestUid?: number;
    /**
     * @generated from protobuf field: optional bool is_agree = 3;
     */
    isAgree?: boolean;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayGuestReplyNotify.CmdId
 */
export enum ScenePlayGuestReplyNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4423;
     */
    CMD_ID = 4423,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayInviteResultNotify
 */
export interface ScenePlayInviteResultNotify {
    /**
     * @generated from protobuf field: optional bool is_all_argee = 11;
     */
    isAllArgee?: boolean;
    /**
     * @generated from protobuf field: optional uint32 play_id = 15;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayInviteResultNotify.CmdId
 */
export enum ScenePlayInviteResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4449;
     */
    CMD_ID = 4449,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayInfo
 */
export interface ScenePlayInfo {
    /**
     * @generated from protobuf field: optional uint32 entry_id = 15;
     */
    entryId?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 11;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 3;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional bool is_open = 9;
     */
    isOpen?: boolean;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayInfoListNotify
 */
export interface ScenePlayInfoListNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ScenePlayInfo play_info_list = 6;
     */
    playInfoList: ScenePlayInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayInfoListNotify.CmdId
 */
export enum ScenePlayInfoListNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4381;
     */
    CMD_ID = 4381,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleInterruptNotify
 */
export interface ScenePlayBattleInterruptNotify {
    /**
     * @generated from protobuf field: optional uint32 interrupt_state = 6;
     */
    interruptState?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 5;
     */
    playId?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 1;
     */
    playType?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleInterruptNotify.CmdId
 */
export enum ScenePlayBattleInterruptNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4425;
     */
    CMD_ID = 4425,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleSettlePlayerInfo
 */
export interface ScenePlayBattleSettlePlayerInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ExhibitionDisplayInfo card_list = 14;
     */
    cardList: ExhibitionDisplayInfo[];
    /**
     * @generated from protobuf field: optional com.midnights.game.ProfilePicture profile_picture = 10;
     */
    profilePicture?: ProfilePicture;
    /**
     * @generated from protobuf field: optional uint32 head_image = 11;
     */
    headImage?: number;
    /**
     * @generated from protobuf field: optional uint32 statistic_id = 4;
     */
    statisticId?: number;
    /**
     * @generated from protobuf field: optional uint32 uid = 1;
     */
    uid?: number;
    /**
     * @generated from protobuf field: optional int64 param = 5;
     */
    param?: bigint;
    /**
     * @generated from protobuf field: optional string online_id = 12;
     */
    onlineId?: string;
    /**
     * @generated from protobuf field: optional string nickname = 15;
     */
    nickname?: string;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleSettleRewardInfo
 */
export interface ScenePlayBattleSettleRewardInfo {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ItemParam reward_item_list = 4;
     */
    rewardItemList: ItemParam[];
    /**
     * @generated from protobuf field: optional uint32 uid = 3;
     */
    uid?: number;
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleResultNotify
 */
export interface ScenePlayBattleResultNotify {
    /**
     * @generated from protobuf field: optional bool is_win = 1;
     */
    isWin?: boolean;
    /**
     * @generated from protobuf field: optional uint32 cost_time = 7;
     */
    costTime?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 15;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional uint32 play_id = 11;
     */
    playId?: number;
    /**
     * @generated from protobuf field: repeated com.midnights.game.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4;
     */
    settlePlayerInfoList: ScenePlayBattleSettlePlayerInfo[];
    /**
     * @generated from protobuf field: repeated com.midnights.game.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14;
     */
    settleRewardInfoList: ScenePlayBattleSettleRewardInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleResultNotify.CmdId
 */
export enum ScenePlayBattleResultNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4398;
     */
    CMD_ID = 4398,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleUidOpNotify
 */
export interface ScenePlayBattleUidOpNotify {
    /**
     * @generated from protobuf field: optional uint32 op = 7;
     */
    op?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_target_list = 9;
     */
    paramTargetList: number[];
    /**
     * @generated from protobuf field: optional uint32 entity_id = 2;
     */
    entityId?: number;
    /**
     * @generated from protobuf field: optional string param_str = 3;
     */
    paramStr?: string;
    /**
     * @generated from protobuf field: repeated uint32 uid_list = 6;
     */
    uidList: number[];
    /**
     * @generated from protobuf field: optional uint32 param_index = 11;
     */
    paramIndex?: number;
    /**
     * @generated from protobuf field: optional uint32 play_type = 8;
     */
    playType?: number;
    /**
     * @generated from protobuf field: optional uint32 param_duration = 12;
     */
    paramDuration?: number;
    /**
     * @generated from protobuf field: repeated uint32 param_list = 15;
     */
    paramList: number[];
    /**
     * @generated from protobuf field: optional uint32 play_id = 5;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleUidOpNotify.CmdId
 */
export enum ScenePlayBattleUidOpNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4447;
     */
    CMD_ID = 4447,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayBattleInfoListNotify
 */
export interface ScenePlayBattleInfoListNotify {
    /**
     * @generated from protobuf field: repeated com.midnights.game.ScenePlayBattleInfo battle_info_list = 12;
     */
    battleInfoList: ScenePlayBattleInfo[];
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleInfoListNotify.CmdId
 */
export enum ScenePlayBattleInfoListNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4431;
     */
    CMD_ID = 4431,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1
}
/**
 * @generated from protobuf message com.midnights.game.ScenePlayOutofRegionNotify
 */
export interface ScenePlayOutofRegionNotify {
    /**
     * @generated from protobuf field: optional uint32 play_id = 13;
     */
    playId?: number;
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayOutofRegionNotify.CmdId
 */
export enum ScenePlayOutofRegionNotify_CmdId {
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    NONE = 0,
    /**
     * @generated from protobuf enum value: CMD_ID = 4355;
     */
    CMD_ID = 4355,
    /**
     * @generated from protobuf enum value: NONE = 0;
     */
    ENET_CHANNEL_ID = 0,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    ENET_IS_RELIABLE = 1,
    /**
     * @generated from protobuf enum value: ENET_IS_RELIABLE = 1;
     */
    IS_ALLOW_CLIENT = 1
}
/**
 * @generated from protobuf enum com.midnights.game.ScenePlayBattleState
 */
export enum ScenePlayBattleState {
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_NONE = 0;
     */
    SCENE_PLAY_BATTLE_NONE = 0,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_INIT = 1;
     */
    SCENE_PLAY_BATTLE_INIT = 1,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_PREPARE = 2;
     */
    SCENE_PLAY_BATTLE_PREPARE = 2,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_READY = 3;
     */
    SCENE_PLAY_BATTLE_READY = 3,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_PRESTART = 4;
     */
    SCENE_PLAY_BATTLE_PRESTART = 4,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_START = 5;
     */
    SCENE_PLAY_BATTLE_START = 5,
    /**
     * @generated from protobuf enum value: SCENE_PLAY_BATTLE_STOP = 6;
     */
    SCENE_PLAY_BATTLE_STOP = 6
}
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleInfo$Type extends MessageType<ScenePlayBattleInfo> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleInfo", [
            { no: 4, name: "mode", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "progress_stage_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 10, name: "start_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 14, name: "duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 7, name: "prepare_end_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "progress", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleInfo>): ScenePlayBattleInfo {
        const message = { progressStageList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleInfo): ScenePlayBattleInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 mode */ 4:
                    message.mode = reader.uint32();
                    break;
                case /* repeated uint32 progress_stage_list */ 3:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.progressStageList.push(reader.uint32());
                    else
                        message.progressStageList.push(reader.uint32());
                    break;
                case /* optional uint32 start_time */ 10:
                    message.startTime = reader.uint32();
                    break;
                case /* optional uint32 duration */ 14:
                    message.duration = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 12:
                    message.playType = reader.uint32();
                    break;
                case /* optional uint32 play_id */ 1:
                    message.playId = reader.uint32();
                    break;
                case /* optional uint32 prepare_end_time */ 7:
                    message.prepareEndTime = reader.uint32();
                    break;
                case /* optional uint32 progress */ 11:
                    message.progress = reader.uint32();
                    break;
                case /* optional uint32 state */ 8:
                    message.state = reader.uint32();
                    break;
                case /* optional uint32 type */ 9:
                    message.type = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 mode = 4; */
        if (message.mode !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.mode);
        /* repeated uint32 progress_stage_list = 3; */
        if (message.progressStageList.length) {
            writer.tag(3, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.progressStageList.length; i++)
                writer.uint32(message.progressStageList[i]);
            writer.join();
        }
        /* optional uint32 start_time = 10; */
        if (message.startTime !== undefined)
            writer.tag(10, WireType.Varint).uint32(message.startTime);
        /* optional uint32 duration = 14; */
        if (message.duration !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.duration);
        /* optional uint32 play_type = 12; */
        if (message.playType !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.playType);
        /* optional uint32 play_id = 1; */
        if (message.playId !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.playId);
        /* optional uint32 prepare_end_time = 7; */
        if (message.prepareEndTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.prepareEndTime);
        /* optional uint32 progress = 11; */
        if (message.progress !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.progress);
        /* optional uint32 state = 8; */
        if (message.state !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.state);
        /* optional uint32 type = 9; */
        if (message.type !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.type);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleInfo
 */
export const ScenePlayBattleInfo = new ScenePlayBattleInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleInfoNotify$Type extends MessageType<ScenePlayBattleInfoNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleInfoNotify", [
            { no: 11, name: "battle_info", kind: "message", T: () => ScenePlayBattleInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleInfoNotify>): ScenePlayBattleInfoNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleInfoNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleInfoNotify): ScenePlayBattleInfoNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional com.midnights.game.ScenePlayBattleInfo battle_info */ 11:
                    message.battleInfo = ScenePlayBattleInfo.internalBinaryRead(reader, reader.uint32(), options, message.battleInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleInfoNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional com.midnights.game.ScenePlayBattleInfo battle_info = 11; */
        if (message.battleInfo)
            ScenePlayBattleInfo.internalBinaryWrite(message.battleInfo, writer.tag(11, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleInfoNotify
 */
export const ScenePlayBattleInfoNotify = new ScenePlayBattleInfoNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOwnerCheckReq$Type extends MessageType<ScenePlayOwnerCheckReq> {
    constructor() {
        super("com.midnights.game.ScenePlayOwnerCheckReq", [
            { no: 9, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 6, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOwnerCheckReq>): ScenePlayOwnerCheckReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOwnerCheckReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOwnerCheckReq): ScenePlayOwnerCheckReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 play_id */ 9:
                    message.playId = reader.uint32();
                    break;
                case /* optional bool is_skip_match */ 6:
                    message.isSkipMatch = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOwnerCheckReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 play_id = 9; */
        if (message.playId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.playId);
        /* optional bool is_skip_match = 6; */
        if (message.isSkipMatch !== undefined)
            writer.tag(6, WireType.Varint).bool(message.isSkipMatch);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOwnerCheckReq
 */
export const ScenePlayOwnerCheckReq = new ScenePlayOwnerCheckReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOwnerCheckRsp$Type extends MessageType<ScenePlayOwnerCheckRsp> {
    constructor() {
        super("com.midnights.game.ScenePlayOwnerCheckRsp", [
            { no: 8, name: "param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 9, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "wrong_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOwnerCheckRsp>): ScenePlayOwnerCheckRsp {
        const message = { paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOwnerCheckRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOwnerCheckRsp): ScenePlayOwnerCheckRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated uint32 param_list */ 8:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.uint32());
                    else
                        message.paramList.push(reader.uint32());
                    break;
                case /* optional bool is_skip_match */ 1:
                    message.isSkipMatch = reader.bool();
                    break;
                case /* optional uint32 play_id */ 9:
                    message.playId = reader.uint32();
                    break;
                case /* optional uint32 wrong_uid */ 5:
                    message.wrongUid = reader.uint32();
                    break;
                case /* optional int32 retcode */ 3:
                    message.retcode = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOwnerCheckRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated uint32 param_list = 8; */
        if (message.paramList.length) {
            writer.tag(8, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramList.length; i++)
                writer.uint32(message.paramList[i]);
            writer.join();
        }
        /* optional bool is_skip_match = 1; */
        if (message.isSkipMatch !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isSkipMatch);
        /* optional uint32 play_id = 9; */
        if (message.playId !== undefined)
            writer.tag(9, WireType.Varint).uint32(message.playId);
        /* optional uint32 wrong_uid = 5; */
        if (message.wrongUid !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.wrongUid);
        /* optional int32 retcode = 3; */
        if (message.retcode !== undefined)
            writer.tag(3, WireType.Varint).int32(message.retcode);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOwnerCheckRsp
 */
export const ScenePlayOwnerCheckRsp = new ScenePlayOwnerCheckRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOwnerStartInviteReq$Type extends MessageType<ScenePlayOwnerStartInviteReq> {
    constructor() {
        super("com.midnights.game.ScenePlayOwnerStartInviteReq", [
            { no: 8, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 13, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOwnerStartInviteReq>): ScenePlayOwnerStartInviteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOwnerStartInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOwnerStartInviteReq): ScenePlayOwnerStartInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_skip_match */ 8:
                    message.isSkipMatch = reader.bool();
                    break;
                case /* optional uint32 play_id */ 13:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOwnerStartInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_skip_match = 8; */
        if (message.isSkipMatch !== undefined)
            writer.tag(8, WireType.Varint).bool(message.isSkipMatch);
        /* optional uint32 play_id = 13; */
        if (message.playId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOwnerStartInviteReq
 */
export const ScenePlayOwnerStartInviteReq = new ScenePlayOwnerStartInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOwnerStartInviteRsp$Type extends MessageType<ScenePlayOwnerStartInviteRsp> {
    constructor() {
        super("com.midnights.game.ScenePlayOwnerStartInviteRsp", [
            { no: 7, name: "is_skip_match", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 11, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOwnerStartInviteRsp>): ScenePlayOwnerStartInviteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOwnerStartInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOwnerStartInviteRsp): ScenePlayOwnerStartInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_skip_match */ 7:
                    message.isSkipMatch = reader.bool();
                    break;
                case /* optional int32 retcode */ 15:
                    message.retcode = reader.int32();
                    break;
                case /* optional uint32 play_id */ 11:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOwnerStartInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_skip_match = 7; */
        if (message.isSkipMatch !== undefined)
            writer.tag(7, WireType.Varint).bool(message.isSkipMatch);
        /* optional int32 retcode = 15; */
        if (message.retcode !== undefined)
            writer.tag(15, WireType.Varint).int32(message.retcode);
        /* optional uint32 play_id = 11; */
        if (message.playId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOwnerStartInviteRsp
 */
export const ScenePlayOwnerStartInviteRsp = new ScenePlayOwnerStartInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOwnerInviteNotify$Type extends MessageType<ScenePlayOwnerInviteNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayOwnerInviteNotify", [
            { no: 14, name: "invite_cd", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "is_remain_reward", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOwnerInviteNotify>): ScenePlayOwnerInviteNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOwnerInviteNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOwnerInviteNotify): ScenePlayOwnerInviteNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 invite_cd */ 14:
                    message.inviteCd = reader.uint32();
                    break;
                case /* optional uint32 play_id */ 5:
                    message.playId = reader.uint32();
                    break;
                case /* optional bool is_remain_reward */ 15:
                    message.isRemainReward = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOwnerInviteNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 invite_cd = 14; */
        if (message.inviteCd !== undefined)
            writer.tag(14, WireType.Varint).uint32(message.inviteCd);
        /* optional uint32 play_id = 5; */
        if (message.playId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.playId);
        /* optional bool is_remain_reward = 15; */
        if (message.isRemainReward !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isRemainReward);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOwnerInviteNotify
 */
export const ScenePlayOwnerInviteNotify = new ScenePlayOwnerInviteNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayGuestReplyInviteReq$Type extends MessageType<ScenePlayGuestReplyInviteReq> {
    constructor() {
        super("com.midnights.game.ScenePlayGuestReplyInviteReq", [
            { no: 15, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 6, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayGuestReplyInviteReq>): ScenePlayGuestReplyInviteReq {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayGuestReplyInviteReq>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayGuestReplyInviteReq): ScenePlayGuestReplyInviteReq {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_agree */ 15:
                    message.isAgree = reader.bool();
                    break;
                case /* optional uint32 play_id */ 6:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayGuestReplyInviteReq, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_agree = 15; */
        if (message.isAgree !== undefined)
            writer.tag(15, WireType.Varint).bool(message.isAgree);
        /* optional uint32 play_id = 6; */
        if (message.playId !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayGuestReplyInviteReq
 */
export const ScenePlayGuestReplyInviteReq = new ScenePlayGuestReplyInviteReq$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayGuestReplyInviteRsp$Type extends MessageType<ScenePlayGuestReplyInviteRsp> {
    constructor() {
        super("com.midnights.game.ScenePlayGuestReplyInviteRsp", [
            { no: 6, name: "retcode", kind: "scalar", opt: true, T: 5 /*ScalarType.INT32*/ },
            { no: 2, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 8, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayGuestReplyInviteRsp>): ScenePlayGuestReplyInviteRsp {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayGuestReplyInviteRsp>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayGuestReplyInviteRsp): ScenePlayGuestReplyInviteRsp {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional int32 retcode */ 6:
                    message.retcode = reader.int32();
                    break;
                case /* optional bool is_agree */ 2:
                    message.isAgree = reader.bool();
                    break;
                case /* optional uint32 play_id */ 8:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayGuestReplyInviteRsp, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional int32 retcode = 6; */
        if (message.retcode !== undefined)
            writer.tag(6, WireType.Varint).int32(message.retcode);
        /* optional bool is_agree = 2; */
        if (message.isAgree !== undefined)
            writer.tag(2, WireType.Varint).bool(message.isAgree);
        /* optional uint32 play_id = 8; */
        if (message.playId !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayGuestReplyInviteRsp
 */
export const ScenePlayGuestReplyInviteRsp = new ScenePlayGuestReplyInviteRsp$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayGuestReplyNotify$Type extends MessageType<ScenePlayGuestReplyNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayGuestReplyNotify", [
            { no: 13, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "guest_uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "is_agree", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayGuestReplyNotify>): ScenePlayGuestReplyNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayGuestReplyNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayGuestReplyNotify): ScenePlayGuestReplyNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 play_id */ 13:
                    message.playId = reader.uint32();
                    break;
                case /* optional uint32 guest_uid */ 12:
                    message.guestUid = reader.uint32();
                    break;
                case /* optional bool is_agree */ 3:
                    message.isAgree = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayGuestReplyNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 play_id = 13; */
        if (message.playId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.playId);
        /* optional uint32 guest_uid = 12; */
        if (message.guestUid !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.guestUid);
        /* optional bool is_agree = 3; */
        if (message.isAgree !== undefined)
            writer.tag(3, WireType.Varint).bool(message.isAgree);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayGuestReplyNotify
 */
export const ScenePlayGuestReplyNotify = new ScenePlayGuestReplyNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayInviteResultNotify$Type extends MessageType<ScenePlayInviteResultNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayInviteResultNotify", [
            { no: 11, name: "is_all_argee", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 15, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayInviteResultNotify>): ScenePlayInviteResultNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayInviteResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayInviteResultNotify): ScenePlayInviteResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_all_argee */ 11:
                    message.isAllArgee = reader.bool();
                    break;
                case /* optional uint32 play_id */ 15:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayInviteResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_all_argee = 11; */
        if (message.isAllArgee !== undefined)
            writer.tag(11, WireType.Varint).bool(message.isAllArgee);
        /* optional uint32 play_id = 15; */
        if (message.playId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayInviteResultNotify
 */
export const ScenePlayInviteResultNotify = new ScenePlayInviteResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayInfo$Type extends MessageType<ScenePlayInfo> {
    constructor() {
        super("com.midnights.game.ScenePlayInfo", [
            { no: 15, name: "entry_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "is_open", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayInfo>): ScenePlayInfo {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayInfo): ScenePlayInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 entry_id */ 15:
                    message.entryId = reader.uint32();
                    break;
                case /* optional uint32 play_id */ 11:
                    message.playId = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 3:
                    message.playType = reader.uint32();
                    break;
                case /* optional bool is_open */ 9:
                    message.isOpen = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 entry_id = 15; */
        if (message.entryId !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.entryId);
        /* optional uint32 play_id = 11; */
        if (message.playId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.playId);
        /* optional uint32 play_type = 3; */
        if (message.playType !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.playType);
        /* optional bool is_open = 9; */
        if (message.isOpen !== undefined)
            writer.tag(9, WireType.Varint).bool(message.isOpen);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayInfo
 */
export const ScenePlayInfo = new ScenePlayInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayInfoListNotify$Type extends MessageType<ScenePlayInfoListNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayInfoListNotify", [
            { no: 6, name: "play_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayInfoListNotify>): ScenePlayInfoListNotify {
        const message = { playInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayInfoListNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayInfoListNotify): ScenePlayInfoListNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ScenePlayInfo play_info_list */ 6:
                    message.playInfoList.push(ScenePlayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayInfoListNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ScenePlayInfo play_info_list = 6; */
        for (let i = 0; i < message.playInfoList.length; i++)
            ScenePlayInfo.internalBinaryWrite(message.playInfoList[i], writer.tag(6, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayInfoListNotify
 */
export const ScenePlayInfoListNotify = new ScenePlayInfoListNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleInterruptNotify$Type extends MessageType<ScenePlayBattleInterruptNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleInterruptNotify", [
            { no: 6, name: "interrupt_state", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleInterruptNotify>): ScenePlayBattleInterruptNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleInterruptNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleInterruptNotify): ScenePlayBattleInterruptNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 interrupt_state */ 6:
                    message.interruptState = reader.uint32();
                    break;
                case /* optional uint32 play_id */ 5:
                    message.playId = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 1:
                    message.playType = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleInterruptNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 interrupt_state = 6; */
        if (message.interruptState !== undefined)
            writer.tag(6, WireType.Varint).uint32(message.interruptState);
        /* optional uint32 play_id = 5; */
        if (message.playId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.playId);
        /* optional uint32 play_type = 1; */
        if (message.playType !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.playType);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleInterruptNotify
 */
export const ScenePlayBattleInterruptNotify = new ScenePlayBattleInterruptNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleSettlePlayerInfo$Type extends MessageType<ScenePlayBattleSettlePlayerInfo> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleSettlePlayerInfo", [
            { no: 14, name: "card_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ExhibitionDisplayInfo },
            { no: 10, name: "profile_picture", kind: "message", T: () => ProfilePicture },
            { no: 11, name: "head_image", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "statistic_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 1, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "param", kind: "scalar", opt: true, T: 3 /*ScalarType.INT64*/, L: 0 /*LongType.BIGINT*/ },
            { no: 12, name: "online_id", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 15, name: "nickname", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleSettlePlayerInfo>): ScenePlayBattleSettlePlayerInfo {
        const message = { cardList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleSettlePlayerInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleSettlePlayerInfo): ScenePlayBattleSettlePlayerInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ExhibitionDisplayInfo card_list */ 14:
                    message.cardList.push(ExhibitionDisplayInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional com.midnights.game.ProfilePicture profile_picture */ 10:
                    message.profilePicture = ProfilePicture.internalBinaryRead(reader, reader.uint32(), options, message.profilePicture);
                    break;
                case /* optional uint32 head_image */ 11:
                    message.headImage = reader.uint32();
                    break;
                case /* optional uint32 statistic_id */ 4:
                    message.statisticId = reader.uint32();
                    break;
                case /* optional uint32 uid */ 1:
                    message.uid = reader.uint32();
                    break;
                case /* optional int64 param */ 5:
                    message.param = reader.int64().toBigInt();
                    break;
                case /* optional string online_id */ 12:
                    message.onlineId = reader.string();
                    break;
                case /* optional string nickname */ 15:
                    message.nickname = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleSettlePlayerInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ExhibitionDisplayInfo card_list = 14; */
        for (let i = 0; i < message.cardList.length; i++)
            ExhibitionDisplayInfo.internalBinaryWrite(message.cardList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        /* optional com.midnights.game.ProfilePicture profile_picture = 10; */
        if (message.profilePicture)
            ProfilePicture.internalBinaryWrite(message.profilePicture, writer.tag(10, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 head_image = 11; */
        if (message.headImage !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.headImage);
        /* optional uint32 statistic_id = 4; */
        if (message.statisticId !== undefined)
            writer.tag(4, WireType.Varint).uint32(message.statisticId);
        /* optional uint32 uid = 1; */
        if (message.uid !== undefined)
            writer.tag(1, WireType.Varint).uint32(message.uid);
        /* optional int64 param = 5; */
        if (message.param !== undefined)
            writer.tag(5, WireType.Varint).int64(message.param);
        /* optional string online_id = 12; */
        if (message.onlineId !== undefined)
            writer.tag(12, WireType.LengthDelimited).string(message.onlineId);
        /* optional string nickname = 15; */
        if (message.nickname !== undefined)
            writer.tag(15, WireType.LengthDelimited).string(message.nickname);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleSettlePlayerInfo
 */
export const ScenePlayBattleSettlePlayerInfo = new ScenePlayBattleSettlePlayerInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleSettleRewardInfo$Type extends MessageType<ScenePlayBattleSettleRewardInfo> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleSettleRewardInfo", [
            { no: 4, name: "reward_item_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ItemParam },
            { no: 3, name: "uid", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleSettleRewardInfo>): ScenePlayBattleSettleRewardInfo {
        const message = { rewardItemList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleSettleRewardInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleSettleRewardInfo): ScenePlayBattleSettleRewardInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ItemParam reward_item_list */ 4:
                    message.rewardItemList.push(ItemParam.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* optional uint32 uid */ 3:
                    message.uid = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleSettleRewardInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ItemParam reward_item_list = 4; */
        for (let i = 0; i < message.rewardItemList.length; i++)
            ItemParam.internalBinaryWrite(message.rewardItemList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* optional uint32 uid = 3; */
        if (message.uid !== undefined)
            writer.tag(3, WireType.Varint).uint32(message.uid);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleSettleRewardInfo
 */
export const ScenePlayBattleSettleRewardInfo = new ScenePlayBattleSettleRewardInfo$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleResultNotify$Type extends MessageType<ScenePlayBattleResultNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleResultNotify", [
            { no: 1, name: "is_win", kind: "scalar", opt: true, T: 8 /*ScalarType.BOOL*/ },
            { no: 7, name: "cost_time", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 4, name: "settle_player_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayBattleSettlePlayerInfo },
            { no: 14, name: "settle_reward_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayBattleSettleRewardInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleResultNotify>): ScenePlayBattleResultNotify {
        const message = { settlePlayerInfoList: [], settleRewardInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleResultNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleResultNotify): ScenePlayBattleResultNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional bool is_win */ 1:
                    message.isWin = reader.bool();
                    break;
                case /* optional uint32 cost_time */ 7:
                    message.costTime = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 15:
                    message.playType = reader.uint32();
                    break;
                case /* optional uint32 play_id */ 11:
                    message.playId = reader.uint32();
                    break;
                case /* repeated com.midnights.game.ScenePlayBattleSettlePlayerInfo settle_player_info_list */ 4:
                    message.settlePlayerInfoList.push(ScenePlayBattleSettlePlayerInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                case /* repeated com.midnights.game.ScenePlayBattleSettleRewardInfo settle_reward_info_list */ 14:
                    message.settleRewardInfoList.push(ScenePlayBattleSettleRewardInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleResultNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional bool is_win = 1; */
        if (message.isWin !== undefined)
            writer.tag(1, WireType.Varint).bool(message.isWin);
        /* optional uint32 cost_time = 7; */
        if (message.costTime !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.costTime);
        /* optional uint32 play_type = 15; */
        if (message.playType !== undefined)
            writer.tag(15, WireType.Varint).uint32(message.playType);
        /* optional uint32 play_id = 11; */
        if (message.playId !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.playId);
        /* repeated com.midnights.game.ScenePlayBattleSettlePlayerInfo settle_player_info_list = 4; */
        for (let i = 0; i < message.settlePlayerInfoList.length; i++)
            ScenePlayBattleSettlePlayerInfo.internalBinaryWrite(message.settlePlayerInfoList[i], writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* repeated com.midnights.game.ScenePlayBattleSettleRewardInfo settle_reward_info_list = 14; */
        for (let i = 0; i < message.settleRewardInfoList.length; i++)
            ScenePlayBattleSettleRewardInfo.internalBinaryWrite(message.settleRewardInfoList[i], writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleResultNotify
 */
export const ScenePlayBattleResultNotify = new ScenePlayBattleResultNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleUidOpNotify$Type extends MessageType<ScenePlayBattleUidOpNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleUidOpNotify", [
            { no: 7, name: "op", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 9, name: "param_target_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 2, name: "entity_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 3, name: "param_str", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "uid_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 11, name: "param_index", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 8, name: "play_type", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 12, name: "param_duration", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ },
            { no: 15, name: "param_list", kind: "scalar", repeat: 1 /*RepeatType.PACKED*/, T: 13 /*ScalarType.UINT32*/ },
            { no: 5, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleUidOpNotify>): ScenePlayBattleUidOpNotify {
        const message = { paramTargetList: [], uidList: [], paramList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleUidOpNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleUidOpNotify): ScenePlayBattleUidOpNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 op */ 7:
                    message.op = reader.uint32();
                    break;
                case /* repeated uint32 param_target_list */ 9:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramTargetList.push(reader.uint32());
                    else
                        message.paramTargetList.push(reader.uint32());
                    break;
                case /* optional uint32 entity_id */ 2:
                    message.entityId = reader.uint32();
                    break;
                case /* optional string param_str */ 3:
                    message.paramStr = reader.string();
                    break;
                case /* repeated uint32 uid_list */ 6:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.uidList.push(reader.uint32());
                    else
                        message.uidList.push(reader.uint32());
                    break;
                case /* optional uint32 param_index */ 11:
                    message.paramIndex = reader.uint32();
                    break;
                case /* optional uint32 play_type */ 8:
                    message.playType = reader.uint32();
                    break;
                case /* optional uint32 param_duration */ 12:
                    message.paramDuration = reader.uint32();
                    break;
                case /* repeated uint32 param_list */ 15:
                    if (wireType === WireType.LengthDelimited)
                        for (let e = reader.int32() + reader.pos; reader.pos < e;)
                            message.paramList.push(reader.uint32());
                    else
                        message.paramList.push(reader.uint32());
                    break;
                case /* optional uint32 play_id */ 5:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleUidOpNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 op = 7; */
        if (message.op !== undefined)
            writer.tag(7, WireType.Varint).uint32(message.op);
        /* repeated uint32 param_target_list = 9; */
        if (message.paramTargetList.length) {
            writer.tag(9, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramTargetList.length; i++)
                writer.uint32(message.paramTargetList[i]);
            writer.join();
        }
        /* optional uint32 entity_id = 2; */
        if (message.entityId !== undefined)
            writer.tag(2, WireType.Varint).uint32(message.entityId);
        /* optional string param_str = 3; */
        if (message.paramStr !== undefined)
            writer.tag(3, WireType.LengthDelimited).string(message.paramStr);
        /* repeated uint32 uid_list = 6; */
        if (message.uidList.length) {
            writer.tag(6, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.uidList.length; i++)
                writer.uint32(message.uidList[i]);
            writer.join();
        }
        /* optional uint32 param_index = 11; */
        if (message.paramIndex !== undefined)
            writer.tag(11, WireType.Varint).uint32(message.paramIndex);
        /* optional uint32 play_type = 8; */
        if (message.playType !== undefined)
            writer.tag(8, WireType.Varint).uint32(message.playType);
        /* optional uint32 param_duration = 12; */
        if (message.paramDuration !== undefined)
            writer.tag(12, WireType.Varint).uint32(message.paramDuration);
        /* repeated uint32 param_list = 15; */
        if (message.paramList.length) {
            writer.tag(15, WireType.LengthDelimited).fork();
            for (let i = 0; i < message.paramList.length; i++)
                writer.uint32(message.paramList[i]);
            writer.join();
        }
        /* optional uint32 play_id = 5; */
        if (message.playId !== undefined)
            writer.tag(5, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleUidOpNotify
 */
export const ScenePlayBattleUidOpNotify = new ScenePlayBattleUidOpNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayBattleInfoListNotify$Type extends MessageType<ScenePlayBattleInfoListNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayBattleInfoListNotify", [
            { no: 12, name: "battle_info_list", kind: "message", repeat: 1 /*RepeatType.PACKED*/, T: () => ScenePlayBattleInfo }
        ]);
    }
    create(value?: PartialMessage<ScenePlayBattleInfoListNotify>): ScenePlayBattleInfoListNotify {
        const message = { battleInfoList: [] };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayBattleInfoListNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayBattleInfoListNotify): ScenePlayBattleInfoListNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* repeated com.midnights.game.ScenePlayBattleInfo battle_info_list */ 12:
                    message.battleInfoList.push(ScenePlayBattleInfo.internalBinaryRead(reader, reader.uint32(), options));
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayBattleInfoListNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* repeated com.midnights.game.ScenePlayBattleInfo battle_info_list = 12; */
        for (let i = 0; i < message.battleInfoList.length; i++)
            ScenePlayBattleInfo.internalBinaryWrite(message.battleInfoList[i], writer.tag(12, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayBattleInfoListNotify
 */
export const ScenePlayBattleInfoListNotify = new ScenePlayBattleInfoListNotify$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ScenePlayOutofRegionNotify$Type extends MessageType<ScenePlayOutofRegionNotify> {
    constructor() {
        super("com.midnights.game.ScenePlayOutofRegionNotify", [
            { no: 13, name: "play_id", kind: "scalar", opt: true, T: 13 /*ScalarType.UINT32*/ }
        ]);
    }
    create(value?: PartialMessage<ScenePlayOutofRegionNotify>): ScenePlayOutofRegionNotify {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<ScenePlayOutofRegionNotify>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ScenePlayOutofRegionNotify): ScenePlayOutofRegionNotify {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional uint32 play_id */ 13:
                    message.playId = reader.uint32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ScenePlayOutofRegionNotify, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional uint32 play_id = 13; */
        if (message.playId !== undefined)
            writer.tag(13, WireType.Varint).uint32(message.playId);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message com.midnights.game.ScenePlayOutofRegionNotify
 */
export const ScenePlayOutofRegionNotify = new ScenePlayOutofRegionNotify$Type();
