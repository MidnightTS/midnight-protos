// @generated by protobuf-ts 2.8.2 with parameter output_typescript
// @generated from protobuf file "VintageActivityDetailInfo.proto" (syntax proto3)
// tslint:disable
//
// Sorapointa - A server software re-implementation for a certain anime game, and avoid sorapointa.
// Copyright (C) 2022  Sorapointa Team
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public License
// along with this program.  If not, see <https://www.gnu.org/licenses/>.
//
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
import { VintageMarketInfo } from "./VintageMarketInfo";
import { VintageCampChallengeStageData } from "./VintageCampChallengeStageData";
import { VintageBoothUsedItemData } from "./VintageBoothUsedItemData";
import { VintageHuntingStageData } from "./VintageHuntingStageData";
import { VintagePresentStageData } from "./VintagePresentStageData";
/**
 * @generated from protobuf message VintageActivityDetailInfo
 */
export interface VintageActivityDetailInfo {
    /**
     * @generated from protobuf field: map<uint32, VintagePresentStageData> Unk3300_PCIIGPJJHGF = 11 [json_name = "Unk3300PCIIGPJJHGF"];
     */
    unk3300PCIIGPJJHGF: {
        [key: number]: VintagePresentStageData;
    };
    /**
     * @generated from protobuf field: bool is_content_closed = 13;
     */
    isContentClosed: boolean;
    /**
     * @generated from protobuf field: map<uint32, VintageHuntingStageData> Unk3300_EHHPFKIOKOO = 10 [json_name = "Unk3300EHHPFKIOKOO"];
     */
    unk3300EHHPFKIOKOO: {
        [key: number]: VintageHuntingStageData;
    };
    /**
     * @generated from protobuf field: VintageBoothUsedItemData booth_data = 9;
     */
    boothData?: VintageBoothUsedItemData;
    /**
     * @generated from protobuf field: map<uint32, VintageCampChallengeStageData> Unk3300_NPKMDFCLGBJ = 2 [json_name = "Unk3300NPKMDFCLGBJ"];
     */
    unk3300NPKMDFCLGBJ: {
        [key: number]: VintageCampChallengeStageData;
    };
    /**
     * @generated from protobuf field: VintageMarketInfo market_info = 14;
     */
    marketInfo?: VintageMarketInfo;
}
// @generated message type with reflection information, may provide speed optimized methods
class VintageActivityDetailInfo$Type extends MessageType<VintageActivityDetailInfo> {
    constructor() {
        super("VintageActivityDetailInfo", [
            { no: 11, name: "Unk3300_PCIIGPJJHGF", kind: "map", jsonName: "Unk3300PCIIGPJJHGF", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintagePresentStageData } },
            { no: 13, name: "is_content_closed", kind: "scalar", T: 8 /*ScalarType.BOOL*/ },
            { no: 10, name: "Unk3300_EHHPFKIOKOO", kind: "map", jsonName: "Unk3300EHHPFKIOKOO", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageHuntingStageData } },
            { no: 9, name: "booth_data", kind: "message", T: () => VintageBoothUsedItemData },
            { no: 2, name: "Unk3300_NPKMDFCLGBJ", kind: "map", jsonName: "Unk3300NPKMDFCLGBJ", K: 13 /*ScalarType.UINT32*/, V: { kind: "message", T: () => VintageCampChallengeStageData } },
            { no: 14, name: "market_info", kind: "message", T: () => VintageMarketInfo }
        ]);
    }
    create(value?: PartialMessage<VintageActivityDetailInfo>): VintageActivityDetailInfo {
        const message = { unk3300PCIIGPJJHGF: {}, isContentClosed: false, unk3300EHHPFKIOKOO: {}, unk3300NPKMDFCLGBJ: {} };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<VintageActivityDetailInfo>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: VintageActivityDetailInfo): VintageActivityDetailInfo {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* map<uint32, VintagePresentStageData> Unk3300_PCIIGPJJHGF = 11 [json_name = "Unk3300PCIIGPJJHGF"];*/ 11:
                    this.binaryReadMap11(message.unk3300PCIIGPJJHGF, reader, options);
                    break;
                case /* bool is_content_closed */ 13:
                    message.isContentClosed = reader.bool();
                    break;
                case /* map<uint32, VintageHuntingStageData> Unk3300_EHHPFKIOKOO = 10 [json_name = "Unk3300EHHPFKIOKOO"];*/ 10:
                    this.binaryReadMap10(message.unk3300EHHPFKIOKOO, reader, options);
                    break;
                case /* VintageBoothUsedItemData booth_data */ 9:
                    message.boothData = VintageBoothUsedItemData.internalBinaryRead(reader, reader.uint32(), options, message.boothData);
                    break;
                case /* map<uint32, VintageCampChallengeStageData> Unk3300_NPKMDFCLGBJ = 2 [json_name = "Unk3300NPKMDFCLGBJ"];*/ 2:
                    this.binaryReadMap2(message.unk3300NPKMDFCLGBJ, reader, options);
                    break;
                case /* VintageMarketInfo market_info */ 14:
                    message.marketInfo = VintageMarketInfo.internalBinaryRead(reader, reader.uint32(), options, message.marketInfo);
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    private binaryReadMap11(map: VintageActivityDetailInfo["unk3300PCIIGPJJHGF"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["unk3300PCIIGPJJHGF"] | undefined, val: VintageActivityDetailInfo["unk3300PCIIGPJJHGF"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintagePresentStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field VintageActivityDetailInfo.Unk3300_PCIIGPJJHGF");
            }
        }
        map[key ?? 0] = val ?? VintagePresentStageData.create();
    }
    private binaryReadMap10(map: VintageActivityDetailInfo["unk3300EHHPFKIOKOO"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["unk3300EHHPFKIOKOO"] | undefined, val: VintageActivityDetailInfo["unk3300EHHPFKIOKOO"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageHuntingStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field VintageActivityDetailInfo.Unk3300_EHHPFKIOKOO");
            }
        }
        map[key ?? 0] = val ?? VintageHuntingStageData.create();
    }
    private binaryReadMap2(map: VintageActivityDetailInfo["unk3300NPKMDFCLGBJ"], reader: IBinaryReader, options: BinaryReadOptions): void {
        let len = reader.uint32(), end = reader.pos + len, key: keyof VintageActivityDetailInfo["unk3300NPKMDFCLGBJ"] | undefined, val: VintageActivityDetailInfo["unk3300NPKMDFCLGBJ"][any] | undefined;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    key = reader.uint32();
                    break;
                case 2:
                    val = VintageCampChallengeStageData.internalBinaryRead(reader, reader.uint32(), options);
                    break;
                default: throw new globalThis.Error("unknown map entry field for field VintageActivityDetailInfo.Unk3300_NPKMDFCLGBJ");
            }
        }
        map[key ?? 0] = val ?? VintageCampChallengeStageData.create();
    }
    internalBinaryWrite(message: VintageActivityDetailInfo, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* map<uint32, VintagePresentStageData> Unk3300_PCIIGPJJHGF = 11 [json_name = "Unk3300PCIIGPJJHGF"]; */
        for (let k of Object.keys(message.unk3300PCIIGPJJHGF)) {
            writer.tag(11, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintagePresentStageData.internalBinaryWrite(message.unk3300PCIIGPJJHGF[k as any], writer, options);
            writer.join().join();
        }
        /* bool is_content_closed = 13; */
        if (message.isContentClosed !== false)
            writer.tag(13, WireType.Varint).bool(message.isContentClosed);
        /* map<uint32, VintageHuntingStageData> Unk3300_EHHPFKIOKOO = 10 [json_name = "Unk3300EHHPFKIOKOO"]; */
        for (let k of Object.keys(message.unk3300EHHPFKIOKOO)) {
            writer.tag(10, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageHuntingStageData.internalBinaryWrite(message.unk3300EHHPFKIOKOO[k as any], writer, options);
            writer.join().join();
        }
        /* VintageBoothUsedItemData booth_data = 9; */
        if (message.boothData)
            VintageBoothUsedItemData.internalBinaryWrite(message.boothData, writer.tag(9, WireType.LengthDelimited).fork(), options).join();
        /* map<uint32, VintageCampChallengeStageData> Unk3300_NPKMDFCLGBJ = 2 [json_name = "Unk3300NPKMDFCLGBJ"]; */
        for (let k of Object.keys(message.unk3300NPKMDFCLGBJ)) {
            writer.tag(2, WireType.LengthDelimited).fork().tag(1, WireType.Varint).uint32(parseInt(k));
            writer.tag(2, WireType.LengthDelimited).fork();
            VintageCampChallengeStageData.internalBinaryWrite(message.unk3300NPKMDFCLGBJ[k as any], writer, options);
            writer.join().join();
        }
        /* VintageMarketInfo market_info = 14; */
        if (message.marketInfo)
            VintageMarketInfo.internalBinaryWrite(message.marketInfo, writer.tag(14, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message VintageActivityDetailInfo
 */
export const VintageActivityDetailInfo = new VintageActivityDetailInfo$Type();
