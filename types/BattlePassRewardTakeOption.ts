/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: BattlePassRewardTakeOption.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./BattlePassRewardTag";
import * as pb_1 from "google-protobuf";
export class BattlePassRewardTakeOption extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        tag?: dependency_1.BattlePassRewardTag;
        option_idx?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("tag" in data && data.tag != undefined) {
                this.tag = data.tag;
            }
            if ("option_idx" in data && data.option_idx != undefined) {
                this.option_idx = data.option_idx;
            }
        }
    }
    get tag() {
        return pb_1.Message.getWrapperField(this, dependency_1.BattlePassRewardTag, 10) as dependency_1.BattlePassRewardTag;
    }
    set tag(value: dependency_1.BattlePassRewardTag) {
        pb_1.Message.setWrapperField(this, 10, value);
    }
    get has_tag() {
        return pb_1.Message.getField(this, 10) != null;
    }
    get option_idx() {
        return pb_1.Message.getFieldWithDefault(this, 14, 0) as number;
    }
    set option_idx(value: number) {
        pb_1.Message.setField(this, 14, value);
    }
    static fromObject(data: {
        tag?: ReturnType<typeof dependency_1.BattlePassRewardTag.prototype.toObject>;
        option_idx?: number;
    }): BattlePassRewardTakeOption {
        const message = new BattlePassRewardTakeOption({});
        if (data.tag != null) {
            message.tag = dependency_1.BattlePassRewardTag.fromObject(data.tag);
        }
        if (data.option_idx != null) {
            message.option_idx = data.option_idx;
        }
        return message;
    }
    toObject() {
        const data: {
            tag?: ReturnType<typeof dependency_1.BattlePassRewardTag.prototype.toObject>;
            option_idx?: number;
        } = {};
        if (this.tag != null) {
            data.tag = this.tag.toObject();
        }
        if (this.option_idx != null) {
            data.option_idx = this.option_idx;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_tag)
            writer.writeMessage(10, this.tag, () => this.tag.serialize(writer));
        if (this.option_idx != 0)
            writer.writeUint32(14, this.option_idx);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BattlePassRewardTakeOption {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BattlePassRewardTakeOption();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 10:
                    reader.readMessage(message.tag, () => message.tag = dependency_1.BattlePassRewardTag.deserialize(reader));
                    break;
                case 14:
                    message.option_idx = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BattlePassRewardTakeOption {
        return BattlePassRewardTakeOption.deserialize(bytes);
    }
}
