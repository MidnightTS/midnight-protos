/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: GetCityHuntingOfferRsp.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./HuntingOfferData";
import * as dependency_2 from "./HuntingPair";
import * as pb_1 from "google-protobuf";
export class GetCityHuntingOfferRsp extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        retcode?: number;
        hunting_offer_list?: dependency_1.HuntingOfferData[];
        city_id?: number;
        ongoing_hunting_pair?: dependency_2.HuntingPair;
        cur_week_finished_count?: number;
        next_refresh_time?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [13], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("retcode" in data && data.retcode != undefined) {
                this.retcode = data.retcode;
            }
            if ("hunting_offer_list" in data && data.hunting_offer_list != undefined) {
                this.hunting_offer_list = data.hunting_offer_list;
            }
            if ("city_id" in data && data.city_id != undefined) {
                this.city_id = data.city_id;
            }
            if ("ongoing_hunting_pair" in data && data.ongoing_hunting_pair != undefined) {
                this.ongoing_hunting_pair = data.ongoing_hunting_pair;
            }
            if ("cur_week_finished_count" in data && data.cur_week_finished_count != undefined) {
                this.cur_week_finished_count = data.cur_week_finished_count;
            }
            if ("next_refresh_time" in data && data.next_refresh_time != undefined) {
                this.next_refresh_time = data.next_refresh_time;
            }
        }
    }
    get retcode() {
        return pb_1.Message.getFieldWithDefault(this, 9, 0) as number;
    }
    set retcode(value: number) {
        pb_1.Message.setField(this, 9, value);
    }
    get hunting_offer_list() {
        return pb_1.Message.getRepeatedWrapperField(this, dependency_1.HuntingOfferData, 13) as dependency_1.HuntingOfferData[];
    }
    set hunting_offer_list(value: dependency_1.HuntingOfferData[]) {
        pb_1.Message.setRepeatedWrapperField(this, 13, value);
    }
    get city_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set city_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get ongoing_hunting_pair() {
        return pb_1.Message.getWrapperField(this, dependency_2.HuntingPair, 8) as dependency_2.HuntingPair;
    }
    set ongoing_hunting_pair(value: dependency_2.HuntingPair) {
        pb_1.Message.setWrapperField(this, 8, value);
    }
    get has_ongoing_hunting_pair() {
        return pb_1.Message.getField(this, 8) != null;
    }
    get cur_week_finished_count() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set cur_week_finished_count(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get next_refresh_time() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set next_refresh_time(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    static fromObject(data: {
        retcode?: number;
        hunting_offer_list?: ReturnType<typeof dependency_1.HuntingOfferData.prototype.toObject>[];
        city_id?: number;
        ongoing_hunting_pair?: ReturnType<typeof dependency_2.HuntingPair.prototype.toObject>;
        cur_week_finished_count?: number;
        next_refresh_time?: number;
    }): GetCityHuntingOfferRsp {
        const message = new GetCityHuntingOfferRsp({});
        if (data.retcode != null) {
            message.retcode = data.retcode;
        }
        if (data.hunting_offer_list != null) {
            message.hunting_offer_list = data.hunting_offer_list.map(item => dependency_1.HuntingOfferData.fromObject(item));
        }
        if (data.city_id != null) {
            message.city_id = data.city_id;
        }
        if (data.ongoing_hunting_pair != null) {
            message.ongoing_hunting_pair = dependency_2.HuntingPair.fromObject(data.ongoing_hunting_pair);
        }
        if (data.cur_week_finished_count != null) {
            message.cur_week_finished_count = data.cur_week_finished_count;
        }
        if (data.next_refresh_time != null) {
            message.next_refresh_time = data.next_refresh_time;
        }
        return message;
    }
    toObject() {
        const data: {
            retcode?: number;
            hunting_offer_list?: ReturnType<typeof dependency_1.HuntingOfferData.prototype.toObject>[];
            city_id?: number;
            ongoing_hunting_pair?: ReturnType<typeof dependency_2.HuntingPair.prototype.toObject>;
            cur_week_finished_count?: number;
            next_refresh_time?: number;
        } = {};
        if (this.retcode != null) {
            data.retcode = this.retcode;
        }
        if (this.hunting_offer_list != null) {
            data.hunting_offer_list = this.hunting_offer_list.map((item: dependency_1.HuntingOfferData) => item.toObject());
        }
        if (this.city_id != null) {
            data.city_id = this.city_id;
        }
        if (this.ongoing_hunting_pair != null) {
            data.ongoing_hunting_pair = this.ongoing_hunting_pair.toObject();
        }
        if (this.cur_week_finished_count != null) {
            data.cur_week_finished_count = this.cur_week_finished_count;
        }
        if (this.next_refresh_time != null) {
            data.next_refresh_time = this.next_refresh_time;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.retcode != 0)
            writer.writeInt32(9, this.retcode);
        if (this.hunting_offer_list.length)
            writer.writeRepeatedMessage(13, this.hunting_offer_list, (item: dependency_1.HuntingOfferData) => item.serialize(writer));
        if (this.city_id != 0)
            writer.writeUint32(2, this.city_id);
        if (this.has_ongoing_hunting_pair)
            writer.writeMessage(8, this.ongoing_hunting_pair, () => this.ongoing_hunting_pair.serialize(writer));
        if (this.cur_week_finished_count != 0)
            writer.writeUint32(1, this.cur_week_finished_count);
        if (this.next_refresh_time != 0)
            writer.writeUint32(4, this.next_refresh_time);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GetCityHuntingOfferRsp {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GetCityHuntingOfferRsp();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 9:
                    message.retcode = reader.readInt32();
                    break;
                case 13:
                    reader.readMessage(message.hunting_offer_list, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_1.HuntingOfferData.deserialize(reader), dependency_1.HuntingOfferData));
                    break;
                case 2:
                    message.city_id = reader.readUint32();
                    break;
                case 8:
                    reader.readMessage(message.ongoing_hunting_pair, () => message.ongoing_hunting_pair = dependency_2.HuntingPair.deserialize(reader));
                    break;
                case 1:
                    message.cur_week_finished_count = reader.readUint32();
                    break;
                case 4:
                    message.next_refresh_time = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): GetCityHuntingOfferRsp {
        return GetCityHuntingOfferRsp.deserialize(bytes);
    }
}
