/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PacketHead.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export class PacketHead extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        packet_id?: number;
        rpc_id?: number;
        client_sequence_id?: number;
        enet_channel_id?: number;
        enet_is_reliable?: number;
        sent_ms?: number;
        user_id?: number;
        user_ip?: number;
        user_session_id?: number;
        recv_time_ms?: number;
        rpc_begin_time_ms?: number;
        ext_map?: Map<number, number>;
        sender_app_id?: number;
        source_service?: number;
        target_service?: number;
        service_app_id_map?: Map<number, number>;
        is_set_game_thread?: boolean;
        game_thread_index?: number;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("packet_id" in data && data.packet_id != undefined) {
                this.packet_id = data.packet_id;
            }
            if ("rpc_id" in data && data.rpc_id != undefined) {
                this.rpc_id = data.rpc_id;
            }
            if ("client_sequence_id" in data && data.client_sequence_id != undefined) {
                this.client_sequence_id = data.client_sequence_id;
            }
            if ("enet_channel_id" in data && data.enet_channel_id != undefined) {
                this.enet_channel_id = data.enet_channel_id;
            }
            if ("enet_is_reliable" in data && data.enet_is_reliable != undefined) {
                this.enet_is_reliable = data.enet_is_reliable;
            }
            if ("sent_ms" in data && data.sent_ms != undefined) {
                this.sent_ms = data.sent_ms;
            }
            if ("user_id" in data && data.user_id != undefined) {
                this.user_id = data.user_id;
            }
            if ("user_ip" in data && data.user_ip != undefined) {
                this.user_ip = data.user_ip;
            }
            if ("user_session_id" in data && data.user_session_id != undefined) {
                this.user_session_id = data.user_session_id;
            }
            if ("recv_time_ms" in data && data.recv_time_ms != undefined) {
                this.recv_time_ms = data.recv_time_ms;
            }
            if ("rpc_begin_time_ms" in data && data.rpc_begin_time_ms != undefined) {
                this.rpc_begin_time_ms = data.rpc_begin_time_ms;
            }
            if ("ext_map" in data && data.ext_map != undefined) {
                this.ext_map = data.ext_map;
            }
            if ("sender_app_id" in data && data.sender_app_id != undefined) {
                this.sender_app_id = data.sender_app_id;
            }
            if ("source_service" in data && data.source_service != undefined) {
                this.source_service = data.source_service;
            }
            if ("target_service" in data && data.target_service != undefined) {
                this.target_service = data.target_service;
            }
            if ("service_app_id_map" in data && data.service_app_id_map != undefined) {
                this.service_app_id_map = data.service_app_id_map;
            }
            if ("is_set_game_thread" in data && data.is_set_game_thread != undefined) {
                this.is_set_game_thread = data.is_set_game_thread;
            }
            if ("game_thread_index" in data && data.game_thread_index != undefined) {
                this.game_thread_index = data.game_thread_index;
            }
        }
        if (!this.ext_map)
            this.ext_map = new Map();
        if (!this.service_app_id_map)
            this.service_app_id_map = new Map();
    }
    get packet_id() {
        return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
    }
    set packet_id(value: number) {
        pb_1.Message.setField(this, 1, value);
    }
    get rpc_id() {
        return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
    }
    set rpc_id(value: number) {
        pb_1.Message.setField(this, 2, value);
    }
    get client_sequence_id() {
        return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
    }
    set client_sequence_id(value: number) {
        pb_1.Message.setField(this, 3, value);
    }
    get enet_channel_id() {
        return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
    }
    set enet_channel_id(value: number) {
        pb_1.Message.setField(this, 4, value);
    }
    get enet_is_reliable() {
        return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
    }
    set enet_is_reliable(value: number) {
        pb_1.Message.setField(this, 5, value);
    }
    get sent_ms() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set sent_ms(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get user_id() {
        return pb_1.Message.getFieldWithDefault(this, 11, 0) as number;
    }
    set user_id(value: number) {
        pb_1.Message.setField(this, 11, value);
    }
    get user_ip() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set user_ip(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get user_session_id() {
        return pb_1.Message.getFieldWithDefault(this, 13, 0) as number;
    }
    set user_session_id(value: number) {
        pb_1.Message.setField(this, 13, value);
    }
    get recv_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 21, 0) as number;
    }
    set recv_time_ms(value: number) {
        pb_1.Message.setField(this, 21, value);
    }
    get rpc_begin_time_ms() {
        return pb_1.Message.getFieldWithDefault(this, 22, 0) as number;
    }
    set rpc_begin_time_ms(value: number) {
        pb_1.Message.setField(this, 22, value);
    }
    get ext_map() {
        return pb_1.Message.getField(this, 23) as any as Map<number, number>;
    }
    set ext_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 23, value as any);
    }
    get sender_app_id() {
        return pb_1.Message.getFieldWithDefault(this, 24, 0) as number;
    }
    set sender_app_id(value: number) {
        pb_1.Message.setField(this, 24, value);
    }
    get source_service() {
        return pb_1.Message.getFieldWithDefault(this, 31, 0) as number;
    }
    set source_service(value: number) {
        pb_1.Message.setField(this, 31, value);
    }
    get target_service() {
        return pb_1.Message.getFieldWithDefault(this, 32, 0) as number;
    }
    set target_service(value: number) {
        pb_1.Message.setField(this, 32, value);
    }
    get service_app_id_map() {
        return pb_1.Message.getField(this, 33) as any as Map<number, number>;
    }
    set service_app_id_map(value: Map<number, number>) {
        pb_1.Message.setField(this, 33, value as any);
    }
    get is_set_game_thread() {
        return pb_1.Message.getFieldWithDefault(this, 34, false) as boolean;
    }
    set is_set_game_thread(value: boolean) {
        pb_1.Message.setField(this, 34, value);
    }
    get game_thread_index() {
        return pb_1.Message.getFieldWithDefault(this, 35, 0) as number;
    }
    set game_thread_index(value: number) {
        pb_1.Message.setField(this, 35, value);
    }
    static fromObject(data: {
        packet_id?: number;
        rpc_id?: number;
        client_sequence_id?: number;
        enet_channel_id?: number;
        enet_is_reliable?: number;
        sent_ms?: number;
        user_id?: number;
        user_ip?: number;
        user_session_id?: number;
        recv_time_ms?: number;
        rpc_begin_time_ms?: number;
        ext_map?: {
            [key: number]: number;
        };
        sender_app_id?: number;
        source_service?: number;
        target_service?: number;
        service_app_id_map?: {
            [key: number]: number;
        };
        is_set_game_thread?: boolean;
        game_thread_index?: number;
    }): PacketHead {
        const message = new PacketHead({});
        if (data.packet_id != null) {
            message.packet_id = data.packet_id;
        }
        if (data.rpc_id != null) {
            message.rpc_id = data.rpc_id;
        }
        if (data.client_sequence_id != null) {
            message.client_sequence_id = data.client_sequence_id;
        }
        if (data.enet_channel_id != null) {
            message.enet_channel_id = data.enet_channel_id;
        }
        if (data.enet_is_reliable != null) {
            message.enet_is_reliable = data.enet_is_reliable;
        }
        if (data.sent_ms != null) {
            message.sent_ms = data.sent_ms;
        }
        if (data.user_id != null) {
            message.user_id = data.user_id;
        }
        if (data.user_ip != null) {
            message.user_ip = data.user_ip;
        }
        if (data.user_session_id != null) {
            message.user_session_id = data.user_session_id;
        }
        if (data.recv_time_ms != null) {
            message.recv_time_ms = data.recv_time_ms;
        }
        if (data.rpc_begin_time_ms != null) {
            message.rpc_begin_time_ms = data.rpc_begin_time_ms;
        }
        if (typeof data.ext_map == "object") {
            message.ext_map = new Map(Object.entries(data.ext_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.sender_app_id != null) {
            message.sender_app_id = data.sender_app_id;
        }
        if (data.source_service != null) {
            message.source_service = data.source_service;
        }
        if (data.target_service != null) {
            message.target_service = data.target_service;
        }
        if (typeof data.service_app_id_map == "object") {
            message.service_app_id_map = new Map(Object.entries(data.service_app_id_map).map(([key, value]) => [Number(key), value]));
        }
        if (data.is_set_game_thread != null) {
            message.is_set_game_thread = data.is_set_game_thread;
        }
        if (data.game_thread_index != null) {
            message.game_thread_index = data.game_thread_index;
        }
        return message;
    }
    toObject() {
        const data: {
            packet_id?: number;
            rpc_id?: number;
            client_sequence_id?: number;
            enet_channel_id?: number;
            enet_is_reliable?: number;
            sent_ms?: number;
            user_id?: number;
            user_ip?: number;
            user_session_id?: number;
            recv_time_ms?: number;
            rpc_begin_time_ms?: number;
            ext_map?: {
                [key: number]: number;
            };
            sender_app_id?: number;
            source_service?: number;
            target_service?: number;
            service_app_id_map?: {
                [key: number]: number;
            };
            is_set_game_thread?: boolean;
            game_thread_index?: number;
        } = {};
        if (this.packet_id != null) {
            data.packet_id = this.packet_id;
        }
        if (this.rpc_id != null) {
            data.rpc_id = this.rpc_id;
        }
        if (this.client_sequence_id != null) {
            data.client_sequence_id = this.client_sequence_id;
        }
        if (this.enet_channel_id != null) {
            data.enet_channel_id = this.enet_channel_id;
        }
        if (this.enet_is_reliable != null) {
            data.enet_is_reliable = this.enet_is_reliable;
        }
        if (this.sent_ms != null) {
            data.sent_ms = this.sent_ms;
        }
        if (this.user_id != null) {
            data.user_id = this.user_id;
        }
        if (this.user_ip != null) {
            data.user_ip = this.user_ip;
        }
        if (this.user_session_id != null) {
            data.user_session_id = this.user_session_id;
        }
        if (this.recv_time_ms != null) {
            data.recv_time_ms = this.recv_time_ms;
        }
        if (this.rpc_begin_time_ms != null) {
            data.rpc_begin_time_ms = this.rpc_begin_time_ms;
        }
        if (this.ext_map.size > 0) {
            data.ext_map = (Object.fromEntries)(this.ext_map);
        }
        if (this.sender_app_id != null) {
            data.sender_app_id = this.sender_app_id;
        }
        if (this.source_service != null) {
            data.source_service = this.source_service;
        }
        if (this.target_service != null) {
            data.target_service = this.target_service;
        }
        if (this.service_app_id_map.size > 0) {
            data.service_app_id_map = (Object.fromEntries)(this.service_app_id_map);
        }
        if (this.is_set_game_thread != null) {
            data.is_set_game_thread = this.is_set_game_thread;
        }
        if (this.game_thread_index != null) {
            data.game_thread_index = this.game_thread_index;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.packet_id != 0)
            writer.writeUint32(1, this.packet_id);
        if (this.rpc_id != 0)
            writer.writeUint32(2, this.rpc_id);
        if (this.client_sequence_id != 0)
            writer.writeUint32(3, this.client_sequence_id);
        if (this.enet_channel_id != 0)
            writer.writeUint32(4, this.enet_channel_id);
        if (this.enet_is_reliable != 0)
            writer.writeUint32(5, this.enet_is_reliable);
        if (this.sent_ms != 0)
            writer.writeUint64(6, this.sent_ms);
        if (this.user_id != 0)
            writer.writeUint32(11, this.user_id);
        if (this.user_ip != 0)
            writer.writeUint32(12, this.user_ip);
        if (this.user_session_id != 0)
            writer.writeUint32(13, this.user_session_id);
        if (this.recv_time_ms != 0)
            writer.writeUint64(21, this.recv_time_ms);
        if (this.rpc_begin_time_ms != 0)
            writer.writeUint32(22, this.rpc_begin_time_ms);
        for (const [key, value] of this.ext_map) {
            writer.writeMessage(23, this.ext_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.sender_app_id != 0)
            writer.writeUint32(24, this.sender_app_id);
        if (this.source_service != 0)
            writer.writeUint32(31, this.source_service);
        if (this.target_service != 0)
            writer.writeUint32(32, this.target_service);
        for (const [key, value] of this.service_app_id_map) {
            writer.writeMessage(33, this.service_app_id_map, () => {
                writer.writeUint32(1, key);
                writer.writeUint32(2, value);
            });
        }
        if (this.is_set_game_thread != false)
            writer.writeBool(34, this.is_set_game_thread);
        if (this.game_thread_index != 0)
            writer.writeUint32(35, this.game_thread_index);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PacketHead {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PacketHead();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.packet_id = reader.readUint32();
                    break;
                case 2:
                    message.rpc_id = reader.readUint32();
                    break;
                case 3:
                    message.client_sequence_id = reader.readUint32();
                    break;
                case 4:
                    message.enet_channel_id = reader.readUint32();
                    break;
                case 5:
                    message.enet_is_reliable = reader.readUint32();
                    break;
                case 6:
                    message.sent_ms = reader.readUint64();
                    break;
                case 11:
                    message.user_id = reader.readUint32();
                    break;
                case 12:
                    message.user_ip = reader.readUint32();
                    break;
                case 13:
                    message.user_session_id = reader.readUint32();
                    break;
                case 21:
                    message.recv_time_ms = reader.readUint64();
                    break;
                case 22:
                    message.rpc_begin_time_ms = reader.readUint32();
                    break;
                case 23:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.ext_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 24:
                    message.sender_app_id = reader.readUint32();
                    break;
                case 31:
                    message.source_service = reader.readUint32();
                    break;
                case 32:
                    message.target_service = reader.readUint32();
                    break;
                case 33:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.service_app_id_map as any, reader, reader.readUint32, reader.readUint32));
                    break;
                case 34:
                    message.is_set_game_thread = reader.readBool();
                    break;
                case 35:
                    message.game_thread_index = reader.readUint32();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PacketHead {
        return PacketHead.deserialize(bytes);
    }
}
