/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: ParkourLevelInfo.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./Vector";
import * as pb_1 from "google-protobuf";
export class ParkourLevelInfo extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        best_record?: number;
        is_open?: boolean;
        open_time?: number;
        pos?: dependency_1.Vector;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("best_record" in data && data.best_record != undefined) {
                this.best_record = data.best_record;
            }
            if ("is_open" in data && data.is_open != undefined) {
                this.is_open = data.is_open;
            }
            if ("open_time" in data && data.open_time != undefined) {
                this.open_time = data.open_time;
            }
            if ("pos" in data && data.pos != undefined) {
                this.pos = data.pos;
            }
        }
    }
    get best_record() {
        return pb_1.Message.getFieldWithDefault(this, 12, 0) as number;
    }
    set best_record(value: number) {
        pb_1.Message.setField(this, 12, value);
    }
    get is_open() {
        return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
    }
    set is_open(value: boolean) {
        pb_1.Message.setField(this, 9, value);
    }
    get open_time() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set open_time(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get pos() {
        return pb_1.Message.getWrapperField(this, dependency_1.Vector, 2) as dependency_1.Vector;
    }
    set pos(value: dependency_1.Vector) {
        pb_1.Message.setWrapperField(this, 2, value);
    }
    get has_pos() {
        return pb_1.Message.getField(this, 2) != null;
    }
    static fromObject(data: {
        best_record?: number;
        is_open?: boolean;
        open_time?: number;
        pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
    }): ParkourLevelInfo {
        const message = new ParkourLevelInfo({});
        if (data.best_record != null) {
            message.best_record = data.best_record;
        }
        if (data.is_open != null) {
            message.is_open = data.is_open;
        }
        if (data.open_time != null) {
            message.open_time = data.open_time;
        }
        if (data.pos != null) {
            message.pos = dependency_1.Vector.fromObject(data.pos);
        }
        return message;
    }
    toObject() {
        const data: {
            best_record?: number;
            is_open?: boolean;
            open_time?: number;
            pos?: ReturnType<typeof dependency_1.Vector.prototype.toObject>;
        } = {};
        if (this.best_record != null) {
            data.best_record = this.best_record;
        }
        if (this.is_open != null) {
            data.is_open = this.is_open;
        }
        if (this.open_time != null) {
            data.open_time = this.open_time;
        }
        if (this.pos != null) {
            data.pos = this.pos.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.best_record != 0)
            writer.writeUint32(12, this.best_record);
        if (this.is_open != false)
            writer.writeBool(9, this.is_open);
        if (this.open_time != 0)
            writer.writeUint32(7, this.open_time);
        if (this.has_pos)
            writer.writeMessage(2, this.pos, () => this.pos.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ParkourLevelInfo {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ParkourLevelInfo();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 12:
                    message.best_record = reader.readUint32();
                    break;
                case 9:
                    message.is_open = reader.readBool();
                    break;
                case 7:
                    message.open_time = reader.readUint32();
                    break;
                case 2:
                    reader.readMessage(message.pos, () => message.pos = dependency_1.Vector.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): ParkourLevelInfo {
        return ParkourLevelInfo.deserialize(bytes);
    }
}
