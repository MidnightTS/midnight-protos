/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: PlayerDataNotify.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./PropValue";
import * as pb_1 from "google-protobuf";
export class PlayerDataNotify extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        server_time?: number;
        nick_name?: string;
        is_first_login_today?: boolean;
        region_id?: number;
        prop_map?: Map<number, dependency_1.PropValue>;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("server_time" in data && data.server_time != undefined) {
                this.server_time = data.server_time;
            }
            if ("nick_name" in data && data.nick_name != undefined) {
                this.nick_name = data.nick_name;
            }
            if ("is_first_login_today" in data && data.is_first_login_today != undefined) {
                this.is_first_login_today = data.is_first_login_today;
            }
            if ("region_id" in data && data.region_id != undefined) {
                this.region_id = data.region_id;
            }
            if ("prop_map" in data && data.prop_map != undefined) {
                this.prop_map = data.prop_map;
            }
        }
        if (!this.prop_map)
            this.prop_map = new Map();
    }
    get server_time() {
        return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
    }
    set server_time(value: number) {
        pb_1.Message.setField(this, 7, value);
    }
    get nick_name() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set nick_name(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get is_first_login_today() {
        return pb_1.Message.getFieldWithDefault(this, 12, false) as boolean;
    }
    set is_first_login_today(value: boolean) {
        pb_1.Message.setField(this, 12, value);
    }
    get region_id() {
        return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
    }
    set region_id(value: number) {
        pb_1.Message.setField(this, 6, value);
    }
    get prop_map() {
        return pb_1.Message.getField(this, 15) as any as Map<number, dependency_1.PropValue>;
    }
    set prop_map(value: Map<number, dependency_1.PropValue>) {
        pb_1.Message.setField(this, 15, value as any);
    }
    static fromObject(data: {
        server_time?: number;
        nick_name?: string;
        is_first_login_today?: boolean;
        region_id?: number;
        prop_map?: {
            [key: number]: ReturnType<typeof dependency_1.PropValue.prototype.toObject>;
        };
    }): PlayerDataNotify {
        const message = new PlayerDataNotify({});
        if (data.server_time != null) {
            message.server_time = data.server_time;
        }
        if (data.nick_name != null) {
            message.nick_name = data.nick_name;
        }
        if (data.is_first_login_today != null) {
            message.is_first_login_today = data.is_first_login_today;
        }
        if (data.region_id != null) {
            message.region_id = data.region_id;
        }
        if (typeof data.prop_map == "object") {
            message.prop_map = new Map(Object.entries(data.prop_map).map(([key, value]) => [Number(key), dependency_1.PropValue.fromObject(value)]));
        }
        return message;
    }
    toObject() {
        const data: {
            server_time?: number;
            nick_name?: string;
            is_first_login_today?: boolean;
            region_id?: number;
            prop_map?: {
                [key: number]: ReturnType<typeof dependency_1.PropValue.prototype.toObject>;
            };
        } = {};
        if (this.server_time != null) {
            data.server_time = this.server_time;
        }
        if (this.nick_name != null) {
            data.nick_name = this.nick_name;
        }
        if (this.is_first_login_today != null) {
            data.is_first_login_today = this.is_first_login_today;
        }
        if (this.region_id != null) {
            data.region_id = this.region_id;
        }
        if (this.prop_map.size > 0) {
            data.prop_map = (Object.fromEntries)((Array.from)(this.prop_map).map(([key, value]) => [key, value.toObject()]));
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.server_time != 0)
            writer.writeUint64(7, this.server_time);
        if (this.nick_name.length)
            writer.writeString(8, this.nick_name);
        if (this.is_first_login_today != false)
            writer.writeBool(12, this.is_first_login_today);
        if (this.region_id != 0)
            writer.writeUint32(6, this.region_id);
        for (const [key, value] of this.prop_map) {
            writer.writeMessage(15, this.prop_map, () => {
                writer.writeUint32(1, key);
                writer.writeMessage(2, value, () => value.serialize(writer));
            });
        }
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): PlayerDataNotify {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new PlayerDataNotify();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 7:
                    message.server_time = reader.readUint64();
                    break;
                case 8:
                    message.nick_name = reader.readString();
                    break;
                case 12:
                    message.is_first_login_today = reader.readBool();
                    break;
                case 6:
                    message.region_id = reader.readUint32();
                    break;
                case 15:
                    reader.readMessage(message, () => pb_1.Map.deserializeBinary(message.prop_map as any, reader, reader.readUint32, () => {
                        let value;
                        reader.readMessage(message, () => value = dependency_1.PropValue.deserialize(reader));
                        return value;
                    }));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): PlayerDataNotify {
        return PlayerDataNotify.deserialize(bytes);
    }
}
